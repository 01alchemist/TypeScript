var files = [{"name":"lib.d.ts","text":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n/// <reference no-default-lib=\"true\"/>\r\n\r\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare var NaN: number;\r\ndeclare var Infinity: number;\r\n\r\n/**\r\n  * Evaluates JavaScript code and executes it. \r\n  * @param x A String value that contains valid JavaScript code.\r\n  */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n  * Converts A string to an integer.\r\n  * @param s A string to convert into a number.\r\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString. \r\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n  * All other strings are considered decimal.\r\n  */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n  * Converts a string to a floating-point number. \r\n  * @param string A string that contains a floating-point number. \r\n  */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number). \r\n  * @param number A numeric value.\r\n  */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/** \r\n  * Determines whether a supplied number is finite.\r\n  * @param number Any numeric value.\r\n  */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n  * @param encodedURI A value representing an encoded URI.\r\n  */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n  * @param encodedURIComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/** \r\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n  * @param uri A value representing an encoded URI.\r\n  */\r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n  * @param uriComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function encodeURIComponent(uriComponent: string): string;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get? (): any;\r\n    set? (v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function;\r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n      * Determines whether an object has a property with the specified name. \r\n      * @param v A property name.\r\n      */\r\n    hasOwnProperty(v: string): boolean;\r\n\r\n    /**\r\n      * Determines whether an object exists in another object's prototype chain. \r\n      * @param v Another object whose prototype chain is to be checked.\r\n      */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /** \r\n      * Determines whether a specified property is enumerable.\r\n      * @param v A property name.\r\n      */\r\n    propertyIsEnumerable(v: string): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    new (value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    prototype: Object;\r\n\r\n    /** \r\n      * Returns the prototype of an object. \r\n      * @param o The object that references the prototype.\r\n      */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n      * Gets the own property descriptor of the specified object. \r\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype. \r\n      * @param o Object that contains the property.\r\n      * @param p Name of the property.\r\n    */\r\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\r\n\r\n    /** \r\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly \r\n      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\r\n      * @param o Object that contains the own properties.\r\n      */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /** \r\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n      * @param o Object to use as a prototype. May be null\r\n      * @param properties JavaScript object that contains one or more property descriptors. \r\n      */\r\n    create(o: any, properties?: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Adds a property to an object, or modifies attributes of an existing property. \r\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n      * @param p The property name.\r\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n      */\r\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\r\n\r\n    /**\r\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties. \r\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n      */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes. \r\n      */\r\n    seal<T>(o: T): T;\r\n\r\n    /**\r\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    freeze<T>(o: T): T;\r\n\r\n    /**\r\n      * Prevents the addition of new properties to an object.\r\n      * @param o Object to make non-extensible. \r\n      */\r\n    preventExtensions<T>(o: T): T;\r\n\r\n    /**\r\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n      * @param o Object to test. \r\n      */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n      * @param o Object to test.  \r\n      */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n      * Returns a value that indicates whether new properties can be added to an object.\r\n      * @param o Object to test. \r\n      */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n      * Returns the names of the enumerable properties and methods of an object.\r\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n      */\r\n    keys(o: any): string[];\r\n}\r\n\r\n/**\r\n  * Provides functionality common to all JavaScript objects.\r\n  */\r\ndeclare var Object: ObjectConstructor;\r\n\r\n/**\r\n  * Creates a new function.\r\n  */\r\ninterface Function {\r\n    /**\r\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n      * @param thisArg The object to be used as the this object.\r\n      * @param argArray A set of arguments to be passed to the function.\r\n      */\r\n    apply(thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n      * Calls a method of an object, substituting another object for the current object.\r\n      * @param thisArg The object to be used as the current object.\r\n      * @param argArray A list of arguments to be passed to the method.\r\n      */\r\n    call(thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n      * For a given function, creates a bound function that has the same body as the original function. \r\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n      * @param thisArg An object to which the this keyword can refer inside the new function.\r\n      * @param argArray A list of arguments to be passed to the new function.\r\n      */\r\n    bind(thisArg: any, ...argArray: any[]): any;\r\n\r\n    prototype: any;\r\n    length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ninterface FunctionConstructor {\r\n    /**\r\n      * Creates a new function.\r\n      * @param args A list of arguments the function accepts.\r\n      */\r\n    new (...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    prototype: Function;\r\n}\r\n\r\ndeclare var Function: FunctionConstructor;\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n      * Returns the character at the specified index.\r\n      * @param pos The zero-based index of the desired character.\r\n      */\r\n    charAt(pos: number): string;\r\n\r\n    /** \r\n      * Returns the Unicode value of the character at the specified location.\r\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n      */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n      * Returns a string that contains the concatenation of two or more strings.\r\n      * @param strings The strings to append to the end of the string.  \r\n      */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n      * Returns the position of the first occurrence of a substring. \r\n      * @param searchString The substring to search for in the string\r\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n      */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Returns the last occurrence of a substring in the string.\r\n      * @param searchString The substring to search for.\r\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n      */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      */\r\n    localeCompare(that: string): number;\r\n\r\n    /** \r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n      */\r\n    match(regexp: string): RegExpMatchArray;\r\n\r\n    /** \r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags. \r\n      */\r\n    match(regexp: RegExp): RegExpMatchArray;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: string, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags. \r\n      */\r\n    search(regexp: string): number;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags. \r\n      */\r\n    search(regexp: RegExp): number;\r\n\r\n    /**\r\n      * Returns a section of a string.\r\n      * @param start The index to the beginning of the specified portion of stringObj. \r\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. \r\n      * If this value is not specified, the substring continues to the end of stringObj.\r\n      */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: string, limit?: number): string[];\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: RegExp, limit?: number): string[];\r\n\r\n    /**\r\n      * Returns the substring at the specified location within a String object. \r\n      * @param start The zero-based index number indicating the beginning of the substring.\r\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n      * If end is omitted, the characters from start through the end of the original string are returned.\r\n      */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\r\n    toLocaleLowerCase(): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\r\n    toLocaleUpperCase(): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n      * Gets a substring beginning at the specified location and having the specified length.\r\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n      * @param length The number of characters to include in the returned substring.\r\n      */\r\n    substr(from: number, length?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): string;\r\n\r\n    [index: number]: string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    new (value?: any): String;\r\n    (value?: any): string;\r\n    prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\n/** \r\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings. \r\n  */\r\ndeclare var String: StringConstructor;\r\n\r\ninterface Boolean {\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): boolean;\r\n}\r\n\r\ninterface BooleanConstructor {\r\n    new (value?: any): Boolean;\r\n    (value?: any): boolean;\r\n    prototype: Boolean;\r\n}\r\n\r\ndeclare var Boolean: BooleanConstructor;\r\n\r\ninterface Number {\r\n    /**\r\n      * Returns a string representation of an object.\r\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n      */\r\n    toString(radix?: number): string;\r\n\r\n    /** \r\n      * Returns a string representing a number in fixed-point notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented in exponential notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n      */\r\n    toPrecision(precision?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    new (value?: any): Number;\r\n    (value?: any): number;\r\n    prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    MIN_VALUE: number;\r\n\r\n    /** \r\n      * A value that is not a number.\r\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n      */\r\n    NaN: number;\r\n\r\n    /** \r\n      * A value that is less than the largest negative number that can be represented in JavaScript.\r\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity. \r\n      */\r\n    NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n      * A value greater than the largest number that can be represented in JavaScript. \r\n      * JavaScript displays POSITIVE_INFINITY values as infinity. \r\n      */\r\n    POSITIVE_INFINITY: number;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare var Number: NumberConstructor;\r\n\r\ninterface TemplateStringsArray extends Array<string> {\r\n    raw: string[];\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\r\n    E: number;\r\n    /** The natural logarithm of 10. */\r\n    LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    SQRT2: number;\r\n    /**\r\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative). \r\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n      * @param x A numeric expression for which the absolute value is needed.\r\n      */\r\n    abs(x: number): number;\r\n    /**\r\n      * Returns the arc cosine (or inverse cosine) of a number. \r\n      * @param x A numeric expression.\r\n      */\r\n    acos(x: number): number;\r\n    /** \r\n      * Returns the arcsine of a number. \r\n      * @param x A numeric expression.\r\n      */\r\n    asin(x: number): number;\r\n    /**\r\n      * Returns the arctangent of a number. \r\n      * @param x A numeric expression for which the arctangent is needed.\r\n      */\r\n    atan(x: number): number;\r\n    /**\r\n      * Returns the angle (in radians) from the X axis to a point.\r\n      * @param y A numeric expression representing the cartesian y-coordinate.\r\n      * @param x A numeric expression representing the cartesian x-coordinate.\r\n      */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n      * Returns the smallest number greater than or equal to its numeric argument. \r\n      * @param x A numeric expression.\r\n      */\r\n    ceil(x: number): number;\r\n    /**\r\n      * Returns the cosine of a number. \r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    cos(x: number): number;\r\n    /**\r\n      * Returns e (the base of natural logarithms) raised to a power. \r\n      * @param x A numeric expression representing the power of e.\r\n      */\r\n    exp(x: number): number;\r\n    /**\r\n      * Returns the greatest number less than or equal to its numeric argument. \r\n      * @param x A numeric expression.\r\n      */\r\n    floor(x: number): number;\r\n    /**\r\n      * Returns the natural logarithm (base e) of a number. \r\n      * @param x A numeric expression.\r\n      */\r\n    log(x: number): number;\r\n    /**\r\n      * Returns the larger of a set of supplied numeric expressions. \r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    max(...values: number[]): number;\r\n    /**\r\n      * Returns the smaller of a set of supplied numeric expressions. \r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    min(...values: number[]): number;\r\n    /**\r\n      * Returns the value of a base expression taken to a specified power. \r\n      * @param x The base value of the expression.\r\n      * @param y The exponent value of the expression.\r\n      */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */\r\n    random(): number;\r\n    /** \r\n      * Returns a supplied numeric expression rounded to the nearest number.\r\n      * @param x The value to be rounded to the nearest number.\r\n      */\r\n    round(x: number): number;\r\n    /**\r\n      * Returns the sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    sin(x: number): number;\r\n    /**\r\n      * Returns the square root of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    sqrt(x: number): number;\r\n    /**\r\n      * Returns the tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare var Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /** \r\n      * Sets the date and time value in the Date object.\r\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT. \r\n      */\r\n    setTime(time: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using local time. \r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setMilliseconds(ms: number): number;\r\n    /** \r\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param ms A numeric value equal to the millisecond value. \r\n      */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n      * Sets the seconds value in the Date object using local time. \r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using local time. \r\n      * @param min A numeric value equal to the minutes value. \r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param min A numeric value equal to the minutes value. \r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hour value in the Date object using local time.\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the numeric day-of-the-month value of the Date object using local time. \r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setDate(date: number): number;\r\n    /** \r\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n      * @param date A numeric value equal to the day of the month. \r\n      */\r\n    setUTCDate(date: number): number;\r\n    /** \r\n      * Sets the month value in the Date object using local time. \r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. \r\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n      */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n      */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the year of the Date object using local time.\r\n      * @param year A numeric value for the year.\r\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n      * @param date A numeric value equal for the day of the month.\r\n      */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param year A numeric value equal to the year.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ninterface DateConstructor {\r\n    new (): Date;\r\n    new (value: number): Date;\r\n    new (value: string): Date;\r\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    prototype: Date;\r\n    /**\r\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n      * @param s A date string\r\n      */\r\n    parse(s: string): number;\r\n    /**\r\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date. \r\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n      * @param month The month as an number between 0 and 11 (January to December).\r\n      * @param date The date as an number between 1 and 31.\r\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\r\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\r\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\r\n      */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ndeclare var Date: DateConstructor;\r\n\r\ninterface RegExpMatchArray extends Array<string> {\r\n    index?: number;\r\n    input?: string;\r\n}\r\n\r\ninterface RegExpExecArray extends Array<string> {\r\n    index: number;\r\n    input: string;\r\n}\r\n\r\ninterface RegExp {\r\n    /** \r\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n      * @param string The String object or string literal on which to perform the search.\r\n      */\r\n    exec(string: string): RegExpExecArray;\r\n\r\n    /** \r\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n      * @param string String on which to perform the search.\r\n      */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    source: string;\r\n\r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): RegExp;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new (pattern: string, flags?: string): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n    prototype: RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ndeclare var RegExp: RegExpConstructor;\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n}\r\n\r\ninterface ErrorConstructor {\r\n    new (message?: string): Error;\r\n    (message?: string): Error;\r\n    prototype: Error;\r\n}\r\n\r\ndeclare var Error: ErrorConstructor;\r\n\r\ninterface EvalError extends Error {\r\n}\r\n\r\ninterface EvalErrorConstructor {\r\n    new (message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    prototype: EvalError;\r\n}\r\n\r\ndeclare var EvalError: EvalErrorConstructor;\r\n\r\ninterface RangeError extends Error {\r\n}\r\n\r\ninterface RangeErrorConstructor {\r\n    new (message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    prototype: RangeError;\r\n}\r\n\r\ndeclare var RangeError: RangeErrorConstructor;\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\n\r\ninterface ReferenceErrorConstructor {\r\n    new (message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    prototype: ReferenceError;\r\n}\r\n\r\ndeclare var ReferenceError: ReferenceErrorConstructor;\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\n\r\ninterface SyntaxErrorConstructor {\r\n    new (message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    prototype: SyntaxError;\r\n}\r\n\r\ndeclare var SyntaxError: SyntaxErrorConstructor;\r\n\r\ninterface TypeError extends Error {\r\n}\r\n\r\ninterface TypeErrorConstructor {\r\n    new (message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    prototype: TypeError;\r\n}\r\n\r\ndeclare var TypeError: TypeErrorConstructor;\r\n\r\ninterface URIError extends Error {\r\n}\r\n\r\ninterface URIErrorConstructor {\r\n    new (message?: string): URIError;\r\n    (message?: string): URIError;\r\n    prototype: URIError;\r\n}\r\n\r\ndeclare var URIError: URIErrorConstructor;\r\n\r\ninterface JSON {\r\n    /**\r\n      * Converts a JavaScript Object Notation (JSON) string into an object.\r\n      * @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object. \r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is. \r\n      */\r\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      */\r\n    stringify(value: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: any[]): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: any[], space: any): string;\r\n}\r\n/**\r\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n  */\r\ndeclare var JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface Array<T> {\r\n    /**\r\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    /**\r\n      * Appends new elements to an array, and returns the new length of the array.\r\n      * @param items New elements of the Array.\r\n      */\r\n    push(...items: T[]): number;\r\n    /**\r\n      * Removes the last element from an array and returns it.\r\n      */\r\n    pop(): T;\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat<U extends T[]>(...items: U[]): T[];\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat(...items: T[]): T[];\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): T[];\r\n    /**\r\n      * Removes the first element from an array and returns it.\r\n      */\r\n    shift(): T;\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): T[];\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: T, b: T) => number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      */\r\n    splice(start: number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      * @param deleteCount The number of elements to remove.\r\n      * @param items Elements to insert into the array in place of the deleted elements.\r\n      */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n\r\n    /**\r\n      * Inserts new elements at the start of an array.\r\n      * @param items  Elements to insert at the start of the Array.\r\n      */\r\n    unshift(...items: T[]): number;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n      */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a specified value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n      */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    [n: number]: T;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    new (arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): boolean;\r\n    prototype: Array<any>;\r\n}\r\n\r\ndeclare var Array: ArrayConstructor;\r\n\r\ninterface TypedPropertyDescriptor<T> {\r\n    enumerable?: boolean;\r\n    configurable?: boolean;\r\n    writable?: boolean;\r\n    value?: T;\r\n    get?: () => T;\r\n    set?: (value: T) => void;\r\n}\r\n\r\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\r\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\r\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\r\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\r\n\r\n/////////////////////////////\r\n/// IE10 ECMAScript Extensions\r\n/////////////////////////////\r\n\r\n/**\r\n  * Represents a raw buffer of binary data, which is used to store data for the \r\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly, \r\n  * but can be passed to a typed array or DataView Object to interpret the raw \r\n  * buffer as needed. \r\n  */\r\ninterface ArrayBuffer {\r\n    /**\r\n      * Read-only. The length of the ArrayBuffer (in bytes).\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * Returns a section of an ArrayBuffer.\r\n      */\r\n    slice(begin:number, end?:number): ArrayBuffer;\r\n}\r\n\r\ninterface ArrayBufferConstructor {\r\n    prototype: ArrayBuffer;\r\n    new (byteLength: number): ArrayBuffer;\r\n    isView(arg: any): boolean;\r\n}\r\ndeclare var ArrayBuffer: ArrayBufferConstructor;\r\n\r\ninterface ArrayBufferView {\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n}\r\n\r\ninterface DataView {\r\n    buffer: ArrayBuffer;\r\n    byteLength: number;\r\n    byteOffset: number;\r\n    /**\r\n      * Gets the Float32 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat32(byteOffset: number, littleEndian: boolean): number;\r\n\r\n    /**\r\n      * Gets the Float64 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat64(byteOffset: number, littleEndian: boolean): number;\r\n\r\n    /**\r\n      * Gets the Int8 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Int16 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt16(byteOffset: number, littleEndian: boolean): number;\r\n    /**\r\n      * Gets the Int32 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt32(byteOffset: number, littleEndian: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint16(byteOffset: number, littleEndian: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is \r\n      * no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint32(byteOffset: number, littleEndian: boolean): number;\r\n\r\n    /**\r\n      * Stores an Float32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setFloat32(byteOffset: number, value: number, littleEndian: boolean): void;\r\n\r\n    /**\r\n      * Stores an Float64 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setFloat64(byteOffset: number, value: number, littleEndian: boolean): void;\r\n\r\n    /**\r\n      * Stores an Int8 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setInt8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Int16 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setInt16(byteOffset: number, value: number, littleEndian: boolean): void;\r\n\r\n    /**\r\n      * Stores an Int32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setInt32(byteOffset: number, value: number, littleEndian: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint8 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setUint8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Uint16 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setUint16(byteOffset: number, value: number, littleEndian: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, \r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setUint32(byteOffset: number, value: number, littleEndian: boolean): void;\r\n}\r\n\r\ninterface DataViewConstructor {\r\n    new (buffer: ArrayBuffer, byteOffset?: number, byteLength?: number): DataView;\r\n}\r\ndeclare var DataView: DataViewConstructor;\r\n\r\n/**\r\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int8Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): Int8Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Int8Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int8Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Int8Array;\r\n\r\n    /**\r\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\ninterface Int8ArrayConstructor {\r\n    prototype: Int8Array;\r\n    new (length: number): Int8Array;\r\n    new (array: Int8Array): Int8Array;\r\n    new (array: number[]): Int8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int8Array;\r\n}\r\ndeclare var Int8Array: Int8ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): Uint8Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Uint8Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint8Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Uint8Array;\r\n\r\n    /**\r\n      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    prototype: Uint8Array;\r\n    new (length: number): Uint8Array;\r\n    new (array: Uint8Array): Uint8Array;\r\n    new (array: number[]): Uint8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint8Array;\r\n}\r\ndeclare var Uint8Array: Uint8ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int16Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): Int16Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Int16Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int16Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Int16Array;\r\n\r\n    /**\r\n      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    prototype: Int16Array;\r\n    new (length: number): Int16Array;\r\n    new (array: Int16Array): Int16Array;\r\n    new (array: number[]): Int16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int16Array;\r\n}\r\ndeclare var Int16Array: Int16ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint16Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): Uint16Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Uint16Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint16Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Uint16Array;\r\n\r\n    /**\r\n      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    prototype: Uint16Array;\r\n    new (length: number): Uint16Array;\r\n    new (array: Uint16Array): Uint16Array;\r\n    new (array: number[]): Uint16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint16Array;\r\n}\r\ndeclare var Uint16Array: Uint16ArrayConstructor;\r\n/**\r\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int32Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): Int32Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Int32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int32Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Int32Array;\r\n\r\n    /**\r\n      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    prototype: Int32Array;\r\n    new (length: number): Int32Array;\r\n    new (array: Int32Array): Int32Array;\r\n    new (array: number[]): Int32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int32Array;\r\n}\r\ndeclare var Int32Array: Int32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint32Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): Uint32Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Uint32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint32Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Uint32Array;\r\n\r\n    /**\r\n      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    prototype: Uint32Array;\r\n    new (length: number): Uint32Array;\r\n    new (array: Uint32Array): Uint32Array;\r\n    new (array: number[]): Uint32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint32Array;\r\n}\r\ndeclare var Uint32Array: Uint32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n  * of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float32Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): Float32Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Float32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Float32Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Float32Array;\r\n\r\n    /**\r\n      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    prototype: Float32Array;\r\n    new (length: number): Float32Array;\r\n    new (array: Float32Array): Float32Array;\r\n    new (array: number[]): Float32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Float32Array;\r\n}\r\ndeclare var Float32Array: Float32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float64Array {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array. \r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n\r\n    /** \r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the \r\n      * length of the array. \r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it \r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value. \r\n      */\r\n    copyWithin(target: number, start: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \r\n      * the callbackfn function for each element in array1 until the callbackfn returns false, \r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as \r\n        * length+start where length is the length of the array. \r\n        * @param end index to stop filling the array at. If end is negative, it is treated as \r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): Float64Array;\r\n\r\n    /** \r\n      * Returns the value of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\r\n\r\n    /** \r\n      * Returns the index of the first element in the array where predicate is true, and undefined \r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending \r\n      * order, until it finds one where predicate returns true. If such an element is found, find \r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of \r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the \r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that \r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \r\n      * callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of \r\n      * the callback function is the accumulated result, and is provided as an argument in the next \r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument \r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an \r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. \r\n      * The return value of the callback function is the accumulated result, and is provided as an \r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): Float64Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Float64Array, offset?: number): void;\r\n\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If \r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): Float64Array;\r\n\r\n    /**\r\n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale. \r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    prototype: Float64Array;\r\n    new (length: number): Float64Array;\r\n    new (array: Float64Array): Float64Array;\r\n    new (array: number[]): Float64Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Float64Array;\r\n}\r\ndeclare var Float64Array: Float64ArrayConstructor;/////////////////////////////\r\n/// ECMAScript Internationalization API \r\n/////////////////////////////\r\n\r\ndeclare module Intl {\r\n    interface CollatorOptions {\r\n        usage?: string;\r\n        localeMatcher?: string;\r\n        numeric?: boolean;\r\n        caseFirst?: string;\r\n        sensitivity?: string;\r\n        ignorePunctuation?: boolean;\r\n    }\r\n\r\n    interface ResolvedCollatorOptions {\r\n        locale: string;\r\n        usage: string;\r\n        sensitivity: string;\r\n        ignorePunctuation: boolean;\r\n        collation: string;\r\n        caseFirst: string;\r\n        numeric: boolean;\r\n    }\r\n\r\n    interface Collator {\r\n        compare(x: string, y: string): number;\r\n        resolvedOptions(): ResolvedCollatorOptions;\r\n    }\r\n    var Collator: {\r\n        new (locales?: string[], options?: CollatorOptions): Collator;\r\n        new (locale?: string, options?: CollatorOptions): Collator;\r\n        (locales?: string[], options?: CollatorOptions): Collator;\r\n        (locale?: string, options?: CollatorOptions): Collator;\r\n        supportedLocalesOf(locales: string[], options?: CollatorOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: CollatorOptions): string[];\r\n    }\r\n\r\n    interface NumberFormatOptions {\r\n        localeMatcher?: string;\r\n        style?: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        useGrouping?: boolean;\r\n    }\r\n\r\n    interface ResolvedNumberFormatOptions {\r\n        locale: string;\r\n        numberingSystem: string;\r\n        style: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        minimumintegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n        useGrouping: boolean;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        format(value: number): string;\r\n        resolvedOptions(): ResolvedNumberFormatOptions;\r\n    }\r\n    var NumberFormat: {\r\n        new (locales?: string[], options?: NumberFormatOptions): NumberFormat;\r\n        new (locale?: string, options?: NumberFormatOptions): NumberFormat;\r\n        (locales?: string[], options?: NumberFormatOptions): NumberFormat;\r\n        (locale?: string, options?: NumberFormatOptions): NumberFormat;\r\n        supportedLocalesOf(locales: string[], options?: NumberFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: NumberFormatOptions): string[];\r\n    }\r\n\r\n    interface DateTimeFormatOptions {\r\n        localeMatcher?: string;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n        formatMatcher?: string;\r\n        hour12?: boolean;\r\n    }\r\n\r\n    interface ResolvedDateTimeFormatOptions {\r\n        locale: string;\r\n        calendar: string;\r\n        numberingSystem: string;\r\n        timeZone: string;\r\n        hour12?: boolean;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n    }\r\n\r\n    interface DateTimeFormat {\r\n        format(date: number): string;\r\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\r\n    }\r\n    var DateTimeFormat: {\r\n        new (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        new (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\r\n        supportedLocalesOf(locales: string[], options?: DateTimeFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: DateTimeFormatOptions): string[];\r\n    }\r\n}\r\n\r\ninterface String {\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n      */\r\n    localeCompare(that: string, locales: string[], options?: Intl.CollatorOptions): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n      */\r\n    localeCompare(that: string, locale: string, options?: Intl.CollatorOptions): number;\r\n}\r\n\r\ninterface Number {\r\n    /**\r\n      * Converts a number to a string by using the current or specified locale. \r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locales?: string[], options?: Intl.NumberFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current or specified locale. \r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locale?: string, options?: Intl.NumberFormatOptions): string;\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n      * Converts a date to a string by using the current or specified locale.  \r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a date to a string by using the current or specified locale.  \r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\r\n}\r\n\r\n\r\n/////////////////////////////\r\n/// IE DOM APIs\r\n/////////////////////////////\r\n\r\ninterface Algorithm {\r\n    name?: string;\r\n}\r\n\r\ninterface AriaRequestEventInit extends EventInit {\r\n    attributeName?: string;\r\n    attributeValue?: string;\r\n}\r\n\r\ninterface ClipboardEventInit extends EventInit {\r\n    data?: string;\r\n    dataType?: string;\r\n}\r\n\r\ninterface CommandEventInit extends EventInit {\r\n    commandName?: string;\r\n    detail?: string;\r\n}\r\n\r\ninterface CompositionEventInit extends UIEventInit {\r\n    data?: string;\r\n}\r\n\r\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface CustomEventInit extends EventInit {\r\n    detail?: any;\r\n}\r\n\r\ninterface DeviceAccelerationDict {\r\n    x?: number;\r\n    y?: number;\r\n    z?: number;\r\n}\r\n\r\ninterface DeviceRotationRateDict {\r\n    alpha?: number;\r\n    beta?: number;\r\n    gamma?: number;\r\n}\r\n\r\ninterface EventInit {\r\n    bubbles?: boolean;\r\n    cancelable?: boolean;\r\n}\r\n\r\ninterface ExceptionInformation {\r\n    domain?: string;\r\n}\r\n\r\ninterface FocusEventInit extends UIEventInit {\r\n    relatedTarget?: EventTarget;\r\n}\r\n\r\ninterface HashChangeEventInit extends EventInit {\r\n    newURL?: string;\r\n    oldURL?: string;\r\n}\r\n\r\ninterface KeyAlgorithm {\r\n    name?: string;\r\n}\r\n\r\ninterface KeyboardEventInit extends SharedKeyboardAndMouseEventInit {\r\n    key?: string;\r\n    location?: number;\r\n    repeat?: boolean;\r\n}\r\n\r\ninterface MouseEventInit extends SharedKeyboardAndMouseEventInit {\r\n    screenX?: number;\r\n    screenY?: number;\r\n    clientX?: number;\r\n    clientY?: number;\r\n    button?: number;\r\n    buttons?: number;\r\n    relatedTarget?: EventTarget;\r\n}\r\n\r\ninterface MsZoomToOptions {\r\n    contentX?: number;\r\n    contentY?: number;\r\n    viewportX?: string;\r\n    viewportY?: string;\r\n    scaleFactor?: number;\r\n    animate?: string;\r\n}\r\n\r\ninterface MutationObserverInit {\r\n    childList?: boolean;\r\n    attributes?: boolean;\r\n    characterData?: boolean;\r\n    subtree?: boolean;\r\n    attributeOldValue?: boolean;\r\n    characterDataOldValue?: boolean;\r\n    attributeFilter?: string[];\r\n}\r\n\r\ninterface ObjectURLOptions {\r\n    oneTimeOnly?: boolean;\r\n}\r\n\r\ninterface PointerEventInit extends MouseEventInit {\r\n    pointerId?: number;\r\n    width?: number;\r\n    height?: number;\r\n    pressure?: number;\r\n    tiltX?: number;\r\n    tiltY?: number;\r\n    pointerType?: string;\r\n    isPrimary?: boolean;\r\n}\r\n\r\ninterface PositionOptions {\r\n    enableHighAccuracy?: boolean;\r\n    timeout?: number;\r\n    maximumAge?: number;\r\n}\r\n\r\ninterface SharedKeyboardAndMouseEventInit extends UIEventInit {\r\n    ctrlKey?: boolean;\r\n    shiftKey?: boolean;\r\n    altKey?: boolean;\r\n    metaKey?: boolean;\r\n    keyModifierStateAltGraph?: boolean;\r\n    keyModifierStateCapsLock?: boolean;\r\n    keyModifierStateFn?: boolean;\r\n    keyModifierStateFnLock?: boolean;\r\n    keyModifierStateHyper?: boolean;\r\n    keyModifierStateNumLock?: boolean;\r\n    keyModifierStateOS?: boolean;\r\n    keyModifierStateScrollLock?: boolean;\r\n    keyModifierStateSuper?: boolean;\r\n    keyModifierStateSymbol?: boolean;\r\n    keyModifierStateSymbolLock?: boolean;\r\n}\r\n\r\ninterface StoreExceptionsInformation extends ExceptionInformation {\r\n    siteName?: string;\r\n    explanationString?: string;\r\n    detailURI?: string;\r\n}\r\n\r\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface UIEventInit extends EventInit {\r\n    view?: Window;\r\n    detail?: number;\r\n}\r\n\r\ninterface WebGLContextAttributes {\r\n    alpha?: boolean;\r\n    depth?: boolean;\r\n    stencil?: boolean;\r\n    antialias?: boolean;\r\n    premultipliedAlpha?: boolean;\r\n    preserveDrawingBuffer?: boolean;\r\n}\r\n\r\ninterface WebGLContextEventInit extends EventInit {\r\n    statusMessage?: string;\r\n}\r\n\r\ninterface WheelEventInit extends MouseEventInit {\r\n    deltaX?: number;\r\n    deltaY?: number;\r\n    deltaZ?: number;\r\n    deltaMode?: number;\r\n}\r\n\r\ninterface EventListener {\r\n    (evt: Event): void;\r\n}\r\n\r\ninterface ANGLE_instanced_arrays {\r\n    drawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void;\r\n    drawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void;\r\n    vertexAttribDivisorANGLE(index: number, divisor: number): void;\r\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\r\n}\r\n\r\ndeclare var ANGLE_instanced_arrays: {\r\n    prototype: ANGLE_instanced_arrays;\r\n    new(): ANGLE_instanced_arrays;\r\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\r\n}\r\n\r\ninterface AnalyserNode extends AudioNode {\r\n    fftSize: number;\r\n    frequencyBinCount: number;\r\n    maxDecibels: number;\r\n    minDecibels: number;\r\n    smoothingTimeConstant: number;\r\n    getByteFrequencyData(array: Uint8Array): void;\r\n    getByteTimeDomainData(array: Uint8Array): void;\r\n    getFloatFrequencyData(array: any): void;\r\n    getFloatTimeDomainData(array: any): void;\r\n}\r\n\r\ndeclare var AnalyserNode: {\r\n    prototype: AnalyserNode;\r\n    new(): AnalyserNode;\r\n}\r\n\r\ninterface AnimationEvent extends Event {\r\n    animationName: string;\r\n    elapsedTime: number;\r\n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\r\n}\r\n\r\ndeclare var AnimationEvent: {\r\n    prototype: AnimationEvent;\r\n    new(): AnimationEvent;\r\n}\r\n\r\ninterface ApplicationCache extends EventTarget {\r\n    oncached: (ev: Event) => any;\r\n    onchecking: (ev: Event) => any;\r\n    ondownloading: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onnoupdate: (ev: Event) => any;\r\n    onobsolete: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onupdateready: (ev: Event) => any;\r\n    status: number;\r\n    abort(): void;\r\n    swapCache(): void;\r\n    update(): void;\r\n    CHECKING: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n    addEventListener(type: \"cached\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"checking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"downloading\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"noupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"obsolete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"updateready\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var ApplicationCache: {\r\n    prototype: ApplicationCache;\r\n    new(): ApplicationCache;\r\n    CHECKING: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n}\r\n\r\ninterface AriaRequestEvent extends Event {\r\n    attributeName: string;\r\n    attributeValue: string;\r\n}\r\n\r\ndeclare var AriaRequestEvent: {\r\n    prototype: AriaRequestEvent;\r\n    new(type: string, eventInitDict?: AriaRequestEventInit): AriaRequestEvent;\r\n}\r\n\r\ninterface Attr extends Node {\r\n    name: string;\r\n    ownerElement: Element;\r\n    specified: boolean;\r\n    value: string;\r\n}\r\n\r\ndeclare var Attr: {\r\n    prototype: Attr;\r\n    new(): Attr;\r\n}\r\n\r\ninterface AudioBuffer {\r\n    duration: number;\r\n    length: number;\r\n    numberOfChannels: number;\r\n    sampleRate: number;\r\n    getChannelData(channel: number): any;\r\n}\r\n\r\ndeclare var AudioBuffer: {\r\n    prototype: AudioBuffer;\r\n    new(): AudioBuffer;\r\n}\r\n\r\ninterface AudioBufferSourceNode extends AudioNode {\r\n    buffer: AudioBuffer;\r\n    loop: boolean;\r\n    loopEnd: number;\r\n    loopStart: number;\r\n    onended: (ev: Event) => any;\r\n    playbackRate: AudioParam;\r\n    start(when?: number, offset?: number, duration?: number): void;\r\n    stop(when?: number): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var AudioBufferSourceNode: {\r\n    prototype: AudioBufferSourceNode;\r\n    new(): AudioBufferSourceNode;\r\n}\r\n\r\ninterface AudioContext extends EventTarget {\r\n    currentTime: number;\r\n    destination: AudioDestinationNode;\r\n    listener: AudioListener;\r\n    sampleRate: number;\r\n    createAnalyser(): AnalyserNode;\r\n    createBiquadFilter(): BiquadFilterNode;\r\n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;\r\n    createBufferSource(): AudioBufferSourceNode;\r\n    createChannelMerger(numberOfInputs?: number): ChannelMergerNode;\r\n    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;\r\n    createConvolver(): ConvolverNode;\r\n    createDelay(maxDelayTime?: number): DelayNode;\r\n    createDynamicsCompressor(): DynamicsCompressorNode;\r\n    createGain(): GainNode;\r\n    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;\r\n    createOscillator(): OscillatorNode;\r\n    createPanner(): PannerNode;\r\n    createPeriodicWave(real: any, imag: any): PeriodicWave;\r\n    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;\r\n    createStereoPanner(): StereoPannerNode;\r\n    createWaveShaper(): WaveShaperNode;\r\n    decodeAudioData(audioData: ArrayBuffer, successCallback: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback): void;\r\n}\r\n\r\ndeclare var AudioContext: {\r\n    prototype: AudioContext;\r\n    new(): AudioContext;\r\n}\r\n\r\ninterface AudioDestinationNode extends AudioNode {\r\n    maxChannelCount: number;\r\n}\r\n\r\ndeclare var AudioDestinationNode: {\r\n    prototype: AudioDestinationNode;\r\n    new(): AudioDestinationNode;\r\n}\r\n\r\ninterface AudioListener {\r\n    dopplerFactor: number;\r\n    speedOfSound: number;\r\n    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;\r\n    setPosition(x: number, y: number, z: number): void;\r\n    setVelocity(x: number, y: number, z: number): void;\r\n}\r\n\r\ndeclare var AudioListener: {\r\n    prototype: AudioListener;\r\n    new(): AudioListener;\r\n}\r\n\r\ninterface AudioNode extends EventTarget {\r\n    channelCount: number;\r\n    channelCountMode: string;\r\n    channelInterpretation: string;\r\n    context: AudioContext;\r\n    numberOfInputs: number;\r\n    numberOfOutputs: number;\r\n    connect(destination: AudioNode, output?: number, input?: number): void;\r\n    disconnect(output?: number): void;\r\n}\r\n\r\ndeclare var AudioNode: {\r\n    prototype: AudioNode;\r\n    new(): AudioNode;\r\n}\r\n\r\ninterface AudioParam {\r\n    defaultValue: number;\r\n    value: number;\r\n    cancelScheduledValues(startTime: number): void;\r\n    exponentialRampToValueAtTime(value: number, endTime: number): void;\r\n    linearRampToValueAtTime(value: number, endTime: number): void;\r\n    setTargetAtTime(target: number, startTime: number, timeConstant: number): void;\r\n    setValueAtTime(value: number, startTime: number): void;\r\n    setValueCurveAtTime(values: any, startTime: number, duration: number): void;\r\n}\r\n\r\ndeclare var AudioParam: {\r\n    prototype: AudioParam;\r\n    new(): AudioParam;\r\n}\r\n\r\ninterface AudioProcessingEvent extends Event {\r\n    inputBuffer: AudioBuffer;\r\n    outputBuffer: AudioBuffer;\r\n    playbackTime: number;\r\n}\r\n\r\ndeclare var AudioProcessingEvent: {\r\n    prototype: AudioProcessingEvent;\r\n    new(): AudioProcessingEvent;\r\n}\r\n\r\ninterface AudioTrack {\r\n    enabled: boolean;\r\n    id: string;\r\n    kind: string;\r\n    label: string;\r\n    language: string;\r\n    sourceBuffer: SourceBuffer;\r\n}\r\n\r\ndeclare var AudioTrack: {\r\n    prototype: AudioTrack;\r\n    new(): AudioTrack;\r\n}\r\n\r\ninterface AudioTrackList extends EventTarget {\r\n    length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    onchange: (ev: Event) => any;\r\n    onremovetrack: (ev: TrackEvent) => any;\r\n    getTrackById(id: string): AudioTrack;\r\n    item(index: number): AudioTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: AudioTrack;\r\n}\r\n\r\ndeclare var AudioTrackList: {\r\n    prototype: AudioTrackList;\r\n    new(): AudioTrackList;\r\n}\r\n\r\ninterface BarProp {\r\n    visible: boolean;\r\n}\r\n\r\ndeclare var BarProp: {\r\n    prototype: BarProp;\r\n    new(): BarProp;\r\n}\r\n\r\ninterface BeforeUnloadEvent extends Event {\r\n    returnValue: any;\r\n}\r\n\r\ndeclare var BeforeUnloadEvent: {\r\n    prototype: BeforeUnloadEvent;\r\n    new(): BeforeUnloadEvent;\r\n}\r\n\r\ninterface BiquadFilterNode extends AudioNode {\r\n    Q: AudioParam;\r\n    detune: AudioParam;\r\n    frequency: AudioParam;\r\n    gain: AudioParam;\r\n    type: string;\r\n    getFrequencyResponse(frequencyHz: any, magResponse: any, phaseResponse: any): void;\r\n}\r\n\r\ndeclare var BiquadFilterNode: {\r\n    prototype: BiquadFilterNode;\r\n    new(): BiquadFilterNode;\r\n}\r\n\r\ninterface Blob {\r\n    size: number;\r\n    type: string;\r\n    msClose(): void;\r\n    msDetachStream(): any;\r\n    slice(start?: number, end?: number, contentType?: string): Blob;\r\n}\r\n\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\r\n}\r\n\r\ninterface CDATASection extends Text {\r\n}\r\n\r\ndeclare var CDATASection: {\r\n    prototype: CDATASection;\r\n    new(): CDATASection;\r\n}\r\n\r\ninterface CSS {\r\n    supports(property: string, value?: string): boolean;\r\n}\r\ndeclare var CSS: CSS;\r\n\r\ninterface CSSConditionRule extends CSSGroupingRule {\r\n    conditionText: string;\r\n}\r\n\r\ndeclare var CSSConditionRule: {\r\n    prototype: CSSConditionRule;\r\n    new(): CSSConditionRule;\r\n}\r\n\r\ninterface CSSFontFaceRule extends CSSRule {\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSFontFaceRule: {\r\n    prototype: CSSFontFaceRule;\r\n    new(): CSSFontFaceRule;\r\n}\r\n\r\ninterface CSSGroupingRule extends CSSRule {\r\n    cssRules: CSSRuleList;\r\n    deleteRule(index?: number): void;\r\n    insertRule(rule: string, index?: number): number;\r\n}\r\n\r\ndeclare var CSSGroupingRule: {\r\n    prototype: CSSGroupingRule;\r\n    new(): CSSGroupingRule;\r\n}\r\n\r\ninterface CSSImportRule extends CSSRule {\r\n    href: string;\r\n    media: MediaList;\r\n    styleSheet: CSSStyleSheet;\r\n}\r\n\r\ndeclare var CSSImportRule: {\r\n    prototype: CSSImportRule;\r\n    new(): CSSImportRule;\r\n}\r\n\r\ninterface CSSKeyframeRule extends CSSRule {\r\n    keyText: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSKeyframeRule: {\r\n    prototype: CSSKeyframeRule;\r\n    new(): CSSKeyframeRule;\r\n}\r\n\r\ninterface CSSKeyframesRule extends CSSRule {\r\n    cssRules: CSSRuleList;\r\n    name: string;\r\n    appendRule(rule: string): void;\r\n    deleteRule(rule: string): void;\r\n    findRule(rule: string): CSSKeyframeRule;\r\n}\r\n\r\ndeclare var CSSKeyframesRule: {\r\n    prototype: CSSKeyframesRule;\r\n    new(): CSSKeyframesRule;\r\n}\r\n\r\ninterface CSSMediaRule extends CSSConditionRule {\r\n    media: MediaList;\r\n}\r\n\r\ndeclare var CSSMediaRule: {\r\n    prototype: CSSMediaRule;\r\n    new(): CSSMediaRule;\r\n}\r\n\r\ninterface CSSNamespaceRule extends CSSRule {\r\n    namespaceURI: string;\r\n    prefix: string;\r\n}\r\n\r\ndeclare var CSSNamespaceRule: {\r\n    prototype: CSSNamespaceRule;\r\n    new(): CSSNamespaceRule;\r\n}\r\n\r\ninterface CSSPageRule extends CSSRule {\r\n    pseudoClass: string;\r\n    selector: string;\r\n    selectorText: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSPageRule: {\r\n    prototype: CSSPageRule;\r\n    new(): CSSPageRule;\r\n}\r\n\r\ninterface CSSRule {\r\n    cssText: string;\r\n    parentRule: CSSRule;\r\n    parentStyleSheet: CSSStyleSheet;\r\n    type: number;\r\n    CHARSET_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    IMPORT_RULE: number;\r\n    KEYFRAMES_RULE: number;\r\n    KEYFRAME_RULE: number;\r\n    MEDIA_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    STYLE_RULE: number;\r\n    SUPPORTS_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    VIEWPORT_RULE: number;\r\n}\r\n\r\ndeclare var CSSRule: {\r\n    prototype: CSSRule;\r\n    new(): CSSRule;\r\n    CHARSET_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    IMPORT_RULE: number;\r\n    KEYFRAMES_RULE: number;\r\n    KEYFRAME_RULE: number;\r\n    MEDIA_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    STYLE_RULE: number;\r\n    SUPPORTS_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    VIEWPORT_RULE: number;\r\n}\r\n\r\ninterface CSSRuleList {\r\n    length: number;\r\n    item(index: number): CSSRule;\r\n    [index: number]: CSSRule;\r\n}\r\n\r\ndeclare var CSSRuleList: {\r\n    prototype: CSSRuleList;\r\n    new(): CSSRuleList;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    alignContent: string;\r\n    alignItems: string;\r\n    alignSelf: string;\r\n    alignmentBaseline: string;\r\n    animation: string;\r\n    animationDelay: string;\r\n    animationDirection: string;\r\n    animationDuration: string;\r\n    animationFillMode: string;\r\n    animationIterationCount: string;\r\n    animationName: string;\r\n    animationPlayState: string;\r\n    animationTimingFunction: string;\r\n    backfaceVisibility: string;\r\n    background: string;\r\n    backgroundAttachment: string;\r\n    backgroundClip: string;\r\n    backgroundColor: string;\r\n    backgroundImage: string;\r\n    backgroundOrigin: string;\r\n    backgroundPosition: string;\r\n    backgroundPositionX: string;\r\n    backgroundPositionY: string;\r\n    backgroundRepeat: string;\r\n    backgroundSize: string;\r\n    baselineShift: string;\r\n    border: string;\r\n    borderBottom: string;\r\n    borderBottomColor: string;\r\n    borderBottomLeftRadius: string;\r\n    borderBottomRightRadius: string;\r\n    borderBottomStyle: string;\r\n    borderBottomWidth: string;\r\n    borderCollapse: string;\r\n    borderColor: string;\r\n    borderImage: string;\r\n    borderImageOutset: string;\r\n    borderImageRepeat: string;\r\n    borderImageSlice: string;\r\n    borderImageSource: string;\r\n    borderImageWidth: string;\r\n    borderLeft: string;\r\n    borderLeftColor: string;\r\n    borderLeftStyle: string;\r\n    borderLeftWidth: string;\r\n    borderRadius: string;\r\n    borderRight: string;\r\n    borderRightColor: string;\r\n    borderRightStyle: string;\r\n    borderRightWidth: string;\r\n    borderSpacing: string;\r\n    borderStyle: string;\r\n    borderTop: string;\r\n    borderTopColor: string;\r\n    borderTopLeftRadius: string;\r\n    borderTopRightRadius: string;\r\n    borderTopStyle: string;\r\n    borderTopWidth: string;\r\n    borderWidth: string;\r\n    bottom: string;\r\n    boxShadow: string;\r\n    boxSizing: string;\r\n    breakAfter: string;\r\n    breakBefore: string;\r\n    breakInside: string;\r\n    captionSide: string;\r\n    clear: string;\r\n    clip: string;\r\n    clipPath: string;\r\n    clipRule: string;\r\n    color: string;\r\n    colorInterpolationFilters: string;\r\n    columnCount: any;\r\n    columnFill: string;\r\n    columnGap: any;\r\n    columnRule: string;\r\n    columnRuleColor: any;\r\n    columnRuleStyle: string;\r\n    columnRuleWidth: any;\r\n    columnSpan: string;\r\n    columnWidth: any;\r\n    columns: string;\r\n    content: string;\r\n    counterIncrement: string;\r\n    counterReset: string;\r\n    cssFloat: string;\r\n    cssText: string;\r\n    cursor: string;\r\n    direction: string;\r\n    display: string;\r\n    dominantBaseline: string;\r\n    emptyCells: string;\r\n    enableBackground: string;\r\n    fill: string;\r\n    fillOpacity: string;\r\n    fillRule: string;\r\n    filter: string;\r\n    flex: string;\r\n    flexBasis: string;\r\n    flexDirection: string;\r\n    flexFlow: string;\r\n    flexGrow: string;\r\n    flexShrink: string;\r\n    flexWrap: string;\r\n    floodColor: string;\r\n    floodOpacity: string;\r\n    font: string;\r\n    fontFamily: string;\r\n    fontFeatureSettings: string;\r\n    fontSize: string;\r\n    fontSizeAdjust: string;\r\n    fontStretch: string;\r\n    fontStyle: string;\r\n    fontVariant: string;\r\n    fontWeight: string;\r\n    glyphOrientationHorizontal: string;\r\n    glyphOrientationVertical: string;\r\n    height: string;\r\n    imeMode: string;\r\n    justifyContent: string;\r\n    kerning: string;\r\n    left: string;\r\n    length: number;\r\n    letterSpacing: string;\r\n    lightingColor: string;\r\n    lineHeight: string;\r\n    listStyle: string;\r\n    listStyleImage: string;\r\n    listStylePosition: string;\r\n    listStyleType: string;\r\n    margin: string;\r\n    marginBottom: string;\r\n    marginLeft: string;\r\n    marginRight: string;\r\n    marginTop: string;\r\n    marker: string;\r\n    markerEnd: string;\r\n    markerMid: string;\r\n    markerStart: string;\r\n    mask: string;\r\n    maxHeight: string;\r\n    maxWidth: string;\r\n    minHeight: string;\r\n    minWidth: string;\r\n    msContentZoomChaining: string;\r\n    msContentZoomLimit: string;\r\n    msContentZoomLimitMax: any;\r\n    msContentZoomLimitMin: any;\r\n    msContentZoomSnap: string;\r\n    msContentZoomSnapPoints: string;\r\n    msContentZoomSnapType: string;\r\n    msContentZooming: string;\r\n    msFlowFrom: string;\r\n    msFlowInto: string;\r\n    msFontFeatureSettings: string;\r\n    msGridColumn: any;\r\n    msGridColumnAlign: string;\r\n    msGridColumnSpan: any;\r\n    msGridColumns: string;\r\n    msGridRow: any;\r\n    msGridRowAlign: string;\r\n    msGridRowSpan: any;\r\n    msGridRows: string;\r\n    msHighContrastAdjust: string;\r\n    msHyphenateLimitChars: string;\r\n    msHyphenateLimitLines: any;\r\n    msHyphenateLimitZone: any;\r\n    msHyphens: string;\r\n    msImeAlign: string;\r\n    msOverflowStyle: string;\r\n    msScrollChaining: string;\r\n    msScrollLimit: string;\r\n    msScrollLimitXMax: any;\r\n    msScrollLimitXMin: any;\r\n    msScrollLimitYMax: any;\r\n    msScrollLimitYMin: any;\r\n    msScrollRails: string;\r\n    msScrollSnapPointsX: string;\r\n    msScrollSnapPointsY: string;\r\n    msScrollSnapType: string;\r\n    msScrollSnapX: string;\r\n    msScrollSnapY: string;\r\n    msScrollTranslation: string;\r\n    msTextCombineHorizontal: string;\r\n    msTextSizeAdjust: any;\r\n    msTouchAction: string;\r\n    msTouchSelect: string;\r\n    msUserSelect: string;\r\n    msWrapFlow: string;\r\n    msWrapMargin: any;\r\n    msWrapThrough: string;\r\n    opacity: string;\r\n    order: string;\r\n    orphans: string;\r\n    outline: string;\r\n    outlineColor: string;\r\n    outlineStyle: string;\r\n    outlineWidth: string;\r\n    overflow: string;\r\n    overflowX: string;\r\n    overflowY: string;\r\n    padding: string;\r\n    paddingBottom: string;\r\n    paddingLeft: string;\r\n    paddingRight: string;\r\n    paddingTop: string;\r\n    pageBreakAfter: string;\r\n    pageBreakBefore: string;\r\n    pageBreakInside: string;\r\n    parentRule: CSSRule;\r\n    perspective: string;\r\n    perspectiveOrigin: string;\r\n    pointerEvents: string;\r\n    position: string;\r\n    quotes: string;\r\n    right: string;\r\n    rubyAlign: string;\r\n    rubyOverhang: string;\r\n    rubyPosition: string;\r\n    stopColor: string;\r\n    stopOpacity: string;\r\n    stroke: string;\r\n    strokeDasharray: string;\r\n    strokeDashoffset: string;\r\n    strokeLinecap: string;\r\n    strokeLinejoin: string;\r\n    strokeMiterlimit: string;\r\n    strokeOpacity: string;\r\n    strokeWidth: string;\r\n    tableLayout: string;\r\n    textAlign: string;\r\n    textAlignLast: string;\r\n    textAnchor: string;\r\n    textDecoration: string;\r\n    textFillColor: string;\r\n    textIndent: string;\r\n    textJustify: string;\r\n    textKashida: string;\r\n    textKashidaSpace: string;\r\n    textOverflow: string;\r\n    textShadow: string;\r\n    textTransform: string;\r\n    textUnderlinePosition: string;\r\n    top: string;\r\n    touchAction: string;\r\n    transform: string;\r\n    transformOrigin: string;\r\n    transformStyle: string;\r\n    transition: string;\r\n    transitionDelay: string;\r\n    transitionDuration: string;\r\n    transitionProperty: string;\r\n    transitionTimingFunction: string;\r\n    unicodeBidi: string;\r\n    verticalAlign: string;\r\n    visibility: string;\r\n    webkitAlignContent: string;\r\n    webkitAlignItems: string;\r\n    webkitAlignSelf: string;\r\n    webkitAnimation: string;\r\n    webkitAnimationDelay: string;\r\n    webkitAnimationDirection: string;\r\n    webkitAnimationDuration: string;\r\n    webkitAnimationFillMode: string;\r\n    webkitAnimationIterationCount: string;\r\n    webkitAnimationName: string;\r\n    webkitAnimationPlayState: string;\r\n    webkitAnimationTimingFunction: string;\r\n    webkitAppearance: string;\r\n    webkitBackfaceVisibility: string;\r\n    webkitBackground: string;\r\n    webkitBackgroundAttachment: string;\r\n    webkitBackgroundClip: string;\r\n    webkitBackgroundColor: string;\r\n    webkitBackgroundImage: string;\r\n    webkitBackgroundOrigin: string;\r\n    webkitBackgroundPosition: string;\r\n    webkitBackgroundPositionX: string;\r\n    webkitBackgroundPositionY: string;\r\n    webkitBackgroundRepeat: string;\r\n    webkitBackgroundSize: string;\r\n    webkitBorderBottomLeftRadius: string;\r\n    webkitBorderBottomRightRadius: string;\r\n    webkitBorderImage: string;\r\n    webkitBorderImageOutset: string;\r\n    webkitBorderImageRepeat: string;\r\n    webkitBorderImageSlice: string;\r\n    webkitBorderImageSource: string;\r\n    webkitBorderImageWidth: string;\r\n    webkitBorderRadius: string;\r\n    webkitBorderTopLeftRadius: string;\r\n    webkitBorderTopRightRadius: string;\r\n    webkitBoxAlign: string;\r\n    webkitBoxDirection: string;\r\n    webkitBoxFlex: string;\r\n    webkitBoxOrdinalGroup: string;\r\n    webkitBoxOrient: string;\r\n    webkitBoxPack: string;\r\n    webkitBoxSizing: string;\r\n    webkitColumnBreakAfter: string;\r\n    webkitColumnBreakBefore: string;\r\n    webkitColumnBreakInside: string;\r\n    webkitColumnCount: any;\r\n    webkitColumnGap: any;\r\n    webkitColumnRule: string;\r\n    webkitColumnRuleColor: any;\r\n    webkitColumnRuleStyle: string;\r\n    webkitColumnRuleWidth: any;\r\n    webkitColumnSpan: string;\r\n    webkitColumnWidth: any;\r\n    webkitColumns: string;\r\n    webkitFilter: string;\r\n    webkitFlex: string;\r\n    webkitFlexBasis: string;\r\n    webkitFlexDirection: string;\r\n    webkitFlexFlow: string;\r\n    webkitFlexGrow: string;\r\n    webkitFlexShrink: string;\r\n    webkitFlexWrap: string;\r\n    webkitJustifyContent: string;\r\n    webkitOrder: string;\r\n    webkitPerspective: string;\r\n    webkitPerspectiveOrigin: string;\r\n    webkitTapHighlightColor: string;\r\n    webkitTextFillColor: string;\r\n    webkitTextSizeAdjust: any;\r\n    webkitTransform: string;\r\n    webkitTransformOrigin: string;\r\n    webkitTransformStyle: string;\r\n    webkitTransition: string;\r\n    webkitTransitionDelay: string;\r\n    webkitTransitionDuration: string;\r\n    webkitTransitionProperty: string;\r\n    webkitTransitionTimingFunction: string;\r\n    webkitUserSelect: string;\r\n    webkitWritingMode: string;\r\n    whiteSpace: string;\r\n    widows: string;\r\n    width: string;\r\n    wordBreak: string;\r\n    wordSpacing: string;\r\n    wordWrap: string;\r\n    writingMode: string;\r\n    zIndex: string;\r\n    zoom: string;\r\n    getPropertyPriority(propertyName: string): string;\r\n    getPropertyValue(propertyName: string): string;\r\n    item(index: number): string;\r\n    removeProperty(propertyName: string): string;\r\n    setProperty(propertyName: string, value: string, priority?: string): void;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var CSSStyleDeclaration: {\r\n    prototype: CSSStyleDeclaration;\r\n    new(): CSSStyleDeclaration;\r\n}\r\n\r\ninterface CSSStyleRule extends CSSRule {\r\n    readOnly: boolean;\r\n    selectorText: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSStyleRule: {\r\n    prototype: CSSStyleRule;\r\n    new(): CSSStyleRule;\r\n}\r\n\r\ninterface CSSStyleSheet extends StyleSheet {\r\n    cssRules: CSSRuleList;\r\n    cssText: string;\r\n    href: string;\r\n    id: string;\r\n    imports: StyleSheetList;\r\n    isAlternate: boolean;\r\n    isPrefAlternate: boolean;\r\n    ownerRule: CSSRule;\r\n    owningElement: Element;\r\n    pages: StyleSheetPageList;\r\n    readOnly: boolean;\r\n    rules: CSSRuleList;\r\n    addImport(bstrURL: string, lIndex?: number): number;\r\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\r\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\r\n    deleteRule(index?: number): void;\r\n    insertRule(rule: string, index?: number): number;\r\n    removeImport(lIndex: number): void;\r\n    removeRule(lIndex: number): void;\r\n}\r\n\r\ndeclare var CSSStyleSheet: {\r\n    prototype: CSSStyleSheet;\r\n    new(): CSSStyleSheet;\r\n}\r\n\r\ninterface CSSSupportsRule extends CSSConditionRule {\r\n}\r\n\r\ndeclare var CSSSupportsRule: {\r\n    prototype: CSSSupportsRule;\r\n    new(): CSSSupportsRule;\r\n}\r\n\r\ninterface CanvasGradient {\r\n    addColorStop(offset: number, color: string): void;\r\n}\r\n\r\ndeclare var CanvasGradient: {\r\n    prototype: CanvasGradient;\r\n    new(): CanvasGradient;\r\n}\r\n\r\ninterface CanvasPattern {\r\n}\r\n\r\ndeclare var CanvasPattern: {\r\n    prototype: CanvasPattern;\r\n    new(): CanvasPattern;\r\n}\r\n\r\ninterface CanvasRenderingContext2D {\r\n    canvas: HTMLCanvasElement;\r\n    fillStyle: any;\r\n    font: string;\r\n    globalAlpha: number;\r\n    globalCompositeOperation: string;\r\n    lineCap: string;\r\n    lineDashOffset: number;\r\n    lineJoin: string;\r\n    lineWidth: number;\r\n    miterLimit: number;\r\n    msFillRule: string;\r\n    msImageSmoothingEnabled: boolean;\r\n    shadowBlur: number;\r\n    shadowColor: string;\r\n    shadowOffsetX: number;\r\n    shadowOffsetY: number;\r\n    strokeStyle: any;\r\n    textAlign: string;\r\n    textBaseline: string;\r\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\r\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\r\n    beginPath(): void;\r\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\r\n    clearRect(x: number, y: number, w: number, h: number): void;\r\n    clip(fillRule?: string): void;\r\n    closePath(): void;\r\n    createImageData(imageDataOrSw: number, sh?: number): ImageData;\r\n    createImageData(imageDataOrSw: ImageData, sh?: number): ImageData;\r\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\r\n    createPattern(image: HTMLImageElement, repetition: string): CanvasPattern;\r\n    createPattern(image: HTMLCanvasElement, repetition: string): CanvasPattern;\r\n    createPattern(image: HTMLVideoElement, repetition: string): CanvasPattern;\r\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\r\n    drawImage(image: HTMLImageElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    drawImage(image: HTMLCanvasElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    drawImage(image: HTMLVideoElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    fill(fillRule?: string): void;\r\n    fillRect(x: number, y: number, w: number, h: number): void;\r\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\r\n    getLineDash(): number[];\r\n    isPointInPath(x: number, y: number, fillRule?: string): boolean;\r\n    lineTo(x: number, y: number): void;\r\n    measureText(text: string): TextMetrics;\r\n    moveTo(x: number, y: number): void;\r\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\r\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\r\n    rect(x: number, y: number, w: number, h: number): void;\r\n    restore(): void;\r\n    rotate(angle: number): void;\r\n    save(): void;\r\n    scale(x: number, y: number): void;\r\n    setLineDash(segments: number[]): void;\r\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    stroke(): void;\r\n    strokeRect(x: number, y: number, w: number, h: number): void;\r\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    translate(x: number, y: number): void;\r\n}\r\n\r\ndeclare var CanvasRenderingContext2D: {\r\n    prototype: CanvasRenderingContext2D;\r\n    new(): CanvasRenderingContext2D;\r\n}\r\n\r\ninterface ChannelMergerNode extends AudioNode {\r\n}\r\n\r\ndeclare var ChannelMergerNode: {\r\n    prototype: ChannelMergerNode;\r\n    new(): ChannelMergerNode;\r\n}\r\n\r\ninterface ChannelSplitterNode extends AudioNode {\r\n}\r\n\r\ndeclare var ChannelSplitterNode: {\r\n    prototype: ChannelSplitterNode;\r\n    new(): ChannelSplitterNode;\r\n}\r\n\r\ninterface CharacterData extends Node, ChildNode {\r\n    data: string;\r\n    length: number;\r\n    appendData(arg: string): void;\r\n    deleteData(offset: number, count: number): void;\r\n    insertData(offset: number, arg: string): void;\r\n    replaceData(offset: number, count: number, arg: string): void;\r\n    substringData(offset: number, count: number): string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var CharacterData: {\r\n    prototype: CharacterData;\r\n    new(): CharacterData;\r\n}\r\n\r\ninterface ClientRect {\r\n    bottom: number;\r\n    height: number;\r\n    left: number;\r\n    right: number;\r\n    top: number;\r\n    width: number;\r\n}\r\n\r\ndeclare var ClientRect: {\r\n    prototype: ClientRect;\r\n    new(): ClientRect;\r\n}\r\n\r\ninterface ClientRectList {\r\n    length: number;\r\n    item(index: number): ClientRect;\r\n    [index: number]: ClientRect;\r\n}\r\n\r\ndeclare var ClientRectList: {\r\n    prototype: ClientRectList;\r\n    new(): ClientRectList;\r\n}\r\n\r\ninterface ClipboardEvent extends Event {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\ndeclare var ClipboardEvent: {\r\n    prototype: ClipboardEvent;\r\n    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;\r\n}\r\n\r\ninterface CloseEvent extends Event {\r\n    code: number;\r\n    reason: string;\r\n    wasClean: boolean;\r\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\r\n}\r\n\r\ndeclare var CloseEvent: {\r\n    prototype: CloseEvent;\r\n    new(): CloseEvent;\r\n}\r\n\r\ninterface CommandEvent extends Event {\r\n    commandName: string;\r\n    detail: string;\r\n}\r\n\r\ndeclare var CommandEvent: {\r\n    prototype: CommandEvent;\r\n    new(type: string, eventInitDict?: CommandEventInit): CommandEvent;\r\n}\r\n\r\ninterface Comment extends CharacterData {\r\n    text: string;\r\n}\r\n\r\ndeclare var Comment: {\r\n    prototype: Comment;\r\n    new(): Comment;\r\n}\r\n\r\ninterface CompositionEvent extends UIEvent {\r\n    data: string;\r\n    locale: string;\r\n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\r\n}\r\n\r\ndeclare var CompositionEvent: {\r\n    prototype: CompositionEvent;\r\n    new(typeArg: string, eventInitDict?: CompositionEventInit): CompositionEvent;\r\n}\r\n\r\ninterface Console {\r\n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;\r\n    clear(): void;\r\n    count(countTitle?: string): void;\r\n    debug(message?: string, ...optionalParams: any[]): void;\r\n    dir(value?: any, ...optionalParams: any[]): void;\r\n    dirxml(value: any): void;\r\n    error(message?: any, ...optionalParams: any[]): void;\r\n    group(groupTitle?: string): void;\r\n    groupCollapsed(groupTitle?: string): void;\r\n    groupEnd(): void;\r\n    info(message?: any, ...optionalParams: any[]): void;\r\n    log(message?: any, ...optionalParams: any[]): void;\r\n    msIsIndependentlyComposed(element: Element): boolean;\r\n    profile(reportName?: string): void;\r\n    profileEnd(): void;\r\n    select(element: Element): void;\r\n    time(timerName?: string): void;\r\n    timeEnd(timerName?: string): void;\r\n    trace(): void;\r\n    warn(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\ndeclare var Console: {\r\n    prototype: Console;\r\n    new(): Console;\r\n}\r\n\r\ninterface ConvolverNode extends AudioNode {\r\n    buffer: AudioBuffer;\r\n    normalize: boolean;\r\n}\r\n\r\ndeclare var ConvolverNode: {\r\n    prototype: ConvolverNode;\r\n    new(): ConvolverNode;\r\n}\r\n\r\ninterface Coordinates {\r\n    accuracy: number;\r\n    altitude: number;\r\n    altitudeAccuracy: number;\r\n    heading: number;\r\n    latitude: number;\r\n    longitude: number;\r\n    speed: number;\r\n}\r\n\r\ndeclare var Coordinates: {\r\n    prototype: Coordinates;\r\n    new(): Coordinates;\r\n}\r\n\r\ninterface Crypto extends Object, RandomSource {\r\n    subtle: SubtleCrypto;\r\n}\r\n\r\ndeclare var Crypto: {\r\n    prototype: Crypto;\r\n    new(): Crypto;\r\n}\r\n\r\ninterface CryptoKey {\r\n    algorithm: KeyAlgorithm;\r\n    extractable: boolean;\r\n    type: string;\r\n    usages: string[];\r\n}\r\n\r\ndeclare var CryptoKey: {\r\n    prototype: CryptoKey;\r\n    new(): CryptoKey;\r\n}\r\n\r\ninterface CryptoKeyPair {\r\n    privateKey: CryptoKey;\r\n    publicKey: CryptoKey;\r\n}\r\n\r\ndeclare var CryptoKeyPair: {\r\n    prototype: CryptoKeyPair;\r\n    new(): CryptoKeyPair;\r\n}\r\n\r\ninterface CustomEvent extends Event {\r\n    detail: any;\r\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\r\n}\r\n\r\ndeclare var CustomEvent: {\r\n    prototype: CustomEvent;\r\n    new(typeArg: string, eventInitDict?: CustomEventInit): CustomEvent;\r\n}\r\n\r\ninterface DOMError {\r\n    name: string;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var DOMError: {\r\n    prototype: DOMError;\r\n    new(): DOMError;\r\n}\r\n\r\ninterface DOMException {\r\n    code: number;\r\n    message: string;\r\n    name: string;\r\n    toString(): string;\r\n    ABORT_ERR: number;\r\n    DATA_CLONE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    NETWORK_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    PARSE_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    SECURITY_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    TIMEOUT_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n}\r\n\r\ndeclare var DOMException: {\r\n    prototype: DOMException;\r\n    new(): DOMException;\r\n    ABORT_ERR: number;\r\n    DATA_CLONE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    NETWORK_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    PARSE_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    SECURITY_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    TIMEOUT_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n}\r\n\r\ninterface DOMImplementation {\r\n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document;\r\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\r\n    createHTMLDocument(title: string): Document;\r\n    hasFeature(feature: string, version: string): boolean;\r\n}\r\n\r\ndeclare var DOMImplementation: {\r\n    prototype: DOMImplementation;\r\n    new(): DOMImplementation;\r\n}\r\n\r\ninterface DOMParser {\r\n    parseFromString(source: string, mimeType: string): Document;\r\n}\r\n\r\ndeclare var DOMParser: {\r\n    prototype: DOMParser;\r\n    new(): DOMParser;\r\n}\r\n\r\ninterface DOMSettableTokenList extends DOMTokenList {\r\n    value: string;\r\n}\r\n\r\ndeclare var DOMSettableTokenList: {\r\n    prototype: DOMSettableTokenList;\r\n    new(): DOMSettableTokenList;\r\n}\r\n\r\ninterface DOMStringList {\r\n    length: number;\r\n    contains(str: string): boolean;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var DOMStringList: {\r\n    prototype: DOMStringList;\r\n    new(): DOMStringList;\r\n}\r\n\r\ninterface DOMStringMap {\r\n    [name: string]: string;\r\n}\r\n\r\ndeclare var DOMStringMap: {\r\n    prototype: DOMStringMap;\r\n    new(): DOMStringMap;\r\n}\r\n\r\ninterface DOMTokenList {\r\n    length: number;\r\n    add(...token: string[]): void;\r\n    contains(token: string): boolean;\r\n    item(index: number): string;\r\n    remove(...token: string[]): void;\r\n    toString(): string;\r\n    toggle(token: string, force?: boolean): boolean;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var DOMTokenList: {\r\n    prototype: DOMTokenList;\r\n    new(): DOMTokenList;\r\n}\r\n\r\ninterface DataCue extends TextTrackCue {\r\n    data: ArrayBuffer;\r\n}\r\n\r\ndeclare var DataCue: {\r\n    prototype: DataCue;\r\n    new(): DataCue;\r\n}\r\n\r\ninterface DataTransfer {\r\n    dropEffect: string;\r\n    effectAllowed: string;\r\n    files: FileList;\r\n    items: DataTransferItemList;\r\n    types: DOMStringList;\r\n    clearData(format?: string): boolean;\r\n    getData(format: string): string;\r\n    setData(format: string, data: string): boolean;\r\n}\r\n\r\ndeclare var DataTransfer: {\r\n    prototype: DataTransfer;\r\n    new(): DataTransfer;\r\n}\r\n\r\ninterface DataTransferItem {\r\n    kind: string;\r\n    type: string;\r\n    getAsFile(): File;\r\n    getAsString(_callback: FunctionStringCallback): void;\r\n}\r\n\r\ndeclare var DataTransferItem: {\r\n    prototype: DataTransferItem;\r\n    new(): DataTransferItem;\r\n}\r\n\r\ninterface DataTransferItemList {\r\n    length: number;\r\n    add(data: File): DataTransferItem;\r\n    clear(): void;\r\n    item(index: number): File;\r\n    remove(index: number): void;\r\n    [index: number]: File;\r\n}\r\n\r\ndeclare var DataTransferItemList: {\r\n    prototype: DataTransferItemList;\r\n    new(): DataTransferItemList;\r\n}\r\n\r\ninterface DeferredPermissionRequest {\r\n    id: number;\r\n    type: string;\r\n    uri: string;\r\n    allow(): void;\r\n    deny(): void;\r\n}\r\n\r\ndeclare var DeferredPermissionRequest: {\r\n    prototype: DeferredPermissionRequest;\r\n    new(): DeferredPermissionRequest;\r\n}\r\n\r\ninterface DelayNode extends AudioNode {\r\n    delayTime: AudioParam;\r\n}\r\n\r\ndeclare var DelayNode: {\r\n    prototype: DelayNode;\r\n    new(): DelayNode;\r\n}\r\n\r\ninterface DeviceAcceleration {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\ndeclare var DeviceAcceleration: {\r\n    prototype: DeviceAcceleration;\r\n    new(): DeviceAcceleration;\r\n}\r\n\r\ninterface DeviceMotionEvent extends Event {\r\n    acceleration: DeviceAcceleration;\r\n    accelerationIncludingGravity: DeviceAcceleration;\r\n    interval: number;\r\n    rotationRate: DeviceRotationRate;\r\n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number): void;\r\n}\r\n\r\ndeclare var DeviceMotionEvent: {\r\n    prototype: DeviceMotionEvent;\r\n    new(): DeviceMotionEvent;\r\n}\r\n\r\ninterface DeviceOrientationEvent extends Event {\r\n    absolute: boolean;\r\n    alpha: number;\r\n    beta: number;\r\n    gamma: number;\r\n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void;\r\n}\r\n\r\ndeclare var DeviceOrientationEvent: {\r\n    prototype: DeviceOrientationEvent;\r\n    new(): DeviceOrientationEvent;\r\n}\r\n\r\ninterface DeviceRotationRate {\r\n    alpha: number;\r\n    beta: number;\r\n    gamma: number;\r\n}\r\n\r\ndeclare var DeviceRotationRate: {\r\n    prototype: DeviceRotationRate;\r\n    new(): DeviceRotationRate;\r\n}\r\n\r\ninterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\r\n    /**\r\n      * Sets or gets the URL for the current document. \r\n      */\r\n    URL: string;\r\n    /**\r\n      * Gets the URL for the document, stripped of any character encoding.\r\n      */\r\n    URLUnencoded: string;\r\n    /**\r\n      * Gets the object that has the focus when the parent document has focus.\r\n      */\r\n    activeElement: Element;\r\n    /**\r\n      * Sets or gets the color of all active links in the document.\r\n      */\r\n    alinkColor: string;\r\n    /**\r\n      * Returns a reference to the collection of elements contained by the object.\r\n      */\r\n    all: HTMLCollection;\r\n    /**\r\n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\r\n      */\r\n    anchors: HTMLCollection;\r\n    /**\r\n      * Retrieves a collection of all applet objects in the document.\r\n      */\r\n    applets: HTMLCollection;\r\n    /**\r\n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object. \r\n      */\r\n    bgColor: string;\r\n    /**\r\n      * Specifies the beginning and end of the document body.\r\n      */\r\n    body: HTMLElement;\r\n    characterSet: string;\r\n    /**\r\n      * Gets or sets the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Gets a value that indicates whether standards-compliant mode is switched on for the object.\r\n      */\r\n    compatMode: string;\r\n    cookie: string;\r\n    /**\r\n      * Gets the default character set from the current regional language settings.\r\n      */\r\n    defaultCharset: string;\r\n    defaultView: Window;\r\n    /**\r\n      * Sets or gets a value that indicates whether the document can be edited.\r\n      */\r\n    designMode: string;\r\n    /**\r\n      * Sets or retrieves a value that indicates the reading order of the object. \r\n      */\r\n    dir: string;\r\n    /**\r\n      * Gets an object representing the document type declaration associated with the current document. \r\n      */\r\n    doctype: DocumentType;\r\n    /**\r\n      * Gets a reference to the root node of the document. \r\n      */\r\n    documentElement: HTMLElement;\r\n    /**\r\n      * Sets or gets the security domain of the document. \r\n      */\r\n    domain: string;\r\n    /**\r\n      * Retrieves a collection of all embed objects in the document.\r\n      */\r\n    embeds: HTMLCollection;\r\n    /**\r\n      * Sets or gets the foreground (text) color of the document.\r\n      */\r\n    fgColor: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all form objects in the document.\r\n      */\r\n    forms: HTMLCollection;\r\n    fullscreenElement: Element;\r\n    fullscreenEnabled: boolean;\r\n    head: HTMLHeadElement;\r\n    hidden: boolean;\r\n    /**\r\n      * Retrieves a collection, in source order, of img objects in the document.\r\n      */\r\n    images: HTMLCollection;\r\n    /**\r\n      * Gets the implementation object of the current document. \r\n      */\r\n    implementation: DOMImplementation;\r\n    /**\r\n      * Returns the character encoding used to create the webpage that is loaded into the document object.\r\n      */\r\n    inputEncoding: string;\r\n    /**\r\n      * Gets the date that the page was last modified, if the page supplies one. \r\n      */\r\n    lastModified: string;\r\n    /**\r\n      * Sets or gets the color of the document links. \r\n      */\r\n    linkColor: string;\r\n    /**\r\n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\r\n      */\r\n    links: HTMLCollection;\r\n    /**\r\n      * Contains information about the current URL. \r\n      */\r\n    location: Location;\r\n    media: string;\r\n    msCSSOMElementFloatMetrics: boolean;\r\n    msCapsLockWarningOff: boolean;\r\n    msHidden: boolean;\r\n    msVisibilityState: string;\r\n    /**\r\n      * Fires when the user aborts the download.\r\n      * @param ev The event.\r\n      */\r\n    onabort: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires immediately before the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The event.\r\n      */\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    /** \r\n      * Fires when the object loses the input focus. \r\n      * @param ev The focus event.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    /**\r\n      * Occurs when playback is possible, but would require further buffering. \r\n      * @param ev The event.\r\n      */\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    /**\r\n      * Fires when the contents of the object or selection have changed. \r\n      * @param ev The event.\r\n      */\r\n    onchange: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the left mouse button on the object\r\n      * @param ev The mouse event.\r\n      */\r\n    onclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user clicks the right mouse button in the client area, opening the context menu. \r\n      * @param ev The mouse event.\r\n      */\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    /**\r\n      * Fires when the user double-clicks the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The UI Event\r\n      */\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires on the source object continuously during a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondrag: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the source object when the user releases the mouse at the close of a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondragend: (ev: DragEvent) => any;\r\n    /** \r\n      * Fires on the target element when the user drags the object to a valid drop target.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragenter: (ev: DragEvent) => any;\r\n    /** \r\n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragleave: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the target element continuously while the user drags the object over a valid drop target.\r\n      * @param ev The event.\r\n      */\r\n    ondragover: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the source object when the user starts to drag a text selection or selected object. \r\n      * @param ev The event.\r\n      */\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    /**\r\n      * Occurs when the duration attribute is updated. \r\n      * @param ev The event.\r\n      */\r\n    ondurationchange: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the media element is reset to its initial state. \r\n      * @param ev The event.\r\n      */\r\n    onemptied: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the end of playback is reached. \r\n      * @param ev The event\r\n      */\r\n    onended: (ev: Event) => any;\r\n    /**\r\n      * Fires when an error occurs during object loading.\r\n      * @param ev The event.\r\n      */\r\n    onerror: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object receives focus. \r\n      * @param ev The event.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onfullscreenchange: (ev: Event) => any;\r\n    onfullscreenerror: (ev: Event) => any;\r\n    oninput: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user presses a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires when the user presses an alphanumeric key.\r\n      * @param ev The event.\r\n      */\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires when the user releases a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires immediately after the browser loads the object. \r\n      * @param ev The event.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    /**\r\n      * Occurs when media data is loaded at the current playback position. \r\n      * @param ev The event.\r\n      */\r\n    onloadeddata: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the duration and dimensions of the media have been determined.\r\n      * @param ev The event.\r\n      */\r\n    onloadedmetadata: (ev: Event) => any;\r\n    /**\r\n      * Occurs when Internet Explorer begins looking for media data. \r\n      * @param ev The event.\r\n      */\r\n    onloadstart: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the object with either mouse button. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse pointer outside the boundaries of the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse pointer into the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user releases a mouse button while the mouse is over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the wheel button is rotated. \r\n      * @param ev The mouse event\r\n      */\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    onmscontentzoom: (ev: UIEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    /**\r\n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode. \r\n      * @param ev The event.\r\n      */\r\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.\r\n      * @param ev The event.\r\n      */\r\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Occurs when playback is paused.\r\n      * @param ev The event.\r\n      */\r\n    onpause: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the play method is requested. \r\n      * @param ev The event.\r\n      */\r\n    onplay: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the audio or video has started playing. \r\n      * @param ev The event.\r\n      */\r\n    onplaying: (ev: Event) => any;\r\n    onpointerlockchange: (ev: Event) => any;\r\n    onpointerlockerror: (ev: Event) => any;\r\n    /**\r\n      * Occurs to indicate progress while downloading media data. \r\n      * @param ev The event.\r\n      */\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    /**\r\n      * Occurs when the playback rate is increased or decreased. \r\n      * @param ev The event.\r\n      */\r\n    onratechange: (ev: Event) => any;\r\n    /**\r\n      * Fires when the state of the object has changed.\r\n      * @param ev The event\r\n      */\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    /**\r\n      * Fires when the user resets a form. \r\n      * @param ev The event.\r\n      */\r\n    onreset: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user repositions the scroll box in the scroll bar on the object. \r\n      * @param ev The event.\r\n      */\r\n    onscroll: (ev: UIEvent) => any;\r\n    /**\r\n      * Occurs when the seek operation ends. \r\n      * @param ev The event.\r\n      */\r\n    onseeked: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the current playback position is moved. \r\n      * @param ev The event.\r\n      */\r\n    onseeking: (ev: Event) => any;\r\n    /**\r\n      * Fires when the current selection changes.\r\n      * @param ev The event.\r\n      */\r\n    onselect: (ev: UIEvent) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the download has stopped. \r\n      * @param ev The event.\r\n      */\r\n    onstalled: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the Stop button or leaves the Web page.\r\n      * @param ev The event.\r\n      */\r\n    onstop: (ev: Event) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    /**\r\n      * Occurs if the load operation has been intentionally halted. \r\n      * @param ev The event.\r\n      */\r\n    onsuspend: (ev: Event) => any;\r\n    /**\r\n      * Occurs to indicate the current playback position.\r\n      * @param ev The event.\r\n      */\r\n    ontimeupdate: (ev: Event) => any;\r\n    ontouchcancel: (ev: TouchEvent) => any;\r\n    ontouchend: (ev: TouchEvent) => any;\r\n    ontouchmove: (ev: TouchEvent) => any;\r\n    ontouchstart: (ev: TouchEvent) => any;\r\n    /**\r\n      * Occurs when the volume is changed, or playback is muted or unmuted.\r\n      * @param ev The event.\r\n      */\r\n    onvolumechange: (ev: Event) => any;\r\n    /**\r\n      * Occurs when playback stops because the next frame of a video resource is not available. \r\n      * @param ev The event.\r\n      */\r\n    onwaiting: (ev: Event) => any;\r\n    onwebkitfullscreenchange: (ev: Event) => any;\r\n    onwebkitfullscreenerror: (ev: Event) => any;\r\n    plugins: HTMLCollection;\r\n    pointerLockElement: Element;\r\n    /**\r\n      * Retrieves a value that indicates the current state of the object.\r\n      */\r\n    readyState: string;\r\n    /**\r\n      * Gets the URL of the location that referred the user to the current page.\r\n      */\r\n    referrer: string;\r\n    /**\r\n      * Gets the root svg element in the document hierarchy.\r\n      */\r\n    rootElement: SVGSVGElement;\r\n    /**\r\n      * Retrieves a collection of all script objects in the document.\r\n      */\r\n    scripts: HTMLCollection;\r\n    security: string;\r\n    /**\r\n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\r\n      */\r\n    styleSheets: StyleSheetList;\r\n    /**\r\n      * Contains the title of the document.\r\n      */\r\n    title: string;\r\n    visibilityState: string;\r\n    /** \r\n      * Sets or gets the color of the links that the user has visited.\r\n      */\r\n    vlinkColor: string;\r\n    webkitCurrentFullScreenElement: Element;\r\n    webkitFullscreenElement: Element;\r\n    webkitFullscreenEnabled: boolean;\r\n    webkitIsFullScreen: boolean;\r\n    xmlEncoding: string;\r\n    xmlStandalone: boolean;\r\n    /**\r\n      * Gets or sets the version attribute specified in the declaration of an XML document.\r\n      */\r\n    xmlVersion: string;\r\n    adoptNode(source: Node): Node;\r\n    captureEvents(): void;\r\n    clear(): void;\r\n    /**\r\n      * Closes an output stream and forces the sent data to display.\r\n      */\r\n    close(): void;\r\n    /**\r\n      * Creates an attribute object with a specified name.\r\n      * @param name String that sets the attribute object's name.\r\n      */\r\n    createAttribute(name: string): Attr;\r\n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr;\r\n    createCDATASection(data: string): CDATASection;\r\n    /**\r\n      * Creates a comment object with the specified data.\r\n      * @param data Sets the comment object's data.\r\n      */\r\n    createComment(data: string): Comment;\r\n    /**\r\n      * Creates a new document.\r\n      */\r\n    createDocumentFragment(): DocumentFragment;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: \"a\"): HTMLAnchorElement;\r\n    createElement(tagName: \"abbr\"): HTMLPhraseElement;\r\n    createElement(tagName: \"acronym\"): HTMLPhraseElement;\r\n    createElement(tagName: \"address\"): HTMLBlockElement;\r\n    createElement(tagName: \"applet\"): HTMLAppletElement;\r\n    createElement(tagName: \"area\"): HTMLAreaElement;\r\n    createElement(tagName: \"audio\"): HTMLAudioElement;\r\n    createElement(tagName: \"b\"): HTMLPhraseElement;\r\n    createElement(tagName: \"base\"): HTMLBaseElement;\r\n    createElement(tagName: \"basefont\"): HTMLBaseFontElement;\r\n    createElement(tagName: \"bdo\"): HTMLPhraseElement;\r\n    createElement(tagName: \"big\"): HTMLPhraseElement;\r\n    createElement(tagName: \"blockquote\"): HTMLBlockElement;\r\n    createElement(tagName: \"body\"): HTMLBodyElement;\r\n    createElement(tagName: \"br\"): HTMLBRElement;\r\n    createElement(tagName: \"button\"): HTMLButtonElement;\r\n    createElement(tagName: \"canvas\"): HTMLCanvasElement;\r\n    createElement(tagName: \"caption\"): HTMLTableCaptionElement;\r\n    createElement(tagName: \"center\"): HTMLBlockElement;\r\n    createElement(tagName: \"cite\"): HTMLPhraseElement;\r\n    createElement(tagName: \"code\"): HTMLPhraseElement;\r\n    createElement(tagName: \"col\"): HTMLTableColElement;\r\n    createElement(tagName: \"colgroup\"): HTMLTableColElement;\r\n    createElement(tagName: \"datalist\"): HTMLDataListElement;\r\n    createElement(tagName: \"dd\"): HTMLDDElement;\r\n    createElement(tagName: \"del\"): HTMLModElement;\r\n    createElement(tagName: \"dfn\"): HTMLPhraseElement;\r\n    createElement(tagName: \"dir\"): HTMLDirectoryElement;\r\n    createElement(tagName: \"div\"): HTMLDivElement;\r\n    createElement(tagName: \"dl\"): HTMLDListElement;\r\n    createElement(tagName: \"dt\"): HTMLDTElement;\r\n    createElement(tagName: \"em\"): HTMLPhraseElement;\r\n    createElement(tagName: \"embed\"): HTMLEmbedElement;\r\n    createElement(tagName: \"fieldset\"): HTMLFieldSetElement;\r\n    createElement(tagName: \"font\"): HTMLFontElement;\r\n    createElement(tagName: \"form\"): HTMLFormElement;\r\n    createElement(tagName: \"frame\"): HTMLFrameElement;\r\n    createElement(tagName: \"frameset\"): HTMLFrameSetElement;\r\n    createElement(tagName: \"h1\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h2\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h3\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h4\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h5\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h6\"): HTMLHeadingElement;\r\n    createElement(tagName: \"head\"): HTMLHeadElement;\r\n    createElement(tagName: \"hr\"): HTMLHRElement;\r\n    createElement(tagName: \"html\"): HTMLHtmlElement;\r\n    createElement(tagName: \"i\"): HTMLPhraseElement;\r\n    createElement(tagName: \"iframe\"): HTMLIFrameElement;\r\n    createElement(tagName: \"img\"): HTMLImageElement;\r\n    createElement(tagName: \"input\"): HTMLInputElement;\r\n    createElement(tagName: \"ins\"): HTMLModElement;\r\n    createElement(tagName: \"isindex\"): HTMLIsIndexElement;\r\n    createElement(tagName: \"kbd\"): HTMLPhraseElement;\r\n    createElement(tagName: \"keygen\"): HTMLBlockElement;\r\n    createElement(tagName: \"label\"): HTMLLabelElement;\r\n    createElement(tagName: \"legend\"): HTMLLegendElement;\r\n    createElement(tagName: \"li\"): HTMLLIElement;\r\n    createElement(tagName: \"link\"): HTMLLinkElement;\r\n    createElement(tagName: \"listing\"): HTMLBlockElement;\r\n    createElement(tagName: \"map\"): HTMLMapElement;\r\n    createElement(tagName: \"marquee\"): HTMLMarqueeElement;\r\n    createElement(tagName: \"menu\"): HTMLMenuElement;\r\n    createElement(tagName: \"meta\"): HTMLMetaElement;\r\n    createElement(tagName: \"nextid\"): HTMLNextIdElement;\r\n    createElement(tagName: \"nobr\"): HTMLPhraseElement;\r\n    createElement(tagName: \"object\"): HTMLObjectElement;\r\n    createElement(tagName: \"ol\"): HTMLOListElement;\r\n    createElement(tagName: \"optgroup\"): HTMLOptGroupElement;\r\n    createElement(tagName: \"option\"): HTMLOptionElement;\r\n    createElement(tagName: \"p\"): HTMLParagraphElement;\r\n    createElement(tagName: \"param\"): HTMLParamElement;\r\n    createElement(tagName: \"plaintext\"): HTMLBlockElement;\r\n    createElement(tagName: \"pre\"): HTMLPreElement;\r\n    createElement(tagName: \"progress\"): HTMLProgressElement;\r\n    createElement(tagName: \"q\"): HTMLQuoteElement;\r\n    createElement(tagName: \"rt\"): HTMLPhraseElement;\r\n    createElement(tagName: \"ruby\"): HTMLPhraseElement;\r\n    createElement(tagName: \"s\"): HTMLPhraseElement;\r\n    createElement(tagName: \"samp\"): HTMLPhraseElement;\r\n    createElement(tagName: \"script\"): HTMLScriptElement;\r\n    createElement(tagName: \"select\"): HTMLSelectElement;\r\n    createElement(tagName: \"small\"): HTMLPhraseElement;\r\n    createElement(tagName: \"source\"): HTMLSourceElement;\r\n    createElement(tagName: \"span\"): HTMLSpanElement;\r\n    createElement(tagName: \"strike\"): HTMLPhraseElement;\r\n    createElement(tagName: \"strong\"): HTMLPhraseElement;\r\n    createElement(tagName: \"style\"): HTMLStyleElement;\r\n    createElement(tagName: \"sub\"): HTMLPhraseElement;\r\n    createElement(tagName: \"sup\"): HTMLPhraseElement;\r\n    createElement(tagName: \"table\"): HTMLTableElement;\r\n    createElement(tagName: \"tbody\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"td\"): HTMLTableDataCellElement;\r\n    createElement(tagName: \"textarea\"): HTMLTextAreaElement;\r\n    createElement(tagName: \"tfoot\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"th\"): HTMLTableHeaderCellElement;\r\n    createElement(tagName: \"thead\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"title\"): HTMLTitleElement;\r\n    createElement(tagName: \"tr\"): HTMLTableRowElement;\r\n    createElement(tagName: \"track\"): HTMLTrackElement;\r\n    createElement(tagName: \"tt\"): HTMLPhraseElement;\r\n    createElement(tagName: \"u\"): HTMLPhraseElement;\r\n    createElement(tagName: \"ul\"): HTMLUListElement;\r\n    createElement(tagName: \"var\"): HTMLPhraseElement;\r\n    createElement(tagName: \"video\"): HTMLVideoElement;\r\n    createElement(tagName: \"x-ms-webview\"): MSHTMLWebViewElement;\r\n    createElement(tagName: \"xmp\"): HTMLBlockElement;\r\n    createElement(tagName: string): HTMLElement;\r\n    createElementNS(namespaceURI: string, qualifiedName: string): Element;\r\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\r\n    createNSResolver(nodeResolver: Node): XPathNSResolver;\r\n    /**\r\n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document. \r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list\r\n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator;\r\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\r\n    /**\r\n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document. \r\n      */\r\n    createRange(): Range;\r\n    /**\r\n      * Creates a text string from the specified value. \r\n      * @param data String that specifies the nodeValue property of the text node.\r\n      */\r\n    createTextNode(data: string): Text;\r\n    createTouch(view: any, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;\r\n    createTouchList(...touches: Touch[]): TouchList;\r\n    /**\r\n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\r\n      * @param filter A custom NodeFilter function to use.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker;\r\n    /**\r\n      * Returns the element for the specified x coordinate and the specified y coordinate. \r\n      * @param x The x-offset\r\n      * @param y The y-offset\r\n      */\r\n    elementFromPoint(x: number, y: number): Element;\r\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\r\n    /**\r\n      * Executes a command on the current document, current selection, or the given range.\r\n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\r\n      * @param showUI Display the user interface, defaults to false.\r\n      * @param value Value to assign.\r\n      */\r\n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean;\r\n    /**\r\n      * Displays help information for the given command identifier.\r\n      * @param commandId Displays help information for the given command identifier.\r\n      */\r\n    execCommandShowHelp(commandId: string): boolean;\r\n    exitFullscreen(): void;\r\n    exitPointerLock(): void;\r\n    /**\r\n      * Causes the element to receive the focus and executes the code specified by the onfocus event.\r\n      */\r\n    focus(): void;\r\n    /**\r\n      * Returns a reference to the first object with the specified value of the ID or NAME attribute.\r\n      * @param elementId String that specifies the ID value. Case-insensitive.\r\n      */\r\n    getElementById(elementId: string): HTMLElement;\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    /**\r\n      * Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      */\r\n    getElementsByName(elementName: string): NodeList;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(tagname: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(tagname: \"abbr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"acronym\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"address\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(tagname: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(tagname: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(tagname: \"b\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(tagname: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(tagname: \"bdo\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"big\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"blockquote\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(tagname: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(tagname: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(tagname: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(tagname: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(tagname: \"center\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"circle\"): NodeListOf<SVGCircleElement>;\r\n    getElementsByTagName(tagname: \"cite\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"clippath\"): NodeListOf<SVGClipPathElement>;\r\n    getElementsByTagName(tagname: \"code\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(tagname: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(tagname: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(tagname: \"dd\"): NodeListOf<HTMLDDElement>;\r\n    getElementsByTagName(tagname: \"defs\"): NodeListOf<SVGDefsElement>;\r\n    getElementsByTagName(tagname: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(tagname: \"desc\"): NodeListOf<SVGDescElement>;\r\n    getElementsByTagName(tagname: \"dfn\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(tagname: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(tagname: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(tagname: \"dt\"): NodeListOf<HTMLDTElement>;\r\n    getElementsByTagName(tagname: \"ellipse\"): NodeListOf<SVGEllipseElement>;\r\n    getElementsByTagName(tagname: \"em\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(tagname: \"feblend\"): NodeListOf<SVGFEBlendElement>;\r\n    getElementsByTagName(tagname: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\r\n    getElementsByTagName(tagname: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\r\n    getElementsByTagName(tagname: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\r\n    getElementsByTagName(tagname: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\r\n    getElementsByTagName(tagname: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\r\n    getElementsByTagName(tagname: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\r\n    getElementsByTagName(tagname: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\r\n    getElementsByTagName(tagname: \"feflood\"): NodeListOf<SVGFEFloodElement>;\r\n    getElementsByTagName(tagname: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\r\n    getElementsByTagName(tagname: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\r\n    getElementsByTagName(tagname: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\r\n    getElementsByTagName(tagname: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\r\n    getElementsByTagName(tagname: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\r\n    getElementsByTagName(tagname: \"feimage\"): NodeListOf<SVGFEImageElement>;\r\n    getElementsByTagName(tagname: \"femerge\"): NodeListOf<SVGFEMergeElement>;\r\n    getElementsByTagName(tagname: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\r\n    getElementsByTagName(tagname: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\r\n    getElementsByTagName(tagname: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\r\n    getElementsByTagName(tagname: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\r\n    getElementsByTagName(tagname: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\r\n    getElementsByTagName(tagname: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\r\n    getElementsByTagName(tagname: \"fetile\"): NodeListOf<SVGFETileElement>;\r\n    getElementsByTagName(tagname: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\r\n    getElementsByTagName(tagname: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(tagname: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"filter\"): NodeListOf<SVGFilterElement>;\r\n    getElementsByTagName(tagname: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(tagname: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\r\n    getElementsByTagName(tagname: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(tagname: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(tagname: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(tagname: \"g\"): NodeListOf<SVGGElement>;\r\n    getElementsByTagName(tagname: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(tagname: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(tagname: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(tagname: \"i\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(tagname: \"image\"): NodeListOf<SVGImageElement>;\r\n    getElementsByTagName(tagname: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(tagname: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(tagname: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(tagname: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\r\n    getElementsByTagName(tagname: \"kbd\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"keygen\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(tagname: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(tagname: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(tagname: \"line\"): NodeListOf<SVGLineElement>;\r\n    getElementsByTagName(tagname: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\r\n    getElementsByTagName(tagname: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(tagname: \"listing\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(tagname: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"marker\"): NodeListOf<SVGMarkerElement>;\r\n    getElementsByTagName(tagname: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(tagname: \"mask\"): NodeListOf<SVGMaskElement>;\r\n    getElementsByTagName(tagname: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(tagname: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(tagname: \"metadata\"): NodeListOf<SVGMetadataElement>;\r\n    getElementsByTagName(tagname: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"nextid\"): NodeListOf<HTMLNextIdElement>;\r\n    getElementsByTagName(tagname: \"nobr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(tagname: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(tagname: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(tagname: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(tagname: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(tagname: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(tagname: \"path\"): NodeListOf<SVGPathElement>;\r\n    getElementsByTagName(tagname: \"pattern\"): NodeListOf<SVGPatternElement>;\r\n    getElementsByTagName(tagname: \"plaintext\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: \"polygon\"): NodeListOf<SVGPolygonElement>;\r\n    getElementsByTagName(tagname: \"polyline\"): NodeListOf<SVGPolylineElement>;\r\n    getElementsByTagName(tagname: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(tagname: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(tagname: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(tagname: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\r\n    getElementsByTagName(tagname: \"rect\"): NodeListOf<SVGRectElement>;\r\n    getElementsByTagName(tagname: \"rt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"ruby\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"s\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"samp\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(tagname: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(tagname: \"small\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"source\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(tagname: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(tagname: \"stop\"): NodeListOf<SVGStopElement>;\r\n    getElementsByTagName(tagname: \"strike\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"strong\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(tagname: \"sub\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"sup\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"svg\"): NodeListOf<SVGSVGElement>;\r\n    getElementsByTagName(tagname: \"switch\"): NodeListOf<SVGSwitchElement>;\r\n    getElementsByTagName(tagname: \"symbol\"): NodeListOf<SVGSymbolElement>;\r\n    getElementsByTagName(tagname: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(tagname: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(tagname: \"text\"): NodeListOf<SVGTextElement>;\r\n    getElementsByTagName(tagname: \"textpath\"): NodeListOf<SVGTextPathElement>;\r\n    getElementsByTagName(tagname: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(tagname: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(tagname: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(tagname: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(tagname: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(tagname: \"tspan\"): NodeListOf<SVGTSpanElement>;\r\n    getElementsByTagName(tagname: \"tt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"u\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(tagname: \"use\"): NodeListOf<SVGUseElement>;\r\n    getElementsByTagName(tagname: \"var\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(tagname: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(tagname: \"view\"): NodeListOf<SVGViewElement>;\r\n    getElementsByTagName(tagname: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(tagname: \"xmp\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(tagname: string): NodeList;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    /**\r\n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\r\n      */\r\n    getSelection(): Selection;\r\n    /**\r\n      * Gets a value indicating whether the object currently has focus.\r\n      */\r\n    hasFocus(): boolean;\r\n    importNode(importedNode: Node, deep: boolean): Node;\r\n    msElementsFromPoint(x: number, y: number): NodeList;\r\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList;\r\n    msGetPrintDocumentForNamedFlow(flowName: string): Document;\r\n    msSetPrintDocumentUriForNamedFlow(flowName: string, uri: string): void;\r\n    /**\r\n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\r\n      * @param url Specifies a MIME type for the document.\r\n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\r\n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\r\n      * @param replace Specifies whether the existing entry for the document is replaced in the history list.\r\n      */\r\n    open(url?: string, name?: string, features?: string, replace?: boolean): Document | Window;\r\n    /** \r\n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandEnabled(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandIndeterm(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates the current state of the command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandState(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the current command is supported on the current range.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandSupported(commandId: string): boolean;\r\n    /**\r\n      * Retrieves the string associated with a command.\r\n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers. \r\n      */\r\n    queryCommandText(commandId: string): string;\r\n    /**\r\n      * Returns the current value of the document, range, or current selection for the given command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandValue(commandId: string): string;\r\n    releaseEvents(): void;\r\n    /**\r\n      * Allows updating the print settings for the page.\r\n      */\r\n    updateSettings(): void;\r\n    webkitCancelFullScreen(): void;\r\n    webkitExitFullscreen(): void;\r\n    /**\r\n      * Writes one or more HTML expressions to a document in the specified window. \r\n      * @param content Specifies the text and HTML tags to write.\r\n      */\r\n    write(...content: string[]): void;\r\n    /**\r\n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window. \r\n      * @param content The text and HTML tags to write.\r\n      */\r\n    writeln(...content: string[]): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"fullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"fullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mssitemodejumplistitemremoved\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msthumbnailclick\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerlockchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerlockerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stop\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Document: {\r\n    prototype: Document;\r\n    new(): Document;\r\n}\r\n\r\ninterface DocumentFragment extends Node, NodeSelector {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var DocumentFragment: {\r\n    prototype: DocumentFragment;\r\n    new(): DocumentFragment;\r\n}\r\n\r\ninterface DocumentType extends Node, ChildNode {\r\n    entities: NamedNodeMap;\r\n    internalSubset: string;\r\n    name: string;\r\n    notations: NamedNodeMap;\r\n    publicId: string;\r\n    systemId: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var DocumentType: {\r\n    prototype: DocumentType;\r\n    new(): DocumentType;\r\n}\r\n\r\ninterface DragEvent extends MouseEvent {\r\n    dataTransfer: DataTransfer;\r\n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\r\n    msConvertURL(file: File, targetType: string, targetURL?: string): void;\r\n}\r\n\r\ndeclare var DragEvent: {\r\n    prototype: DragEvent;\r\n    new(): DragEvent;\r\n}\r\n\r\ninterface DynamicsCompressorNode extends AudioNode {\r\n    attack: AudioParam;\r\n    knee: AudioParam;\r\n    ratio: AudioParam;\r\n    reduction: AudioParam;\r\n    release: AudioParam;\r\n    threshold: AudioParam;\r\n}\r\n\r\ndeclare var DynamicsCompressorNode: {\r\n    prototype: DynamicsCompressorNode;\r\n    new(): DynamicsCompressorNode;\r\n}\r\n\r\ninterface EXT_texture_filter_anisotropic {\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\n\r\ndeclare var EXT_texture_filter_anisotropic: {\r\n    prototype: EXT_texture_filter_anisotropic;\r\n    new(): EXT_texture_filter_anisotropic;\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\n\r\ninterface Element extends Node, GlobalEventHandlers, ElementTraversal, NodeSelector, ChildNode {\r\n    classList: DOMTokenList;\r\n    clientHeight: number;\r\n    clientLeft: number;\r\n    clientTop: number;\r\n    clientWidth: number;\r\n    msContentZoomFactor: number;\r\n    msRegionOverflow: string;\r\n    onariarequest: (ev: AriaRequestEvent) => any;\r\n    oncommand: (ev: CommandEvent) => any;\r\n    ongotpointercapture: (ev: PointerEvent) => any;\r\n    onlostpointercapture: (ev: PointerEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsgotpointercapture: (ev: MSPointerEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmslostpointercapture: (ev: MSPointerEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    ontouchcancel: (ev: TouchEvent) => any;\r\n    ontouchend: (ev: TouchEvent) => any;\r\n    ontouchmove: (ev: TouchEvent) => any;\r\n    ontouchstart: (ev: TouchEvent) => any;\r\n    onwebkitfullscreenchange: (ev: Event) => any;\r\n    onwebkitfullscreenerror: (ev: Event) => any;\r\n    scrollHeight: number;\r\n    scrollLeft: number;\r\n    scrollTop: number;\r\n    scrollWidth: number;\r\n    tagName: string;\r\n    getAttribute(name?: string): string;\r\n    getAttributeNS(namespaceURI: string, localName: string): string;\r\n    getAttributeNode(name: string): Attr;\r\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\r\n    getBoundingClientRect(): ClientRect;\r\n    getClientRects(): ClientRectList;\r\n    getElementsByTagName(name: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(name: \"abbr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"acronym\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"address\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(name: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(name: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(name: \"b\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(name: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(name: \"bdo\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"big\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"blockquote\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(name: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(name: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(name: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(name: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(name: \"center\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"circle\"): NodeListOf<SVGCircleElement>;\r\n    getElementsByTagName(name: \"cite\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"clippath\"): NodeListOf<SVGClipPathElement>;\r\n    getElementsByTagName(name: \"code\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(name: \"dd\"): NodeListOf<HTMLDDElement>;\r\n    getElementsByTagName(name: \"defs\"): NodeListOf<SVGDefsElement>;\r\n    getElementsByTagName(name: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"desc\"): NodeListOf<SVGDescElement>;\r\n    getElementsByTagName(name: \"dfn\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(name: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(name: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(name: \"dt\"): NodeListOf<HTMLDTElement>;\r\n    getElementsByTagName(name: \"ellipse\"): NodeListOf<SVGEllipseElement>;\r\n    getElementsByTagName(name: \"em\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(name: \"feblend\"): NodeListOf<SVGFEBlendElement>;\r\n    getElementsByTagName(name: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\r\n    getElementsByTagName(name: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\r\n    getElementsByTagName(name: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\r\n    getElementsByTagName(name: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\r\n    getElementsByTagName(name: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\r\n    getElementsByTagName(name: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\r\n    getElementsByTagName(name: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\r\n    getElementsByTagName(name: \"feflood\"): NodeListOf<SVGFEFloodElement>;\r\n    getElementsByTagName(name: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\r\n    getElementsByTagName(name: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\r\n    getElementsByTagName(name: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\r\n    getElementsByTagName(name: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\r\n    getElementsByTagName(name: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\r\n    getElementsByTagName(name: \"feimage\"): NodeListOf<SVGFEImageElement>;\r\n    getElementsByTagName(name: \"femerge\"): NodeListOf<SVGFEMergeElement>;\r\n    getElementsByTagName(name: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\r\n    getElementsByTagName(name: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\r\n    getElementsByTagName(name: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\r\n    getElementsByTagName(name: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\r\n    getElementsByTagName(name: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\r\n    getElementsByTagName(name: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\r\n    getElementsByTagName(name: \"fetile\"): NodeListOf<SVGFETileElement>;\r\n    getElementsByTagName(name: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\r\n    getElementsByTagName(name: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(name: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"filter\"): NodeListOf<SVGFilterElement>;\r\n    getElementsByTagName(name: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(name: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\r\n    getElementsByTagName(name: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(name: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(name: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(name: \"g\"): NodeListOf<SVGGElement>;\r\n    getElementsByTagName(name: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(name: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(name: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(name: \"i\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(name: \"image\"): NodeListOf<SVGImageElement>;\r\n    getElementsByTagName(name: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(name: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(name: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\r\n    getElementsByTagName(name: \"kbd\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"keygen\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(name: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(name: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(name: \"line\"): NodeListOf<SVGLineElement>;\r\n    getElementsByTagName(name: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\r\n    getElementsByTagName(name: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(name: \"listing\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(name: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"marker\"): NodeListOf<SVGMarkerElement>;\r\n    getElementsByTagName(name: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(name: \"mask\"): NodeListOf<SVGMaskElement>;\r\n    getElementsByTagName(name: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(name: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(name: \"metadata\"): NodeListOf<SVGMetadataElement>;\r\n    getElementsByTagName(name: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"nextid\"): NodeListOf<HTMLNextIdElement>;\r\n    getElementsByTagName(name: \"nobr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(name: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(name: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(name: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(name: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(name: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(name: \"path\"): NodeListOf<SVGPathElement>;\r\n    getElementsByTagName(name: \"pattern\"): NodeListOf<SVGPatternElement>;\r\n    getElementsByTagName(name: \"plaintext\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"polygon\"): NodeListOf<SVGPolygonElement>;\r\n    getElementsByTagName(name: \"polyline\"): NodeListOf<SVGPolylineElement>;\r\n    getElementsByTagName(name: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(name: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\r\n    getElementsByTagName(name: \"rect\"): NodeListOf<SVGRectElement>;\r\n    getElementsByTagName(name: \"rt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ruby\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"s\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"samp\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(name: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(name: \"small\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"source\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(name: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(name: \"stop\"): NodeListOf<SVGStopElement>;\r\n    getElementsByTagName(name: \"strike\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"strong\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(name: \"sub\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"sup\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"svg\"): NodeListOf<SVGSVGElement>;\r\n    getElementsByTagName(name: \"switch\"): NodeListOf<SVGSwitchElement>;\r\n    getElementsByTagName(name: \"symbol\"): NodeListOf<SVGSymbolElement>;\r\n    getElementsByTagName(name: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(name: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(name: \"text\"): NodeListOf<SVGTextElement>;\r\n    getElementsByTagName(name: \"textpath\"): NodeListOf<SVGTextPathElement>;\r\n    getElementsByTagName(name: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(name: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(name: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(name: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(name: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(name: \"tspan\"): NodeListOf<SVGTSpanElement>;\r\n    getElementsByTagName(name: \"tt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"u\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(name: \"use\"): NodeListOf<SVGUseElement>;\r\n    getElementsByTagName(name: \"var\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(name: \"view\"): NodeListOf<SVGViewElement>;\r\n    getElementsByTagName(name: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(name: \"xmp\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: string): NodeList;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    hasAttribute(name: string): boolean;\r\n    hasAttributeNS(namespaceURI: string, localName: string): boolean;\r\n    msGetRegionContent(): MSRangeCollection;\r\n    msGetUntransformedBounds(): ClientRect;\r\n    msMatchesSelector(selectors: string): boolean;\r\n    msReleasePointerCapture(pointerId: number): void;\r\n    msSetPointerCapture(pointerId: number): void;\r\n    msZoomTo(args: MsZoomToOptions): void;\r\n    releasePointerCapture(pointerId: number): void;\r\n    removeAttribute(name?: string): void;\r\n    removeAttributeNS(namespaceURI: string, localName: string): void;\r\n    removeAttributeNode(oldAttr: Attr): Attr;\r\n    requestFullscreen(): void;\r\n    requestPointerLock(): void;\r\n    setAttribute(name?: string, value?: string): void;\r\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\r\n    setAttributeNode(newAttr: Attr): Attr;\r\n    setAttributeNodeNS(newAttr: Attr): Attr;\r\n    setPointerCapture(pointerId: number): void;\r\n    webkitMatchesSelector(selectors: string): boolean;\r\n    webkitRequestFullScreen(): void;\r\n    webkitRequestFullscreen(): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Element: {\r\n    prototype: Element;\r\n    new(): Element;\r\n}\r\n\r\ninterface ErrorEvent extends Event {\r\n    colno: number;\r\n    error: any;\r\n    filename: string;\r\n    lineno: number;\r\n    message: string;\r\n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\r\n}\r\n\r\ndeclare var ErrorEvent: {\r\n    prototype: ErrorEvent;\r\n    new(): ErrorEvent;\r\n}\r\n\r\ninterface Event {\r\n    bubbles: boolean;\r\n    cancelBubble: boolean;\r\n    cancelable: boolean;\r\n    currentTarget: EventTarget;\r\n    defaultPrevented: boolean;\r\n    eventPhase: number;\r\n    isTrusted: boolean;\r\n    returnValue: boolean;\r\n    srcElement: Element;\r\n    target: EventTarget;\r\n    timeStamp: number;\r\n    type: string;\r\n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\r\n    preventDefault(): void;\r\n    stopImmediatePropagation(): void;\r\n    stopPropagation(): void;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n    CAPTURING_PHASE: number;\r\n}\r\n\r\ndeclare var Event: {\r\n    prototype: Event;\r\n    new(type: string, eventInitDict?: EventInit): Event;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n    CAPTURING_PHASE: number;\r\n}\r\n\r\ninterface EventTarget {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    dispatchEvent(evt: Event): boolean;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var EventTarget: {\r\n    prototype: EventTarget;\r\n    new(): EventTarget;\r\n}\r\n\r\ninterface External {\r\n}\r\n\r\ndeclare var External: {\r\n    prototype: External;\r\n    new(): External;\r\n}\r\n\r\ninterface File extends Blob {\r\n    lastModifiedDate: any;\r\n    name: string;\r\n}\r\n\r\ndeclare var File: {\r\n    prototype: File;\r\n    new(): File;\r\n}\r\n\r\ninterface FileList {\r\n    length: number;\r\n    item(index: number): File;\r\n    [index: number]: File;\r\n}\r\n\r\ndeclare var FileList: {\r\n    prototype: FileList;\r\n    new(): FileList;\r\n}\r\n\r\ninterface FileReader extends EventTarget, MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(blob: Blob): void;\r\n    readAsBinaryString(blob: Blob): void;\r\n    readAsDataURL(blob: Blob): void;\r\n    readAsText(blob: Blob, encoding?: string): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var FileReader: {\r\n    prototype: FileReader;\r\n    new(): FileReader;\r\n}\r\n\r\ninterface FocusEvent extends UIEvent {\r\n    relatedTarget: EventTarget;\r\n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\n\r\ndeclare var FocusEvent: {\r\n    prototype: FocusEvent;\r\n    new(typeArg: string, eventInitDict?: FocusEventInit): FocusEvent;\r\n}\r\n\r\ninterface FormData {\r\n    append(name: any, value: any, blobName?: string): void;\r\n}\r\n\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new(): FormData;\r\n}\r\n\r\ninterface GainNode extends AudioNode {\r\n    gain: AudioParam;\r\n}\r\n\r\ndeclare var GainNode: {\r\n    prototype: GainNode;\r\n    new(): GainNode;\r\n}\r\n\r\ninterface Gamepad {\r\n    axes: number[];\r\n    buttons: GamepadButton[];\r\n    connected: boolean;\r\n    id: string;\r\n    index: number;\r\n    mapping: string;\r\n    timestamp: number;\r\n}\r\n\r\ndeclare var Gamepad: {\r\n    prototype: Gamepad;\r\n    new(): Gamepad;\r\n}\r\n\r\ninterface GamepadButton {\r\n    pressed: boolean;\r\n    value: number;\r\n}\r\n\r\ndeclare var GamepadButton: {\r\n    prototype: GamepadButton;\r\n    new(): GamepadButton;\r\n}\r\n\r\ninterface GamepadEvent extends Event {\r\n    gamepad: Gamepad;\r\n}\r\n\r\ndeclare var GamepadEvent: {\r\n    prototype: GamepadEvent;\r\n    new(): GamepadEvent;\r\n}\r\n\r\ninterface Geolocation {\r\n    clearWatch(watchId: number): void;\r\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\r\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\r\n}\r\n\r\ndeclare var Geolocation: {\r\n    prototype: Geolocation;\r\n    new(): Geolocation;\r\n}\r\n\r\ninterface HTMLAllCollection extends HTMLCollection {\r\n    namedItem(name: string): Element;\r\n}\r\n\r\ndeclare var HTMLAllCollection: {\r\n    prototype: HTMLAllCollection;\r\n    new(): HTMLAllCollection;\r\n}\r\n\r\ninterface HTMLAnchorElement extends HTMLElement {\r\n    Methods: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Contains the anchor portion of the URL including the hash sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Contains the hostname and port values of the URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Contains the hostname of a URL.\r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    mimeType: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    nameProp: string;\r\n    /**\r\n      * Contains the pathname of the URL.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Contains the protocol of the URL.\r\n      */\r\n    protocol: string;\r\n    protocolLong: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    type: string;\r\n    urn: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\n\r\ndeclare var HTMLAnchorElement: {\r\n    prototype: HTMLAnchorElement;\r\n    new(): HTMLAnchorElement;\r\n}\r\n\r\ninterface HTMLAppletElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    border: string;\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\r\n      */\r\n    declare: boolean;\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    object: string;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    vspace: number;\r\n    width: number;\r\n}\r\n\r\ndeclare var HTMLAppletElement: {\r\n    prototype: HTMLAppletElement;\r\n    new(): HTMLAppletElement;\r\n}\r\n\r\ninterface HTMLAreaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Sets or retrieves the subsection of the href property that follows the number sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Sets or retrieves the hostname and port number of the location or URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Sets or retrieves the host name part of the location or URL. \r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or gets whether clicks in this region cause action.\r\n      */\r\n    noHref: boolean;\r\n    /**\r\n      * Sets or retrieves the file name or path specified by the object.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Sets or retrieves the protocol portion of a URL.\r\n      */\r\n    protocol: string;\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\n\r\ndeclare var HTMLAreaElement: {\r\n    prototype: HTMLAreaElement;\r\n    new(): HTMLAreaElement;\r\n}\r\n\r\ninterface HTMLAreasCollection extends HTMLCollection {\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      */\r\n    add(element: HTMLElement, before?: HTMLElement): void;\r\n    add(element: HTMLElement, before?: number): void;\r\n    /**\r\n      * Removes an element from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n}\r\n\r\ndeclare var HTMLAreasCollection: {\r\n    prototype: HTMLAreasCollection;\r\n    new(): HTMLAreasCollection;\r\n}\r\n\r\ninterface HTMLAudioElement extends HTMLMediaElement {\r\n}\r\n\r\ndeclare var HTMLAudioElement: {\r\n    prototype: HTMLAudioElement;\r\n    new(): HTMLAudioElement;\r\n}\r\n\r\ninterface HTMLBRElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\r\n      */\r\n    clear: string;\r\n}\r\n\r\ndeclare var HTMLBRElement: {\r\n    prototype: HTMLBRElement;\r\n    new(): HTMLBRElement;\r\n}\r\n\r\ninterface HTMLBaseElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the baseline URL on which relative links are based.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n}\r\n\r\ndeclare var HTMLBaseElement: {\r\n    prototype: HTMLBaseElement;\r\n    new(): HTMLBaseElement;\r\n}\r\n\r\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    /**\r\n      * Sets or retrieves the font size of the object.\r\n      */\r\n    size: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLBaseFontElement: {\r\n    prototype: HTMLBaseFontElement;\r\n    new(): HTMLBaseFontElement;\r\n}\r\n\r\ninterface HTMLBlockElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n    clear: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n}\r\n\r\ndeclare var HTMLBlockElement: {\r\n    prototype: HTMLBlockElement;\r\n    new(): HTMLBlockElement;\r\n}\r\n\r\ninterface HTMLBodyElement extends HTMLElement {\r\n    aLink: any;\r\n    background: string;\r\n    bgColor: any;\r\n    bgProperties: string;\r\n    link: any;\r\n    noWrap: boolean;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    text: any;\r\n    vLink: any;\r\n    createTextRange(): TextRange;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLBodyElement: {\r\n    prototype: HTMLBodyElement;\r\n    new(): HTMLBodyElement;\r\n}\r\n\r\ninterface HTMLButtonElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /** \r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    status: any;\r\n    /**\r\n      * Gets the classification and default behavior of the button.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /** \r\n      * Sets or retrieves the default or selected value of the control.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ndeclare var HTMLButtonElement: {\r\n    prototype: HTMLButtonElement;\r\n    new(): HTMLButtonElement;\r\n}\r\n\r\ninterface HTMLCanvasElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the height of a canvas element on a document.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Gets or sets the width of a canvas element on a document.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\r\n      */\r\n    getContext(contextId: \"2d\"): CanvasRenderingContext2D;\r\n    getContext(contextId: \"experimental-webgl\"): WebGLRenderingContext;\r\n    getContext(contextId: string, ...args: any[]): CanvasRenderingContext2D | WebGLRenderingContext;\r\n    /**\r\n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.\r\n      */\r\n    msToBlob(): Blob;\r\n    /**\r\n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\r\n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\r\n      */\r\n    toDataURL(type?: string, ...args: any[]): string;\r\n}\r\n\r\ndeclare var HTMLCanvasElement: {\r\n    prototype: HTMLCanvasElement;\r\n    new(): HTMLCanvasElement;\r\n}\r\n\r\ninterface HTMLCollection {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Retrieves an object from various collections.\r\n      */\r\n    item(nameOrIndex?: any, optionalIndex?: any): Element;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      */\r\n    namedItem(name: string): Element;\r\n    [index: number]: Element;\r\n}\r\n\r\ndeclare var HTMLCollection: {\r\n    prototype: HTMLCollection;\r\n    new(): HTMLCollection;\r\n}\r\n\r\ninterface HTMLDDElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\n\r\ndeclare var HTMLDDElement: {\r\n    prototype: HTMLDDElement;\r\n    new(): HTMLDDElement;\r\n}\r\n\r\ninterface HTMLDListElement extends HTMLElement {\r\n    compact: boolean;\r\n}\r\n\r\ndeclare var HTMLDListElement: {\r\n    prototype: HTMLDListElement;\r\n    new(): HTMLDListElement;\r\n}\r\n\r\ninterface HTMLDTElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\n\r\ndeclare var HTMLDTElement: {\r\n    prototype: HTMLDTElement;\r\n    new(): HTMLDTElement;\r\n}\r\n\r\ninterface HTMLDataListElement extends HTMLElement {\r\n    options: HTMLCollection;\r\n}\r\n\r\ndeclare var HTMLDataListElement: {\r\n    prototype: HTMLDataListElement;\r\n    new(): HTMLDataListElement;\r\n}\r\n\r\ninterface HTMLDirectoryElement extends HTMLElement {\r\n    compact: boolean;\r\n}\r\n\r\ndeclare var HTMLDirectoryElement: {\r\n    prototype: HTMLDirectoryElement;\r\n    new(): HTMLDirectoryElement;\r\n}\r\n\r\ninterface HTMLDivElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\n\r\ndeclare var HTMLDivElement: {\r\n    prototype: HTMLDivElement;\r\n    new(): HTMLDivElement;\r\n}\r\n\r\ninterface HTMLDocument extends Document {\r\n}\r\n\r\ndeclare var HTMLDocument: {\r\n    prototype: HTMLDocument;\r\n    new(): HTMLDocument;\r\n}\r\n\r\ninterface HTMLElement extends Element {\r\n    accessKey: string;\r\n    children: HTMLCollection;\r\n    className: string;\r\n    contentEditable: string;\r\n    dataset: DOMStringMap;\r\n    dir: string;\r\n    draggable: boolean;\r\n    hidden: boolean;\r\n    hideFocus: boolean;\r\n    id: string;\r\n    innerHTML: string;\r\n    innerText: string;\r\n    isContentEditable: boolean;\r\n    lang: string;\r\n    offsetHeight: number;\r\n    offsetLeft: number;\r\n    offsetParent: Element;\r\n    offsetTop: number;\r\n    offsetWidth: number;\r\n    onabort: (ev: Event) => any;\r\n    onactivate: (ev: UIEvent) => any;\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    onbeforecopy: (ev: DragEvent) => any;\r\n    onbeforecut: (ev: DragEvent) => any;\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    onbeforepaste: (ev: DragEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onchange: (ev: Event) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    oncopy: (ev: DragEvent) => any;\r\n    oncuechange: (ev: Event) => any;\r\n    oncut: (ev: DragEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    ondragend: (ev: DragEvent) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    ondurationchange: (ev: Event) => any;\r\n    onemptied: (ev: Event) => any;\r\n    onended: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    oninput: (ev: Event) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadeddata: (ev: Event) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    onmscontentzoom: (ev: UIEvent) => any;\r\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\r\n    onpaste: (ev: DragEvent) => any;\r\n    onpause: (ev: Event) => any;\r\n    onplay: (ev: Event) => any;\r\n    onplaying: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onratechange: (ev: Event) => any;\r\n    onreset: (ev: Event) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    onstalled: (ev: Event) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    onwaiting: (ev: Event) => any;\r\n    outerHTML: string;\r\n    outerText: string;\r\n    spellcheck: boolean;\r\n    style: CSSStyleDeclaration;\r\n    tabIndex: number;\r\n    title: string;\r\n    blur(): void;\r\n    click(): void;\r\n    contains(child: HTMLElement): boolean;\r\n    dragDrop(): boolean;\r\n    focus(): void;\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\r\n    insertAdjacentHTML(where: string, html: string): void;\r\n    insertAdjacentText(where: string, text: string): void;\r\n    msGetInputContext(): MSInputMethodContext;\r\n    scrollIntoView(top?: boolean): void;\r\n    setActive(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLElement: {\r\n    prototype: HTMLElement;\r\n    new(): HTMLElement;\r\n}\r\n\r\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hidden: any;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves the palette used for the embedded document.\r\n      */\r\n    palette: string;\r\n    /**\r\n      * Retrieves the URL of the plug-in used to view an embedded document.\r\n      */\r\n    pluginspage: string;\r\n    readyState: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the height and width units of the embed object.\r\n      */\r\n    units: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLEmbedElement: {\r\n    prototype: HTMLEmbedElement;\r\n    new(): HTMLEmbedElement;\r\n}\r\n\r\ninterface HTMLFieldSetElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ndeclare var HTMLFieldSetElement: {\r\n    prototype: HTMLFieldSetElement;\r\n    new(): HTMLFieldSetElement;\r\n}\r\n\r\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFontElement: {\r\n    prototype: HTMLFontElement;\r\n    new(): HTMLFontElement;\r\n}\r\n\r\ninterface HTMLFormElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\r\n      */\r\n    acceptCharset: string;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all controls in a given form.\r\n      */\r\n    elements: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the MIME encoding for the form.\r\n      */\r\n    encoding: string;\r\n    /**\r\n      * Sets or retrieves the encoding type for the form.\r\n      */\r\n    enctype: string;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves how to send the form data to the server.\r\n      */\r\n    method: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Designates a form that is not validated when submitted.\r\n      */\r\n    noValidate: boolean;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      */\r\n    namedItem(name: string): any;\r\n    /**\r\n      * Fires when the user resets a form.\r\n      */\r\n    reset(): void;\r\n    /**\r\n      * Fires when a FORM is about to be submitted.\r\n      */\r\n    submit(): void;\r\n    [name: string]: any;\r\n}\r\n\r\ndeclare var HTMLFormElement: {\r\n    prototype: HTMLFormElement;\r\n    new(): HTMLFormElement;\r\n}\r\n\r\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string | number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string | number;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFrameElement: {\r\n    prototype: HTMLFrameElement;\r\n    new(): HTMLFrameElement;\r\n}\r\n\r\ninterface HTMLFrameSetElement extends HTMLElement {\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the frame widths of the object.\r\n      */\r\n    cols: string;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    /**\r\n      * Fires when the object loses the input focus.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object receives focus.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    /**\r\n      * Sets or retrieves the frame heights of the object.\r\n      */\r\n    rows: string;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFrameSetElement: {\r\n    prototype: HTMLFrameSetElement;\r\n    new(): HTMLFrameSetElement;\r\n}\r\n\r\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\r\n      */\r\n    noShade: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLHRElement: {\r\n    prototype: HTMLHRElement;\r\n    new(): HTMLHRElement;\r\n}\r\n\r\ninterface HTMLHeadElement extends HTMLElement {\r\n    profile: string;\r\n}\r\n\r\ndeclare var HTMLHeadElement: {\r\n    prototype: HTMLHeadElement;\r\n    new(): HTMLHeadElement;\r\n}\r\n\r\ninterface HTMLHeadingElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    clear: string;\r\n}\r\n\r\ndeclare var HTMLHeadingElement: {\r\n    prototype: HTMLHeadingElement;\r\n    new(): HTMLHeadingElement;\r\n}\r\n\r\ninterface HTMLHtmlElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the DTD version that governs the current document.\r\n      */\r\n    version: string;\r\n}\r\n\r\ndeclare var HTMLHtmlElement: {\r\n    prototype: HTMLHtmlElement;\r\n    new(): HTMLHtmlElement;\r\n}\r\n\r\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    allowFullscreen: boolean;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the horizontal margin for the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    sandbox: DOMSettableTokenList;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLIFrameElement: {\r\n    prototype: HTMLIFrameElement;\r\n    new(): HTMLIFrameElement;\r\n}\r\n\r\ninterface HTMLImageElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    crossOrigin: string;\r\n    currentSrc: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves whether the image is a server-side image map.\r\n      */\r\n    isMap: boolean;\r\n    /**\r\n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * The original height of the image resource before sizing.\r\n      */\r\n    naturalHeight: number;\r\n    /**\r\n      * The original width of the image resource before sizing.\r\n      */\r\n    naturalWidth: number;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    srcset: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    x: number;\r\n    y: number;\r\n    msGetAsCastingSource(): any;\r\n}\r\n\r\ndeclare var HTMLImageElement: {\r\n    prototype: HTMLImageElement;\r\n    new(): HTMLImageElement;\r\n    create(): HTMLImageElement;\r\n}\r\n\r\ninterface HTMLInputElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a comma-separated list of content types.\r\n      */\r\n    accept: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    checked: boolean;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    defaultChecked: boolean;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Returns a FileList object on a file type input object.\r\n      */\r\n    files: FileList;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    indeterminate: boolean;\r\n    /**\r\n      * Specifies the ID of a pre-defined datalist of options for an input element.\r\n      */\r\n    list: HTMLElement;\r\n    /**\r\n      * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\r\n      */\r\n    max: string;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\r\n      */\r\n    min: string;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets a string containing a regular expression that the user's input must match.\r\n      */\r\n    pattern: string;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    readOnly: boolean;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    size: number;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    status: boolean;\r\n    /**\r\n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\r\n      */\r\n    step: string;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns the value of the data at the cursor's current position.\r\n      */\r\n    value: string;\r\n    valueAsDate: Date;\r\n    /**\r\n      * Returns the input field value as a number.\r\n      */\r\n    valueAsNumber: number;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Makes the selection equal to the current object.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n    /**\r\n      * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\r\n      * @param n Value to decrement the value by.\r\n      */\r\n    stepDown(n?: number): void;\r\n    /**\r\n      * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\r\n      * @param n Value to increment the value by.\r\n      */\r\n    stepUp(n?: number): void;\r\n}\r\n\r\ndeclare var HTMLInputElement: {\r\n    prototype: HTMLInputElement;\r\n    new(): HTMLInputElement;\r\n}\r\n\r\ninterface HTMLIsIndexElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    prompt: string;\r\n}\r\n\r\ndeclare var HTMLIsIndexElement: {\r\n    prototype: HTMLIsIndexElement;\r\n    new(): HTMLIsIndexElement;\r\n}\r\n\r\ninterface HTMLLIElement extends HTMLElement {\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the value of a list item.\r\n      */\r\n    value: number;\r\n}\r\n\r\ndeclare var HTMLLIElement: {\r\n    prototype: HTMLLIElement;\r\n    new(): HTMLLIElement;\r\n}\r\n\r\ninterface HTMLLabelElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the object to which the given label object is assigned.\r\n      */\r\n    htmlFor: string;\r\n}\r\n\r\ndeclare var HTMLLabelElement: {\r\n    prototype: HTMLLabelElement;\r\n    new(): HTMLLabelElement;\r\n}\r\n\r\ninterface HTMLLegendElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\n\r\ndeclare var HTMLLegendElement: {\r\n    prototype: HTMLLegendElement;\r\n    new(): HTMLLegendElement;\r\n}\r\n\r\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLLinkElement: {\r\n    prototype: HTMLLinkElement;\r\n    new(): HTMLLinkElement;\r\n}\r\n\r\ninterface HTMLMapElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a collection of the area objects defined for the given map object.\r\n      */\r\n    areas: HTMLAreasCollection;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n}\r\n\r\ndeclare var HTMLMapElement: {\r\n    prototype: HTMLMapElement;\r\n    new(): HTMLMapElement;\r\n}\r\n\r\ninterface HTMLMarqueeElement extends HTMLElement {\r\n    behavior: string;\r\n    bgColor: any;\r\n    direction: string;\r\n    height: string;\r\n    hspace: number;\r\n    loop: number;\r\n    onbounce: (ev: Event) => any;\r\n    onfinish: (ev: Event) => any;\r\n    onstart: (ev: Event) => any;\r\n    scrollAmount: number;\r\n    scrollDelay: number;\r\n    trueSpeed: boolean;\r\n    vspace: number;\r\n    width: string;\r\n    start(): void;\r\n    stop(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"bounce\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"finish\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"start\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLMarqueeElement: {\r\n    prototype: HTMLMarqueeElement;\r\n    new(): HTMLMarqueeElement;\r\n}\r\n\r\ninterface HTMLMediaElement extends HTMLElement {\r\n    /**\r\n      * Returns an AudioTrackList object with the audio tracks for a given video element.\r\n      */\r\n    audioTracks: AudioTrackList;\r\n    /**\r\n      * Gets or sets a value that indicates whether to start playing the media automatically.\r\n      */\r\n    autoplay: boolean;\r\n    /**\r\n      * Gets a collection of buffered time ranges.\r\n      */\r\n    buffered: TimeRanges;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\r\n      */\r\n    controls: boolean;\r\n    /**\r\n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\r\n      */\r\n    currentSrc: string;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    currentTime: number;\r\n    defaultMuted: boolean;\r\n    /**\r\n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\r\n      */\r\n    defaultPlaybackRate: number;\r\n    /**\r\n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\r\n      */\r\n    duration: number;\r\n    /**\r\n      * Gets information about whether the playback has ended or not.\r\n      */\r\n    ended: boolean;\r\n    /**\r\n      * Returns an object representing the current error state of the audio or video element.\r\n      */\r\n    error: MediaError;\r\n    /**\r\n      * Gets or sets a flag to specify whether playback should restart after it completes.\r\n      */\r\n    loop: boolean;\r\n    /**\r\n      * Specifies the purpose of the audio or video media, such as background audio or alerts.\r\n      */\r\n    msAudioCategory: string;\r\n    /**\r\n      * Specifies the output device id that the audio will be sent to.\r\n      */\r\n    msAudioDeviceType: string;\r\n    msGraphicsTrustStatus: MSGraphicsTrust;\r\n    /**\r\n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\r\n      */\r\n    msKeys: MSMediaKeys;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Specifies whether or not to enable low-latency playback on the media element.\r\n      */\r\n    msRealTime: boolean;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\r\n      */\r\n    muted: boolean;\r\n    /**\r\n      * Gets the current network activity for the element.\r\n      */\r\n    networkState: number;\r\n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any;\r\n    /**\r\n      * Gets a flag that specifies whether playback is paused.\r\n      */\r\n    paused: boolean;\r\n    /**\r\n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\r\n      */\r\n    playbackRate: number;\r\n    /**\r\n      * Gets TimeRanges for the current media resource that has been played.\r\n      */\r\n    played: TimeRanges;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    preload: string;\r\n    readyState: any;\r\n    /**\r\n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\r\n      */\r\n    seekable: TimeRanges;\r\n    /**\r\n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\r\n      */\r\n    seeking: boolean;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    textTracks: TextTrackList;\r\n    videoTracks: VideoTrackList;\r\n    /**\r\n      * Gets or sets the volume level for audio portions of the media element.\r\n      */\r\n    volume: number;\r\n    addTextTrack(kind: string, label?: string, language?: string): TextTrack;\r\n    /**\r\n      * Returns a string that specifies whether the client can play a given media resource type.\r\n      */\r\n    canPlayType(type: string): string;\r\n    /**\r\n      * Fires immediately after the client loads the object.\r\n      */\r\n    load(): void;\r\n    /**\r\n      * Clears all effects from the media pipeline.\r\n      */\r\n    msClearEffects(): void;\r\n    msGetAsCastingSource(): any;\r\n    /**\r\n      * Inserts the specified audio effect into media pipeline.\r\n      */\r\n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetMediaKeys(mediaKeys: MSMediaKeys): void;\r\n    /**\r\n      * Specifies the media protection manager for a given media pipeline.\r\n      */\r\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\r\n    /**\r\n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\r\n      */\r\n    pause(): void;\r\n    /**\r\n      * Loads and starts playback of a media resource.\r\n      */\r\n    play(): void;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    HAVE_FUTURE_DATA: number;\r\n    HAVE_METADATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_IDLE: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLMediaElement: {\r\n    prototype: HTMLMediaElement;\r\n    new(): HTMLMediaElement;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    HAVE_FUTURE_DATA: number;\r\n    HAVE_METADATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_IDLE: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n}\r\n\r\ninterface HTMLMenuElement extends HTMLElement {\r\n    compact: boolean;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLMenuElement: {\r\n    prototype: HTMLMenuElement;\r\n    new(): HTMLMenuElement;\r\n}\r\n\r\ninterface HTMLMetaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Gets or sets meta-information to associate with httpEquiv or name.\r\n      */\r\n    content: string;\r\n    /**\r\n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\r\n      */\r\n    httpEquiv: string;\r\n    /**\r\n      * Sets or retrieves the value specified in the content attribute of the meta object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\r\n      */\r\n    scheme: string;\r\n    /**\r\n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed. \r\n      */\r\n    url: string;\r\n}\r\n\r\ndeclare var HTMLMetaElement: {\r\n    prototype: HTMLMetaElement;\r\n    new(): HTMLMetaElement;\r\n}\r\n\r\ninterface HTMLModElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n}\r\n\r\ndeclare var HTMLModElement: {\r\n    prototype: HTMLModElement;\r\n    new(): HTMLModElement;\r\n}\r\n\r\ninterface HTMLNextIdElement extends HTMLElement {\r\n    n: string;\r\n}\r\n\r\ndeclare var HTMLNextIdElement: {\r\n    prototype: HTMLNextIdElement;\r\n    new(): HTMLNextIdElement;\r\n}\r\n\r\ninterface HTMLOListElement extends HTMLElement {\r\n    compact: boolean;\r\n    /**\r\n      * The starting number.\r\n      */\r\n    start: number;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLOListElement: {\r\n    prototype: HTMLOListElement;\r\n    new(): HTMLOListElement;\r\n}\r\n\r\ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the URL of the file containing the compiled Java class.\r\n      */\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    declare: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hspace: number;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves the contained object.\r\n      */\r\n    object: any;\r\n    readyState: number;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLObjectElement: {\r\n    prototype: HTMLObjectElement;\r\n    new(): HTMLObjectElement;\r\n}\r\n\r\ninterface HTMLOptGroupElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n}\r\n\r\ndeclare var HTMLOptGroupElement: {\r\n    prototype: HTMLOptGroupElement;\r\n    new(): HTMLOptGroupElement;\r\n}\r\n\r\ninterface HTMLOptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n}\r\n\r\ndeclare var HTMLOptionElement: {\r\n    prototype: HTMLOptionElement;\r\n    new(): HTMLOptionElement;\r\n    create(): HTMLOptionElement;\r\n}\r\n\r\ninterface HTMLParagraphElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    clear: string;\r\n}\r\n\r\ndeclare var HTMLParagraphElement: {\r\n    prototype: HTMLParagraphElement;\r\n    new(): HTMLParagraphElement;\r\n}\r\n\r\ninterface HTMLParamElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the name of an input parameter for an element.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the content type of the resource designated by the value attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the value of an input parameter for an element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the data type of the value attribute.\r\n      */\r\n    valueType: string;\r\n}\r\n\r\ndeclare var HTMLParamElement: {\r\n    prototype: HTMLParamElement;\r\n    new(): HTMLParamElement;\r\n}\r\n\r\ninterface HTMLPhraseElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n}\r\n\r\ndeclare var HTMLPhraseElement: {\r\n    prototype: HTMLPhraseElement;\r\n    new(): HTMLPhraseElement;\r\n}\r\n\r\ninterface HTMLPreElement extends HTMLElement {\r\n    /**\r\n      * Indicates a citation by rendering text in italic type.\r\n      */\r\n    cite: string;\r\n    clear: string;\r\n    /**\r\n      * Sets or gets a value that you can use to implement your own width functionality for the object.\r\n      */\r\n    width: number;\r\n}\r\n\r\ndeclare var HTMLPreElement: {\r\n    prototype: HTMLPreElement;\r\n    new(): HTMLPreElement;\r\n}\r\n\r\ninterface HTMLProgressElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Defines the maximum, or \"done\" value for a progress element.\r\n      */\r\n    max: number;\r\n    /**\r\n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\r\n      */\r\n    position: number;\r\n    /**\r\n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\r\n      */\r\n    value: number;\r\n}\r\n\r\ndeclare var HTMLProgressElement: {\r\n    prototype: HTMLProgressElement;\r\n    new(): HTMLProgressElement;\r\n}\r\n\r\ninterface HTMLQuoteElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n}\r\n\r\ndeclare var HTMLQuoteElement: {\r\n    prototype: HTMLQuoteElement;\r\n    new(): HTMLQuoteElement;\r\n}\r\n\r\ninterface HTMLScriptElement extends HTMLElement {\r\n    async: boolean;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the status of the script.\r\n      */\r\n    defer: boolean;\r\n    /**\r\n      * Sets or retrieves the event for which the script is written. \r\n      */\r\n    event: string;\r\n    /** \r\n      * Sets or retrieves the object that is bound to the event script.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Retrieves the URL to an external file that contains the source code or data.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the MIME type for the associated scripting engine.\r\n      */\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLScriptElement: {\r\n    prototype: HTMLScriptElement;\r\n    new(): HTMLScriptElement;\r\n}\r\n\r\ninterface HTMLSelectElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    options: HTMLSelectElement;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the index of the selected option in a select object.\r\n      */\r\n    selectedIndex: number;\r\n    /**\r\n      * Sets or retrieves the number of rows in the list box. \r\n      */\r\n    size: number;\r\n    /**\r\n      * Retrieves the type of select control based on the value of the MULTIPLE attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\r\n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection. \r\n      */\r\n    add(element: HTMLElement, before?: HTMLElement): void;\r\n    add(element: HTMLElement, before?: number): void;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\r\n      */\r\n    namedItem(name: string): any;\r\n    /**\r\n      * Removes an element from the collection.\r\n      * @param index Number that specifies the zero-based index of the element to remove from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    [name: string]: any;\r\n}\r\n\r\ndeclare var HTMLSelectElement: {\r\n    prototype: HTMLSelectElement;\r\n    new(): HTMLSelectElement;\r\n}\r\n\r\ninterface HTMLSourceElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the intended media type of the media source.\r\n     */\r\n    media: string;\r\n    msKeySystem: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n     * Gets or sets the MIME type of a media resource.\r\n     */\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLSourceElement: {\r\n    prototype: HTMLSourceElement;\r\n    new(): HTMLSourceElement;\r\n}\r\n\r\ninterface HTMLSpanElement extends HTMLElement {\r\n}\r\n\r\ndeclare var HTMLSpanElement: {\r\n    prototype: HTMLSpanElement;\r\n    new(): HTMLSpanElement;\r\n}\r\n\r\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Retrieves the CSS language in which the style sheet is written.\r\n      */\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLStyleElement: {\r\n    prototype: HTMLStyleElement;\r\n    new(): HTMLStyleElement;\r\n}\r\n\r\ninterface HTMLTableCaptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the alignment of the caption or legend.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the caption appears at the top or bottom of the table.\r\n      */\r\n    vAlign: string;\r\n}\r\n\r\ndeclare var HTMLTableCaptionElement: {\r\n    prototype: HTMLTableCaptionElement;\r\n    new(): HTMLTableCaptionElement;\r\n}\r\n\r\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves abbreviated text for the object.\r\n      */\r\n    abbr: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\r\n      */\r\n    axis: string;\r\n    bgColor: any;\r\n    /**\r\n      * Retrieves the position of the object in the cells collection of a row.\r\n      */\r\n    cellIndex: number;\r\n    /**\r\n      * Sets or retrieves the number columns in the table that the object should span.\r\n      */\r\n    colSpan: number;\r\n    /**\r\n      * Sets or retrieves a list of header cells that provide information for the object.\r\n      */\r\n    headers: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n    /**\r\n      * Sets or retrieves how many rows in a table the cell should span.\r\n      */\r\n    rowSpan: number;\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableCellElement: {\r\n    prototype: HTMLTableCellElement;\r\n    new(): HTMLTableCellElement;\r\n}\r\n\r\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves the alignment of the object relative to the display or table.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the group.\r\n      */\r\n    span: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableColElement: {\r\n    prototype: HTMLTableColElement;\r\n    new(): HTMLTableColElement;\r\n}\r\n\r\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\r\n}\r\n\r\ndeclare var HTMLTableDataCellElement: {\r\n    prototype: HTMLTableDataCellElement;\r\n    new(): HTMLTableDataCellElement;\r\n}\r\n\r\ninterface HTMLTableElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    bgColor: any;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Retrieves the caption object of a table.\r\n      */\r\n    caption: HTMLTableCaptionElement;\r\n    /**\r\n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\r\n      */\r\n    cellPadding: string;\r\n    /**\r\n      * Sets or retrieves the amount of space between cells in a table.\r\n      */\r\n    cellSpacing: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the table.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the way the border frame around the table is displayed.\r\n      */\r\n    frame: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves which dividing lines (inner borders) are displayed.\r\n      */\r\n    rules: string;\r\n    /**\r\n      * Sets or retrieves a description and/or structure of the object.\r\n      */\r\n    summary: string;\r\n    /**\r\n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\r\n      */\r\n    tBodies: HTMLCollection;\r\n    /**\r\n      * Retrieves the tFoot object of the table.\r\n      */\r\n    tFoot: HTMLTableSectionElement;\r\n    /**\r\n      * Retrieves the tHead object of the table.\r\n      */\r\n    tHead: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Creates an empty caption element in the table.\r\n      */\r\n    createCaption(): HTMLElement;\r\n    /**\r\n      * Creates an empty tBody element in the table.\r\n      */\r\n    createTBody(): HTMLElement;\r\n    /**\r\n      * Creates an empty tFoot element in the table.\r\n      */\r\n    createTFoot(): HTMLElement;\r\n    /**\r\n      * Returns the tHead element object if successful, or null otherwise.\r\n      */\r\n    createTHead(): HTMLElement;\r\n    /**\r\n      * Deletes the caption element and its contents from the table.\r\n      */\r\n    deleteCaption(): void;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Deletes the tFoot element and its contents from the table.\r\n      */\r\n    deleteTFoot(): void;\r\n    /**\r\n      * Deletes the tHead element and its contents from the table.\r\n      */\r\n    deleteTHead(): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n}\r\n\r\ndeclare var HTMLTableElement: {\r\n    prototype: HTMLTableElement;\r\n    new(): HTMLTableElement;\r\n}\r\n\r\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n}\r\n\r\ndeclare var HTMLTableHeaderCellElement: {\r\n    prototype: HTMLTableHeaderCellElement;\r\n    new(): HTMLTableHeaderCellElement;\r\n}\r\n\r\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    bgColor: any;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row.\r\n      */\r\n    cells: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Retrieves the position of the object in the rows collection for the table.\r\n      */\r\n    rowIndex: number;\r\n    /**\r\n      * Retrieves the position of the object in the collection.\r\n      */\r\n    sectionRowIndex: number;\r\n    /**\r\n      * Removes the specified cell from the table row, as well as from the cells collection.\r\n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\r\n      */\r\n    deleteCell(index?: number): void;\r\n    /**\r\n      * Creates a new cell in the table row, and adds the cell to the cells collection.\r\n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\r\n      */\r\n    insertCell(index?: number): HTMLElement;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableRowElement: {\r\n    prototype: HTMLTableRowElement;\r\n    new(): HTMLTableRowElement;\r\n}\r\n\r\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableSectionElement: {\r\n    prototype: HTMLTableSectionElement;\r\n    new(): HTMLTableSectionElement;\r\n}\r\n\r\ninterface HTMLTextAreaElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Sets or retrieves the value indicated whether the content of the object is read-only.\r\n      */\r\n    readOnly: boolean;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: number;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    /**\r\n      * Sets or retrieves the value indicating whether the control is selected.\r\n      */\r\n    status: any;\r\n    /**\r\n      * Retrieves the type of control.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Retrieves or sets the text in the entry field of the textArea element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Sets or retrieves how to handle wordwrapping in the object.\r\n      */\r\n    wrap: string;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Highlights the input area of a form element.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n}\r\n\r\ndeclare var HTMLTextAreaElement: {\r\n    prototype: HTMLTextAreaElement;\r\n    new(): HTMLTextAreaElement;\r\n}\r\n\r\ninterface HTMLTitleElement extends HTMLElement {\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n}\r\n\r\ndeclare var HTMLTitleElement: {\r\n    prototype: HTMLTitleElement;\r\n    new(): HTMLTitleElement;\r\n}\r\n\r\ninterface HTMLTrackElement extends HTMLElement {\r\n    default: boolean;\r\n    kind: string;\r\n    label: string;\r\n    readyState: number;\r\n    src: string;\r\n    srclang: string;\r\n    track: TextTrack;\r\n    ERROR: number;\r\n    LOADED: number;\r\n    LOADING: number;\r\n    NONE: number;\r\n}\r\n\r\ndeclare var HTMLTrackElement: {\r\n    prototype: HTMLTrackElement;\r\n    new(): HTMLTrackElement;\r\n    ERROR: number;\r\n    LOADED: number;\r\n    LOADING: number;\r\n    NONE: number;\r\n}\r\n\r\ninterface HTMLUListElement extends HTMLElement {\r\n    compact: boolean;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLUListElement: {\r\n    prototype: HTMLUListElement;\r\n    new(): HTMLUListElement;\r\n}\r\n\r\ninterface HTMLUnknownElement extends HTMLElement {\r\n}\r\n\r\ndeclare var HTMLUnknownElement: {\r\n    prototype: HTMLUnknownElement;\r\n    new(): HTMLUnknownElement;\r\n}\r\n\r\ninterface HTMLVideoElement extends HTMLMediaElement {\r\n    /**\r\n      * Gets or sets the height of the video element.\r\n      */\r\n    height: number;\r\n    msHorizontalMirror: boolean;\r\n    msIsLayoutOptimalForPlayback: boolean;\r\n    msIsStereo3D: boolean;\r\n    msStereo3DPackingMode: string;\r\n    msStereo3DRenderMode: string;\r\n    msZoom: boolean;\r\n    onMSVideoFormatChanged: (ev: Event) => any;\r\n    onMSVideoFrameStepCompleted: (ev: Event) => any;\r\n    onMSVideoOptimalLayoutChanged: (ev: Event) => any;\r\n    /**\r\n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\r\n      */\r\n    poster: string;\r\n    /**\r\n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoHeight: number;\r\n    /**\r\n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoWidth: number;\r\n    webkitDisplayingFullscreen: boolean;\r\n    webkitSupportsFullscreen: boolean;\r\n    /**\r\n      * Gets or sets the width of the video element.\r\n      */\r\n    width: number;\r\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\r\n    msFrameStep(forward: boolean): void;\r\n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\r\n    webkitEnterFullScreen(): void;\r\n    webkitEnterFullscreen(): void;\r\n    webkitExitFullScreen(): void;\r\n    webkitExitFullscreen(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFormatChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFrameStepCompleted\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoOptimalLayoutChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLVideoElement: {\r\n    prototype: HTMLVideoElement;\r\n    new(): HTMLVideoElement;\r\n}\r\n\r\ninterface HashChangeEvent extends Event {\r\n    newURL: string;\r\n    oldURL: string;\r\n}\r\n\r\ndeclare var HashChangeEvent: {\r\n    prototype: HashChangeEvent;\r\n    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;\r\n}\r\n\r\ninterface History {\r\n    length: number;\r\n    state: any;\r\n    back(distance?: any): void;\r\n    forward(distance?: any): void;\r\n    go(delta?: any): void;\r\n    pushState(statedata: any, title?: string, url?: string): void;\r\n    replaceState(statedata: any, title?: string, url?: string): void;\r\n}\r\n\r\ndeclare var History: {\r\n    prototype: History;\r\n    new(): History;\r\n}\r\n\r\ninterface IDBCursor {\r\n    direction: string;\r\n    key: any;\r\n    primaryKey: any;\r\n    source: any;\r\n    advance(count: number): void;\r\n    continue(key?: any): void;\r\n    delete(): IDBRequest;\r\n    update(value: any): IDBRequest;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n}\r\n\r\ndeclare var IDBCursor: {\r\n    prototype: IDBCursor;\r\n    new(): IDBCursor;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n}\r\n\r\ninterface IDBCursorWithValue extends IDBCursor {\r\n    value: any;\r\n}\r\n\r\ndeclare var IDBCursorWithValue: {\r\n    prototype: IDBCursorWithValue;\r\n    new(): IDBCursorWithValue;\r\n}\r\n\r\ninterface IDBDatabase extends EventTarget {\r\n    name: string;\r\n    objectStoreNames: DOMStringList;\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    version: string;\r\n    close(): void;\r\n    createObjectStore(name: string, optionalParameters?: any): IDBObjectStore;\r\n    deleteObjectStore(name: string): void;\r\n    transaction(storeNames: any, mode?: string): IDBTransaction;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBDatabase: {\r\n    prototype: IDBDatabase;\r\n    new(): IDBDatabase;\r\n}\r\n\r\ninterface IDBFactory {\r\n    cmp(first: any, second: any): number;\r\n    deleteDatabase(name: string): IDBOpenDBRequest;\r\n    open(name: string, version?: number): IDBOpenDBRequest;\r\n}\r\n\r\ndeclare var IDBFactory: {\r\n    prototype: IDBFactory;\r\n    new(): IDBFactory;\r\n}\r\n\r\ninterface IDBIndex {\r\n    keyPath: string;\r\n    name: string;\r\n    objectStore: IDBObjectStore;\r\n    unique: boolean;\r\n    count(key?: any): IDBRequest;\r\n    get(key: any): IDBRequest;\r\n    getKey(key: any): IDBRequest;\r\n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n}\r\n\r\ndeclare var IDBIndex: {\r\n    prototype: IDBIndex;\r\n    new(): IDBIndex;\r\n}\r\n\r\ninterface IDBKeyRange {\r\n    lower: any;\r\n    lowerOpen: boolean;\r\n    upper: any;\r\n    upperOpen: boolean;\r\n}\r\n\r\ndeclare var IDBKeyRange: {\r\n    prototype: IDBKeyRange;\r\n    new(): IDBKeyRange;\r\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\r\n    lowerBound(bound: any, open?: boolean): IDBKeyRange;\r\n    only(value: any): IDBKeyRange;\r\n    upperBound(bound: any, open?: boolean): IDBKeyRange;\r\n}\r\n\r\ninterface IDBObjectStore {\r\n    indexNames: DOMStringList;\r\n    keyPath: string;\r\n    name: string;\r\n    transaction: IDBTransaction;\r\n    add(value: any, key?: any): IDBRequest;\r\n    clear(): IDBRequest;\r\n    count(key?: any): IDBRequest;\r\n    createIndex(name: string, keyPath: string, optionalParameters?: any): IDBIndex;\r\n    delete(key: any): IDBRequest;\r\n    deleteIndex(indexName: string): void;\r\n    get(key: any): IDBRequest;\r\n    index(name: string): IDBIndex;\r\n    openCursor(range?: any, direction?: string): IDBRequest;\r\n    put(value: any, key?: any): IDBRequest;\r\n}\r\n\r\ndeclare var IDBObjectStore: {\r\n    prototype: IDBObjectStore;\r\n    new(): IDBObjectStore;\r\n}\r\n\r\ninterface IDBOpenDBRequest extends IDBRequest {\r\n    onblocked: (ev: Event) => any;\r\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\r\n    addEventListener(type: \"blocked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"upgradeneeded\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBOpenDBRequest: {\r\n    prototype: IDBOpenDBRequest;\r\n    new(): IDBOpenDBRequest;\r\n}\r\n\r\ninterface IDBRequest extends EventTarget {\r\n    error: DOMError;\r\n    onerror: (ev: Event) => any;\r\n    onsuccess: (ev: Event) => any;\r\n    readyState: string;\r\n    result: any;\r\n    source: any;\r\n    transaction: IDBTransaction;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBRequest: {\r\n    prototype: IDBRequest;\r\n    new(): IDBRequest;\r\n}\r\n\r\ninterface IDBTransaction extends EventTarget {\r\n    db: IDBDatabase;\r\n    error: DOMError;\r\n    mode: string;\r\n    onabort: (ev: Event) => any;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    abort(): void;\r\n    objectStore(name: string): IDBObjectStore;\r\n    READ_ONLY: string;\r\n    READ_WRITE: string;\r\n    VERSION_CHANGE: string;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBTransaction: {\r\n    prototype: IDBTransaction;\r\n    new(): IDBTransaction;\r\n    READ_ONLY: string;\r\n    READ_WRITE: string;\r\n    VERSION_CHANGE: string;\r\n}\r\n\r\ninterface IDBVersionChangeEvent extends Event {\r\n    newVersion: number;\r\n    oldVersion: number;\r\n}\r\n\r\ndeclare var IDBVersionChangeEvent: {\r\n    prototype: IDBVersionChangeEvent;\r\n    new(): IDBVersionChangeEvent;\r\n}\r\n\r\ninterface ImageData {\r\n    data: number[];\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\ndeclare var ImageData: {\r\n    prototype: ImageData;\r\n    new(): ImageData;\r\n}\r\n\r\ninterface KeyboardEvent extends UIEvent {\r\n    altKey: boolean;\r\n    char: string;\r\n    charCode: number;\r\n    ctrlKey: boolean;\r\n    key: string;\r\n    keyCode: number;\r\n    locale: string;\r\n    location: number;\r\n    metaKey: boolean;\r\n    repeat: boolean;\r\n    shiftKey: boolean;\r\n    which: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n}\r\n\r\ndeclare var KeyboardEvent: {\r\n    prototype: KeyboardEvent;\r\n    new(typeArg: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n}\r\n\r\ninterface Location {\r\n    hash: string;\r\n    host: string;\r\n    hostname: string;\r\n    href: string;\r\n    origin: string;\r\n    pathname: string;\r\n    port: string;\r\n    protocol: string;\r\n    search: string;\r\n    assign(url: string): void;\r\n    reload(forcedReload?: boolean): void;\r\n    replace(url: string): void;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var Location: {\r\n    prototype: Location;\r\n    new(): Location;\r\n}\r\n\r\ninterface LongRunningScriptDetectedEvent extends Event {\r\n    executionTime: number;\r\n    stopPageScriptExecution: boolean;\r\n}\r\n\r\ndeclare var LongRunningScriptDetectedEvent: {\r\n    prototype: LongRunningScriptDetectedEvent;\r\n    new(): LongRunningScriptDetectedEvent;\r\n}\r\n\r\ninterface MSApp {\r\n    clearTemporaryWebDataAsync(): MSAppAsyncOperation;\r\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\r\n    createDataPackage(object: any): any;\r\n    createDataPackageFromSelection(): any;\r\n    createFileFromStorageFile(storageFile: any): File;\r\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\r\n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void;\r\n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any;\r\n    getCurrentPriority(): string;\r\n    getHtmlPrintDocumentSourceAsync(htmlDoc: any): any;\r\n    getViewId(view: any): any;\r\n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean;\r\n    pageHandlesAllApplicationActivations(enabled: boolean): void;\r\n    suppressSubdownloadCredentialPrompts(suppress: boolean): void;\r\n    terminateApp(exceptionObject: any): void;\r\n    CURRENT: string;\r\n    HIGH: string;\r\n    IDLE: string;\r\n    NORMAL: string;\r\n}\r\ndeclare var MSApp: MSApp;\r\n\r\ninterface MSAppAsyncOperation extends EventTarget {\r\n    error: DOMError;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    readyState: number;\r\n    result: any;\r\n    start(): void;\r\n    COMPLETED: number;\r\n    ERROR: number;\r\n    STARTED: number;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSAppAsyncOperation: {\r\n    prototype: MSAppAsyncOperation;\r\n    new(): MSAppAsyncOperation;\r\n    COMPLETED: number;\r\n    ERROR: number;\r\n    STARTED: number;\r\n}\r\n\r\ninterface MSBlobBuilder {\r\n    append(data: any, endings?: string): void;\r\n    getBlob(contentType?: string): Blob;\r\n}\r\n\r\ndeclare var MSBlobBuilder: {\r\n    prototype: MSBlobBuilder;\r\n    new(): MSBlobBuilder;\r\n}\r\n\r\ninterface MSCSSMatrix {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    e: number;\r\n    f: number;\r\n    m11: number;\r\n    m12: number;\r\n    m13: number;\r\n    m14: number;\r\n    m21: number;\r\n    m22: number;\r\n    m23: number;\r\n    m24: number;\r\n    m31: number;\r\n    m32: number;\r\n    m33: number;\r\n    m34: number;\r\n    m41: number;\r\n    m42: number;\r\n    m43: number;\r\n    m44: number;\r\n    inverse(): MSCSSMatrix;\r\n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix;\r\n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix;\r\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix;\r\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix;\r\n    setMatrixValue(value: string): void;\r\n    skewX(angle: number): MSCSSMatrix;\r\n    skewY(angle: number): MSCSSMatrix;\r\n    toString(): string;\r\n    translate(x: number, y: number, z?: number): MSCSSMatrix;\r\n}\r\n\r\ndeclare var MSCSSMatrix: {\r\n    prototype: MSCSSMatrix;\r\n    new(text?: string): MSCSSMatrix;\r\n}\r\n\r\ninterface MSGesture {\r\n    target: Element;\r\n    addPointer(pointerId: number): void;\r\n    stop(): void;\r\n}\r\n\r\ndeclare var MSGesture: {\r\n    prototype: MSGesture;\r\n    new(): MSGesture;\r\n}\r\n\r\ninterface MSGestureEvent extends UIEvent {\r\n    clientX: number;\r\n    clientY: number;\r\n    expansion: number;\r\n    gestureObject: any;\r\n    hwTimestamp: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    rotation: number;\r\n    scale: number;\r\n    screenX: number;\r\n    screenY: number;\r\n    translationX: number;\r\n    translationY: number;\r\n    velocityAngular: number;\r\n    velocityExpansion: number;\r\n    velocityX: number;\r\n    velocityY: number;\r\n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ndeclare var MSGestureEvent: {\r\n    prototype: MSGestureEvent;\r\n    new(): MSGestureEvent;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ninterface MSGraphicsTrust {\r\n    constrictionActive: boolean;\r\n    status: string;\r\n}\r\n\r\ndeclare var MSGraphicsTrust: {\r\n    prototype: MSGraphicsTrust;\r\n    new(): MSGraphicsTrust;\r\n}\r\n\r\ninterface MSHTMLWebViewElement extends HTMLElement {\r\n    canGoBack: boolean;\r\n    canGoForward: boolean;\r\n    containsFullScreenElement: boolean;\r\n    documentTitle: string;\r\n    height: number;\r\n    settings: MSWebViewSettings;\r\n    src: string;\r\n    width: number;\r\n    addWebAllowedObject(name: string, applicationObject: any): void;\r\n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string;\r\n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation;\r\n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation;\r\n    getDeferredPermissionRequestById(id: number): DeferredPermissionRequest;\r\n    getDeferredPermissionRequests(): DeferredPermissionRequest[];\r\n    goBack(): void;\r\n    goForward(): void;\r\n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation;\r\n    navigate(uri: string): void;\r\n    navigateToLocalStreamUri(source: string, streamResolver: any): void;\r\n    navigateToString(contents: string): void;\r\n    navigateWithHttpRequestMessage(requestMessage: any): void;\r\n    refresh(): void;\r\n    stop(): void;\r\n}\r\n\r\ndeclare var MSHTMLWebViewElement: {\r\n    prototype: MSHTMLWebViewElement;\r\n    new(): MSHTMLWebViewElement;\r\n}\r\n\r\ninterface MSHeaderFooter {\r\n    URL: string;\r\n    dateLong: string;\r\n    dateShort: string;\r\n    font: string;\r\n    htmlFoot: string;\r\n    htmlHead: string;\r\n    page: number;\r\n    pageTotal: number;\r\n    textFoot: string;\r\n    textHead: string;\r\n    timeLong: string;\r\n    timeShort: string;\r\n    title: string;\r\n}\r\n\r\ndeclare var MSHeaderFooter: {\r\n    prototype: MSHeaderFooter;\r\n    new(): MSHeaderFooter;\r\n}\r\n\r\ninterface MSInputMethodContext extends EventTarget {\r\n    compositionEndOffset: number;\r\n    compositionStartOffset: number;\r\n    oncandidatewindowhide: (ev: Event) => any;\r\n    oncandidatewindowshow: (ev: Event) => any;\r\n    oncandidatewindowupdate: (ev: Event) => any;\r\n    target: HTMLElement;\r\n    getCandidateWindowClientRect(): ClientRect;\r\n    getCompositionAlternatives(): string[];\r\n    hasComposition(): boolean;\r\n    isCandidateWindowVisible(): boolean;\r\n    addEventListener(type: \"MSCandidateWindowHide\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSCandidateWindowShow\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSCandidateWindowUpdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSInputMethodContext: {\r\n    prototype: MSInputMethodContext;\r\n    new(): MSInputMethodContext;\r\n}\r\n\r\ninterface MSManipulationEvent extends UIEvent {\r\n    currentState: number;\r\n    inertiaDestinationX: number;\r\n    inertiaDestinationY: number;\r\n    lastState: number;\r\n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_CANCELLED: number;\r\n    MS_MANIPULATION_STATE_COMMITTED: number;\r\n    MS_MANIPULATION_STATE_DRAGGING: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n    MS_MANIPULATION_STATE_PRESELECT: number;\r\n    MS_MANIPULATION_STATE_SELECTING: number;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n}\r\n\r\ndeclare var MSManipulationEvent: {\r\n    prototype: MSManipulationEvent;\r\n    new(): MSManipulationEvent;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_CANCELLED: number;\r\n    MS_MANIPULATION_STATE_COMMITTED: number;\r\n    MS_MANIPULATION_STATE_DRAGGING: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n    MS_MANIPULATION_STATE_PRESELECT: number;\r\n    MS_MANIPULATION_STATE_SELECTING: number;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n}\r\n\r\ninterface MSMediaKeyError {\r\n    code: number;\r\n    systemCode: number;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n}\r\n\r\ndeclare var MSMediaKeyError: {\r\n    prototype: MSMediaKeyError;\r\n    new(): MSMediaKeyError;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n}\r\n\r\ninterface MSMediaKeyMessageEvent extends Event {\r\n    destinationURL: string;\r\n    message: Uint8Array;\r\n}\r\n\r\ndeclare var MSMediaKeyMessageEvent: {\r\n    prototype: MSMediaKeyMessageEvent;\r\n    new(): MSMediaKeyMessageEvent;\r\n}\r\n\r\ninterface MSMediaKeyNeededEvent extends Event {\r\n    initData: Uint8Array;\r\n}\r\n\r\ndeclare var MSMediaKeyNeededEvent: {\r\n    prototype: MSMediaKeyNeededEvent;\r\n    new(): MSMediaKeyNeededEvent;\r\n}\r\n\r\ninterface MSMediaKeySession extends EventTarget {\r\n    error: MSMediaKeyError;\r\n    keySystem: string;\r\n    sessionId: string;\r\n    close(): void;\r\n    update(key: Uint8Array): void;\r\n}\r\n\r\ndeclare var MSMediaKeySession: {\r\n    prototype: MSMediaKeySession;\r\n    new(): MSMediaKeySession;\r\n}\r\n\r\ninterface MSMediaKeys {\r\n    keySystem: string;\r\n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession;\r\n}\r\n\r\ndeclare var MSMediaKeys: {\r\n    prototype: MSMediaKeys;\r\n    new(keySystem: string): MSMediaKeys;\r\n    isTypeSupported(keySystem: string, type?: string): boolean;\r\n}\r\n\r\ninterface MSMimeTypesCollection {\r\n    length: number;\r\n}\r\n\r\ndeclare var MSMimeTypesCollection: {\r\n    prototype: MSMimeTypesCollection;\r\n    new(): MSMimeTypesCollection;\r\n}\r\n\r\ninterface MSPluginsCollection {\r\n    length: number;\r\n    refresh(reload?: boolean): void;\r\n}\r\n\r\ndeclare var MSPluginsCollection: {\r\n    prototype: MSPluginsCollection;\r\n    new(): MSPluginsCollection;\r\n}\r\n\r\ninterface MSPointerEvent extends MouseEvent {\r\n    currentPoint: any;\r\n    height: number;\r\n    hwTimestamp: number;\r\n    intermediatePoints: any;\r\n    isPrimary: boolean;\r\n    pointerId: number;\r\n    pointerType: any;\r\n    pressure: number;\r\n    rotation: number;\r\n    tiltX: number;\r\n    tiltY: number;\r\n    width: number;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n}\r\n\r\ndeclare var MSPointerEvent: {\r\n    prototype: MSPointerEvent;\r\n    new(typeArg: string, eventInitDict?: PointerEventInit): MSPointerEvent;\r\n}\r\n\r\ninterface MSPrintManagerTemplatePrinter extends MSTemplatePrinter, EventTarget {\r\n    percentScale: number;\r\n    showHeaderFooter: boolean;\r\n    shrinkToFit: boolean;\r\n    drawPreviewPage(element: HTMLElement, pageNumber: number): void;\r\n    endPrint(): void;\r\n    getPrintTaskOptionValue(key: string): any;\r\n    invalidatePreview(): void;\r\n    setPageCount(pageCount: number): void;\r\n    startPrint(): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSPrintManagerTemplatePrinter: {\r\n    prototype: MSPrintManagerTemplatePrinter;\r\n    new(): MSPrintManagerTemplatePrinter;\r\n}\r\n\r\ninterface MSRangeCollection {\r\n    length: number;\r\n    item(index: number): Range;\r\n    [index: number]: Range;\r\n}\r\n\r\ndeclare var MSRangeCollection: {\r\n    prototype: MSRangeCollection;\r\n    new(): MSRangeCollection;\r\n}\r\n\r\ninterface MSSiteModeEvent extends Event {\r\n    actionURL: string;\r\n    buttonID: number;\r\n}\r\n\r\ndeclare var MSSiteModeEvent: {\r\n    prototype: MSSiteModeEvent;\r\n    new(): MSSiteModeEvent;\r\n}\r\n\r\ninterface MSStream {\r\n    type: string;\r\n    msClose(): void;\r\n    msDetachStream(): any;\r\n}\r\n\r\ndeclare var MSStream: {\r\n    prototype: MSStream;\r\n    new(): MSStream;\r\n}\r\n\r\ninterface MSStreamReader extends EventTarget, MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\r\n    readAsBinaryString(stream: MSStream, size?: number): void;\r\n    readAsBlob(stream: MSStream, size?: number): void;\r\n    readAsDataURL(stream: MSStream, size?: number): void;\r\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSStreamReader: {\r\n    prototype: MSStreamReader;\r\n    new(): MSStreamReader;\r\n}\r\n\r\ninterface MSTemplatePrinter {\r\n    collate: boolean;\r\n    copies: number;\r\n    currentPage: boolean;\r\n    currentPageAvail: boolean;\r\n    duplex: boolean;\r\n    footer: string;\r\n    frameActive: boolean;\r\n    frameActiveEnabled: boolean;\r\n    frameAsShown: boolean;\r\n    framesetDocument: boolean;\r\n    header: string;\r\n    headerFooterFont: string;\r\n    marginBottom: number;\r\n    marginLeft: number;\r\n    marginRight: number;\r\n    marginTop: number;\r\n    orientation: string;\r\n    pageFrom: number;\r\n    pageHeight: number;\r\n    pageTo: number;\r\n    pageWidth: number;\r\n    selectedPages: boolean;\r\n    selection: boolean;\r\n    selectionEnabled: boolean;\r\n    unprintableBottom: number;\r\n    unprintableLeft: number;\r\n    unprintableRight: number;\r\n    unprintableTop: number;\r\n    usePrinterCopyCollate: boolean;\r\n    createHeaderFooter(): MSHeaderFooter;\r\n    deviceSupports(property: string): any;\r\n    ensurePrintDialogDefaults(): boolean;\r\n    getPageMarginBottom(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any;\r\n    getPageMarginBottomImportant(pageRule: CSSPageRule): boolean;\r\n    getPageMarginLeft(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any;\r\n    getPageMarginLeftImportant(pageRule: CSSPageRule): boolean;\r\n    getPageMarginRight(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any;\r\n    getPageMarginRightImportant(pageRule: CSSPageRule): boolean;\r\n    getPageMarginTop(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any;\r\n    getPageMarginTopImportant(pageRule: CSSPageRule): boolean;\r\n    printBlankPage(): void;\r\n    printNonNative(document: any): boolean;\r\n    printNonNativeFrames(document: any, activeFrame: boolean): void;\r\n    printPage(element: HTMLElement): void;\r\n    showPageSetupDialog(): boolean;\r\n    showPrintDialog(): boolean;\r\n    startDoc(title: string): boolean;\r\n    stopDoc(): void;\r\n    updatePageStatus(status: number): void;\r\n}\r\n\r\ndeclare var MSTemplatePrinter: {\r\n    prototype: MSTemplatePrinter;\r\n    new(): MSTemplatePrinter;\r\n}\r\n\r\ninterface MSWebViewAsyncOperation extends EventTarget {\r\n    error: DOMError;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    readyState: number;\r\n    result: any;\r\n    target: MSHTMLWebViewElement;\r\n    type: number;\r\n    start(): void;\r\n    COMPLETED: number;\r\n    ERROR: number;\r\n    STARTED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSWebViewAsyncOperation: {\r\n    prototype: MSWebViewAsyncOperation;\r\n    new(): MSWebViewAsyncOperation;\r\n    COMPLETED: number;\r\n    ERROR: number;\r\n    STARTED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n}\r\n\r\ninterface MSWebViewSettings {\r\n    isIndexedDBEnabled: boolean;\r\n    isJavaScriptEnabled: boolean;\r\n}\r\n\r\ndeclare var MSWebViewSettings: {\r\n    prototype: MSWebViewSettings;\r\n    new(): MSWebViewSettings;\r\n}\r\n\r\ninterface MediaElementAudioSourceNode extends AudioNode {\r\n}\r\n\r\ndeclare var MediaElementAudioSourceNode: {\r\n    prototype: MediaElementAudioSourceNode;\r\n    new(): MediaElementAudioSourceNode;\r\n}\r\n\r\ninterface MediaError {\r\n    code: number;\r\n    msExtendedCode: number;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n\r\ndeclare var MediaError: {\r\n    prototype: MediaError;\r\n    new(): MediaError;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n\r\ninterface MediaList {\r\n    length: number;\r\n    mediaText: string;\r\n    appendMedium(newMedium: string): void;\r\n    deleteMedium(oldMedium: string): void;\r\n    item(index: number): string;\r\n    toString(): string;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var MediaList: {\r\n    prototype: MediaList;\r\n    new(): MediaList;\r\n}\r\n\r\ninterface MediaQueryList {\r\n    matches: boolean;\r\n    media: string;\r\n    addListener(listener: MediaQueryListListener): void;\r\n    removeListener(listener: MediaQueryListListener): void;\r\n}\r\n\r\ndeclare var MediaQueryList: {\r\n    prototype: MediaQueryList;\r\n    new(): MediaQueryList;\r\n}\r\n\r\ninterface MediaSource extends EventTarget {\r\n    activeSourceBuffers: SourceBufferList;\r\n    duration: number;\r\n    readyState: number;\r\n    sourceBuffers: SourceBufferList;\r\n    addSourceBuffer(type: string): SourceBuffer;\r\n    endOfStream(error?: number): void;\r\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\r\n}\r\n\r\ndeclare var MediaSource: {\r\n    prototype: MediaSource;\r\n    new(): MediaSource;\r\n    isTypeSupported(type: string): boolean;\r\n}\r\n\r\ninterface MessageChannel {\r\n    port1: MessagePort;\r\n    port2: MessagePort;\r\n}\r\n\r\ndeclare var MessageChannel: {\r\n    prototype: MessageChannel;\r\n    new(): MessageChannel;\r\n}\r\n\r\ninterface MessageEvent extends Event {\r\n    data: any;\r\n    origin: string;\r\n    ports: any;\r\n    source: Window;\r\n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\r\n}\r\n\r\ndeclare var MessageEvent: {\r\n    prototype: MessageEvent;\r\n    new(): MessageEvent;\r\n}\r\n\r\ninterface MessagePort extends EventTarget {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    close(): void;\r\n    postMessage(message?: any, ports?: any): void;\r\n    start(): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MessagePort: {\r\n    prototype: MessagePort;\r\n    new(): MessagePort;\r\n}\r\n\r\ninterface MimeType {\r\n    description: string;\r\n    enabledPlugin: Plugin;\r\n    suffixes: string;\r\n    type: string;\r\n}\r\n\r\ndeclare var MimeType: {\r\n    prototype: MimeType;\r\n    new(): MimeType;\r\n}\r\n\r\ninterface MimeTypeArray {\r\n    length: number;\r\n    item(index: number): Plugin;\r\n    namedItem(type: string): Plugin;\r\n    [index: number]: Plugin;\r\n}\r\n\r\ndeclare var MimeTypeArray: {\r\n    prototype: MimeTypeArray;\r\n    new(): MimeTypeArray;\r\n}\r\n\r\ninterface MouseEvent extends UIEvent {\r\n    altKey: boolean;\r\n    button: number;\r\n    buttons: number;\r\n    clientX: number;\r\n    clientY: number;\r\n    ctrlKey: boolean;\r\n    fromElement: Element;\r\n    layerX: number;\r\n    layerY: number;\r\n    metaKey: boolean;\r\n    movementX: number;\r\n    movementY: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    pageX: number;\r\n    pageY: number;\r\n    relatedTarget: EventTarget;\r\n    screenX: number;\r\n    screenY: number;\r\n    shiftKey: boolean;\r\n    toElement: Element;\r\n    which: number;\r\n    x: number;\r\n    y: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\n\r\ndeclare var MouseEvent: {\r\n    prototype: MouseEvent;\r\n    new(typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n}\r\n\r\ninterface MouseWheelEvent extends MouseEvent {\r\n    wheelDelta: number;\r\n    wheelDeltaX: number;\r\n    wheelDeltaY: number;\r\n    initMouseWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void;\r\n}\r\n\r\ndeclare var MouseWheelEvent: {\r\n    prototype: MouseWheelEvent;\r\n    new(): MouseWheelEvent;\r\n}\r\n\r\ninterface MutationEvent extends Event {\r\n    attrChange: number;\r\n    attrName: string;\r\n    newValue: string;\r\n    prevValue: string;\r\n    relatedNode: Node;\r\n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\r\n    ADDITION: number;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n}\r\n\r\ndeclare var MutationEvent: {\r\n    prototype: MutationEvent;\r\n    new(): MutationEvent;\r\n    ADDITION: number;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n}\r\n\r\ninterface MutationObserver {\r\n    disconnect(): void;\r\n    observe(target: Node, options: MutationObserverInit): void;\r\n    takeRecords(): MutationRecord[];\r\n}\r\n\r\ndeclare var MutationObserver: {\r\n    prototype: MutationObserver;\r\n    new(callback: MutationCallback): MutationObserver;\r\n}\r\n\r\ninterface MutationRecord {\r\n    addedNodes: NodeList;\r\n    attributeName: string;\r\n    attributeNamespace: string;\r\n    nextSibling: Node;\r\n    oldValue: string;\r\n    previousSibling: Node;\r\n    removedNodes: NodeList;\r\n    target: Node;\r\n    type: string;\r\n}\r\n\r\ndeclare var MutationRecord: {\r\n    prototype: MutationRecord;\r\n    new(): MutationRecord;\r\n}\r\n\r\ninterface NamedNodeMap {\r\n    length: number;\r\n    getNamedItem(name: string): Attr;\r\n    getNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    item(index: number): Attr;\r\n    removeNamedItem(name: string): Attr;\r\n    removeNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    setNamedItem(arg: Attr): Attr;\r\n    setNamedItemNS(arg: Attr): Attr;\r\n    [index: number]: Attr;\r\n}\r\n\r\ndeclare var NamedNodeMap: {\r\n    prototype: NamedNodeMap;\r\n    new(): NamedNodeMap;\r\n}\r\n\r\ninterface NavigationCompletedEvent extends NavigationEvent {\r\n    isSuccess: boolean;\r\n    webErrorStatus: number;\r\n}\r\n\r\ndeclare var NavigationCompletedEvent: {\r\n    prototype: NavigationCompletedEvent;\r\n    new(): NavigationCompletedEvent;\r\n}\r\n\r\ninterface NavigationEvent extends Event {\r\n    uri: string;\r\n}\r\n\r\ndeclare var NavigationEvent: {\r\n    prototype: NavigationEvent;\r\n    new(): NavigationEvent;\r\n}\r\n\r\ninterface NavigationEventWithReferrer extends NavigationEvent {\r\n    referer: string;\r\n}\r\n\r\ndeclare var NavigationEventWithReferrer: {\r\n    prototype: NavigationEventWithReferrer;\r\n    new(): NavigationEventWithReferrer;\r\n}\r\n\r\ninterface Navigator extends Object, NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, NavigatorGeolocation, MSNavigatorDoNotTrack, MSFileSaver {\r\n    appCodeName: string;\r\n    appMinorVersion: string;\r\n    browserLanguage: string;\r\n    connectionSpeed: number;\r\n    cookieEnabled: boolean;\r\n    cpuClass: string;\r\n    language: string;\r\n    maxTouchPoints: number;\r\n    mimeTypes: MSMimeTypesCollection;\r\n    msManipulationViewsEnabled: boolean;\r\n    msMaxTouchPoints: number;\r\n    msPointerEnabled: boolean;\r\n    plugins: MSPluginsCollection;\r\n    pointerEnabled: boolean;\r\n    systemLanguage: string;\r\n    userLanguage: string;\r\n    webdriver: boolean;\r\n    getGamepads(): Gamepad[];\r\n    javaEnabled(): boolean;\r\n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Navigator: {\r\n    prototype: Navigator;\r\n    new(): Navigator;\r\n}\r\n\r\ninterface Node extends EventTarget {\r\n    attributes: NamedNodeMap;\r\n    baseURI: string;\r\n    childNodes: NodeList;\r\n    firstChild: Node;\r\n    lastChild: Node;\r\n    localName: string;\r\n    namespaceURI: string;\r\n    nextSibling: Node;\r\n    nodeName: string;\r\n    nodeType: number;\r\n    nodeValue: string;\r\n    ownerDocument: Document;\r\n    parentElement: HTMLElement;\r\n    parentNode: Node;\r\n    prefix: string;\r\n    previousSibling: Node;\r\n    textContent: string;\r\n    appendChild(newChild: Node): Node;\r\n    cloneNode(deep?: boolean): Node;\r\n    compareDocumentPosition(other: Node): number;\r\n    hasAttributes(): boolean;\r\n    hasChildNodes(): boolean;\r\n    insertBefore(newChild: Node, refChild?: Node): Node;\r\n    isDefaultNamespace(namespaceURI: string): boolean;\r\n    isEqualNode(arg: Node): boolean;\r\n    isSameNode(other: Node): boolean;\r\n    lookupNamespaceURI(prefix: string): string;\r\n    lookupPrefix(namespaceURI: string): string;\r\n    normalize(): void;\r\n    removeChild(oldChild: Node): Node;\r\n    replaceChild(newChild: Node, oldChild: Node): Node;\r\n    ATTRIBUTE_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    DOCUMENT_NODE: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    NOTATION_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    TEXT_NODE: number;\r\n}\r\n\r\ndeclare var Node: {\r\n    prototype: Node;\r\n    new(): Node;\r\n    ATTRIBUTE_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    DOCUMENT_NODE: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    NOTATION_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    TEXT_NODE: number;\r\n}\r\n\r\ninterface NodeFilter {\r\n    FILTER_ACCEPT: number;\r\n    FILTER_REJECT: number;\r\n    FILTER_SKIP: number;\r\n    SHOW_ALL: number;\r\n    SHOW_ATTRIBUTE: number;\r\n    SHOW_CDATA_SECTION: number;\r\n    SHOW_COMMENT: number;\r\n    SHOW_DOCUMENT: number;\r\n    SHOW_DOCUMENT_FRAGMENT: number;\r\n    SHOW_DOCUMENT_TYPE: number;\r\n    SHOW_ELEMENT: number;\r\n    SHOW_ENTITY: number;\r\n    SHOW_ENTITY_REFERENCE: number;\r\n    SHOW_NOTATION: number;\r\n    SHOW_PROCESSING_INSTRUCTION: number;\r\n    SHOW_TEXT: number;\r\n}\r\ndeclare var NodeFilter: NodeFilter;\r\n\r\ninterface NodeIterator {\r\n    expandEntityReferences: boolean;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    whatToShow: number;\r\n    detach(): void;\r\n    nextNode(): Node;\r\n    previousNode(): Node;\r\n}\r\n\r\ndeclare var NodeIterator: {\r\n    prototype: NodeIterator;\r\n    new(): NodeIterator;\r\n}\r\n\r\ninterface NodeList {\r\n    length: number;\r\n    item(index: number): Node;\r\n    [index: number]: Node;\r\n}\r\n\r\ndeclare var NodeList: {\r\n    prototype: NodeList;\r\n    new(): NodeList;\r\n}\r\n\r\ninterface OES_element_index_uint {\r\n}\r\n\r\ndeclare var OES_element_index_uint: {\r\n    prototype: OES_element_index_uint;\r\n    new(): OES_element_index_uint;\r\n}\r\n\r\ninterface OES_standard_derivatives {\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\n\r\ndeclare var OES_standard_derivatives: {\r\n    prototype: OES_standard_derivatives;\r\n    new(): OES_standard_derivatives;\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\n\r\ninterface OES_texture_float {\r\n}\r\n\r\ndeclare var OES_texture_float: {\r\n    prototype: OES_texture_float;\r\n    new(): OES_texture_float;\r\n}\r\n\r\ninterface OES_texture_float_linear {\r\n}\r\n\r\ndeclare var OES_texture_float_linear: {\r\n    prototype: OES_texture_float_linear;\r\n    new(): OES_texture_float_linear;\r\n}\r\n\r\ninterface OfflineAudioCompletionEvent extends Event {\r\n    renderedBuffer: AudioBuffer;\r\n}\r\n\r\ndeclare var OfflineAudioCompletionEvent: {\r\n    prototype: OfflineAudioCompletionEvent;\r\n    new(): OfflineAudioCompletionEvent;\r\n}\r\n\r\ninterface OfflineAudioContext extends AudioContext {\r\n    oncomplete: (ev: Event) => any;\r\n    startRendering(): void;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var OfflineAudioContext: {\r\n    prototype: OfflineAudioContext;\r\n    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext;\r\n}\r\n\r\ninterface OscillatorNode extends AudioNode {\r\n    detune: AudioParam;\r\n    frequency: AudioParam;\r\n    onended: (ev: Event) => any;\r\n    type: string;\r\n    setPeriodicWave(periodicWave: PeriodicWave): void;\r\n    start(when?: number): void;\r\n    stop(when?: number): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var OscillatorNode: {\r\n    prototype: OscillatorNode;\r\n    new(): OscillatorNode;\r\n}\r\n\r\ninterface PageTransitionEvent extends Event {\r\n    persisted: boolean;\r\n}\r\n\r\ndeclare var PageTransitionEvent: {\r\n    prototype: PageTransitionEvent;\r\n    new(): PageTransitionEvent;\r\n}\r\n\r\ninterface PannerNode extends AudioNode {\r\n    coneInnerAngle: number;\r\n    coneOuterAngle: number;\r\n    coneOuterGain: number;\r\n    distanceModel: string;\r\n    maxDistance: number;\r\n    panningModel: string;\r\n    refDistance: number;\r\n    rolloffFactor: number;\r\n    setOrientation(x: number, y: number, z: number): void;\r\n    setPosition(x: number, y: number, z: number): void;\r\n    setVelocity(x: number, y: number, z: number): void;\r\n}\r\n\r\ndeclare var PannerNode: {\r\n    prototype: PannerNode;\r\n    new(): PannerNode;\r\n}\r\n\r\ninterface PerfWidgetExternal {\r\n    activeNetworkRequestCount: number;\r\n    averageFrameTime: number;\r\n    averagePaintTime: number;\r\n    extraInformationEnabled: boolean;\r\n    independentRenderingEnabled: boolean;\r\n    irDisablingContentString: string;\r\n    irStatusAvailable: boolean;\r\n    maxCpuSpeed: number;\r\n    paintRequestsPerSecond: number;\r\n    performanceCounter: number;\r\n    performanceCounterFrequency: number;\r\n    addEventListener(eventType: string, callback: Function): void;\r\n    getMemoryUsage(): number;\r\n    getProcessCpuUsage(): number;\r\n    getRecentCpuUsage(last: number): any;\r\n    getRecentFrames(last: number): any;\r\n    getRecentMemoryUsage(last: number): any;\r\n    getRecentPaintRequests(last: number): any;\r\n    removeEventListener(eventType: string, callback: Function): void;\r\n    repositionWindow(x: number, y: number): void;\r\n    resizeWindow(width: number, height: number): void;\r\n}\r\n\r\ndeclare var PerfWidgetExternal: {\r\n    prototype: PerfWidgetExternal;\r\n    new(): PerfWidgetExternal;\r\n}\r\n\r\ninterface Performance {\r\n    navigation: PerformanceNavigation;\r\n    timing: PerformanceTiming;\r\n    clearMarks(markName?: string): void;\r\n    clearMeasures(measureName?: string): void;\r\n    clearResourceTimings(): void;\r\n    getEntries(): any;\r\n    getEntriesByName(name: string, entryType?: string): any;\r\n    getEntriesByType(entryType: string): any;\r\n    getMarks(markName?: string): any;\r\n    getMeasures(measureName?: string): any;\r\n    mark(markName: string): void;\r\n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void;\r\n    now(): number;\r\n    setResourceTimingBufferSize(maxSize: number): void;\r\n    toJSON(): any;\r\n}\r\n\r\ndeclare var Performance: {\r\n    prototype: Performance;\r\n    new(): Performance;\r\n}\r\n\r\ninterface PerformanceEntry {\r\n    duration: number;\r\n    entryType: string;\r\n    name: string;\r\n    startTime: number;\r\n}\r\n\r\ndeclare var PerformanceEntry: {\r\n    prototype: PerformanceEntry;\r\n    new(): PerformanceEntry;\r\n}\r\n\r\ninterface PerformanceMark extends PerformanceEntry {\r\n}\r\n\r\ndeclare var PerformanceMark: {\r\n    prototype: PerformanceMark;\r\n    new(): PerformanceMark;\r\n}\r\n\r\ninterface PerformanceMeasure extends PerformanceEntry {\r\n}\r\n\r\ndeclare var PerformanceMeasure: {\r\n    prototype: PerformanceMeasure;\r\n    new(): PerformanceMeasure;\r\n}\r\n\r\ninterface PerformanceNavigation {\r\n    redirectCount: number;\r\n    type: number;\r\n    toJSON(): any;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n}\r\n\r\ndeclare var PerformanceNavigation: {\r\n    prototype: PerformanceNavigation;\r\n    new(): PerformanceNavigation;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n}\r\n\r\ninterface PerformanceNavigationTiming extends PerformanceEntry {\r\n    connectEnd: number;\r\n    connectStart: number;\r\n    domComplete: number;\r\n    domContentLoadedEventEnd: number;\r\n    domContentLoadedEventStart: number;\r\n    domInteractive: number;\r\n    domLoading: number;\r\n    domainLookupEnd: number;\r\n    domainLookupStart: number;\r\n    fetchStart: number;\r\n    loadEventEnd: number;\r\n    loadEventStart: number;\r\n    navigationStart: number;\r\n    redirectCount: number;\r\n    redirectEnd: number;\r\n    redirectStart: number;\r\n    requestStart: number;\r\n    responseEnd: number;\r\n    responseStart: number;\r\n    type: string;\r\n    unloadEventEnd: number;\r\n    unloadEventStart: number;\r\n}\r\n\r\ndeclare var PerformanceNavigationTiming: {\r\n    prototype: PerformanceNavigationTiming;\r\n    new(): PerformanceNavigationTiming;\r\n}\r\n\r\ninterface PerformanceResourceTiming extends PerformanceEntry {\r\n    connectEnd: number;\r\n    connectStart: number;\r\n    domainLookupEnd: number;\r\n    domainLookupStart: number;\r\n    fetchStart: number;\r\n    initiatorType: string;\r\n    redirectEnd: number;\r\n    redirectStart: number;\r\n    requestStart: number;\r\n    responseEnd: number;\r\n    responseStart: number;\r\n}\r\n\r\ndeclare var PerformanceResourceTiming: {\r\n    prototype: PerformanceResourceTiming;\r\n    new(): PerformanceResourceTiming;\r\n}\r\n\r\ninterface PerformanceTiming {\r\n    connectEnd: number;\r\n    connectStart: number;\r\n    domComplete: number;\r\n    domContentLoadedEventEnd: number;\r\n    domContentLoadedEventStart: number;\r\n    domInteractive: number;\r\n    domLoading: number;\r\n    domainLookupEnd: number;\r\n    domainLookupStart: number;\r\n    fetchStart: number;\r\n    loadEventEnd: number;\r\n    loadEventStart: number;\r\n    msFirstPaint: number;\r\n    navigationStart: number;\r\n    redirectEnd: number;\r\n    redirectStart: number;\r\n    requestStart: number;\r\n    responseEnd: number;\r\n    responseStart: number;\r\n    unloadEventEnd: number;\r\n    unloadEventStart: number;\r\n    toJSON(): any;\r\n}\r\n\r\ndeclare var PerformanceTiming: {\r\n    prototype: PerformanceTiming;\r\n    new(): PerformanceTiming;\r\n}\r\n\r\ninterface PeriodicWave {\r\n}\r\n\r\ndeclare var PeriodicWave: {\r\n    prototype: PeriodicWave;\r\n    new(): PeriodicWave;\r\n}\r\n\r\ninterface PermissionRequest extends DeferredPermissionRequest {\r\n    state: string;\r\n    defer(): void;\r\n}\r\n\r\ndeclare var PermissionRequest: {\r\n    prototype: PermissionRequest;\r\n    new(): PermissionRequest;\r\n}\r\n\r\ninterface PermissionRequestedEvent extends Event {\r\n    permissionRequest: PermissionRequest;\r\n}\r\n\r\ndeclare var PermissionRequestedEvent: {\r\n    prototype: PermissionRequestedEvent;\r\n    new(): PermissionRequestedEvent;\r\n}\r\n\r\ninterface Plugin {\r\n    description: string;\r\n    filename: string;\r\n    length: number;\r\n    name: string;\r\n    version: string;\r\n    item(index: number): MimeType;\r\n    namedItem(type: string): MimeType;\r\n    [index: number]: MimeType;\r\n}\r\n\r\ndeclare var Plugin: {\r\n    prototype: Plugin;\r\n    new(): Plugin;\r\n}\r\n\r\ninterface PluginArray {\r\n    length: number;\r\n    item(index: number): Plugin;\r\n    namedItem(name: string): Plugin;\r\n    refresh(reload?: boolean): void;\r\n    [index: number]: Plugin;\r\n}\r\n\r\ndeclare var PluginArray: {\r\n    prototype: PluginArray;\r\n    new(): PluginArray;\r\n}\r\n\r\ninterface PointerEvent extends MouseEvent {\r\n    currentPoint: any;\r\n    height: number;\r\n    hwTimestamp: number;\r\n    intermediatePoints: any;\r\n    isPrimary: boolean;\r\n    pointerId: number;\r\n    pointerType: any;\r\n    pressure: number;\r\n    rotation: number;\r\n    tiltX: number;\r\n    tiltY: number;\r\n    width: number;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n}\r\n\r\ndeclare var PointerEvent: {\r\n    prototype: PointerEvent;\r\n    new(typeArg: string, eventInitDict?: PointerEventInit): PointerEvent;\r\n}\r\n\r\ninterface PopStateEvent extends Event {\r\n    state: any;\r\n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\r\n}\r\n\r\ndeclare var PopStateEvent: {\r\n    prototype: PopStateEvent;\r\n    new(): PopStateEvent;\r\n}\r\n\r\ninterface Position {\r\n    coords: Coordinates;\r\n    timestamp: number;\r\n}\r\n\r\ndeclare var Position: {\r\n    prototype: Position;\r\n    new(): Position;\r\n}\r\n\r\ninterface PositionError {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    PERMISSION_DENIED: number;\r\n    POSITION_UNAVAILABLE: number;\r\n    TIMEOUT: number;\r\n}\r\n\r\ndeclare var PositionError: {\r\n    prototype: PositionError;\r\n    new(): PositionError;\r\n    PERMISSION_DENIED: number;\r\n    POSITION_UNAVAILABLE: number;\r\n    TIMEOUT: number;\r\n}\r\n\r\ninterface ProcessingInstruction extends CharacterData {\r\n    target: string;\r\n}\r\n\r\ndeclare var ProcessingInstruction: {\r\n    prototype: ProcessingInstruction;\r\n    new(): ProcessingInstruction;\r\n}\r\n\r\ninterface ProgressEvent extends Event {\r\n    lengthComputable: boolean;\r\n    loaded: number;\r\n    total: number;\r\n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\r\n}\r\n\r\ndeclare var ProgressEvent: {\r\n    prototype: ProgressEvent;\r\n    new(): ProgressEvent;\r\n}\r\n\r\ninterface Range {\r\n    collapsed: boolean;\r\n    commonAncestorContainer: Node;\r\n    endContainer: Node;\r\n    endOffset: number;\r\n    startContainer: Node;\r\n    startOffset: number;\r\n    cloneContents(): DocumentFragment;\r\n    cloneRange(): Range;\r\n    collapse(toStart: boolean): void;\r\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\r\n    createContextualFragment(fragment: string): DocumentFragment;\r\n    deleteContents(): void;\r\n    detach(): void;\r\n    expand(Unit: string): boolean;\r\n    extractContents(): DocumentFragment;\r\n    getBoundingClientRect(): ClientRect;\r\n    getClientRects(): ClientRectList;\r\n    insertNode(newNode: Node): void;\r\n    selectNode(refNode: Node): void;\r\n    selectNodeContents(refNode: Node): void;\r\n    setEnd(refNode: Node, offset: number): void;\r\n    setEndAfter(refNode: Node): void;\r\n    setEndBefore(refNode: Node): void;\r\n    setStart(refNode: Node, offset: number): void;\r\n    setStartAfter(refNode: Node): void;\r\n    setStartBefore(refNode: Node): void;\r\n    surroundContents(newParent: Node): void;\r\n    toString(): string;\r\n    END_TO_END: number;\r\n    END_TO_START: number;\r\n    START_TO_END: number;\r\n    START_TO_START: number;\r\n}\r\n\r\ndeclare var Range: {\r\n    prototype: Range;\r\n    new(): Range;\r\n    END_TO_END: number;\r\n    END_TO_START: number;\r\n    START_TO_END: number;\r\n    START_TO_START: number;\r\n}\r\n\r\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    target: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGAElement: {\r\n    prototype: SVGAElement;\r\n    new(): SVGAElement;\r\n}\r\n\r\ninterface SVGAngle {\r\n    unitType: number;\r\n    value: number;\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n}\r\n\r\ndeclare var SVGAngle: {\r\n    prototype: SVGAngle;\r\n    new(): SVGAngle;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n}\r\n\r\ninterface SVGAnimatedAngle {\r\n    animVal: SVGAngle;\r\n    baseVal: SVGAngle;\r\n}\r\n\r\ndeclare var SVGAnimatedAngle: {\r\n    prototype: SVGAnimatedAngle;\r\n    new(): SVGAnimatedAngle;\r\n}\r\n\r\ninterface SVGAnimatedBoolean {\r\n    animVal: boolean;\r\n    baseVal: boolean;\r\n}\r\n\r\ndeclare var SVGAnimatedBoolean: {\r\n    prototype: SVGAnimatedBoolean;\r\n    new(): SVGAnimatedBoolean;\r\n}\r\n\r\ninterface SVGAnimatedEnumeration {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedEnumeration: {\r\n    prototype: SVGAnimatedEnumeration;\r\n    new(): SVGAnimatedEnumeration;\r\n}\r\n\r\ninterface SVGAnimatedInteger {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedInteger: {\r\n    prototype: SVGAnimatedInteger;\r\n    new(): SVGAnimatedInteger;\r\n}\r\n\r\ninterface SVGAnimatedLength {\r\n    animVal: SVGLength;\r\n    baseVal: SVGLength;\r\n}\r\n\r\ndeclare var SVGAnimatedLength: {\r\n    prototype: SVGAnimatedLength;\r\n    new(): SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGAnimatedLengthList {\r\n    animVal: SVGLengthList;\r\n    baseVal: SVGLengthList;\r\n}\r\n\r\ndeclare var SVGAnimatedLengthList: {\r\n    prototype: SVGAnimatedLengthList;\r\n    new(): SVGAnimatedLengthList;\r\n}\r\n\r\ninterface SVGAnimatedNumber {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedNumber: {\r\n    prototype: SVGAnimatedNumber;\r\n    new(): SVGAnimatedNumber;\r\n}\r\n\r\ninterface SVGAnimatedNumberList {\r\n    animVal: SVGNumberList;\r\n    baseVal: SVGNumberList;\r\n}\r\n\r\ndeclare var SVGAnimatedNumberList: {\r\n    prototype: SVGAnimatedNumberList;\r\n    new(): SVGAnimatedNumberList;\r\n}\r\n\r\ninterface SVGAnimatedPreserveAspectRatio {\r\n    animVal: SVGPreserveAspectRatio;\r\n    baseVal: SVGPreserveAspectRatio;\r\n}\r\n\r\ndeclare var SVGAnimatedPreserveAspectRatio: {\r\n    prototype: SVGAnimatedPreserveAspectRatio;\r\n    new(): SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface SVGAnimatedRect {\r\n    animVal: SVGRect;\r\n    baseVal: SVGRect;\r\n}\r\n\r\ndeclare var SVGAnimatedRect: {\r\n    prototype: SVGAnimatedRect;\r\n    new(): SVGAnimatedRect;\r\n}\r\n\r\ninterface SVGAnimatedString {\r\n    animVal: string;\r\n    baseVal: string;\r\n}\r\n\r\ndeclare var SVGAnimatedString: {\r\n    prototype: SVGAnimatedString;\r\n    new(): SVGAnimatedString;\r\n}\r\n\r\ninterface SVGAnimatedTransformList {\r\n    animVal: SVGTransformList;\r\n    baseVal: SVGTransformList;\r\n}\r\n\r\ndeclare var SVGAnimatedTransformList: {\r\n    prototype: SVGAnimatedTransformList;\r\n    new(): SVGAnimatedTransformList;\r\n}\r\n\r\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    cx: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGCircleElement: {\r\n    prototype: SVGCircleElement;\r\n    new(): SVGCircleElement;\r\n}\r\n\r\ninterface SVGClipPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\r\n    clipPathUnits: SVGAnimatedEnumeration;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGClipPathElement: {\r\n    prototype: SVGClipPathElement;\r\n    new(): SVGClipPathElement;\r\n}\r\n\r\ninterface SVGComponentTransferFunctionElement extends SVGElement {\r\n    amplitude: SVGAnimatedNumber;\r\n    exponent: SVGAnimatedNumber;\r\n    intercept: SVGAnimatedNumber;\r\n    offset: SVGAnimatedNumber;\r\n    slope: SVGAnimatedNumber;\r\n    tableValues: SVGAnimatedNumberList;\r\n    type: SVGAnimatedEnumeration;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGComponentTransferFunctionElement: {\r\n    prototype: SVGComponentTransferFunctionElement;\r\n    new(): SVGComponentTransferFunctionElement;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGDefsElement: {\r\n    prototype: SVGDefsElement;\r\n    new(): SVGDefsElement;\r\n}\r\n\r\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGDescElement: {\r\n    prototype: SVGDescElement;\r\n    new(): SVGDescElement;\r\n}\r\n\r\ninterface SVGElement extends Element {\r\n    id: string;\r\n    onclick: (ev: MouseEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    ownerSVGElement: SVGSVGElement;\r\n    viewportElement: SVGElement;\r\n    xmlbase: string;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGElement: {\r\n    prototype: SVGElement;\r\n    new(): SVGElement;\r\n}\r\n\r\ninterface SVGElementInstance extends EventTarget {\r\n    childNodes: SVGElementInstanceList;\r\n    correspondingElement: SVGElement;\r\n    correspondingUseElement: SVGUseElement;\r\n    firstChild: SVGElementInstance;\r\n    lastChild: SVGElementInstance;\r\n    nextSibling: SVGElementInstance;\r\n    parentNode: SVGElementInstance;\r\n    previousSibling: SVGElementInstance;\r\n}\r\n\r\ndeclare var SVGElementInstance: {\r\n    prototype: SVGElementInstance;\r\n    new(): SVGElementInstance;\r\n}\r\n\r\ninterface SVGElementInstanceList {\r\n    length: number;\r\n    item(index: number): SVGElementInstance;\r\n}\r\n\r\ndeclare var SVGElementInstanceList: {\r\n    prototype: SVGElementInstanceList;\r\n    new(): SVGElementInstanceList;\r\n}\r\n\r\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    cx: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    ry: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGEllipseElement: {\r\n    prototype: SVGEllipseElement;\r\n    new(): SVGEllipseElement;\r\n}\r\n\r\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    in2: SVGAnimatedString;\r\n    mode: SVGAnimatedEnumeration;\r\n    SVG_FEBLEND_MODE_COLOR: number;\r\n    SVG_FEBLEND_MODE_COLOR_BURN: number;\r\n    SVG_FEBLEND_MODE_COLOR_DODGE: number;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_DIFFERENCE: number;\r\n    SVG_FEBLEND_MODE_EXCLUSION: number;\r\n    SVG_FEBLEND_MODE_HARD_LIGHT: number;\r\n    SVG_FEBLEND_MODE_HUE: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n    SVG_FEBLEND_MODE_LUMINOSITY: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_OVERLAY: number;\r\n    SVG_FEBLEND_MODE_SATURATION: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_SOFT_LIGHT: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEBlendElement: {\r\n    prototype: SVGFEBlendElement;\r\n    new(): SVGFEBlendElement;\r\n    SVG_FEBLEND_MODE_COLOR: number;\r\n    SVG_FEBLEND_MODE_COLOR_BURN: number;\r\n    SVG_FEBLEND_MODE_COLOR_DODGE: number;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_DIFFERENCE: number;\r\n    SVG_FEBLEND_MODE_EXCLUSION: number;\r\n    SVG_FEBLEND_MODE_HARD_LIGHT: number;\r\n    SVG_FEBLEND_MODE_HUE: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n    SVG_FEBLEND_MODE_LUMINOSITY: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_OVERLAY: number;\r\n    SVG_FEBLEND_MODE_SATURATION: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_SOFT_LIGHT: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    type: SVGAnimatedEnumeration;\r\n    values: SVGAnimatedNumberList;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEColorMatrixElement: {\r\n    prototype: SVGFEColorMatrixElement;\r\n    new(): SVGFEColorMatrixElement;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEComponentTransferElement: {\r\n    prototype: SVGFEComponentTransferElement;\r\n    new(): SVGFEComponentTransferElement;\r\n}\r\n\r\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    in2: SVGAnimatedString;\r\n    k1: SVGAnimatedNumber;\r\n    k2: SVGAnimatedNumber;\r\n    k3: SVGAnimatedNumber;\r\n    k4: SVGAnimatedNumber;\r\n    operator: SVGAnimatedEnumeration;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFECompositeElement: {\r\n    prototype: SVGFECompositeElement;\r\n    new(): SVGFECompositeElement;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n}\r\n\r\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    bias: SVGAnimatedNumber;\r\n    divisor: SVGAnimatedNumber;\r\n    edgeMode: SVGAnimatedEnumeration;\r\n    in1: SVGAnimatedString;\r\n    kernelMatrix: SVGAnimatedNumberList;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    orderX: SVGAnimatedInteger;\r\n    orderY: SVGAnimatedInteger;\r\n    preserveAlpha: SVGAnimatedBoolean;\r\n    targetX: SVGAnimatedInteger;\r\n    targetY: SVGAnimatedInteger;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_WRAP: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEConvolveMatrixElement: {\r\n    prototype: SVGFEConvolveMatrixElement;\r\n    new(): SVGFEConvolveMatrixElement;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_WRAP: number;\r\n}\r\n\r\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    diffuseConstant: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEDiffuseLightingElement: {\r\n    prototype: SVGFEDiffuseLightingElement;\r\n    new(): SVGFEDiffuseLightingElement;\r\n}\r\n\r\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    in2: SVGAnimatedString;\r\n    scale: SVGAnimatedNumber;\r\n    xChannelSelector: SVGAnimatedEnumeration;\r\n    yChannelSelector: SVGAnimatedEnumeration;\r\n    SVG_CHANNEL_A: number;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEDisplacementMapElement: {\r\n    prototype: SVGFEDisplacementMapElement;\r\n    new(): SVGFEDisplacementMapElement;\r\n    SVG_CHANNEL_A: number;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEDistantLightElement extends SVGElement {\r\n    azimuth: SVGAnimatedNumber;\r\n    elevation: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFEDistantLightElement: {\r\n    prototype: SVGFEDistantLightElement;\r\n    new(): SVGFEDistantLightElement;\r\n}\r\n\r\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEFloodElement: {\r\n    prototype: SVGFEFloodElement;\r\n    new(): SVGFEFloodElement;\r\n}\r\n\r\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncAElement: {\r\n    prototype: SVGFEFuncAElement;\r\n    new(): SVGFEFuncAElement;\r\n}\r\n\r\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncBElement: {\r\n    prototype: SVGFEFuncBElement;\r\n    new(): SVGFEFuncBElement;\r\n}\r\n\r\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncGElement: {\r\n    prototype: SVGFEFuncGElement;\r\n    new(): SVGFEFuncGElement;\r\n}\r\n\r\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncRElement: {\r\n    prototype: SVGFEFuncRElement;\r\n    new(): SVGFEFuncRElement;\r\n}\r\n\r\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    stdDeviationX: SVGAnimatedNumber;\r\n    stdDeviationY: SVGAnimatedNumber;\r\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEGaussianBlurElement: {\r\n    prototype: SVGFEGaussianBlurElement;\r\n    new(): SVGFEGaussianBlurElement;\r\n}\r\n\r\ninterface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEImageElement: {\r\n    prototype: SVGFEImageElement;\r\n    new(): SVGFEImageElement;\r\n}\r\n\r\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEMergeElement: {\r\n    prototype: SVGFEMergeElement;\r\n    new(): SVGFEMergeElement;\r\n}\r\n\r\ninterface SVGFEMergeNodeElement extends SVGElement {\r\n    in1: SVGAnimatedString;\r\n}\r\n\r\ndeclare var SVGFEMergeNodeElement: {\r\n    prototype: SVGFEMergeNodeElement;\r\n    new(): SVGFEMergeNodeElement;\r\n}\r\n\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    operator: SVGAnimatedEnumeration;\r\n    radiusX: SVGAnimatedNumber;\r\n    radiusY: SVGAnimatedNumber;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEMorphologyElement: {\r\n    prototype: SVGFEMorphologyElement;\r\n    new(): SVGFEMorphologyElement;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    dx: SVGAnimatedNumber;\r\n    dy: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEOffsetElement: {\r\n    prototype: SVGFEOffsetElement;\r\n    new(): SVGFEOffsetElement;\r\n}\r\n\r\ninterface SVGFEPointLightElement extends SVGElement {\r\n    x: SVGAnimatedNumber;\r\n    y: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFEPointLightElement: {\r\n    prototype: SVGFEPointLightElement;\r\n    new(): SVGFEPointLightElement;\r\n}\r\n\r\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    specularConstant: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFESpecularLightingElement: {\r\n    prototype: SVGFESpecularLightingElement;\r\n    new(): SVGFESpecularLightingElement;\r\n}\r\n\r\ninterface SVGFESpotLightElement extends SVGElement {\r\n    limitingConeAngle: SVGAnimatedNumber;\r\n    pointsAtX: SVGAnimatedNumber;\r\n    pointsAtY: SVGAnimatedNumber;\r\n    pointsAtZ: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    x: SVGAnimatedNumber;\r\n    y: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFESpotLightElement: {\r\n    prototype: SVGFESpotLightElement;\r\n    new(): SVGFESpotLightElement;\r\n}\r\n\r\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFETileElement: {\r\n    prototype: SVGFETileElement;\r\n    new(): SVGFETileElement;\r\n}\r\n\r\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    baseFrequencyX: SVGAnimatedNumber;\r\n    baseFrequencyY: SVGAnimatedNumber;\r\n    numOctaves: SVGAnimatedInteger;\r\n    seed: SVGAnimatedNumber;\r\n    stitchTiles: SVGAnimatedEnumeration;\r\n    type: SVGAnimatedEnumeration;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFETurbulenceElement: {\r\n    prototype: SVGFETurbulenceElement;\r\n    new(): SVGFETurbulenceElement;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    filterResX: SVGAnimatedInteger;\r\n    filterResY: SVGAnimatedInteger;\r\n    filterUnits: SVGAnimatedEnumeration;\r\n    height: SVGAnimatedLength;\r\n    primitiveUnits: SVGAnimatedEnumeration;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    setFilterRes(filterResX: number, filterResY: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFilterElement: {\r\n    prototype: SVGFilterElement;\r\n    new(): SVGFilterElement;\r\n}\r\n\r\ninterface SVGForeignObjectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    height: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGForeignObjectElement: {\r\n    prototype: SVGForeignObjectElement;\r\n    new(): SVGForeignObjectElement;\r\n}\r\n\r\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGGElement: {\r\n    prototype: SVGGElement;\r\n    new(): SVGGElement;\r\n}\r\n\r\ninterface SVGGradientElement extends SVGElement, SVGStylable, SVGExternalResourcesRequired, SVGURIReference, SVGUnitTypes {\r\n    gradientTransform: SVGAnimatedTransformList;\r\n    gradientUnits: SVGAnimatedEnumeration;\r\n    spreadMethod: SVGAnimatedEnumeration;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGGradientElement: {\r\n    prototype: SVGGradientElement;\r\n    new(): SVGGradientElement;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    height: SVGAnimatedLength;\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGImageElement: {\r\n    prototype: SVGImageElement;\r\n    new(): SVGImageElement;\r\n}\r\n\r\ninterface SVGLength {\r\n    unitType: number;\r\n    value: number;\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGLength: {\r\n    prototype: SVGLength;\r\n    new(): SVGLength;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGLengthList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: SVGLength): SVGLength;\r\n    clear(): void;\r\n    getItem(index: number): SVGLength;\r\n    initialize(newItem: SVGLength): SVGLength;\r\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\r\n    removeItem(index: number): SVGLength;\r\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\r\n}\r\n\r\ndeclare var SVGLengthList: {\r\n    prototype: SVGLengthList;\r\n    new(): SVGLengthList;\r\n}\r\n\r\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    x1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    y1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGLineElement: {\r\n    prototype: SVGLineElement;\r\n    new(): SVGLineElement;\r\n}\r\n\r\ninterface SVGLinearGradientElement extends SVGGradientElement {\r\n    x1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    y1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n}\r\n\r\ndeclare var SVGLinearGradientElement: {\r\n    prototype: SVGLinearGradientElement;\r\n    new(): SVGLinearGradientElement;\r\n}\r\n\r\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\r\n    markerHeight: SVGAnimatedLength;\r\n    markerUnits: SVGAnimatedEnumeration;\r\n    markerWidth: SVGAnimatedLength;\r\n    orientAngle: SVGAnimatedAngle;\r\n    orientType: SVGAnimatedEnumeration;\r\n    refX: SVGAnimatedLength;\r\n    refY: SVGAnimatedLength;\r\n    setOrientToAngle(angle: SVGAngle): void;\r\n    setOrientToAuto(): void;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGMarkerElement: {\r\n    prototype: SVGMarkerElement;\r\n    new(): SVGMarkerElement;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGMaskElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\r\n    height: SVGAnimatedLength;\r\n    maskContentUnits: SVGAnimatedEnumeration;\r\n    maskUnits: SVGAnimatedEnumeration;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGMaskElement: {\r\n    prototype: SVGMaskElement;\r\n    new(): SVGMaskElement;\r\n}\r\n\r\ninterface SVGMatrix {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    e: number;\r\n    f: number;\r\n    flipX(): SVGMatrix;\r\n    flipY(): SVGMatrix;\r\n    inverse(): SVGMatrix;\r\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\r\n    rotate(angle: number): SVGMatrix;\r\n    rotateFromVector(x: number, y: number): SVGMatrix;\r\n    scale(scaleFactor: number): SVGMatrix;\r\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\r\n    skewX(angle: number): SVGMatrix;\r\n    skewY(angle: number): SVGMatrix;\r\n    translate(x: number, y: number): SVGMatrix;\r\n}\r\n\r\ndeclare var SVGMatrix: {\r\n    prototype: SVGMatrix;\r\n    new(): SVGMatrix;\r\n}\r\n\r\ninterface SVGMetadataElement extends SVGElement {\r\n}\r\n\r\ndeclare var SVGMetadataElement: {\r\n    prototype: SVGMetadataElement;\r\n    new(): SVGMetadataElement;\r\n}\r\n\r\ninterface SVGNumber {\r\n    value: number;\r\n}\r\n\r\ndeclare var SVGNumber: {\r\n    prototype: SVGNumber;\r\n    new(): SVGNumber;\r\n}\r\n\r\ninterface SVGNumberList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: SVGNumber): SVGNumber;\r\n    clear(): void;\r\n    getItem(index: number): SVGNumber;\r\n    initialize(newItem: SVGNumber): SVGNumber;\r\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\r\n    removeItem(index: number): SVGNumber;\r\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\r\n}\r\n\r\ndeclare var SVGNumberList: {\r\n    prototype: SVGNumberList;\r\n    new(): SVGNumberList;\r\n}\r\n\r\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPathData {\r\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;\r\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;\r\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\r\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\r\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\r\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\r\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\r\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\r\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\r\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\r\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\r\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\r\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\r\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\r\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\r\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\r\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\r\n    getPathSegAtLength(distance: number): number;\r\n    getPointAtLength(distance: number): SVGPoint;\r\n    getTotalLength(): number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPathElement: {\r\n    prototype: SVGPathElement;\r\n    new(): SVGPathElement;\r\n}\r\n\r\ninterface SVGPathSeg {\r\n    pathSegType: number;\r\n    pathSegTypeAsLetter: string;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGPathSeg: {\r\n    prototype: SVGPathSeg;\r\n    new(): SVGPathSeg;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGPathSegArcAbs extends SVGPathSeg {\r\n    angle: number;\r\n    largeArcFlag: boolean;\r\n    r1: number;\r\n    r2: number;\r\n    sweepFlag: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegArcAbs: {\r\n    prototype: SVGPathSegArcAbs;\r\n    new(): SVGPathSegArcAbs;\r\n}\r\n\r\ninterface SVGPathSegArcRel extends SVGPathSeg {\r\n    angle: number;\r\n    largeArcFlag: boolean;\r\n    r1: number;\r\n    r2: number;\r\n    sweepFlag: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegArcRel: {\r\n    prototype: SVGPathSegArcRel;\r\n    new(): SVGPathSegArcRel;\r\n}\r\n\r\ninterface SVGPathSegClosePath extends SVGPathSeg {\r\n}\r\n\r\ndeclare var SVGPathSegClosePath: {\r\n    prototype: SVGPathSegClosePath;\r\n    new(): SVGPathSegClosePath;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    x2: number;\r\n    y: number;\r\n    y1: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicAbs: {\r\n    prototype: SVGPathSegCurvetoCubicAbs;\r\n    new(): SVGPathSegCurvetoCubicAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    x2: number;\r\n    y: number;\r\n    y1: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicRel: {\r\n    prototype: SVGPathSegCurvetoCubicRel;\r\n    new(): SVGPathSegCurvetoCubicRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\r\n    x: number;\r\n    x2: number;\r\n    y: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\r\n    new(): SVGPathSegCurvetoCubicSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\r\n    x: number;\r\n    x2: number;\r\n    y: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\r\n    new(): SVGPathSegCurvetoCubicSmoothRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    y: number;\r\n    y1: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticAbs;\r\n    new(): SVGPathSegCurvetoQuadraticAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    y: number;\r\n    y1: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticRel;\r\n    new(): SVGPathSegCurvetoQuadraticRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoAbs: {\r\n    prototype: SVGPathSegLinetoAbs;\r\n    new(): SVGPathSegLinetoAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\r\n    x: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoHorizontalAbs: {\r\n    prototype: SVGPathSegLinetoHorizontalAbs;\r\n    new(): SVGPathSegLinetoHorizontalAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\r\n    x: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoHorizontalRel: {\r\n    prototype: SVGPathSegLinetoHorizontalRel;\r\n    new(): SVGPathSegLinetoHorizontalRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoRel: {\r\n    prototype: SVGPathSegLinetoRel;\r\n    new(): SVGPathSegLinetoRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoVerticalAbs: {\r\n    prototype: SVGPathSegLinetoVerticalAbs;\r\n    new(): SVGPathSegLinetoVerticalAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoVerticalRel: {\r\n    prototype: SVGPathSegLinetoVerticalRel;\r\n    new(): SVGPathSegLinetoVerticalRel;\r\n}\r\n\r\ninterface SVGPathSegList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\r\n    clear(): void;\r\n    getItem(index: number): SVGPathSeg;\r\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\r\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n    removeItem(index: number): SVGPathSeg;\r\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n}\r\n\r\ndeclare var SVGPathSegList: {\r\n    prototype: SVGPathSegList;\r\n    new(): SVGPathSegList;\r\n}\r\n\r\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegMovetoAbs: {\r\n    prototype: SVGPathSegMovetoAbs;\r\n    new(): SVGPathSegMovetoAbs;\r\n}\r\n\r\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegMovetoRel: {\r\n    prototype: SVGPathSegMovetoRel;\r\n    new(): SVGPathSegMovetoRel;\r\n}\r\n\r\ninterface SVGPatternElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGURIReference, SVGUnitTypes {\r\n    height: SVGAnimatedLength;\r\n    patternContentUnits: SVGAnimatedEnumeration;\r\n    patternTransform: SVGAnimatedTransformList;\r\n    patternUnits: SVGAnimatedEnumeration;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPatternElement: {\r\n    prototype: SVGPatternElement;\r\n    new(): SVGPatternElement;\r\n}\r\n\r\ninterface SVGPoint {\r\n    x: number;\r\n    y: number;\r\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\r\n}\r\n\r\ndeclare var SVGPoint: {\r\n    prototype: SVGPoint;\r\n    new(): SVGPoint;\r\n}\r\n\r\ninterface SVGPointList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: SVGPoint): SVGPoint;\r\n    clear(): void;\r\n    getItem(index: number): SVGPoint;\r\n    initialize(newItem: SVGPoint): SVGPoint;\r\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\r\n    removeItem(index: number): SVGPoint;\r\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\r\n}\r\n\r\ndeclare var SVGPointList: {\r\n    prototype: SVGPointList;\r\n    new(): SVGPointList;\r\n}\r\n\r\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPolygonElement: {\r\n    prototype: SVGPolygonElement;\r\n    new(): SVGPolygonElement;\r\n}\r\n\r\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPolylineElement: {\r\n    prototype: SVGPolylineElement;\r\n    new(): SVGPolylineElement;\r\n}\r\n\r\ninterface SVGPreserveAspectRatio {\r\n    align: number;\r\n    meetOrSlice: number;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n}\r\n\r\ndeclare var SVGPreserveAspectRatio: {\r\n    prototype: SVGPreserveAspectRatio;\r\n    new(): SVGPreserveAspectRatio;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n}\r\n\r\ninterface SVGRadialGradientElement extends SVGGradientElement {\r\n    cx: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n    fx: SVGAnimatedLength;\r\n    fy: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n}\r\n\r\ndeclare var SVGRadialGradientElement: {\r\n    prototype: SVGRadialGradientElement;\r\n    new(): SVGRadialGradientElement;\r\n}\r\n\r\ninterface SVGRect {\r\n    height: number;\r\n    width: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGRect: {\r\n    prototype: SVGRect;\r\n    new(): SVGRect;\r\n}\r\n\r\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    height: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    ry: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGRectElement: {\r\n    prototype: SVGRectElement;\r\n    new(): SVGRectElement;\r\n}\r\n\r\ninterface SVGSVGElement extends SVGElement, DocumentEvent, SVGLocatable, SVGTests, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\r\n    contentScriptType: string;\r\n    contentStyleType: string;\r\n    currentScale: number;\r\n    currentTranslate: SVGPoint;\r\n    height: SVGAnimatedLength;\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    onzoom: (ev: SVGZoomEvent) => any;\r\n    pixelUnitToMillimeterX: number;\r\n    pixelUnitToMillimeterY: number;\r\n    screenPixelToMillimeterX: number;\r\n    screenPixelToMillimeterY: number;\r\n    viewport: SVGRect;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean;\r\n    checkIntersection(element: SVGElement, rect: SVGRect): boolean;\r\n    createSVGAngle(): SVGAngle;\r\n    createSVGLength(): SVGLength;\r\n    createSVGMatrix(): SVGMatrix;\r\n    createSVGNumber(): SVGNumber;\r\n    createSVGPoint(): SVGPoint;\r\n    createSVGRect(): SVGRect;\r\n    createSVGTransform(): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    deselectAll(): void;\r\n    forceRedraw(): void;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getCurrentTime(): number;\r\n    getElementById(elementId: string): Element;\r\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    pauseAnimations(): void;\r\n    setCurrentTime(seconds: number): void;\r\n    suspendRedraw(maxWaitMilliseconds: number): number;\r\n    unpauseAnimations(): void;\r\n    unsuspendRedraw(suspendHandleID: number): void;\r\n    unsuspendRedrawAll(): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGAbort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGError\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGUnload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGZoom\", listener: (ev: SVGZoomEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSVGElement: {\r\n    prototype: SVGSVGElement;\r\n    new(): SVGSVGElement;\r\n}\r\n\r\ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference {\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGScriptElement: {\r\n    prototype: SVGScriptElement;\r\n    new(): SVGScriptElement;\r\n}\r\n\r\ninterface SVGStopElement extends SVGElement, SVGStylable {\r\n    offset: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGStopElement: {\r\n    prototype: SVGStopElement;\r\n    new(): SVGStopElement;\r\n}\r\n\r\ninterface SVGStringList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: string): string;\r\n    clear(): void;\r\n    getItem(index: number): string;\r\n    initialize(newItem: string): string;\r\n    insertItemBefore(newItem: string, index: number): string;\r\n    removeItem(index: number): string;\r\n    replaceItem(newItem: string, index: number): string;\r\n}\r\n\r\ndeclare var SVGStringList: {\r\n    prototype: SVGStringList;\r\n    new(): SVGStringList;\r\n}\r\n\r\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\r\n    media: string;\r\n    title: string;\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGStyleElement: {\r\n    prototype: SVGStyleElement;\r\n    new(): SVGStyleElement;\r\n}\r\n\r\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSwitchElement: {\r\n    prototype: SVGSwitchElement;\r\n    new(): SVGSwitchElement;\r\n}\r\n\r\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSymbolElement: {\r\n    prototype: SVGSymbolElement;\r\n    new(): SVGSymbolElement;\r\n}\r\n\r\ninterface SVGTSpanElement extends SVGTextPositioningElement {\r\n}\r\n\r\ndeclare var SVGTSpanElement: {\r\n    prototype: SVGTSpanElement;\r\n    new(): SVGTSpanElement;\r\n}\r\n\r\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    lengthAdjust: SVGAnimatedEnumeration;\r\n    textLength: SVGAnimatedLength;\r\n    getCharNumAtPosition(point: SVGPoint): number;\r\n    getComputedTextLength(): number;\r\n    getEndPositionOfChar(charnum: number): SVGPoint;\r\n    getExtentOfChar(charnum: number): SVGRect;\r\n    getNumberOfChars(): number;\r\n    getRotationOfChar(charnum: number): number;\r\n    getStartPositionOfChar(charnum: number): SVGPoint;\r\n    getSubStringLength(charnum: number, nchars: number): number;\r\n    selectSubString(charnum: number, nchars: number): void;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextContentElement: {\r\n    prototype: SVGTextContentElement;\r\n    new(): SVGTextContentElement;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextElement: {\r\n    prototype: SVGTextElement;\r\n    new(): SVGTextElement;\r\n}\r\n\r\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\r\n    method: SVGAnimatedEnumeration;\r\n    spacing: SVGAnimatedEnumeration;\r\n    startOffset: SVGAnimatedLength;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextPathElement: {\r\n    prototype: SVGTextPathElement;\r\n    new(): SVGTextPathElement;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTextPositioningElement extends SVGTextContentElement {\r\n    dx: SVGAnimatedLengthList;\r\n    dy: SVGAnimatedLengthList;\r\n    rotate: SVGAnimatedNumberList;\r\n    x: SVGAnimatedLengthList;\r\n    y: SVGAnimatedLengthList;\r\n}\r\n\r\ndeclare var SVGTextPositioningElement: {\r\n    prototype: SVGTextPositioningElement;\r\n    new(): SVGTextPositioningElement;\r\n}\r\n\r\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTitleElement: {\r\n    prototype: SVGTitleElement;\r\n    new(): SVGTitleElement;\r\n}\r\n\r\ninterface SVGTransform {\r\n    angle: number;\r\n    matrix: SVGMatrix;\r\n    type: number;\r\n    setMatrix(matrix: SVGMatrix): void;\r\n    setRotate(angle: number, cx: number, cy: number): void;\r\n    setScale(sx: number, sy: number): void;\r\n    setSkewX(angle: number): void;\r\n    setSkewY(angle: number): void;\r\n    setTranslate(tx: number, ty: number): void;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGTransform: {\r\n    prototype: SVGTransform;\r\n    new(): SVGTransform;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTransformList {\r\n    numberOfItems: number;\r\n    appendItem(newItem: SVGTransform): SVGTransform;\r\n    clear(): void;\r\n    consolidate(): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    getItem(index: number): SVGTransform;\r\n    initialize(newItem: SVGTransform): SVGTransform;\r\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\r\n    removeItem(index: number): SVGTransform;\r\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\r\n}\r\n\r\ndeclare var SVGTransformList: {\r\n    prototype: SVGTransformList;\r\n    new(): SVGTransformList;\r\n}\r\n\r\ninterface SVGUnitTypes {\r\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\r\n    SVG_UNIT_TYPE_UNKNOWN: number;\r\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGUnitTypes: SVGUnitTypes;\r\n\r\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    animatedInstanceRoot: SVGElementInstance;\r\n    height: SVGAnimatedLength;\r\n    instanceRoot: SVGElementInstance;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGUseElement: {\r\n    prototype: SVGUseElement;\r\n    new(): SVGUseElement;\r\n}\r\n\r\ninterface SVGViewElement extends SVGElement, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\r\n    viewTarget: SVGStringList;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGViewElement: {\r\n    prototype: SVGViewElement;\r\n    new(): SVGViewElement;\r\n}\r\n\r\ninterface SVGZoomAndPan {\r\n    SVG_ZOOMANDPAN_DISABLE: number;\r\n    SVG_ZOOMANDPAN_MAGNIFY: number;\r\n    SVG_ZOOMANDPAN_UNKNOWN: number;\r\n}\r\ndeclare var SVGZoomAndPan: SVGZoomAndPan;\r\n\r\ninterface SVGZoomEvent extends UIEvent {\r\n    newScale: number;\r\n    newTranslate: SVGPoint;\r\n    previousScale: number;\r\n    previousTranslate: SVGPoint;\r\n    zoomRectScreen: SVGRect;\r\n}\r\n\r\ndeclare var SVGZoomEvent: {\r\n    prototype: SVGZoomEvent;\r\n    new(): SVGZoomEvent;\r\n}\r\n\r\ninterface Screen extends EventTarget {\r\n    availHeight: number;\r\n    availWidth: number;\r\n    bufferDepth: number;\r\n    colorDepth: number;\r\n    deviceXDPI: number;\r\n    deviceYDPI: number;\r\n    fontSmoothingEnabled: boolean;\r\n    height: number;\r\n    logicalXDPI: number;\r\n    logicalYDPI: number;\r\n    msOrientation: string;\r\n    onmsorientationchange: (ev: Event) => any;\r\n    pixelDepth: number;\r\n    systemXDPI: number;\r\n    systemYDPI: number;\r\n    width: number;\r\n    msLockOrientation(orientations: string): boolean;\r\n    msLockOrientation(orientations: string[]): boolean;\r\n    msUnlockOrientation(): void;\r\n    addEventListener(type: \"MSOrientationChange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Screen: {\r\n    prototype: Screen;\r\n    new(): Screen;\r\n}\r\n\r\ninterface ScriptNotifyEvent extends Event {\r\n    callingUri: string;\r\n    value: string;\r\n}\r\n\r\ndeclare var ScriptNotifyEvent: {\r\n    prototype: ScriptNotifyEvent;\r\n    new(): ScriptNotifyEvent;\r\n}\r\n\r\ninterface ScriptProcessorNode extends AudioNode {\r\n    bufferSize: number;\r\n    onaudioprocess: (ev: AudioProcessingEvent) => any;\r\n    addEventListener(type: \"audioprocess\", listener: (ev: AudioProcessingEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var ScriptProcessorNode: {\r\n    prototype: ScriptProcessorNode;\r\n    new(): ScriptProcessorNode;\r\n}\r\n\r\ninterface Selection {\r\n    anchorNode: Node;\r\n    anchorOffset: number;\r\n    focusNode: Node;\r\n    focusOffset: number;\r\n    isCollapsed: boolean;\r\n    rangeCount: number;\r\n    type: string;\r\n    addRange(range: Range): void;\r\n    collapse(parentNode: Node, offset: number): void;\r\n    collapseToEnd(): void;\r\n    collapseToStart(): void;\r\n    containsNode(node: Node, partlyContained: boolean): boolean;\r\n    deleteFromDocument(): void;\r\n    empty(): void;\r\n    extend(newNode: Node, offset: number): void;\r\n    getRangeAt(index: number): Range;\r\n    removeAllRanges(): void;\r\n    removeRange(range: Range): void;\r\n    selectAllChildren(parentNode: Node): void;\r\n    setBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var Selection: {\r\n    prototype: Selection;\r\n    new(): Selection;\r\n}\r\n\r\ninterface SourceBuffer extends EventTarget {\r\n    appendWindowEnd: number;\r\n    appendWindowStart: number;\r\n    audioTracks: AudioTrackList;\r\n    buffered: TimeRanges;\r\n    mode: string;\r\n    timestampOffset: number;\r\n    updating: boolean;\r\n    videoTracks: VideoTrackList;\r\n    abort(): void;\r\n    appendBuffer(data: ArrayBuffer): void;\r\n    appendBuffer(data: ArrayBufferView): void;\r\n    appendStream(stream: MSStream, maxSize?: number): void;\r\n    remove(start: number, end: number): void;\r\n}\r\n\r\ndeclare var SourceBuffer: {\r\n    prototype: SourceBuffer;\r\n    new(): SourceBuffer;\r\n}\r\n\r\ninterface SourceBufferList extends EventTarget {\r\n    length: number;\r\n    item(index: number): SourceBuffer;\r\n    [index: number]: SourceBuffer;\r\n}\r\n\r\ndeclare var SourceBufferList: {\r\n    prototype: SourceBufferList;\r\n    new(): SourceBufferList;\r\n}\r\n\r\ninterface StereoPannerNode extends AudioNode {\r\n    pan: AudioParam;\r\n}\r\n\r\ndeclare var StereoPannerNode: {\r\n    prototype: StereoPannerNode;\r\n    new(): StereoPannerNode;\r\n}\r\n\r\ninterface Storage {\r\n    length: number;\r\n    clear(): void;\r\n    getItem(key: string): any;\r\n    key(index: number): string;\r\n    removeItem(key: string): void;\r\n    setItem(key: string, data: string): void;\r\n    [key: string]: any;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var Storage: {\r\n    prototype: Storage;\r\n    new(): Storage;\r\n}\r\n\r\ninterface StorageEvent extends Event {\r\n    key: string;\r\n    newValue: any;\r\n    oldValue: any;\r\n    storageArea: Storage;\r\n    url: string;\r\n    initStorageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, keyArg: string, oldValueArg: any, newValueArg: any, urlArg: string, storageAreaArg: Storage): void;\r\n}\r\n\r\ndeclare var StorageEvent: {\r\n    prototype: StorageEvent;\r\n    new(): StorageEvent;\r\n}\r\n\r\ninterface StyleMedia {\r\n    type: string;\r\n    matchMedium(mediaquery: string): boolean;\r\n}\r\n\r\ndeclare var StyleMedia: {\r\n    prototype: StyleMedia;\r\n    new(): StyleMedia;\r\n}\r\n\r\ninterface StyleSheet {\r\n    disabled: boolean;\r\n    href: string;\r\n    media: MediaList;\r\n    ownerNode: Node;\r\n    parentStyleSheet: StyleSheet;\r\n    title: string;\r\n    type: string;\r\n}\r\n\r\ndeclare var StyleSheet: {\r\n    prototype: StyleSheet;\r\n    new(): StyleSheet;\r\n}\r\n\r\ninterface StyleSheetList {\r\n    length: number;\r\n    item(index?: number): StyleSheet;\r\n    [index: number]: StyleSheet;\r\n}\r\n\r\ndeclare var StyleSheetList: {\r\n    prototype: StyleSheetList;\r\n    new(): StyleSheetList;\r\n}\r\n\r\ninterface StyleSheetPageList {\r\n    length: number;\r\n    item(index: number): CSSPageRule;\r\n    [index: number]: CSSPageRule;\r\n}\r\n\r\ndeclare var StyleSheetPageList: {\r\n    prototype: StyleSheetPageList;\r\n    new(): StyleSheetPageList;\r\n}\r\n\r\ninterface SubtleCrypto {\r\n    decrypt(algorithm: string, key: CryptoKey, data: ArrayBufferView): any;\r\n    decrypt(algorithm: Algorithm, key: CryptoKey, data: ArrayBufferView): any;\r\n    deriveBits(algorithm: string, baseKey: CryptoKey, length: number): any;\r\n    deriveBits(algorithm: Algorithm, baseKey: CryptoKey, length: number): any;\r\n    deriveKey(algorithm: string, baseKey: CryptoKey, derivedKeyType: string, extractable: boolean, keyUsages: string[]): any;\r\n    deriveKey(algorithm: string, baseKey: CryptoKey, derivedKeyType: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    deriveKey(algorithm: Algorithm, baseKey: CryptoKey, derivedKeyType: string, extractable: boolean, keyUsages: string[]): any;\r\n    deriveKey(algorithm: Algorithm, baseKey: CryptoKey, derivedKeyType: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    digest(algorithm: string, data: ArrayBufferView): any;\r\n    digest(algorithm: Algorithm, data: ArrayBufferView): any;\r\n    encrypt(algorithm: string, key: CryptoKey, data: ArrayBufferView): any;\r\n    encrypt(algorithm: Algorithm, key: CryptoKey, data: ArrayBufferView): any;\r\n    exportKey(format: string, key: CryptoKey): any;\r\n    generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): any;\r\n    generateKey(algorithm: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    importKey(format: string, keyData: ArrayBufferView, algorithm: string, extractable: boolean, keyUsages: string[]): any;\r\n    importKey(format: string, keyData: ArrayBufferView, algorithm: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    sign(algorithm: string, key: CryptoKey, data: ArrayBufferView): any;\r\n    sign(algorithm: Algorithm, key: CryptoKey, data: ArrayBufferView): any;\r\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: string, unwrappedKeyAlgorithm: string, extractable: boolean, keyUsages: string[]): any;\r\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: string, unwrappedKeyAlgorithm: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: Algorithm, unwrappedKeyAlgorithm: string, extractable: boolean, keyUsages: string[]): any;\r\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: Algorithm, unwrappedKeyAlgorithm: Algorithm, extractable: boolean, keyUsages: string[]): any;\r\n    verify(algorithm: string, key: CryptoKey, signature: ArrayBufferView, data: ArrayBufferView): any;\r\n    verify(algorithm: Algorithm, key: CryptoKey, signature: ArrayBufferView, data: ArrayBufferView): any;\r\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string): any;\r\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: Algorithm): any;\r\n}\r\n\r\ndeclare var SubtleCrypto: {\r\n    prototype: SubtleCrypto;\r\n    new(): SubtleCrypto;\r\n}\r\n\r\ninterface Text extends CharacterData {\r\n    wholeText: string;\r\n    replaceWholeText(content: string): Text;\r\n    splitText(offset: number): Text;\r\n}\r\n\r\ndeclare var Text: {\r\n    prototype: Text;\r\n    new(): Text;\r\n}\r\n\r\ninterface TextEvent extends UIEvent {\r\n    data: string;\r\n    inputMethod: number;\r\n    locale: string;\r\n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n}\r\n\r\ndeclare var TextEvent: {\r\n    prototype: TextEvent;\r\n    new(): TextEvent;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n}\r\n\r\ninterface TextMetrics {\r\n    width: number;\r\n}\r\n\r\ndeclare var TextMetrics: {\r\n    prototype: TextMetrics;\r\n    new(): TextMetrics;\r\n}\r\n\r\ninterface TextRange {\r\n    boundingHeight: number;\r\n    boundingLeft: number;\r\n    boundingTop: number;\r\n    boundingWidth: number;\r\n    htmlText: string;\r\n    offsetLeft: number;\r\n    offsetTop: number;\r\n    text: string;\r\n    collapse(start?: boolean): void;\r\n    compareEndPoints(how: string, sourceRange: TextRange): number;\r\n    duplicate(): TextRange;\r\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\r\n    execCommandShowHelp(cmdID: string): boolean;\r\n    expand(Unit: string): boolean;\r\n    findText(string: string, count?: number, flags?: number): boolean;\r\n    getBookmark(): string;\r\n    getBoundingClientRect(): ClientRect;\r\n    getClientRects(): ClientRectList;\r\n    inRange(range: TextRange): boolean;\r\n    isEqual(range: TextRange): boolean;\r\n    move(unit: string, count?: number): number;\r\n    moveEnd(unit: string, count?: number): number;\r\n    moveStart(unit: string, count?: number): number;\r\n    moveToBookmark(bookmark: string): boolean;\r\n    moveToElementText(element: Element): void;\r\n    moveToPoint(x: number, y: number): void;\r\n    parentElement(): Element;\r\n    pasteHTML(html: string): void;\r\n    queryCommandEnabled(cmdID: string): boolean;\r\n    queryCommandIndeterm(cmdID: string): boolean;\r\n    queryCommandState(cmdID: string): boolean;\r\n    queryCommandSupported(cmdID: string): boolean;\r\n    queryCommandText(cmdID: string): string;\r\n    queryCommandValue(cmdID: string): any;\r\n    scrollIntoView(fStart?: boolean): void;\r\n    select(): void;\r\n    setEndPoint(how: string, SourceRange: TextRange): void;\r\n}\r\n\r\ndeclare var TextRange: {\r\n    prototype: TextRange;\r\n    new(): TextRange;\r\n}\r\n\r\ninterface TextRangeCollection {\r\n    length: number;\r\n    item(index: number): TextRange;\r\n    [index: number]: TextRange;\r\n}\r\n\r\ndeclare var TextRangeCollection: {\r\n    prototype: TextRangeCollection;\r\n    new(): TextRangeCollection;\r\n}\r\n\r\ninterface TextTrack extends EventTarget {\r\n    activeCues: TextTrackCueList;\r\n    cues: TextTrackCueList;\r\n    inBandMetadataTrackDispatchType: string;\r\n    kind: string;\r\n    label: string;\r\n    language: string;\r\n    mode: any;\r\n    oncuechange: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    readyState: number;\r\n    addCue(cue: TextTrackCue): void;\r\n    removeCue(cue: TextTrackCue): void;\r\n    DISABLED: number;\r\n    ERROR: number;\r\n    HIDDEN: number;\r\n    LOADED: number;\r\n    LOADING: number;\r\n    NONE: number;\r\n    SHOWING: number;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var TextTrack: {\r\n    prototype: TextTrack;\r\n    new(): TextTrack;\r\n    DISABLED: number;\r\n    ERROR: number;\r\n    HIDDEN: number;\r\n    LOADED: number;\r\n    LOADING: number;\r\n    NONE: number;\r\n    SHOWING: number;\r\n}\r\n\r\ninterface TextTrackCue extends EventTarget {\r\n    endTime: number;\r\n    id: string;\r\n    onenter: (ev: Event) => any;\r\n    onexit: (ev: Event) => any;\r\n    pauseOnExit: boolean;\r\n    startTime: number;\r\n    text: string;\r\n    track: TextTrack;\r\n    getCueAsHTML(): DocumentFragment;\r\n    addEventListener(type: \"enter\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"exit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var TextTrackCue: {\r\n    prototype: TextTrackCue;\r\n    new(startTime: number, endTime: number, text: string): TextTrackCue;\r\n}\r\n\r\ninterface TextTrackCueList {\r\n    length: number;\r\n    getCueById(id: string): TextTrackCue;\r\n    item(index: number): TextTrackCue;\r\n    [index: number]: TextTrackCue;\r\n}\r\n\r\ndeclare var TextTrackCueList: {\r\n    prototype: TextTrackCueList;\r\n    new(): TextTrackCueList;\r\n}\r\n\r\ninterface TextTrackList extends EventTarget {\r\n    length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    item(index: number): TextTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: TextTrack;\r\n}\r\n\r\ndeclare var TextTrackList: {\r\n    prototype: TextTrackList;\r\n    new(): TextTrackList;\r\n}\r\n\r\ninterface TimeRanges {\r\n    length: number;\r\n    end(index: number): number;\r\n    start(index: number): number;\r\n}\r\n\r\ndeclare var TimeRanges: {\r\n    prototype: TimeRanges;\r\n    new(): TimeRanges;\r\n}\r\n\r\ninterface Touch {\r\n    clientX: number;\r\n    clientY: number;\r\n    identifier: number;\r\n    pageX: number;\r\n    pageY: number;\r\n    screenX: number;\r\n    screenY: number;\r\n    target: EventTarget;\r\n}\r\n\r\ndeclare var Touch: {\r\n    prototype: Touch;\r\n    new(): Touch;\r\n}\r\n\r\ninterface TouchEvent extends UIEvent {\r\n    altKey: boolean;\r\n    changedTouches: TouchList;\r\n    ctrlKey: boolean;\r\n    metaKey: boolean;\r\n    shiftKey: boolean;\r\n    targetTouches: TouchList;\r\n    touches: TouchList;\r\n}\r\n\r\ndeclare var TouchEvent: {\r\n    prototype: TouchEvent;\r\n    new(): TouchEvent;\r\n}\r\n\r\ninterface TouchList {\r\n    length: number;\r\n    item(index: number): Touch;\r\n    [index: number]: Touch;\r\n}\r\n\r\ndeclare var TouchList: {\r\n    prototype: TouchList;\r\n    new(): TouchList;\r\n}\r\n\r\ninterface TrackEvent extends Event {\r\n    track: any;\r\n}\r\n\r\ndeclare var TrackEvent: {\r\n    prototype: TrackEvent;\r\n    new(): TrackEvent;\r\n}\r\n\r\ninterface TransitionEvent extends Event {\r\n    elapsedTime: number;\r\n    propertyName: string;\r\n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\r\n}\r\n\r\ndeclare var TransitionEvent: {\r\n    prototype: TransitionEvent;\r\n    new(): TransitionEvent;\r\n}\r\n\r\ninterface TreeWalker {\r\n    currentNode: Node;\r\n    expandEntityReferences: boolean;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    whatToShow: number;\r\n    firstChild(): Node;\r\n    lastChild(): Node;\r\n    nextNode(): Node;\r\n    nextSibling(): Node;\r\n    parentNode(): Node;\r\n    previousNode(): Node;\r\n    previousSibling(): Node;\r\n}\r\n\r\ndeclare var TreeWalker: {\r\n    prototype: TreeWalker;\r\n    new(): TreeWalker;\r\n}\r\n\r\ninterface UIEvent extends Event {\r\n    detail: number;\r\n    view: Window;\r\n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\r\n}\r\n\r\ndeclare var UIEvent: {\r\n    prototype: UIEvent;\r\n    new(type: string, eventInitDict?: UIEventInit): UIEvent;\r\n}\r\n\r\ninterface URL {\r\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\r\n    revokeObjectURL(url: string): void;\r\n}\r\ndeclare var URL: URL;\r\n\r\ninterface UnviewableContentIdentifiedEvent extends NavigationEventWithReferrer {\r\n    mediaType: string;\r\n}\r\n\r\ndeclare var UnviewableContentIdentifiedEvent: {\r\n    prototype: UnviewableContentIdentifiedEvent;\r\n    new(): UnviewableContentIdentifiedEvent;\r\n}\r\n\r\ninterface ValidityState {\r\n    badInput: boolean;\r\n    customError: boolean;\r\n    patternMismatch: boolean;\r\n    rangeOverflow: boolean;\r\n    rangeUnderflow: boolean;\r\n    stepMismatch: boolean;\r\n    tooLong: boolean;\r\n    typeMismatch: boolean;\r\n    valid: boolean;\r\n    valueMissing: boolean;\r\n}\r\n\r\ndeclare var ValidityState: {\r\n    prototype: ValidityState;\r\n    new(): ValidityState;\r\n}\r\n\r\ninterface VideoPlaybackQuality {\r\n    corruptedVideoFrames: number;\r\n    creationTime: number;\r\n    droppedVideoFrames: number;\r\n    totalFrameDelay: number;\r\n    totalVideoFrames: number;\r\n}\r\n\r\ndeclare var VideoPlaybackQuality: {\r\n    prototype: VideoPlaybackQuality;\r\n    new(): VideoPlaybackQuality;\r\n}\r\n\r\ninterface VideoTrack {\r\n    id: string;\r\n    kind: string;\r\n    label: string;\r\n    language: string;\r\n    selected: boolean;\r\n    sourceBuffer: SourceBuffer;\r\n}\r\n\r\ndeclare var VideoTrack: {\r\n    prototype: VideoTrack;\r\n    new(): VideoTrack;\r\n}\r\n\r\ninterface VideoTrackList extends EventTarget {\r\n    length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    onchange: (ev: Event) => any;\r\n    onremovetrack: (ev: TrackEvent) => any;\r\n    selectedIndex: number;\r\n    getTrackById(id: string): VideoTrack;\r\n    item(index: number): VideoTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: VideoTrack;\r\n}\r\n\r\ndeclare var VideoTrackList: {\r\n    prototype: VideoTrackList;\r\n    new(): VideoTrackList;\r\n}\r\n\r\ninterface WEBGL_compressed_texture_s3tc {\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\n\r\ndeclare var WEBGL_compressed_texture_s3tc: {\r\n    prototype: WEBGL_compressed_texture_s3tc;\r\n    new(): WEBGL_compressed_texture_s3tc;\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\n\r\ninterface WEBGL_debug_renderer_info {\r\n    UNMASKED_RENDERER_WEBGL: number;\r\n    UNMASKED_VENDOR_WEBGL: number;\r\n}\r\n\r\ndeclare var WEBGL_debug_renderer_info: {\r\n    prototype: WEBGL_debug_renderer_info;\r\n    new(): WEBGL_debug_renderer_info;\r\n    UNMASKED_RENDERER_WEBGL: number;\r\n    UNMASKED_VENDOR_WEBGL: number;\r\n}\r\n\r\ninterface WEBGL_depth_texture {\r\n    UNSIGNED_INT_24_8_WEBGL: number;\r\n}\r\n\r\ndeclare var WEBGL_depth_texture: {\r\n    prototype: WEBGL_depth_texture;\r\n    new(): WEBGL_depth_texture;\r\n    UNSIGNED_INT_24_8_WEBGL: number;\r\n}\r\n\r\ninterface WaveShaperNode extends AudioNode {\r\n    curve: any;\r\n    oversample: string;\r\n}\r\n\r\ndeclare var WaveShaperNode: {\r\n    prototype: WaveShaperNode;\r\n    new(): WaveShaperNode;\r\n}\r\n\r\ninterface WebGLActiveInfo {\r\n    name: string;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ndeclare var WebGLActiveInfo: {\r\n    prototype: WebGLActiveInfo;\r\n    new(): WebGLActiveInfo;\r\n}\r\n\r\ninterface WebGLBuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLBuffer: {\r\n    prototype: WebGLBuffer;\r\n    new(): WebGLBuffer;\r\n}\r\n\r\ninterface WebGLContextEvent extends Event {\r\n    statusMessage: string;\r\n}\r\n\r\ndeclare var WebGLContextEvent: {\r\n    prototype: WebGLContextEvent;\r\n    new(): WebGLContextEvent;\r\n}\r\n\r\ninterface WebGLFramebuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLFramebuffer: {\r\n    prototype: WebGLFramebuffer;\r\n    new(): WebGLFramebuffer;\r\n}\r\n\r\ninterface WebGLObject {\r\n}\r\n\r\ndeclare var WebGLObject: {\r\n    prototype: WebGLObject;\r\n    new(): WebGLObject;\r\n}\r\n\r\ninterface WebGLProgram extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLProgram: {\r\n    prototype: WebGLProgram;\r\n    new(): WebGLProgram;\r\n}\r\n\r\ninterface WebGLRenderbuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLRenderbuffer: {\r\n    prototype: WebGLRenderbuffer;\r\n    new(): WebGLRenderbuffer;\r\n}\r\n\r\ninterface WebGLRenderingContext {\r\n    canvas: HTMLCanvasElement;\r\n    drawingBufferHeight: number;\r\n    drawingBufferWidth: number;\r\n    activeTexture(texture: number): void;\r\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\r\n    bindAttribLocation(program: WebGLProgram, index: number, name: string): void;\r\n    bindBuffer(target: number, buffer: WebGLBuffer): void;\r\n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void;\r\n    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void;\r\n    bindTexture(target: number, texture: WebGLTexture): void;\r\n    blendColor(red: number, green: number, blue: number, alpha: number): void;\r\n    blendEquation(mode: number): void;\r\n    blendEquationSeparate(modeRGB: number, modeAlpha: number): void;\r\n    blendFunc(sfactor: number, dfactor: number): void;\r\n    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\r\n    bufferData(target: number, size: number, usage: number): void;\r\n    bufferData(target: number, size: ArrayBufferView, usage: number): void;\r\n    bufferData(target: number, size: any, usage: number): void;\r\n    bufferSubData(target: number, offset: number, data: ArrayBufferView): void;\r\n    bufferSubData(target: number, offset: number, data: any): void;\r\n    checkFramebufferStatus(target: number): number;\r\n    clear(mask: number): void;\r\n    clearColor(red: number, green: number, blue: number, alpha: number): void;\r\n    clearDepth(depth: number): void;\r\n    clearStencil(s: number): void;\r\n    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;\r\n    compileShader(shader: WebGLShader): void;\r\n    compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void;\r\n    compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void;\r\n    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;\r\n    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;\r\n    createBuffer(): WebGLBuffer;\r\n    createFramebuffer(): WebGLFramebuffer;\r\n    createProgram(): WebGLProgram;\r\n    createRenderbuffer(): WebGLRenderbuffer;\r\n    createShader(type: number): WebGLShader;\r\n    createTexture(): WebGLTexture;\r\n    cullFace(mode: number): void;\r\n    deleteBuffer(buffer: WebGLBuffer): void;\r\n    deleteFramebuffer(framebuffer: WebGLFramebuffer): void;\r\n    deleteProgram(program: WebGLProgram): void;\r\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void;\r\n    deleteShader(shader: WebGLShader): void;\r\n    deleteTexture(texture: WebGLTexture): void;\r\n    depthFunc(func: number): void;\r\n    depthMask(flag: boolean): void;\r\n    depthRange(zNear: number, zFar: number): void;\r\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\r\n    disable(cap: number): void;\r\n    disableVertexAttribArray(index: number): void;\r\n    drawArrays(mode: number, first: number, count: number): void;\r\n    drawElements(mode: number, count: number, type: number, offset: number): void;\r\n    enable(cap: number): void;\r\n    enableVertexAttribArray(index: number): void;\r\n    finish(): void;\r\n    flush(): void;\r\n    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void;\r\n    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void;\r\n    frontFace(mode: number): void;\r\n    generateMipmap(target: number): void;\r\n    getActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo;\r\n    getActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo;\r\n    getAttachedShaders(program: WebGLProgram): WebGLShader[];\r\n    getAttribLocation(program: WebGLProgram, name: string): number;\r\n    getBufferParameter(target: number, pname: number): any;\r\n    getContextAttributes(): WebGLContextAttributes;\r\n    getError(): number;\r\n    getExtension(name: string): any;\r\n    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;\r\n    getParameter(pname: number): any;\r\n    getProgramInfoLog(program: WebGLProgram): string;\r\n    getProgramParameter(program: WebGLProgram, pname: number): any;\r\n    getRenderbufferParameter(target: number, pname: number): any;\r\n    getShaderInfoLog(shader: WebGLShader): string;\r\n    getShaderParameter(shader: WebGLShader, pname: number): any;\r\n    getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat;\r\n    getShaderSource(shader: WebGLShader): string;\r\n    getSupportedExtensions(): string[];\r\n    getTexParameter(target: number, pname: number): any;\r\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\r\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation;\r\n    getVertexAttrib(index: number, pname: number): any;\r\n    getVertexAttribOffset(index: number, pname: number): number;\r\n    hint(target: number, mode: number): void;\r\n    isBuffer(buffer: WebGLBuffer): boolean;\r\n    isContextLost(): boolean;\r\n    isEnabled(cap: number): boolean;\r\n    isFramebuffer(framebuffer: WebGLFramebuffer): boolean;\r\n    isProgram(program: WebGLProgram): boolean;\r\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean;\r\n    isShader(shader: WebGLShader): boolean;\r\n    isTexture(texture: WebGLTexture): boolean;\r\n    lineWidth(width: number): void;\r\n    linkProgram(program: WebGLProgram): void;\r\n    pixelStorei(pname: number, param: number): void;\r\n    polygonOffset(factor: number, units: number): void;\r\n    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;\r\n    sampleCoverage(value: number, invert: boolean): void;\r\n    scissor(x: number, y: number, width: number, height: number): void;\r\n    shaderSource(shader: WebGLShader, source: string): void;\r\n    stencilFunc(func: number, ref: number, mask: number): void;\r\n    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;\r\n    stencilMask(mask: number): void;\r\n    stencilMaskSeparate(face: number, mask: number): void;\r\n    stencilOp(fail: number, zfail: number, zpass: number): void;\r\n    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;\r\n    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;\r\n    texParameterf(target: number, pname: number, param: number): void;\r\n    texParameteri(target: number, pname: number, param: number): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;\r\n    uniform1f(location: WebGLUniformLocation, x: number): void;\r\n    uniform1fv(location: WebGLUniformLocation, v: any): void;\r\n    uniform1i(location: WebGLUniformLocation, x: number): void;\r\n    uniform1iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    uniform2f(location: WebGLUniformLocation, x: number, y: number): void;\r\n    uniform2fv(location: WebGLUniformLocation, v: any): void;\r\n    uniform2i(location: WebGLUniformLocation, x: number, y: number): void;\r\n    uniform2iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void;\r\n    uniform3fv(location: WebGLUniformLocation, v: any): void;\r\n    uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void;\r\n    uniform3iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\r\n    uniform4fv(location: WebGLUniformLocation, v: any): void;\r\n    uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\r\n    uniform4iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: any): void;\r\n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: any): void;\r\n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: any): void;\r\n    useProgram(program: WebGLProgram): void;\r\n    validateProgram(program: WebGLProgram): void;\r\n    vertexAttrib1f(indx: number, x: number): void;\r\n    vertexAttrib1fv(indx: number, values: any): void;\r\n    vertexAttrib2f(indx: number, x: number, y: number): void;\r\n    vertexAttrib2fv(indx: number, values: any): void;\r\n    vertexAttrib3f(indx: number, x: number, y: number, z: number): void;\r\n    vertexAttrib3fv(indx: number, values: any): void;\r\n    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;\r\n    vertexAttrib4fv(indx: number, values: any): void;\r\n    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;\r\n    viewport(x: number, y: number, width: number, height: number): void;\r\n    ACTIVE_ATTRIBUTES: number;\r\n    ACTIVE_TEXTURE: number;\r\n    ACTIVE_UNIFORMS: number;\r\n    ALIASED_LINE_WIDTH_RANGE: number;\r\n    ALIASED_POINT_SIZE_RANGE: number;\r\n    ALPHA: number;\r\n    ALPHA_BITS: number;\r\n    ALWAYS: number;\r\n    ARRAY_BUFFER: number;\r\n    ARRAY_BUFFER_BINDING: number;\r\n    ATTACHED_SHADERS: number;\r\n    BACK: number;\r\n    BLEND: number;\r\n    BLEND_COLOR: number;\r\n    BLEND_DST_ALPHA: number;\r\n    BLEND_DST_RGB: number;\r\n    BLEND_EQUATION: number;\r\n    BLEND_EQUATION_ALPHA: number;\r\n    BLEND_EQUATION_RGB: number;\r\n    BLEND_SRC_ALPHA: number;\r\n    BLEND_SRC_RGB: number;\r\n    BLUE_BITS: number;\r\n    BOOL: number;\r\n    BOOL_VEC2: number;\r\n    BOOL_VEC3: number;\r\n    BOOL_VEC4: number;\r\n    BROWSER_DEFAULT_WEBGL: number;\r\n    BUFFER_SIZE: number;\r\n    BUFFER_USAGE: number;\r\n    BYTE: number;\r\n    CCW: number;\r\n    CLAMP_TO_EDGE: number;\r\n    COLOR_ATTACHMENT0: number;\r\n    COLOR_BUFFER_BIT: number;\r\n    COLOR_CLEAR_VALUE: number;\r\n    COLOR_WRITEMASK: number;\r\n    COMPILE_STATUS: number;\r\n    COMPRESSED_TEXTURE_FORMATS: number;\r\n    CONSTANT_ALPHA: number;\r\n    CONSTANT_COLOR: number;\r\n    CONTEXT_LOST_WEBGL: number;\r\n    CULL_FACE: number;\r\n    CULL_FACE_MODE: number;\r\n    CURRENT_PROGRAM: number;\r\n    CURRENT_VERTEX_ATTRIB: number;\r\n    CW: number;\r\n    DECR: number;\r\n    DECR_WRAP: number;\r\n    DELETE_STATUS: number;\r\n    DEPTH_ATTACHMENT: number;\r\n    DEPTH_BITS: number;\r\n    DEPTH_BUFFER_BIT: number;\r\n    DEPTH_CLEAR_VALUE: number;\r\n    DEPTH_COMPONENT: number;\r\n    DEPTH_COMPONENT16: number;\r\n    DEPTH_FUNC: number;\r\n    DEPTH_RANGE: number;\r\n    DEPTH_STENCIL: number;\r\n    DEPTH_STENCIL_ATTACHMENT: number;\r\n    DEPTH_TEST: number;\r\n    DEPTH_WRITEMASK: number;\r\n    DITHER: number;\r\n    DONT_CARE: number;\r\n    DST_ALPHA: number;\r\n    DST_COLOR: number;\r\n    DYNAMIC_DRAW: number;\r\n    ELEMENT_ARRAY_BUFFER: number;\r\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    EQUAL: number;\r\n    FASTEST: number;\r\n    FLOAT: number;\r\n    FLOAT_MAT2: number;\r\n    FLOAT_MAT3: number;\r\n    FLOAT_MAT4: number;\r\n    FLOAT_VEC2: number;\r\n    FLOAT_VEC3: number;\r\n    FLOAT_VEC4: number;\r\n    FRAGMENT_SHADER: number;\r\n    FRAMEBUFFER: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    FRAMEBUFFER_BINDING: number;\r\n    FRAMEBUFFER_COMPLETE: number;\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    FRAMEBUFFER_UNSUPPORTED: number;\r\n    FRONT: number;\r\n    FRONT_AND_BACK: number;\r\n    FRONT_FACE: number;\r\n    FUNC_ADD: number;\r\n    FUNC_REVERSE_SUBTRACT: number;\r\n    FUNC_SUBTRACT: number;\r\n    GENERATE_MIPMAP_HINT: number;\r\n    GEQUAL: number;\r\n    GREATER: number;\r\n    GREEN_BITS: number;\r\n    HIGH_FLOAT: number;\r\n    HIGH_INT: number;\r\n    IMPLEMENTATION_COLOR_READ_FORMAT: number;\r\n    IMPLEMENTATION_COLOR_READ_TYPE: number;\r\n    INCR: number;\r\n    INCR_WRAP: number;\r\n    INT: number;\r\n    INT_VEC2: number;\r\n    INT_VEC3: number;\r\n    INT_VEC4: number;\r\n    INVALID_ENUM: number;\r\n    INVALID_FRAMEBUFFER_OPERATION: number;\r\n    INVALID_OPERATION: number;\r\n    INVALID_VALUE: number;\r\n    INVERT: number;\r\n    KEEP: number;\r\n    LEQUAL: number;\r\n    LESS: number;\r\n    LINEAR: number;\r\n    LINEAR_MIPMAP_LINEAR: number;\r\n    LINEAR_MIPMAP_NEAREST: number;\r\n    LINES: number;\r\n    LINE_LOOP: number;\r\n    LINE_STRIP: number;\r\n    LINE_WIDTH: number;\r\n    LINK_STATUS: number;\r\n    LOW_FLOAT: number;\r\n    LOW_INT: number;\r\n    LUMINANCE: number;\r\n    LUMINANCE_ALPHA: number;\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    MAX_RENDERBUFFER_SIZE: number;\r\n    MAX_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_TEXTURE_SIZE: number;\r\n    MAX_VARYING_VECTORS: number;\r\n    MAX_VERTEX_ATTRIBS: number;\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    MAX_VIEWPORT_DIMS: number;\r\n    MEDIUM_FLOAT: number;\r\n    MEDIUM_INT: number;\r\n    MIRRORED_REPEAT: number;\r\n    NEAREST: number;\r\n    NEAREST_MIPMAP_LINEAR: number;\r\n    NEAREST_MIPMAP_NEAREST: number;\r\n    NEVER: number;\r\n    NICEST: number;\r\n    NONE: number;\r\n    NOTEQUAL: number;\r\n    NO_ERROR: number;\r\n    ONE: number;\r\n    ONE_MINUS_CONSTANT_ALPHA: number;\r\n    ONE_MINUS_CONSTANT_COLOR: number;\r\n    ONE_MINUS_DST_ALPHA: number;\r\n    ONE_MINUS_DST_COLOR: number;\r\n    ONE_MINUS_SRC_ALPHA: number;\r\n    ONE_MINUS_SRC_COLOR: number;\r\n    OUT_OF_MEMORY: number;\r\n    PACK_ALIGNMENT: number;\r\n    POINTS: number;\r\n    POLYGON_OFFSET_FACTOR: number;\r\n    POLYGON_OFFSET_FILL: number;\r\n    POLYGON_OFFSET_UNITS: number;\r\n    RED_BITS: number;\r\n    RENDERBUFFER: number;\r\n    RENDERBUFFER_ALPHA_SIZE: number;\r\n    RENDERBUFFER_BINDING: number;\r\n    RENDERBUFFER_BLUE_SIZE: number;\r\n    RENDERBUFFER_DEPTH_SIZE: number;\r\n    RENDERBUFFER_GREEN_SIZE: number;\r\n    RENDERBUFFER_HEIGHT: number;\r\n    RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    RENDERBUFFER_RED_SIZE: number;\r\n    RENDERBUFFER_STENCIL_SIZE: number;\r\n    RENDERBUFFER_WIDTH: number;\r\n    RENDERER: number;\r\n    REPEAT: number;\r\n    REPLACE: number;\r\n    RGB: number;\r\n    RGB565: number;\r\n    RGB5_A1: number;\r\n    RGBA: number;\r\n    RGBA4: number;\r\n    SAMPLER_2D: number;\r\n    SAMPLER_CUBE: number;\r\n    SAMPLES: number;\r\n    SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    SAMPLE_BUFFERS: number;\r\n    SAMPLE_COVERAGE: number;\r\n    SAMPLE_COVERAGE_INVERT: number;\r\n    SAMPLE_COVERAGE_VALUE: number;\r\n    SCISSOR_BOX: number;\r\n    SCISSOR_TEST: number;\r\n    SHADER_TYPE: number;\r\n    SHADING_LANGUAGE_VERSION: number;\r\n    SHORT: number;\r\n    SRC_ALPHA: number;\r\n    SRC_ALPHA_SATURATE: number;\r\n    SRC_COLOR: number;\r\n    STATIC_DRAW: number;\r\n    STENCIL_ATTACHMENT: number;\r\n    STENCIL_BACK_FAIL: number;\r\n    STENCIL_BACK_FUNC: number;\r\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    STENCIL_BACK_REF: number;\r\n    STENCIL_BACK_VALUE_MASK: number;\r\n    STENCIL_BACK_WRITEMASK: number;\r\n    STENCIL_BITS: number;\r\n    STENCIL_BUFFER_BIT: number;\r\n    STENCIL_CLEAR_VALUE: number;\r\n    STENCIL_FAIL: number;\r\n    STENCIL_FUNC: number;\r\n    STENCIL_INDEX: number;\r\n    STENCIL_INDEX8: number;\r\n    STENCIL_PASS_DEPTH_FAIL: number;\r\n    STENCIL_PASS_DEPTH_PASS: number;\r\n    STENCIL_REF: number;\r\n    STENCIL_TEST: number;\r\n    STENCIL_VALUE_MASK: number;\r\n    STENCIL_WRITEMASK: number;\r\n    STREAM_DRAW: number;\r\n    SUBPIXEL_BITS: number;\r\n    TEXTURE: number;\r\n    TEXTURE0: number;\r\n    TEXTURE1: number;\r\n    TEXTURE10: number;\r\n    TEXTURE11: number;\r\n    TEXTURE12: number;\r\n    TEXTURE13: number;\r\n    TEXTURE14: number;\r\n    TEXTURE15: number;\r\n    TEXTURE16: number;\r\n    TEXTURE17: number;\r\n    TEXTURE18: number;\r\n    TEXTURE19: number;\r\n    TEXTURE2: number;\r\n    TEXTURE20: number;\r\n    TEXTURE21: number;\r\n    TEXTURE22: number;\r\n    TEXTURE23: number;\r\n    TEXTURE24: number;\r\n    TEXTURE25: number;\r\n    TEXTURE26: number;\r\n    TEXTURE27: number;\r\n    TEXTURE28: number;\r\n    TEXTURE29: number;\r\n    TEXTURE3: number;\r\n    TEXTURE30: number;\r\n    TEXTURE31: number;\r\n    TEXTURE4: number;\r\n    TEXTURE5: number;\r\n    TEXTURE6: number;\r\n    TEXTURE7: number;\r\n    TEXTURE8: number;\r\n    TEXTURE9: number;\r\n    TEXTURE_2D: number;\r\n    TEXTURE_BINDING_2D: number;\r\n    TEXTURE_BINDING_CUBE_MAP: number;\r\n    TEXTURE_CUBE_MAP: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    TEXTURE_MAG_FILTER: number;\r\n    TEXTURE_MIN_FILTER: number;\r\n    TEXTURE_WRAP_S: number;\r\n    TEXTURE_WRAP_T: number;\r\n    TRIANGLES: number;\r\n    TRIANGLE_FAN: number;\r\n    TRIANGLE_STRIP: number;\r\n    UNPACK_ALIGNMENT: number;\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    UNPACK_FLIP_Y_WEBGL: number;\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    UNSIGNED_BYTE: number;\r\n    UNSIGNED_INT: number;\r\n    UNSIGNED_SHORT: number;\r\n    UNSIGNED_SHORT_4_4_4_4: number;\r\n    UNSIGNED_SHORT_5_5_5_1: number;\r\n    UNSIGNED_SHORT_5_6_5: number;\r\n    VALIDATE_STATUS: number;\r\n    VENDOR: number;\r\n    VERSION: number;\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    VERTEX_SHADER: number;\r\n    VIEWPORT: number;\r\n    ZERO: number;\r\n}\r\n\r\ndeclare var WebGLRenderingContext: {\r\n    prototype: WebGLRenderingContext;\r\n    new(): WebGLRenderingContext;\r\n    ACTIVE_ATTRIBUTES: number;\r\n    ACTIVE_TEXTURE: number;\r\n    ACTIVE_UNIFORMS: number;\r\n    ALIASED_LINE_WIDTH_RANGE: number;\r\n    ALIASED_POINT_SIZE_RANGE: number;\r\n    ALPHA: number;\r\n    ALPHA_BITS: number;\r\n    ALWAYS: number;\r\n    ARRAY_BUFFER: number;\r\n    ARRAY_BUFFER_BINDING: number;\r\n    ATTACHED_SHADERS: number;\r\n    BACK: number;\r\n    BLEND: number;\r\n    BLEND_COLOR: number;\r\n    BLEND_DST_ALPHA: number;\r\n    BLEND_DST_RGB: number;\r\n    BLEND_EQUATION: number;\r\n    BLEND_EQUATION_ALPHA: number;\r\n    BLEND_EQUATION_RGB: number;\r\n    BLEND_SRC_ALPHA: number;\r\n    BLEND_SRC_RGB: number;\r\n    BLUE_BITS: number;\r\n    BOOL: number;\r\n    BOOL_VEC2: number;\r\n    BOOL_VEC3: number;\r\n    BOOL_VEC4: number;\r\n    BROWSER_DEFAULT_WEBGL: number;\r\n    BUFFER_SIZE: number;\r\n    BUFFER_USAGE: number;\r\n    BYTE: number;\r\n    CCW: number;\r\n    CLAMP_TO_EDGE: number;\r\n    COLOR_ATTACHMENT0: number;\r\n    COLOR_BUFFER_BIT: number;\r\n    COLOR_CLEAR_VALUE: number;\r\n    COLOR_WRITEMASK: number;\r\n    COMPILE_STATUS: number;\r\n    COMPRESSED_TEXTURE_FORMATS: number;\r\n    CONSTANT_ALPHA: number;\r\n    CONSTANT_COLOR: number;\r\n    CONTEXT_LOST_WEBGL: number;\r\n    CULL_FACE: number;\r\n    CULL_FACE_MODE: number;\r\n    CURRENT_PROGRAM: number;\r\n    CURRENT_VERTEX_ATTRIB: number;\r\n    CW: number;\r\n    DECR: number;\r\n    DECR_WRAP: number;\r\n    DELETE_STATUS: number;\r\n    DEPTH_ATTACHMENT: number;\r\n    DEPTH_BITS: number;\r\n    DEPTH_BUFFER_BIT: number;\r\n    DEPTH_CLEAR_VALUE: number;\r\n    DEPTH_COMPONENT: number;\r\n    DEPTH_COMPONENT16: number;\r\n    DEPTH_FUNC: number;\r\n    DEPTH_RANGE: number;\r\n    DEPTH_STENCIL: number;\r\n    DEPTH_STENCIL_ATTACHMENT: number;\r\n    DEPTH_TEST: number;\r\n    DEPTH_WRITEMASK: number;\r\n    DITHER: number;\r\n    DONT_CARE: number;\r\n    DST_ALPHA: number;\r\n    DST_COLOR: number;\r\n    DYNAMIC_DRAW: number;\r\n    ELEMENT_ARRAY_BUFFER: number;\r\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    EQUAL: number;\r\n    FASTEST: number;\r\n    FLOAT: number;\r\n    FLOAT_MAT2: number;\r\n    FLOAT_MAT3: number;\r\n    FLOAT_MAT4: number;\r\n    FLOAT_VEC2: number;\r\n    FLOAT_VEC3: number;\r\n    FLOAT_VEC4: number;\r\n    FRAGMENT_SHADER: number;\r\n    FRAMEBUFFER: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    FRAMEBUFFER_BINDING: number;\r\n    FRAMEBUFFER_COMPLETE: number;\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    FRAMEBUFFER_UNSUPPORTED: number;\r\n    FRONT: number;\r\n    FRONT_AND_BACK: number;\r\n    FRONT_FACE: number;\r\n    FUNC_ADD: number;\r\n    FUNC_REVERSE_SUBTRACT: number;\r\n    FUNC_SUBTRACT: number;\r\n    GENERATE_MIPMAP_HINT: number;\r\n    GEQUAL: number;\r\n    GREATER: number;\r\n    GREEN_BITS: number;\r\n    HIGH_FLOAT: number;\r\n    HIGH_INT: number;\r\n    IMPLEMENTATION_COLOR_READ_FORMAT: number;\r\n    IMPLEMENTATION_COLOR_READ_TYPE: number;\r\n    INCR: number;\r\n    INCR_WRAP: number;\r\n    INT: number;\r\n    INT_VEC2: number;\r\n    INT_VEC3: number;\r\n    INT_VEC4: number;\r\n    INVALID_ENUM: number;\r\n    INVALID_FRAMEBUFFER_OPERATION: number;\r\n    INVALID_OPERATION: number;\r\n    INVALID_VALUE: number;\r\n    INVERT: number;\r\n    KEEP: number;\r\n    LEQUAL: number;\r\n    LESS: number;\r\n    LINEAR: number;\r\n    LINEAR_MIPMAP_LINEAR: number;\r\n    LINEAR_MIPMAP_NEAREST: number;\r\n    LINES: number;\r\n    LINE_LOOP: number;\r\n    LINE_STRIP: number;\r\n    LINE_WIDTH: number;\r\n    LINK_STATUS: number;\r\n    LOW_FLOAT: number;\r\n    LOW_INT: number;\r\n    LUMINANCE: number;\r\n    LUMINANCE_ALPHA: number;\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    MAX_RENDERBUFFER_SIZE: number;\r\n    MAX_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_TEXTURE_SIZE: number;\r\n    MAX_VARYING_VECTORS: number;\r\n    MAX_VERTEX_ATTRIBS: number;\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    MAX_VIEWPORT_DIMS: number;\r\n    MEDIUM_FLOAT: number;\r\n    MEDIUM_INT: number;\r\n    MIRRORED_REPEAT: number;\r\n    NEAREST: number;\r\n    NEAREST_MIPMAP_LINEAR: number;\r\n    NEAREST_MIPMAP_NEAREST: number;\r\n    NEVER: number;\r\n    NICEST: number;\r\n    NONE: number;\r\n    NOTEQUAL: number;\r\n    NO_ERROR: number;\r\n    ONE: number;\r\n    ONE_MINUS_CONSTANT_ALPHA: number;\r\n    ONE_MINUS_CONSTANT_COLOR: number;\r\n    ONE_MINUS_DST_ALPHA: number;\r\n    ONE_MINUS_DST_COLOR: number;\r\n    ONE_MINUS_SRC_ALPHA: number;\r\n    ONE_MINUS_SRC_COLOR: number;\r\n    OUT_OF_MEMORY: number;\r\n    PACK_ALIGNMENT: number;\r\n    POINTS: number;\r\n    POLYGON_OFFSET_FACTOR: number;\r\n    POLYGON_OFFSET_FILL: number;\r\n    POLYGON_OFFSET_UNITS: number;\r\n    RED_BITS: number;\r\n    RENDERBUFFER: number;\r\n    RENDERBUFFER_ALPHA_SIZE: number;\r\n    RENDERBUFFER_BINDING: number;\r\n    RENDERBUFFER_BLUE_SIZE: number;\r\n    RENDERBUFFER_DEPTH_SIZE: number;\r\n    RENDERBUFFER_GREEN_SIZE: number;\r\n    RENDERBUFFER_HEIGHT: number;\r\n    RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    RENDERBUFFER_RED_SIZE: number;\r\n    RENDERBUFFER_STENCIL_SIZE: number;\r\n    RENDERBUFFER_WIDTH: number;\r\n    RENDERER: number;\r\n    REPEAT: number;\r\n    REPLACE: number;\r\n    RGB: number;\r\n    RGB565: number;\r\n    RGB5_A1: number;\r\n    RGBA: number;\r\n    RGBA4: number;\r\n    SAMPLER_2D: number;\r\n    SAMPLER_CUBE: number;\r\n    SAMPLES: number;\r\n    SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    SAMPLE_BUFFERS: number;\r\n    SAMPLE_COVERAGE: number;\r\n    SAMPLE_COVERAGE_INVERT: number;\r\n    SAMPLE_COVERAGE_VALUE: number;\r\n    SCISSOR_BOX: number;\r\n    SCISSOR_TEST: number;\r\n    SHADER_TYPE: number;\r\n    SHADING_LANGUAGE_VERSION: number;\r\n    SHORT: number;\r\n    SRC_ALPHA: number;\r\n    SRC_ALPHA_SATURATE: number;\r\n    SRC_COLOR: number;\r\n    STATIC_DRAW: number;\r\n    STENCIL_ATTACHMENT: number;\r\n    STENCIL_BACK_FAIL: number;\r\n    STENCIL_BACK_FUNC: number;\r\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    STENCIL_BACK_REF: number;\r\n    STENCIL_BACK_VALUE_MASK: number;\r\n    STENCIL_BACK_WRITEMASK: number;\r\n    STENCIL_BITS: number;\r\n    STENCIL_BUFFER_BIT: number;\r\n    STENCIL_CLEAR_VALUE: number;\r\n    STENCIL_FAIL: number;\r\n    STENCIL_FUNC: number;\r\n    STENCIL_INDEX: number;\r\n    STENCIL_INDEX8: number;\r\n    STENCIL_PASS_DEPTH_FAIL: number;\r\n    STENCIL_PASS_DEPTH_PASS: number;\r\n    STENCIL_REF: number;\r\n    STENCIL_TEST: number;\r\n    STENCIL_VALUE_MASK: number;\r\n    STENCIL_WRITEMASK: number;\r\n    STREAM_DRAW: number;\r\n    SUBPIXEL_BITS: number;\r\n    TEXTURE: number;\r\n    TEXTURE0: number;\r\n    TEXTURE1: number;\r\n    TEXTURE10: number;\r\n    TEXTURE11: number;\r\n    TEXTURE12: number;\r\n    TEXTURE13: number;\r\n    TEXTURE14: number;\r\n    TEXTURE15: number;\r\n    TEXTURE16: number;\r\n    TEXTURE17: number;\r\n    TEXTURE18: number;\r\n    TEXTURE19: number;\r\n    TEXTURE2: number;\r\n    TEXTURE20: number;\r\n    TEXTURE21: number;\r\n    TEXTURE22: number;\r\n    TEXTURE23: number;\r\n    TEXTURE24: number;\r\n    TEXTURE25: number;\r\n    TEXTURE26: number;\r\n    TEXTURE27: number;\r\n    TEXTURE28: number;\r\n    TEXTURE29: number;\r\n    TEXTURE3: number;\r\n    TEXTURE30: number;\r\n    TEXTURE31: number;\r\n    TEXTURE4: number;\r\n    TEXTURE5: number;\r\n    TEXTURE6: number;\r\n    TEXTURE7: number;\r\n    TEXTURE8: number;\r\n    TEXTURE9: number;\r\n    TEXTURE_2D: number;\r\n    TEXTURE_BINDING_2D: number;\r\n    TEXTURE_BINDING_CUBE_MAP: number;\r\n    TEXTURE_CUBE_MAP: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    TEXTURE_MAG_FILTER: number;\r\n    TEXTURE_MIN_FILTER: number;\r\n    TEXTURE_WRAP_S: number;\r\n    TEXTURE_WRAP_T: number;\r\n    TRIANGLES: number;\r\n    TRIANGLE_FAN: number;\r\n    TRIANGLE_STRIP: number;\r\n    UNPACK_ALIGNMENT: number;\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    UNPACK_FLIP_Y_WEBGL: number;\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    UNSIGNED_BYTE: number;\r\n    UNSIGNED_INT: number;\r\n    UNSIGNED_SHORT: number;\r\n    UNSIGNED_SHORT_4_4_4_4: number;\r\n    UNSIGNED_SHORT_5_5_5_1: number;\r\n    UNSIGNED_SHORT_5_6_5: number;\r\n    VALIDATE_STATUS: number;\r\n    VENDOR: number;\r\n    VERSION: number;\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    VERTEX_SHADER: number;\r\n    VIEWPORT: number;\r\n    ZERO: number;\r\n}\r\n\r\ninterface WebGLShader extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLShader: {\r\n    prototype: WebGLShader;\r\n    new(): WebGLShader;\r\n}\r\n\r\ninterface WebGLShaderPrecisionFormat {\r\n    precision: number;\r\n    rangeMax: number;\r\n    rangeMin: number;\r\n}\r\n\r\ndeclare var WebGLShaderPrecisionFormat: {\r\n    prototype: WebGLShaderPrecisionFormat;\r\n    new(): WebGLShaderPrecisionFormat;\r\n}\r\n\r\ninterface WebGLTexture extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLTexture: {\r\n    prototype: WebGLTexture;\r\n    new(): WebGLTexture;\r\n}\r\n\r\ninterface WebGLUniformLocation {\r\n}\r\n\r\ndeclare var WebGLUniformLocation: {\r\n    prototype: WebGLUniformLocation;\r\n    new(): WebGLUniformLocation;\r\n}\r\n\r\ninterface WebKitCSSMatrix {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    e: number;\r\n    f: number;\r\n    m11: number;\r\n    m12: number;\r\n    m13: number;\r\n    m14: number;\r\n    m21: number;\r\n    m22: number;\r\n    m23: number;\r\n    m24: number;\r\n    m31: number;\r\n    m32: number;\r\n    m33: number;\r\n    m34: number;\r\n    m41: number;\r\n    m42: number;\r\n    m43: number;\r\n    m44: number;\r\n    inverse(): WebKitCSSMatrix;\r\n    multiply(secondMatrix: WebKitCSSMatrix): WebKitCSSMatrix;\r\n    rotate(angleX: number, angleY?: number, angleZ?: number): WebKitCSSMatrix;\r\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): WebKitCSSMatrix;\r\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): WebKitCSSMatrix;\r\n    setMatrixValue(value: string): void;\r\n    skewX(angle: number): WebKitCSSMatrix;\r\n    skewY(angle: number): WebKitCSSMatrix;\r\n    toString(): string;\r\n    translate(x: number, y: number, z?: number): WebKitCSSMatrix;\r\n}\r\n\r\ndeclare var WebKitCSSMatrix: {\r\n    prototype: WebKitCSSMatrix;\r\n    new(text?: string): WebKitCSSMatrix;\r\n}\r\n\r\ninterface WebKitPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var WebKitPoint: {\r\n    prototype: WebKitPoint;\r\n    new(x?: number, y?: number): WebKitPoint;\r\n}\r\n\r\ninterface WebSocket extends EventTarget {\r\n    binaryType: string;\r\n    bufferedAmount: number;\r\n    extensions: string;\r\n    onclose: (ev: CloseEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onopen: (ev: Event) => any;\r\n    protocol: string;\r\n    readyState: number;\r\n    url: string;\r\n    close(code?: number, reason?: string): void;\r\n    send(data: any): void;\r\n    CLOSED: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    OPEN: number;\r\n    addEventListener(type: \"close\", listener: (ev: CloseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"open\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var WebSocket: {\r\n    prototype: WebSocket;\r\n    new(url: string, protocols?: string): WebSocket;\r\n    new(url: string, protocols?: any): WebSocket;\r\n    CLOSED: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    OPEN: number;\r\n}\r\n\r\ninterface WheelEvent extends MouseEvent {\r\n    deltaMode: number;\r\n    deltaX: number;\r\n    deltaY: number;\r\n    deltaZ: number;\r\n    getCurrentPoint(element: Element): void;\r\n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n    DOM_DELTA_PIXEL: number;\r\n}\r\n\r\ndeclare var WheelEvent: {\r\n    prototype: WheelEvent;\r\n    new(typeArg: string, eventInitDict?: WheelEventInit): WheelEvent;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n    DOM_DELTA_PIXEL: number;\r\n}\r\n\r\ninterface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64 {\r\n    animationStartTime: number;\r\n    applicationCache: ApplicationCache;\r\n    clientInformation: Navigator;\r\n    closed: boolean;\r\n    crypto: Crypto;\r\n    defaultStatus: string;\r\n    devicePixelRatio: number;\r\n    doNotTrack: string;\r\n    document: Document;\r\n    event: Event;\r\n    external: External;\r\n    frameElement: Element;\r\n    frames: Window;\r\n    history: History;\r\n    innerHeight: number;\r\n    innerWidth: number;\r\n    length: number;\r\n    location: Location;\r\n    locationbar: BarProp;\r\n    menubar: BarProp;\r\n    msAnimationStartTime: number;\r\n    msTemplatePrinter: MSTemplatePrinter;\r\n    name: string;\r\n    navigator: Navigator;\r\n    offscreenBuffering: string | boolean;\r\n    onabort: (ev: Event) => any;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onchange: (ev: Event) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    oncompassneedscalibration: (ev: Event) => any;\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    ondevicemotion: (ev: DeviceMotionEvent) => any;\r\n    ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    ondragend: (ev: DragEvent) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    ondurationchange: (ev: Event) => any;\r\n    onemptied: (ev: Event) => any;\r\n    onended: (ev: Event) => any;\r\n    onerror: ErrorEventHandler;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    oninput: (ev: Event) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadeddata: (ev: Event) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpause: (ev: Event) => any;\r\n    onplay: (ev: Event) => any;\r\n    onplaying: (ev: Event) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onratechange: (ev: Event) => any;\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    onreset: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    onstalled: (ev: Event) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    ontouchcancel: any;\r\n    ontouchend: any;\r\n    ontouchmove: any;\r\n    ontouchstart: any;\r\n    onunload: (ev: Event) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    onwaiting: (ev: Event) => any;\r\n    opener: Window;\r\n    orientation: string;\r\n    outerHeight: number;\r\n    outerWidth: number;\r\n    pageXOffset: number;\r\n    pageYOffset: number;\r\n    parent: Window;\r\n    performance: Performance;\r\n    personalbar: BarProp;\r\n    screen: Screen;\r\n    screenLeft: number;\r\n    screenTop: number;\r\n    screenX: number;\r\n    screenY: number;\r\n    scrollX: number;\r\n    scrollY: number;\r\n    scrollbars: BarProp;\r\n    self: Window;\r\n    status: string;\r\n    statusbar: BarProp;\r\n    styleMedia: StyleMedia;\r\n    toolbar: BarProp;\r\n    top: Window;\r\n    window: Window;\r\n    alert(message?: any): void;\r\n    blur(): void;\r\n    cancelAnimationFrame(handle: number): void;\r\n    captureEvents(): void;\r\n    close(): void;\r\n    confirm(message?: string): boolean;\r\n    focus(): void;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\r\n    getSelection(): Selection;\r\n    matchMedia(mediaQuery: string): MediaQueryList;\r\n    moveBy(x?: number, y?: number): void;\r\n    moveTo(x?: number, y?: number): void;\r\n    msCancelRequestAnimationFrame(handle: number): void;\r\n    msMatchMedia(mediaQuery: string): MediaQueryList;\r\n    msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\n    msWriteProfilerMark(profilerMarkName: string): void;\r\n    open(url?: string, target?: string, features?: string, replace?: boolean): any;\r\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\r\n    print(): void;\r\n    prompt(message?: string, _default?: string): string;\r\n    releaseEvents(): void;\r\n    requestAnimationFrame(callback: FrameRequestCallback): number;\r\n    resizeBy(x?: number, y?: number): void;\r\n    resizeTo(x?: number, y?: number): void;\r\n    scroll(x?: number, y?: number): void;\r\n    scrollBy(x?: number, y?: number): void;\r\n    scrollTo(x?: number, y?: number): void;\r\n    webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\r\n    webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: Window;\r\n}\r\n\r\ndeclare var Window: {\r\n    prototype: Window;\r\n    new(): Window;\r\n}\r\n\r\ninterface Worker extends EventTarget, AbstractWorker {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    postMessage(message: any, ports?: any): void;\r\n    terminate(): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Worker: {\r\n    prototype: Worker;\r\n    new(stringUrl: string): Worker;\r\n}\r\n\r\ninterface XMLDocument extends Document {\r\n}\r\n\r\ndeclare var XMLDocument: {\r\n    prototype: XMLDocument;\r\n    new(): XMLDocument;\r\n}\r\n\r\ninterface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {\r\n    msCaching: string;\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    readyState: number;\r\n    response: any;\r\n    responseBody: any;\r\n    responseText: string;\r\n    responseType: string;\r\n    responseXML: any;\r\n    status: number;\r\n    statusText: string;\r\n    timeout: number;\r\n    upload: XMLHttpRequestUpload;\r\n    withCredentials: boolean;\r\n    abort(): void;\r\n    getAllResponseHeaders(): string;\r\n    getResponseHeader(header: string): string;\r\n    msCachingEnabled(): boolean;\r\n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void;\r\n    overrideMimeType(mime: string): void;\r\n    send(data?: Document): void;\r\n    send(data?: string): void;\r\n    send(data?: any): void;\r\n    setRequestHeader(header: string, value: string): void;\r\n    DONE: number;\r\n    HEADERS_RECEIVED: number;\r\n    LOADING: number;\r\n    OPENED: number;\r\n    UNSENT: number;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var XMLHttpRequest: {\r\n    prototype: XMLHttpRequest;\r\n    new(): XMLHttpRequest;\r\n    DONE: number;\r\n    HEADERS_RECEIVED: number;\r\n    LOADING: number;\r\n    OPENED: number;\r\n    UNSENT: number;\r\n    create(): XMLHttpRequest;\r\n}\r\n\r\ninterface XMLHttpRequestUpload extends EventTarget, XMLHttpRequestEventTarget {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var XMLHttpRequestUpload: {\r\n    prototype: XMLHttpRequestUpload;\r\n    new(): XMLHttpRequestUpload;\r\n}\r\n\r\ninterface XMLSerializer {\r\n    serializeToString(target: Node): string;\r\n}\r\n\r\ndeclare var XMLSerializer: {\r\n    prototype: XMLSerializer;\r\n    new(): XMLSerializer;\r\n}\r\n\r\ninterface XPathEvaluator {\r\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\r\n    createNSResolver(nodeResolver?: Node): XPathNSResolver;\r\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\r\n}\r\n\r\ndeclare var XPathEvaluator: {\r\n    prototype: XPathEvaluator;\r\n    new(): XPathEvaluator;\r\n}\r\n\r\ninterface XPathExpression {\r\n    evaluate(contextNode: Node, type: number, result: XPathResult): XPathExpression;\r\n}\r\n\r\ndeclare var XPathExpression: {\r\n    prototype: XPathExpression;\r\n    new(): XPathExpression;\r\n}\r\n\r\ninterface XPathNSResolver {\r\n    lookupNamespaceURI(prefix: string): string;\r\n}\r\n\r\ndeclare var XPathNSResolver: {\r\n    prototype: XPathNSResolver;\r\n    new(): XPathNSResolver;\r\n}\r\n\r\ninterface XPathResult {\r\n    booleanValue: boolean;\r\n    invalidIteratorState: boolean;\r\n    numberValue: number;\r\n    resultType: number;\r\n    singleNodeValue: Node;\r\n    snapshotLength: number;\r\n    stringValue: string;\r\n    iterateNext(): Node;\r\n    snapshotItem(index: number): Node;\r\n    ANY_TYPE: number;\r\n    ANY_UNORDERED_NODE_TYPE: number;\r\n    BOOLEAN_TYPE: number;\r\n    FIRST_ORDERED_NODE_TYPE: number;\r\n    NUMBER_TYPE: number;\r\n    ORDERED_NODE_ITERATOR_TYPE: number;\r\n    ORDERED_NODE_SNAPSHOT_TYPE: number;\r\n    STRING_TYPE: number;\r\n    UNORDERED_NODE_ITERATOR_TYPE: number;\r\n    UNORDERED_NODE_SNAPSHOT_TYPE: number;\r\n}\r\n\r\ndeclare var XPathResult: {\r\n    prototype: XPathResult;\r\n    new(): XPathResult;\r\n    ANY_TYPE: number;\r\n    ANY_UNORDERED_NODE_TYPE: number;\r\n    BOOLEAN_TYPE: number;\r\n    FIRST_ORDERED_NODE_TYPE: number;\r\n    NUMBER_TYPE: number;\r\n    ORDERED_NODE_ITERATOR_TYPE: number;\r\n    ORDERED_NODE_SNAPSHOT_TYPE: number;\r\n    STRING_TYPE: number;\r\n    UNORDERED_NODE_ITERATOR_TYPE: number;\r\n    UNORDERED_NODE_SNAPSHOT_TYPE: number;\r\n}\r\n\r\ninterface XSLTProcessor {\r\n    clearParameters(): void;\r\n    getParameter(namespaceURI: string, localName: string): any;\r\n    importStylesheet(style: Node): void;\r\n    removeParameter(namespaceURI: string, localName: string): void;\r\n    reset(): void;\r\n    setParameter(namespaceURI: string, localName: string, value: any): void;\r\n    transformToDocument(source: Node): Document;\r\n    transformToFragment(source: Node, document: Document): DocumentFragment;\r\n}\r\n\r\ndeclare var XSLTProcessor: {\r\n    prototype: XSLTProcessor;\r\n    new(): XSLTProcessor;\r\n}\r\n\r\ninterface AbstractWorker {\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface ChildNode {\r\n    remove(): void;\r\n}\r\n\r\ninterface DOML2DeprecatedColorProperty {\r\n    color: string;\r\n}\r\n\r\ninterface DOML2DeprecatedSizeProperty {\r\n    size: number;\r\n}\r\n\r\ninterface DocumentEvent {\r\n    createEvent(eventInterface:\"AnimationEvent\"): AnimationEvent;\r\n    createEvent(eventInterface:\"AriaRequestEvent\"): AriaRequestEvent;\r\n    createEvent(eventInterface:\"AudioProcessingEvent\"): AudioProcessingEvent;\r\n    createEvent(eventInterface:\"BeforeUnloadEvent\"): BeforeUnloadEvent;\r\n    createEvent(eventInterface:\"ClipboardEvent\"): ClipboardEvent;\r\n    createEvent(eventInterface:\"CloseEvent\"): CloseEvent;\r\n    createEvent(eventInterface:\"CommandEvent\"): CommandEvent;\r\n    createEvent(eventInterface:\"CompositionEvent\"): CompositionEvent;\r\n    createEvent(eventInterface:\"CustomEvent\"): CustomEvent;\r\n    createEvent(eventInterface:\"DeviceMotionEvent\"): DeviceMotionEvent;\r\n    createEvent(eventInterface:\"DeviceOrientationEvent\"): DeviceOrientationEvent;\r\n    createEvent(eventInterface:\"DragEvent\"): DragEvent;\r\n    createEvent(eventInterface:\"ErrorEvent\"): ErrorEvent;\r\n    createEvent(eventInterface:\"Event\"): Event;\r\n    createEvent(eventInterface:\"Events\"): Event;\r\n    createEvent(eventInterface:\"FocusEvent\"): FocusEvent;\r\n    createEvent(eventInterface:\"GamepadEvent\"): GamepadEvent;\r\n    createEvent(eventInterface:\"HashChangeEvent\"): HashChangeEvent;\r\n    createEvent(eventInterface:\"IDBVersionChangeEvent\"): IDBVersionChangeEvent;\r\n    createEvent(eventInterface:\"KeyboardEvent\"): KeyboardEvent;\r\n    createEvent(eventInterface:\"LongRunningScriptDetectedEvent\"): LongRunningScriptDetectedEvent;\r\n    createEvent(eventInterface:\"MSGestureEvent\"): MSGestureEvent;\r\n    createEvent(eventInterface:\"MSManipulationEvent\"): MSManipulationEvent;\r\n    createEvent(eventInterface:\"MSMediaKeyMessageEvent\"): MSMediaKeyMessageEvent;\r\n    createEvent(eventInterface:\"MSMediaKeyNeededEvent\"): MSMediaKeyNeededEvent;\r\n    createEvent(eventInterface:\"MSPointerEvent\"): MSPointerEvent;\r\n    createEvent(eventInterface:\"MSSiteModeEvent\"): MSSiteModeEvent;\r\n    createEvent(eventInterface:\"MessageEvent\"): MessageEvent;\r\n    createEvent(eventInterface:\"MouseEvent\"): MouseEvent;\r\n    createEvent(eventInterface:\"MouseEvents\"): MouseEvent;\r\n    createEvent(eventInterface:\"MouseWheelEvent\"): MouseWheelEvent;\r\n    createEvent(eventInterface:\"MutationEvent\"): MutationEvent;\r\n    createEvent(eventInterface:\"MutationEvents\"): MutationEvent;\r\n    createEvent(eventInterface:\"NavigationCompletedEvent\"): NavigationCompletedEvent;\r\n    createEvent(eventInterface:\"NavigationEvent\"): NavigationEvent;\r\n    createEvent(eventInterface:\"NavigationEventWithReferrer\"): NavigationEventWithReferrer;\r\n    createEvent(eventInterface:\"OfflineAudioCompletionEvent\"): OfflineAudioCompletionEvent;\r\n    createEvent(eventInterface:\"PageTransitionEvent\"): PageTransitionEvent;\r\n    createEvent(eventInterface:\"PermissionRequestedEvent\"): PermissionRequestedEvent;\r\n    createEvent(eventInterface:\"PointerEvent\"): PointerEvent;\r\n    createEvent(eventInterface:\"PopStateEvent\"): PopStateEvent;\r\n    createEvent(eventInterface:\"ProgressEvent\"): ProgressEvent;\r\n    createEvent(eventInterface:\"SVGZoomEvent\"): SVGZoomEvent;\r\n    createEvent(eventInterface:\"SVGZoomEvents\"): SVGZoomEvent;\r\n    createEvent(eventInterface:\"ScriptNotifyEvent\"): ScriptNotifyEvent;\r\n    createEvent(eventInterface:\"StorageEvent\"): StorageEvent;\r\n    createEvent(eventInterface:\"TextEvent\"): TextEvent;\r\n    createEvent(eventInterface:\"TouchEvent\"): TouchEvent;\r\n    createEvent(eventInterface:\"TrackEvent\"): TrackEvent;\r\n    createEvent(eventInterface:\"TransitionEvent\"): TransitionEvent;\r\n    createEvent(eventInterface:\"UIEvent\"): UIEvent;\r\n    createEvent(eventInterface:\"UIEvents\"): UIEvent;\r\n    createEvent(eventInterface:\"UnviewableContentIdentifiedEvent\"): UnviewableContentIdentifiedEvent;\r\n    createEvent(eventInterface:\"WebGLContextEvent\"): WebGLContextEvent;\r\n    createEvent(eventInterface:\"WheelEvent\"): WheelEvent;\r\n    createEvent(eventInterface: string): Event;\r\n}\r\n\r\ninterface ElementTraversal {\r\n    childElementCount: number;\r\n    firstElementChild: Element;\r\n    lastElementChild: Element;\r\n    nextElementSibling: Element;\r\n    previousElementSibling: Element;\r\n}\r\n\r\ninterface GetSVGDocument {\r\n    getSVGDocument(): Document;\r\n}\r\n\r\ninterface GlobalEventHandlers {\r\n    onpointercancel: (ev: PointerEvent) => any;\r\n    onpointerdown: (ev: PointerEvent) => any;\r\n    onpointerenter: (ev: PointerEvent) => any;\r\n    onpointerleave: (ev: PointerEvent) => any;\r\n    onpointermove: (ev: PointerEvent) => any;\r\n    onpointerout: (ev: PointerEvent) => any;\r\n    onpointerover: (ev: PointerEvent) => any;\r\n    onpointerup: (ev: PointerEvent) => any;\r\n    onwheel: (ev: WheelEvent) => any;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\r\n      */\r\n    ch: string;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\r\n      */\r\n    chOff: string;\r\n    /**\r\n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\r\n      */\r\n    vAlign: string;\r\n}\r\n\r\ninterface IDBEnvironment {\r\n    indexedDB: IDBFactory;\r\n    msIndexedDB: IDBFactory;\r\n}\r\n\r\ninterface LinkStyle {\r\n    sheet: StyleSheet;\r\n}\r\n\r\ninterface MSBaseReader {\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    readyState: number;\r\n    result: any;\r\n    abort(): void;\r\n    DONE: number;\r\n    EMPTY: number;\r\n    LOADING: number;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSFileSaver {\r\n    msSaveBlob(blob: any, defaultName?: string): boolean;\r\n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;\r\n}\r\n\r\ninterface MSNavigatorDoNotTrack {\r\n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;\r\n    confirmWebWideTrackingException(args: ExceptionInformation): boolean;\r\n    removeSiteSpecificTrackingException(args: ExceptionInformation): void;\r\n    removeWebWideTrackingException(args: ExceptionInformation): void;\r\n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;\r\n    storeWebWideTrackingException(args: StoreExceptionsInformation): void;\r\n}\r\n\r\ninterface NavigatorContentUtils {\r\n}\r\n\r\ninterface NavigatorGeolocation {\r\n    geolocation: Geolocation;\r\n}\r\n\r\ninterface NavigatorID {\r\n    appName: string;\r\n    appVersion: string;\r\n    platform: string;\r\n    product: string;\r\n    productSub: string;\r\n    userAgent: string;\r\n    vendor: string;\r\n    vendorSub: string;\r\n}\r\n\r\ninterface NavigatorOnLine {\r\n    onLine: boolean;\r\n}\r\n\r\ninterface NavigatorStorageUtils {\r\n}\r\n\r\ninterface NodeSelector {\r\n    querySelector(selectors: string): Element;\r\n    querySelectorAll(selectors: string): NodeList;\r\n}\r\n\r\ninterface RandomSource {\r\n    getRandomValues(array: ArrayBufferView): ArrayBufferView;\r\n}\r\n\r\ninterface SVGAnimatedPathData {\r\n    pathSegList: SVGPathSegList;\r\n}\r\n\r\ninterface SVGAnimatedPoints {\r\n    animatedPoints: SVGPointList;\r\n    points: SVGPointList;\r\n}\r\n\r\ninterface SVGExternalResourcesRequired {\r\n    externalResourcesRequired: SVGAnimatedBoolean;\r\n}\r\n\r\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\r\n    height: SVGAnimatedLength;\r\n    result: SVGAnimatedString;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    y: SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGFitToViewBox {\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    viewBox: SVGAnimatedRect;\r\n}\r\n\r\ninterface SVGLangSpace {\r\n    xmllang: string;\r\n    xmlspace: string;\r\n}\r\n\r\ninterface SVGLocatable {\r\n    farthestViewportElement: SVGElement;\r\n    nearestViewportElement: SVGElement;\r\n    getBBox(): SVGRect;\r\n    getCTM(): SVGMatrix;\r\n    getScreenCTM(): SVGMatrix;\r\n    getTransformToElement(element: SVGElement): SVGMatrix;\r\n}\r\n\r\ninterface SVGStylable {\r\n    className: SVGAnimatedString;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGTests {\r\n    requiredExtensions: SVGStringList;\r\n    requiredFeatures: SVGStringList;\r\n    systemLanguage: SVGStringList;\r\n    hasExtension(extension: string): boolean;\r\n}\r\n\r\ninterface SVGTransformable extends SVGLocatable {\r\n    transform: SVGAnimatedTransformList;\r\n}\r\n\r\ninterface SVGURIReference {\r\n    href: SVGAnimatedString;\r\n}\r\n\r\ninterface WindowBase64 {\r\n    atob(encodedString: string): string;\r\n    btoa(rawString: string): string;\r\n}\r\n\r\ninterface WindowConsole {\r\n    console: Console;\r\n}\r\n\r\ninterface WindowLocalStorage {\r\n    localStorage: Storage;\r\n}\r\n\r\ninterface WindowSessionStorage {\r\n    sessionStorage: Storage;\r\n}\r\n\r\ninterface WindowTimers extends Object, WindowTimersExtension {\r\n    clearInterval(handle: number): void;\r\n    clearTimeout(handle: number): void;\r\n    setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\n    setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\n}\r\n\r\ninterface WindowTimersExtension {\r\n    clearImmediate(handle: number): void;\r\n    msClearImmediate(handle: number): void;\r\n    msSetImmediate(expression: any, ...args: any[]): number;\r\n    setImmediate(expression: any, ...args: any[]): number;\r\n}\r\n\r\ninterface XMLHttpRequestEventTarget {\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    ontimeout: (ev: ProgressEvent) => any;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\n\r\ninterface NodeListOf<TNode extends Node> extends NodeList {\r\n    length: number;\r\n    item(index: number): TNode;\r\n    [index: number]: TNode;\r\n}\r\n\r\ninterface BlobPropertyBag {\r\n    type?: string;\r\n    endings?: string;\r\n}\r\n\r\ninterface EventListenerObject {\r\n    handleEvent(evt: Event): void;\r\n}\r\n\r\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\r\n\r\ninterface ErrorEventHandler {\r\n    (event: Event, source?: string, fileno?: number, columnNumber?: number): void;\r\n    (event: string, source?: string, fileno?: number, columnNumber?: number): void;\r\n}\r\ninterface PositionCallback {\r\n    (position: Position): void;\r\n}\r\ninterface PositionErrorCallback {\r\n    (error: PositionError): void;\r\n}\r\ninterface MediaQueryListListener {\r\n    (mql: MediaQueryList): void;\r\n}\r\ninterface MSLaunchUriCallback {\r\n    (): void;\r\n}\r\ninterface FrameRequestCallback {\r\n    (time: number): void;\r\n}\r\ninterface MSUnsafeFunctionCallback {\r\n    (): any;\r\n}\r\ninterface MSExecAtPriorityFunctionCallback {\r\n    (...args: any[]): any;\r\n}\r\ninterface MutationCallback {\r\n    (mutations: MutationRecord[], observer: MutationObserver): void;\r\n}\r\ninterface DecodeSuccessCallback {\r\n    (decodedData: AudioBuffer): void;\r\n}\r\ninterface DecodeErrorCallback {\r\n    (): void;\r\n}\r\ninterface FunctionStringCallback {\r\n    (data: string): void;\r\n}\r\ndeclare var Audio: {new(src?: string): HTMLAudioElement; };\r\ndeclare var Image: {new(width?: number, height?: number): HTMLImageElement; };\r\ndeclare var Option: {new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; };\r\ndeclare var animationStartTime: number;\r\ndeclare var applicationCache: ApplicationCache;\r\ndeclare var clientInformation: Navigator;\r\ndeclare var closed: boolean;\r\ndeclare var crypto: Crypto;\r\ndeclare var defaultStatus: string;\r\ndeclare var devicePixelRatio: number;\r\ndeclare var doNotTrack: string;\r\ndeclare var document: Document;\r\ndeclare var event: Event;\r\ndeclare var external: External;\r\ndeclare var frameElement: Element;\r\ndeclare var frames: Window;\r\ndeclare var history: History;\r\ndeclare var innerHeight: number;\r\ndeclare var innerWidth: number;\r\ndeclare var length: number;\r\ndeclare var location: Location;\r\ndeclare var locationbar: BarProp;\r\ndeclare var menubar: BarProp;\r\ndeclare var msAnimationStartTime: number;\r\ndeclare var msTemplatePrinter: MSTemplatePrinter;\r\ndeclare var name: string;\r\ndeclare var navigator: Navigator;\r\ndeclare var offscreenBuffering: string | boolean;\r\ndeclare var onabort: (ev: Event) => any;\r\ndeclare var onafterprint: (ev: Event) => any;\r\ndeclare var onbeforeprint: (ev: Event) => any;\r\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\ndeclare var onblur: (ev: FocusEvent) => any;\r\ndeclare var oncanplay: (ev: Event) => any;\r\ndeclare var oncanplaythrough: (ev: Event) => any;\r\ndeclare var onchange: (ev: Event) => any;\r\ndeclare var onclick: (ev: MouseEvent) => any;\r\ndeclare var oncompassneedscalibration: (ev: Event) => any;\r\ndeclare var oncontextmenu: (ev: PointerEvent) => any;\r\ndeclare var ondblclick: (ev: MouseEvent) => any;\r\ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any;\r\ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\ndeclare var ondrag: (ev: DragEvent) => any;\r\ndeclare var ondragend: (ev: DragEvent) => any;\r\ndeclare var ondragenter: (ev: DragEvent) => any;\r\ndeclare var ondragleave: (ev: DragEvent) => any;\r\ndeclare var ondragover: (ev: DragEvent) => any;\r\ndeclare var ondragstart: (ev: DragEvent) => any;\r\ndeclare var ondrop: (ev: DragEvent) => any;\r\ndeclare var ondurationchange: (ev: Event) => any;\r\ndeclare var onemptied: (ev: Event) => any;\r\ndeclare var onended: (ev: Event) => any;\r\ndeclare var onerror: ErrorEventHandler;\r\ndeclare var onfocus: (ev: FocusEvent) => any;\r\ndeclare var onhashchange: (ev: HashChangeEvent) => any;\r\ndeclare var oninput: (ev: Event) => any;\r\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\r\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\r\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\r\ndeclare var onload: (ev: Event) => any;\r\ndeclare var onloadeddata: (ev: Event) => any;\r\ndeclare var onloadedmetadata: (ev: Event) => any;\r\ndeclare var onloadstart: (ev: Event) => any;\r\ndeclare var onmessage: (ev: MessageEvent) => any;\r\ndeclare var onmousedown: (ev: MouseEvent) => any;\r\ndeclare var onmouseenter: (ev: MouseEvent) => any;\r\ndeclare var onmouseleave: (ev: MouseEvent) => any;\r\ndeclare var onmousemove: (ev: MouseEvent) => any;\r\ndeclare var onmouseout: (ev: MouseEvent) => any;\r\ndeclare var onmouseover: (ev: MouseEvent) => any;\r\ndeclare var onmouseup: (ev: MouseEvent) => any;\r\ndeclare var onmousewheel: (ev: MouseWheelEvent) => any;\r\ndeclare var onmsgesturechange: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgestureend: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturehold: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturestart: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturetap: (ev: MSGestureEvent) => any;\r\ndeclare var onmsinertiastart: (ev: MSGestureEvent) => any;\r\ndeclare var onmspointercancel: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerdown: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerenter: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerleave: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointermove: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerout: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerover: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerup: (ev: MSPointerEvent) => any;\r\ndeclare var onoffline: (ev: Event) => any;\r\ndeclare var ononline: (ev: Event) => any;\r\ndeclare var onorientationchange: (ev: Event) => any;\r\ndeclare var onpagehide: (ev: PageTransitionEvent) => any;\r\ndeclare var onpageshow: (ev: PageTransitionEvent) => any;\r\ndeclare var onpause: (ev: Event) => any;\r\ndeclare var onplay: (ev: Event) => any;\r\ndeclare var onplaying: (ev: Event) => any;\r\ndeclare var onpopstate: (ev: PopStateEvent) => any;\r\ndeclare var onprogress: (ev: ProgressEvent) => any;\r\ndeclare var onratechange: (ev: Event) => any;\r\ndeclare var onreadystatechange: (ev: ProgressEvent) => any;\r\ndeclare var onreset: (ev: Event) => any;\r\ndeclare var onresize: (ev: UIEvent) => any;\r\ndeclare var onscroll: (ev: UIEvent) => any;\r\ndeclare var onseeked: (ev: Event) => any;\r\ndeclare var onseeking: (ev: Event) => any;\r\ndeclare var onselect: (ev: UIEvent) => any;\r\ndeclare var onstalled: (ev: Event) => any;\r\ndeclare var onstorage: (ev: StorageEvent) => any;\r\ndeclare var onsubmit: (ev: Event) => any;\r\ndeclare var onsuspend: (ev: Event) => any;\r\ndeclare var ontimeupdate: (ev: Event) => any;\r\ndeclare var ontouchcancel: any;\r\ndeclare var ontouchend: any;\r\ndeclare var ontouchmove: any;\r\ndeclare var ontouchstart: any;\r\ndeclare var onunload: (ev: Event) => any;\r\ndeclare var onvolumechange: (ev: Event) => any;\r\ndeclare var onwaiting: (ev: Event) => any;\r\ndeclare var opener: Window;\r\ndeclare var orientation: string;\r\ndeclare var outerHeight: number;\r\ndeclare var outerWidth: number;\r\ndeclare var pageXOffset: number;\r\ndeclare var pageYOffset: number;\r\ndeclare var parent: Window;\r\ndeclare var performance: Performance;\r\ndeclare var personalbar: BarProp;\r\ndeclare var screen: Screen;\r\ndeclare var screenLeft: number;\r\ndeclare var screenTop: number;\r\ndeclare var screenX: number;\r\ndeclare var screenY: number;\r\ndeclare var scrollX: number;\r\ndeclare var scrollY: number;\r\ndeclare var scrollbars: BarProp;\r\ndeclare var self: Window;\r\ndeclare var status: string;\r\ndeclare var statusbar: BarProp;\r\ndeclare var styleMedia: StyleMedia;\r\ndeclare var toolbar: BarProp;\r\ndeclare var top: Window;\r\ndeclare var window: Window;\r\ndeclare function alert(message?: any): void;\r\ndeclare function blur(): void;\r\ndeclare function cancelAnimationFrame(handle: number): void;\r\ndeclare function captureEvents(): void;\r\ndeclare function close(): void;\r\ndeclare function confirm(message?: string): boolean;\r\ndeclare function focus(): void;\r\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\ndeclare function getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\r\ndeclare function getSelection(): Selection;\r\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function moveBy(x?: number, y?: number): void;\r\ndeclare function moveTo(x?: number, y?: number): void;\r\ndeclare function msCancelRequestAnimationFrame(handle: number): void;\r\ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\r\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): any;\r\ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void;\r\ndeclare function print(): void;\r\ndeclare function prompt(message?: string, _default?: string): string;\r\ndeclare function releaseEvents(): void;\r\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function resizeBy(x?: number, y?: number): void;\r\ndeclare function resizeTo(x?: number, y?: number): void;\r\ndeclare function scroll(x?: number, y?: number): void;\r\ndeclare function scrollBy(x?: number, y?: number): void;\r\ndeclare function scrollTo(x?: number, y?: number): void;\r\ndeclare function webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\r\ndeclare function webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\r\ndeclare function toString(): string;\r\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\ndeclare function dispatchEvent(evt: Event): boolean;\r\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\ndeclare function clearInterval(handle: number): void;\r\ndeclare function clearTimeout(handle: number): void;\r\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function clearImmediate(handle: number): void;\r\ndeclare function msClearImmediate(handle: number): void;\r\ndeclare function msSetImmediate(expression: any, ...args: any[]): number;\r\ndeclare function setImmediate(expression: any, ...args: any[]): number;\r\ndeclare var sessionStorage: Storage;\r\ndeclare var localStorage: Storage;\r\ndeclare var console: Console;\r\ndeclare var onpointercancel: (ev: PointerEvent) => any;\r\ndeclare var onpointerdown: (ev: PointerEvent) => any;\r\ndeclare var onpointerenter: (ev: PointerEvent) => any;\r\ndeclare var onpointerleave: (ev: PointerEvent) => any;\r\ndeclare var onpointermove: (ev: PointerEvent) => any;\r\ndeclare var onpointerout: (ev: PointerEvent) => any;\r\ndeclare var onpointerover: (ev: PointerEvent) => any;\r\ndeclare var onpointerup: (ev: PointerEvent) => any;\r\ndeclare var onwheel: (ev: WheelEvent) => any;\r\ndeclare var indexedDB: IDBFactory;\r\ndeclare var msIndexedDB: IDBFactory;\r\ndeclare function atob(encodedString: string): string;\r\ndeclare function btoa(rawString: string): string;\r\ndeclare function addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n\r\n/////////////////////////////\r\n/// WorkerGlobalScope APIs \r\n/////////////////////////////\r\n// These are only available in a Web Worker \r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n\r\n/////////////////////////////\r\n/// Windows Script Host APIS\r\n/////////////////////////////\r\n\r\n\r\ninterface ActiveXObject {\r\n    new (s: string): any;\r\n}\r\ndeclare var ActiveXObject: ActiveXObject;\r\n\r\ninterface ITextWriter {\r\n    Write(s: string): void;\r\n    WriteLine(s: string): void;\r\n    Close(): void;\r\n}\r\n\r\ninterface TextStreamBase {\r\n    /**\r\n     * The column number of the current character position in an input stream.\r\n     */\r\n    Column: number;\r\n\r\n    /**\r\n     * The current line number in an input stream.\r\n     */\r\n    Line: number;\r\n\r\n    /**\r\n     * Closes a text stream.\r\n     * It is not necessary to close standard streams; they close automatically when the process ends. If \r\n     * you close a standard stream, be aware that any other pointers to that standard stream become invalid.\r\n     */\r\n    Close(): void;\r\n}\r\n\r\ninterface TextStreamWriter extends TextStreamBase {\r\n    /**\r\n     * Sends a string to an output stream.\r\n     */\r\n    Write(s: string): void;\r\n\r\n    /**\r\n     * Sends a specified number of blank lines (newline characters) to an output stream.\r\n     */\r\n    WriteBlankLines(intLines: number): void;\r\n\r\n    /**\r\n     * Sends a string followed by a newline character to an output stream.\r\n     */\r\n    WriteLine(s: string): void;\r\n}\r\n\r\ninterface TextStreamReader extends TextStreamBase {\r\n    /**\r\n     * Returns a specified number of characters from an input stream, starting at the current pointer position.\r\n     * Does not return until the ENTER key is pressed.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    Read(characters: number): string;\r\n\r\n    /**\r\n     * Returns all characters from an input stream.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    ReadAll(): string;\r\n\r\n    /**\r\n     * Returns an entire line from an input stream.\r\n     * Although this method extracts the newline character, it does not add it to the returned string.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    ReadLine(): string;\r\n\r\n    /**\r\n     * Skips a specified number of characters when reading from an input text stream.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)\r\n     */\r\n    Skip(characters: number): void;\r\n\r\n    /**\r\n     * Skips the next line when reading from an input text stream.\r\n     * Can only be used on a stream in reading mode, not writing or appending mode.\r\n     */\r\n    SkipLine(): void;\r\n\r\n    /**\r\n     * Indicates whether the stream pointer position is at the end of a line.\r\n     */\r\n    AtEndOfLine: boolean;\r\n\r\n    /**\r\n     * Indicates whether the stream pointer position is at the end of a stream.\r\n     */\r\n    AtEndOfStream: boolean;\r\n}\r\n\r\ndeclare var WScript: {\r\n    /**\r\n    * Outputs text to either a message box (under WScript.exe) or the command console window followed by\r\n    * a newline (under CScript.exe).\r\n    */\r\n    Echo(s: any): void;\r\n\r\n    /**\r\n     * Exposes the write-only error output stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdErr: TextStreamWriter;\r\n\r\n    /**\r\n     * Exposes the write-only output stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdOut: TextStreamWriter;\r\n    Arguments: { length: number; Item(n: number): string; };\r\n\r\n    /**\r\n     *  The full path of the currently running script.\r\n     */\r\n    ScriptFullName: string;\r\n\r\n    /**\r\n     * Forces the script to stop immediately, with an optional exit code.\r\n     */\r\n    Quit(exitCode?: number): number;\r\n\r\n    /**\r\n     * The Windows Script Host build version number.\r\n     */\r\n    BuildVersion: number;\r\n\r\n    /**\r\n     * Fully qualified path of the host executable.\r\n     */\r\n    FullName: string;\r\n\r\n    /**\r\n     * Gets/sets the script mode - interactive(true) or batch(false).\r\n     */\r\n    Interactive: boolean;\r\n\r\n    /**\r\n     * The name of the host executable (WScript.exe or CScript.exe).\r\n     */\r\n    Name: string;\r\n\r\n    /**\r\n     * Path of the directory containing the host executable.\r\n     */\r\n    Path: string;\r\n\r\n    /**\r\n     * The filename of the currently running script.\r\n     */\r\n    ScriptName: string;\r\n\r\n    /**\r\n     * Exposes the read-only input stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdIn: TextStreamReader;\r\n\r\n    /**\r\n     * Windows Script Host version\r\n     */\r\n    Version: string;\r\n\r\n    /**\r\n     * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.\r\n     */\r\n    ConnectObject(objEventSource: any, strPrefix: string): void;\r\n\r\n    /**\r\n     * Creates a COM object.\r\n     * @param strProgiID\r\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r\n     */\r\n    CreateObject(strProgID: string, strPrefix?: string): any;\r\n\r\n    /**\r\n     * Disconnects a COM object from its event sources.\r\n     */\r\n    DisconnectObject(obj: any): void;\r\n\r\n    /**\r\n     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.\r\n     * @param strPathname Fully qualified path to the file containing the object persisted to disk.\r\n     *                       For objects in memory, pass a zero-length string.\r\n     * @param strProgID\r\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r\n     */\r\n    GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any;\r\n\r\n    /**\r\n     * Suspends script execution for a specified length of time, then continues execution.\r\n     * @param intTime Interval (in milliseconds) to suspend script execution.\r\n     */\r\n    Sleep(intTime: number): void;\r\n};\r\n\r\n/**\r\n * Allows enumerating over a COM collection, which may not have indexed item access.\r\n */\r\ninterface Enumerator<T> {\r\n    /**\r\n     * Returns true if the current item is the last one in the collection, or the collection is empty,\r\n     * or the current item is undefined.\r\n     */\r\n    atEnd(): boolean;\r\n\r\n    /**\r\n     * Returns the current item in the collection\r\n     */\r\n    item(): T;\r\n\r\n    /**\r\n     * Resets the current item in the collection to the first item. If there are no items in the collection,\r\n     * the current item is set to undefined.\r\n     */\r\n    moveFirst(): void;\r\n\r\n    /**\r\n     * Moves the current item to the next item in the collection. If the enumerator is at the end of\r\n     * the collection or the collection is empty, the current item is set to undefined.\r\n     */\r\n    moveNext(): void;\r\n}\r\n\r\ninterface EnumeratorConstructor {\r\n    new <T>(collection: any): Enumerator<T>;\r\n    new (collection: any): Enumerator<any>;\r\n}\r\n\r\ndeclare var Enumerator: EnumeratorConstructor;\r\n\r\n/**\r\n * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\r\n */\r\ninterface VBArray<T> {\r\n    /**\r\n     * Returns the number of dimensions (1-based).\r\n     */\r\n    dimensions(): number;\r\n\r\n    /**\r\n     * Takes an index for each dimension in the array, and returns the item at the corresponding location.\r\n     */\r\n    getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T;\r\n\r\n    /**\r\n     * Returns the smallest available index for a given dimension.\r\n     * @param dimension 1-based dimension (defaults to 1)\r\n     */\r\n    lbound(dimension?: number): number;\r\n\r\n    /**\r\n     * Returns the largest available index for a given dimension.\r\n     * @param dimension 1-based dimension (defaults to 1)\r\n     */\r\n    ubound(dimension?: number): number;\r\n\r\n    /**\r\n     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\r\n     * each successive dimension is appended to the end of the array.\r\n     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]\r\n     */\r\n    toArray(): T[];\r\n}\r\n\r\ninterface VBArrayConstructor {\r\n    new <T>(safeArray: any): VBArray<T>;\r\n    new (safeArray: any): VBArray<any>;\r\n}\r\n\r\ndeclare var VBArray: VBArrayConstructor;\r\n"},{"name":"types.ts","text":"module ts {\r\n    export interface Map<T> {\r\n        [index: string]: T;\r\n    }\r\n\r\n    export interface FileMap<T> {\r\n        get(fileName: string): T;\r\n        set(fileName: string, value: T): void;\r\n        contains(fileName: string): boolean;\r\n        remove(fileName: string): void;\r\n        forEachValue(f: (v: T) => void): void;\r\n    }\r\n\r\n    export interface TextRange {\r\n        pos: number;\r\n        end: number;\r\n    }\r\n\r\n    // token > SyntaxKind.Identifer => token is a keyword\r\n    export const enum SyntaxKind {\r\n        Unknown,\r\n        EndOfFileToken,\r\n        SingleLineCommentTrivia,\r\n        MultiLineCommentTrivia,\r\n        NewLineTrivia,\r\n        WhitespaceTrivia,\r\n        // We detect and provide better error recovery when we encounter a git merge marker.  This\r\n        // allows us to edit files with git-conflict markers in them in a much more pleasant manner.\r\n        ConflictMarkerTrivia,\r\n        // Literals\r\n        NumericLiteral,\r\n        StringLiteral,\r\n        RegularExpressionLiteral,\r\n        NoSubstitutionTemplateLiteral,\r\n        // Pseudo-literals\r\n        TemplateHead,\r\n        TemplateMiddle,\r\n        TemplateTail,\r\n        // Punctuation\r\n        OpenBraceToken,\r\n        CloseBraceToken,\r\n        OpenParenToken,\r\n        CloseParenToken,\r\n        OpenBracketToken,\r\n        CloseBracketToken,\r\n        DotToken,\r\n        DotDotDotToken,\r\n        SemicolonToken,\r\n        CommaToken,\r\n        LessThanToken,\r\n        GreaterThanToken,\r\n        LessThanEqualsToken,\r\n        GreaterThanEqualsToken,\r\n        EqualsEqualsToken,\r\n        ExclamationEqualsToken,\r\n        EqualsEqualsEqualsToken,\r\n        ExclamationEqualsEqualsToken,\r\n        EqualsGreaterThanToken,\r\n        PlusToken,\r\n        MinusToken,\r\n        AsteriskToken,\r\n        SlashToken,\r\n        PercentToken,\r\n        PlusPlusToken,\r\n        MinusMinusToken,\r\n        LessThanLessThanToken,\r\n        GreaterThanGreaterThanToken,\r\n        GreaterThanGreaterThanGreaterThanToken,\r\n        AmpersandToken,\r\n        BarToken,\r\n        CaretToken,\r\n        ExclamationToken,\r\n        TildeToken,\r\n        AmpersandAmpersandToken,\r\n        BarBarToken,\r\n        QuestionToken,\r\n        ColonToken,\r\n        AtToken,\r\n        // Assignments\r\n        EqualsToken,\r\n        PlusEqualsToken,\r\n        MinusEqualsToken,\r\n        AsteriskEqualsToken,\r\n        SlashEqualsToken,\r\n        PercentEqualsToken,\r\n        LessThanLessThanEqualsToken,\r\n        GreaterThanGreaterThanEqualsToken,\r\n        GreaterThanGreaterThanGreaterThanEqualsToken,\r\n        AmpersandEqualsToken,\r\n        BarEqualsToken,\r\n        CaretEqualsToken,\r\n        // Identifiers\r\n        Identifier,\r\n        // Reserved words\r\n        BreakKeyword,\r\n        CaseKeyword,\r\n        CatchKeyword,\r\n        ClassKeyword,\r\n        ConstKeyword,\r\n        ContinueKeyword,\r\n        DebuggerKeyword,\r\n        DefaultKeyword,\r\n        DeleteKeyword,\r\n        DoKeyword,\r\n        ElseKeyword,\r\n        EnumKeyword,\r\n        ExportKeyword,\r\n        ExtendsKeyword,\r\n        FalseKeyword,\r\n        FinallyKeyword,\r\n        ForKeyword,\r\n        FunctionKeyword,\r\n        IfKeyword,\r\n        ImportKeyword,\r\n        InKeyword,\r\n        InstanceOfKeyword,\r\n        NewKeyword,\r\n        NullKeyword,\r\n        ReturnKeyword,\r\n        SuperKeyword,\r\n        SwitchKeyword,\r\n        ThisKeyword,\r\n        ThrowKeyword,\r\n        TrueKeyword,\r\n        TryKeyword,\r\n        TypeOfKeyword,\r\n        VarKeyword,\r\n        VoidKeyword,\r\n        WhileKeyword,\r\n        WithKeyword,\r\n        // Strict mode reserved words\r\n        ImplementsKeyword,\r\n        InterfaceKeyword,\r\n        LetKeyword,\r\n        PackageKeyword,\r\n        PrivateKeyword,\r\n        ProtectedKeyword,\r\n        PublicKeyword,\r\n        StaticKeyword,\r\n        YieldKeyword,\r\n        // Contextual keywords\r\n        AsKeyword,\r\n        AnyKeyword,\r\n        BooleanKeyword,\r\n        ConstructorKeyword,\r\n        DeclareKeyword,\r\n        GetKeyword,\r\n        IsKeyword,\r\n        ModuleKeyword,\r\n        NamespaceKeyword,\r\n        RequireKeyword,\r\n        NumberKeyword,\r\n        SetKeyword,\r\n        StringKeyword,\r\n        SymbolKeyword,\r\n        TypeKeyword,\r\n        FromKeyword,\r\n        OfKeyword, // LastKeyword and LastToken\r\n\r\n        // Parse tree nodes\r\n\r\n        // Names\r\n        QualifiedName,\r\n        ComputedPropertyName,\r\n        // Signature elements\r\n        TypeParameter,\r\n        Parameter,\r\n        Decorator,\r\n        // TypeMember\r\n        PropertySignature,\r\n        PropertyDeclaration,\r\n        MethodSignature,\r\n        MethodDeclaration,\r\n        Constructor,\r\n        GetAccessor,\r\n        SetAccessor,\r\n        CallSignature,\r\n        ConstructSignature,\r\n        IndexSignature,\r\n        // Type\r\n        TypePredicate,\r\n        TypeReference,\r\n        FunctionType,\r\n        ConstructorType,\r\n        TypeQuery,\r\n        TypeLiteral,\r\n        ArrayType,\r\n        TupleType,\r\n        UnionType,\r\n        ParenthesizedType,\r\n        // Binding patterns\r\n        ObjectBindingPattern,\r\n        ArrayBindingPattern,\r\n        BindingElement,\r\n        // Expression\r\n        ArrayLiteralExpression,\r\n        ObjectLiteralExpression,\r\n        PropertyAccessExpression,\r\n        ElementAccessExpression,\r\n        CallExpression,\r\n        NewExpression,\r\n        TaggedTemplateExpression,\r\n        TypeAssertionExpression,\r\n        ParenthesizedExpression,\r\n        FunctionExpression,\r\n        ArrowFunction,\r\n        DeleteExpression,\r\n        TypeOfExpression,\r\n        VoidExpression,\r\n        PrefixUnaryExpression,\r\n        PostfixUnaryExpression,\r\n        BinaryExpression,\r\n        ConditionalExpression,\r\n        TemplateExpression,\r\n        YieldExpression,\r\n        SpreadElementExpression,\r\n        ClassExpression,\r\n        OmittedExpression,\r\n        ExpressionWithTypeArguments,\r\n        // Misc\r\n        TemplateSpan,\r\n        SemicolonClassElement,\r\n        // Element\r\n        Block,\r\n        VariableStatement,\r\n        EmptyStatement,\r\n        ExpressionStatement,\r\n        IfStatement,\r\n        DoStatement,\r\n        WhileStatement,\r\n        ForStatement,\r\n        ForInStatement,\r\n        ForOfStatement,\r\n        ContinueStatement,\r\n        BreakStatement,\r\n        ReturnStatement,\r\n        WithStatement,\r\n        SwitchStatement,\r\n        LabeledStatement,\r\n        ThrowStatement,\r\n        TryStatement,\r\n        DebuggerStatement,\r\n        VariableDeclaration,\r\n        VariableDeclarationList,\r\n        FunctionDeclaration,\r\n        ClassDeclaration,\r\n        InterfaceDeclaration,\r\n        TypeAliasDeclaration,\r\n        EnumDeclaration,\r\n        ModuleDeclaration,\r\n        ModuleBlock,\r\n        CaseBlock,\r\n        ImportEqualsDeclaration,\r\n        ImportDeclaration,\r\n        ImportClause,\r\n        NamespaceImport,\r\n        NamedImports,\r\n        ImportSpecifier,\r\n        ExportAssignment,\r\n        ExportDeclaration,\r\n        NamedExports,\r\n        ExportSpecifier,\r\n        MissingDeclaration,\r\n\r\n        // Module references\r\n        ExternalModuleReference,\r\n\r\n        // Clauses\r\n        CaseClause,\r\n        DefaultClause,\r\n        HeritageClause,\r\n        CatchClause,\r\n\r\n        // Property assignments\r\n        PropertyAssignment,\r\n        ShorthandPropertyAssignment,\r\n\r\n        // Enum\r\n        EnumMember,\r\n        // Top-level nodes\r\n        SourceFile,\r\n\r\n        // JSDoc nodes.\r\n        JSDocTypeExpression,\r\n        // The * type.\r\n        JSDocAllType,\r\n        // The ? type.\r\n        JSDocUnknownType,\r\n        JSDocArrayType,\r\n        JSDocUnionType,\r\n        JSDocTupleType,\r\n        JSDocNullableType,\r\n        JSDocNonNullableType,\r\n        JSDocRecordType,\r\n        JSDocRecordMember,\r\n        JSDocTypeReference,\r\n        JSDocOptionalType,\r\n        JSDocFunctionType,\r\n        JSDocVariadicType,\r\n        JSDocConstructorType,\r\n        JSDocThisType,\r\n        JSDocComment,\r\n        JSDocTag,\r\n        JSDocParameterTag,\r\n        JSDocReturnTag,\r\n        JSDocTypeTag,\r\n        JSDocTemplateTag,\r\n\r\n        // Synthesized list\r\n        SyntaxList,\r\n        // Enum value count\r\n        Count,\r\n        // Markers\r\n        FirstAssignment = EqualsToken,\r\n        LastAssignment = CaretEqualsToken,\r\n        FirstReservedWord = BreakKeyword,\r\n        LastReservedWord = WithKeyword,\r\n        FirstKeyword = BreakKeyword,\r\n        LastKeyword = OfKeyword,\r\n        FirstFutureReservedWord = ImplementsKeyword,\r\n        LastFutureReservedWord = YieldKeyword,\r\n        FirstTypeNode = TypeReference,\r\n        LastTypeNode = ParenthesizedType,\r\n        FirstPunctuation = OpenBraceToken,\r\n        LastPunctuation = CaretEqualsToken,\r\n        FirstToken = Unknown,\r\n        LastToken = LastKeyword,\r\n        FirstTriviaToken = SingleLineCommentTrivia,\r\n        LastTriviaToken = ConflictMarkerTrivia,\r\n        FirstLiteralToken = NumericLiteral,\r\n        LastLiteralToken = NoSubstitutionTemplateLiteral,\r\n        FirstTemplateToken = NoSubstitutionTemplateLiteral,\r\n        LastTemplateToken = TemplateTail,\r\n        FirstBinaryOperator = LessThanToken,\r\n        LastBinaryOperator = CaretEqualsToken,\r\n        FirstNode = QualifiedName,\r\n    }\r\n\r\n    export const enum NodeFlags {\r\n        Export =            0x00000001,  // Declarations\r\n        Ambient =           0x00000002,  // Declarations\r\n        Public =            0x00000010,  // Property/Method\r\n        Private =           0x00000020,  // Property/Method\r\n        Protected =         0x00000040,  // Property/Method\r\n        Static =            0x00000080,  // Property/Method\r\n        Default =           0x00000100,  // Function/Class (export default declaration)\r\n        MultiLine =         0x00000200,  // Multi-line array or object literal\r\n        Synthetic =         0x00000400,  // Synthetic node (for full fidelity)\r\n        DeclarationFile =   0x00000800,  // Node is a .d.ts file\r\n        Let =               0x00001000,  // Variable declaration\r\n        Const =             0x00002000,  // Variable declaration\r\n        OctalLiteral =      0x00004000,  // Octal numeric literal\r\n        Namespace =         0x00008000,  // Namespace declaration\r\n        ExportContext =     0x00010000,  // Export context (initialized by binding)\r\n\r\n        Modifier = Export | Ambient | Public | Private | Protected | Static | Default,\r\n        AccessibilityModifier = Public | Private | Protected,\r\n        BlockScoped = Let | Const\r\n    }\r\n\r\n    /* @internal */\r\n    export const enum ParserContextFlags {\r\n        None = 0,\r\n\r\n        // Set if this node was parsed in strict mode.  Used for grammar error checks, as well as\r\n        // checking if the node can be reused in incremental settings.\r\n        StrictMode = 1 << 0,\r\n\r\n        // If this node was parsed in a context where 'in-expressions' are not allowed.\r\n        DisallowIn = 1 << 1,\r\n\r\n        // If this node was parsed in the 'yield' context created when parsing a generator.\r\n        Yield = 1 << 2,\r\n\r\n        // If this node was parsed in the parameters of a generator.\r\n        GeneratorParameter = 1 << 3,\r\n\r\n        // If this node was parsed as part of a decorator\r\n        Decorator = 1 << 4,\r\n\r\n        // If the parser encountered an error when parsing the code that created this node.  Note\r\n        // the parser only sets this directly on the node it creates right after encountering the\r\n        // error.\r\n        ThisNodeHasError = 1 << 5,\r\n\r\n        // This node was parsed in a JavaScript file and can be processed differently.  For example\r\n        // its type can be specified usign a JSDoc comment.\r\n        JavaScriptFile = 1 << 6,\r\n\r\n        // Context flags set directly by the parser.\r\n        ParserGeneratedFlags = StrictMode | DisallowIn | Yield | GeneratorParameter | Decorator | ThisNodeHasError,\r\n\r\n        // Context flags computed by aggregating child flags upwards.\r\n\r\n        // Used during incremental parsing to determine if this node or any of its children had an\r\n        // error.  Computed only once and then cached.\r\n        ThisNodeOrAnySubNodesHasError = 1 << 7,\r\n\r\n        // Used to know if we've computed data from children and cached it in this node.\r\n        HasAggregatedChildData = 1 << 8\r\n    }\r\n\r\n    /* @internal */\r\n    export const enum RelationComparisonResult {\r\n        Succeeded = 1, // Should be truthy\r\n        Failed = 2,\r\n        FailedAndReported = 3\r\n    }\r\n\r\n    export interface Node extends TextRange {\r\n        kind: SyntaxKind;\r\n        flags: NodeFlags;\r\n        // Specific context the parser was in when this node was created.  Normally undefined.\r\n        // Only set when the parser was in some interesting context (like async/yield).\r\n        /* @internal */ parserContextFlags?: ParserContextFlags;\r\n        decorators?: NodeArray<Decorator>;              // Array of decorators (in document order)\r\n        modifiers?: ModifiersArray;                     // Array of modifiers\r\n        /* @internal */ id?: number;                    // Unique id (used to look up NodeLinks)\r\n        parent?: Node;                                  // Parent node (initialized by binding\r\n        /* @internal */ jsDocComment?: JSDocComment;    // JSDoc for the node, if it has any.  Only for .js files.\r\n        /* @internal */ symbol?: Symbol;                // Symbol declared by node (initialized by binding)\r\n        /* @internal */ locals?: SymbolTable;           // Locals associated with node (initialized by binding)\r\n        /* @internal */ nextContainer?: Node;           // Next container in declaration order (initialized by binding)\r\n        /* @internal */ localSymbol?: Symbol;           // Local symbol declared by node (initialized by binding only for exported nodes)\r\n    }\r\n\r\n    export interface NodeArray<T> extends Array<T>, TextRange {\r\n        hasTrailingComma?: boolean;\r\n    }\r\n\r\n    export interface ModifiersArray extends NodeArray<Node> {\r\n        flags: number;\r\n    }\r\n\r\n    export interface Identifier extends PrimaryExpression {\r\n        text: string;                                  // Text of identifier (with escapes converted to characters)\r\n        originalKeywordKind?: SyntaxKind;              // Original syntaxKind which get set so that we can report an error later\r\n    }\r\n\r\n    export interface QualifiedName extends Node {\r\n        // Must have same layout as PropertyAccess\r\n        left: EntityName;\r\n        right: Identifier;\r\n    }\r\n\r\n    export type EntityName = Identifier | QualifiedName;\r\n\r\n    export type DeclarationName = Identifier | LiteralExpression | ComputedPropertyName | BindingPattern;\r\n\r\n    export interface Declaration extends Node {\r\n        _declarationBrand: any;\r\n        name?: DeclarationName;\r\n    }\r\n\r\n    export interface ComputedPropertyName extends Node {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface Decorator extends Node {\r\n        expression: LeftHandSideExpression;\r\n    }\r\n\r\n    export interface TypeParameterDeclaration extends Declaration {\r\n        name: Identifier;\r\n        constraint?: TypeNode;\r\n\r\n        // For error recovery purposes.\r\n        expression?: Expression;\r\n    }\r\n\r\n    export interface SignatureDeclaration extends Declaration {\r\n        typeParameters?: NodeArray<TypeParameterDeclaration>;\r\n        parameters: NodeArray<ParameterDeclaration>;\r\n        type?: TypeNode;\r\n    }\r\n\r\n    // SyntaxKind.VariableDeclaration\r\n    export interface VariableDeclaration extends Declaration {\r\n        parent?: VariableDeclarationList;\r\n        name: Identifier | BindingPattern;  // Declared variable name\r\n        type?: TypeNode;                    // Optional type annotation\r\n        initializer?: Expression;           // Optional initializer\r\n    }\r\n\r\n    export interface VariableDeclarationList extends Node {\r\n        declarations: NodeArray<VariableDeclaration>;\r\n    }\r\n\r\n    // SyntaxKind.Parameter\r\n    export interface ParameterDeclaration extends Declaration {\r\n        dotDotDotToken?: Node;              // Present on rest parameter\r\n        name: Identifier | BindingPattern;  // Declared parameter name\r\n        questionToken?: Node;               // Present on optional parameter\r\n        type?: TypeNode;                    // Optional type annotation\r\n        initializer?: Expression;           // Optional initializer\r\n    }\r\n\r\n    // SyntaxKind.BindingElement\r\n    export interface BindingElement extends Declaration {\r\n        propertyName?: Identifier;          // Binding property name (in object binding pattern)\r\n        dotDotDotToken?: Node;              // Present on rest binding element\r\n        name: Identifier | BindingPattern;  // Declared binding element name\r\n        initializer?: Expression;           // Optional initializer\r\n    }\r\n\r\n    // SyntaxKind.Property\r\n    export interface PropertyDeclaration extends Declaration, ClassElement {\r\n        name: DeclarationName;              // Declared property name\r\n        questionToken?: Node;               // Present on optional property\r\n        type?: TypeNode;                    // Optional type annotation\r\n        initializer?: Expression;           // Optional initializer\r\n    }\r\n\r\n    export interface ObjectLiteralElement extends Declaration {\r\n        _objectLiteralBrandBrand: any;\r\n    }\r\n\r\n    // SyntaxKind.PropertyAssignment\r\n    export interface PropertyAssignment extends ObjectLiteralElement {\r\n        _propertyAssignmentBrand: any;\r\n        name: DeclarationName;\r\n        questionToken?: Node;\r\n        initializer: Expression;\r\n    }\r\n\r\n    // SyntaxKind.ShorthandPropertyAssignment\r\n    export interface ShorthandPropertyAssignment extends ObjectLiteralElement {\r\n        name: Identifier;\r\n        questionToken?: Node;\r\n    }\r\n\r\n    // SyntaxKind.VariableDeclaration\r\n    // SyntaxKind.Parameter\r\n    // SyntaxKind.BindingElement\r\n    // SyntaxKind.Property\r\n    // SyntaxKind.PropertyAssignment\r\n    // SyntaxKind.ShorthandPropertyAssignment\r\n    // SyntaxKind.EnumMember\r\n    export interface VariableLikeDeclaration extends Declaration {\r\n        propertyName?: Identifier;\r\n        dotDotDotToken?: Node;\r\n        name: DeclarationName;\r\n        questionToken?: Node;\r\n        type?: TypeNode;\r\n        initializer?: Expression;\r\n    }\r\n\r\n    export interface BindingPattern extends Node {\r\n        elements: NodeArray<BindingElement>;\r\n    }\r\n\r\n    /**\r\n     * Several node kinds share function-like features such as a signature,\r\n     * a name, and a body. These nodes should extend FunctionLikeDeclaration.\r\n     * Examples:\r\n     *  FunctionDeclaration\r\n     *  MethodDeclaration\r\n     *  AccessorDeclaration\r\n     */\r\n    export interface FunctionLikeDeclaration extends SignatureDeclaration {\r\n        _functionLikeDeclarationBrand: any;\r\n\r\n        asteriskToken?: Node;\r\n        questionToken?: Node;\r\n        body?: Block | Expression;\r\n    }\r\n\r\n    export interface FunctionDeclaration extends FunctionLikeDeclaration, Statement {\r\n        name?: Identifier;\r\n        body?: Block;\r\n    }\r\n\r\n    // Note that a MethodDeclaration is considered both a ClassElement and an ObjectLiteralElement.\r\n    // Both the grammars for ClassDeclaration and ObjectLiteralExpression allow for MethodDeclarations\r\n    // as child elements, and so a MethodDeclaration satisfies both interfaces.  This avoids the\r\n    // alternative where we would need separate kinds/types for ClassMethodDeclaration and\r\n    // ObjectLiteralMethodDeclaration, which would look identical.\r\n    //\r\n    // Because of this, it may be necessary to determine what sort of MethodDeclaration you have\r\n    // at later stages of the compiler pipeline.  In that case, you can either check the parent kind\r\n    // of the method, or use helpers like isObjectLiteralMethodDeclaration\r\n    export interface MethodDeclaration extends FunctionLikeDeclaration, ClassElement, ObjectLiteralElement {\r\n        body?: Block;\r\n    }\r\n\r\n    export interface ConstructorDeclaration extends FunctionLikeDeclaration, ClassElement {\r\n        body?: Block;\r\n    }\r\n\r\n    // For when we encounter a semicolon in a class declaration.  ES6 allows these as class elements.\r\n    export interface SemicolonClassElement extends ClassElement {\r\n        _semicolonClassElementBrand: any;\r\n    }\r\n\r\n    // See the comment on MethodDeclaration for the intuition behind AccessorDeclaration being a\r\n    // ClassElement and an ObjectLiteralElement.\r\n    export interface AccessorDeclaration extends FunctionLikeDeclaration, ClassElement, ObjectLiteralElement {\r\n        _accessorDeclarationBrand: any;\r\n        body: Block;\r\n    }\r\n\r\n    export interface IndexSignatureDeclaration extends SignatureDeclaration, ClassElement {\r\n        _indexSignatureDeclarationBrand: any;\r\n    }\r\n\r\n    export interface TypeNode extends Node {\r\n        _typeNodeBrand: any;\r\n    }\r\n\r\n    export interface FunctionOrConstructorTypeNode extends TypeNode, SignatureDeclaration {\r\n        _functionOrConstructorTypeNodeBrand: any;\r\n    }\r\n\r\n    export interface TypeReferenceNode extends TypeNode {\r\n        typeName: EntityName;\r\n        typeArguments?: NodeArray<TypeNode>;\r\n    }\r\n\r\n    export interface TypePredicateNode extends TypeNode {\r\n        parameterName: Identifier;\r\n        type: TypeNode;\r\n    }\r\n\r\n    export interface TypeQueryNode extends TypeNode {\r\n        exprName: EntityName;\r\n    }\r\n\r\n    // A TypeLiteral is the declaration node for an anonymous symbol.\r\n    export interface TypeLiteralNode extends TypeNode, Declaration {\r\n        members: NodeArray<Node>;\r\n    }\r\n\r\n    export interface ArrayTypeNode extends TypeNode {\r\n        elementType: TypeNode;\r\n    }\r\n\r\n    export interface TupleTypeNode extends TypeNode {\r\n        elementTypes: NodeArray<TypeNode>;\r\n    }\r\n\r\n    export interface UnionTypeNode extends TypeNode {\r\n        types: NodeArray<TypeNode>;\r\n    }\r\n\r\n    export interface ParenthesizedTypeNode extends TypeNode {\r\n        type: TypeNode;\r\n    }\r\n\r\n    // Note that a StringLiteral AST node is both an Expression and a TypeNode.  The latter is\r\n    // because string literals can appear in the type annotation of a parameter node.\r\n    export interface StringLiteral extends LiteralExpression, TypeNode {\r\n        _stringLiteralBrand: any;\r\n    }\r\n\r\n    // Note: 'brands' in our syntax nodes serve to give us a small amount of nominal typing.\r\n    // Consider 'Expression'.  Without the brand, 'Expression' is actually no different\r\n    // (structurally) than 'Node'.  Because of this you can pass any Node to a function that\r\n    // takes an Expression without any error.  By using the 'brands' we ensure that the type\r\n    // checker actually thinks you have something of the right type.  Note: the brands are\r\n    // never actually given values.  At runtime they have zero cost.\r\n\r\n    export interface Expression extends Node {\r\n        _expressionBrand: any;\r\n        contextualType?: Type;  // Used to temporarily assign a contextual type during overload resolution\r\n    }\r\n\r\n    export interface UnaryExpression extends Expression {\r\n        _unaryExpressionBrand: any;\r\n    }\r\n\r\n    export interface PrefixUnaryExpression extends UnaryExpression {\r\n        operator: SyntaxKind;\r\n        operand: UnaryExpression;\r\n    }\r\n\r\n    export interface PostfixUnaryExpression extends PostfixExpression {\r\n        operand: LeftHandSideExpression;\r\n        operator: SyntaxKind;\r\n    }\r\n\r\n    export interface PostfixExpression extends UnaryExpression {\r\n        _postfixExpressionBrand: any;\r\n    }\r\n\r\n    export interface LeftHandSideExpression extends PostfixExpression {\r\n        _leftHandSideExpressionBrand: any;\r\n    }\r\n\r\n    export interface MemberExpression extends LeftHandSideExpression {\r\n        _memberExpressionBrand: any;\r\n    }\r\n\r\n    export interface PrimaryExpression extends MemberExpression {\r\n        _primaryExpressionBrand: any;\r\n    }\r\n\r\n    export interface DeleteExpression extends UnaryExpression {\r\n        expression: UnaryExpression;\r\n    }\r\n\r\n    export interface TypeOfExpression extends UnaryExpression {\r\n        expression: UnaryExpression;\r\n    }\r\n\r\n    export interface VoidExpression extends UnaryExpression {\r\n        expression: UnaryExpression;\r\n    }\r\n\r\n    export interface YieldExpression extends Expression {\r\n        asteriskToken?: Node;\r\n        expression?: Expression;\r\n    }\r\n\r\n    export interface BinaryExpression extends Expression {\r\n        left: Expression;\r\n        operatorToken: Node;\r\n        right: Expression;\r\n    }\r\n\r\n    export interface ConditionalExpression extends Expression {\r\n        condition: Expression;\r\n        questionToken: Node;\r\n        whenTrue: Expression;\r\n        colonToken: Node;\r\n        whenFalse: Expression;\r\n    }\r\n\r\n    export interface FunctionExpression extends PrimaryExpression, FunctionLikeDeclaration {\r\n        name?: Identifier;\r\n        body: Block | Expression;  // Required, whereas the member inherited from FunctionDeclaration is optional\r\n    }\r\n\r\n    export interface ArrowFunction extends Expression, FunctionLikeDeclaration {\r\n        equalsGreaterThanToken: Node;\r\n    }\r\n\r\n    // The text property of a LiteralExpression stores the interpreted value of the literal in text form. For a StringLiteral,\r\n    // or any literal of a template, this means quotes have been removed and escapes have been converted to actual characters.\r\n    // For a NumericLiteral, the stored value is the toString() representation of the number. For example 1, 1.00, and 1e0 are all stored as just \"1\".\r\n    export interface LiteralExpression extends PrimaryExpression {\r\n        text: string;\r\n        isUnterminated?: boolean;\r\n        hasExtendedUnicodeEscape?: boolean;\r\n    }\r\n\r\n    export interface TemplateExpression extends PrimaryExpression {\r\n        head: LiteralExpression;\r\n        templateSpans: NodeArray<TemplateSpan>;\r\n    }\r\n\r\n    // Each of these corresponds to a substitution expression and a template literal, in that order.\r\n    // The template literal must have kind TemplateMiddleLiteral or TemplateTailLiteral.\r\n    export interface TemplateSpan extends Node {\r\n        expression: Expression;\r\n        literal: LiteralExpression;\r\n    }\r\n\r\n    export interface ParenthesizedExpression extends PrimaryExpression {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface ArrayLiteralExpression extends PrimaryExpression {\r\n        elements: NodeArray<Expression>;\r\n    }\r\n\r\n    export interface SpreadElementExpression extends Expression {\r\n        expression: Expression;\r\n    }\r\n\r\n    // An ObjectLiteralExpression is the declaration node for an anonymous symbol.\r\n    export interface ObjectLiteralExpression extends PrimaryExpression, Declaration {\r\n        properties: NodeArray<ObjectLiteralElement>;\r\n    }\r\n\r\n    export interface PropertyAccessExpression extends MemberExpression {\r\n        expression: LeftHandSideExpression;\r\n        dotToken: Node;\r\n        name: Identifier;\r\n    }\r\n\r\n    export interface ElementAccessExpression extends MemberExpression {\r\n        expression: LeftHandSideExpression;\r\n        argumentExpression?: Expression;\r\n    }\r\n\r\n    export interface CallExpression extends LeftHandSideExpression {\r\n        expression: LeftHandSideExpression;\r\n        typeArguments?: NodeArray<TypeNode>;\r\n        arguments: NodeArray<Expression>;\r\n    }\r\n\r\n    export interface ExpressionWithTypeArguments extends TypeNode {\r\n        expression: LeftHandSideExpression;\r\n        typeArguments?: NodeArray<TypeNode>;\r\n    }\r\n\r\n    export interface NewExpression extends CallExpression, PrimaryExpression { }\r\n\r\n    export interface TaggedTemplateExpression extends MemberExpression {\r\n        tag: LeftHandSideExpression;\r\n        template: LiteralExpression | TemplateExpression;\r\n    }\r\n\r\n    export type CallLikeExpression = CallExpression | NewExpression | TaggedTemplateExpression;\r\n\r\n    export interface TypeAssertion extends UnaryExpression {\r\n        type: TypeNode;\r\n        expression: UnaryExpression;\r\n    }\r\n\r\n    export interface Statement extends Node, ModuleElement {\r\n        _statementBrand: any;\r\n    }\r\n\r\n    export interface Block extends Statement {\r\n        statements: NodeArray<Statement>;\r\n    }\r\n\r\n    export interface VariableStatement extends Statement {\r\n        declarationList: VariableDeclarationList;\r\n    }\r\n\r\n    export interface ExpressionStatement extends Statement {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface IfStatement extends Statement {\r\n        expression: Expression;\r\n        thenStatement: Statement;\r\n        elseStatement?: Statement;\r\n    }\r\n\r\n    export interface IterationStatement extends Statement {\r\n        statement: Statement;\r\n    }\r\n\r\n    export interface DoStatement extends IterationStatement {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface WhileStatement extends IterationStatement {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface ForStatement extends IterationStatement {\r\n        initializer?: VariableDeclarationList | Expression;\r\n        condition?: Expression;\r\n        incrementor?: Expression;\r\n    }\r\n\r\n    export interface ForInStatement extends IterationStatement {\r\n        initializer: VariableDeclarationList | Expression;\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface ForOfStatement extends IterationStatement {\r\n        initializer: VariableDeclarationList | Expression;\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface BreakOrContinueStatement extends Statement {\r\n        label?: Identifier;\r\n    }\r\n\r\n    export interface ReturnStatement extends Statement {\r\n        expression?: Expression;\r\n    }\r\n\r\n    export interface WithStatement extends Statement {\r\n        expression: Expression;\r\n        statement: Statement;\r\n    }\r\n\r\n    export interface SwitchStatement extends Statement {\r\n        expression: Expression;\r\n        caseBlock: CaseBlock;\r\n    }\r\n\r\n    export interface CaseBlock extends Node {\r\n        clauses: NodeArray<CaseOrDefaultClause>;\r\n    }\r\n\r\n    export interface CaseClause extends Node {\r\n        expression?: Expression;\r\n        statements: NodeArray<Statement>;\r\n    }\r\n\r\n    export interface DefaultClause extends Node {\r\n        statements: NodeArray<Statement>;\r\n    }\r\n\r\n    export type CaseOrDefaultClause = CaseClause | DefaultClause;\r\n\r\n    export interface LabeledStatement extends Statement {\r\n        label: Identifier;\r\n        statement: Statement;\r\n    }\r\n\r\n    export interface ThrowStatement extends Statement {\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface TryStatement extends Statement {\r\n        tryBlock: Block;\r\n        catchClause?: CatchClause;\r\n        finallyBlock?: Block;\r\n    }\r\n\r\n    export interface CatchClause extends Node {\r\n        variableDeclaration: VariableDeclaration;\r\n        block: Block;\r\n    }\r\n\r\n    export interface ModuleElement extends Node {\r\n        _moduleElementBrand: any;\r\n    }\r\n\r\n    export interface ClassLikeDeclaration extends Declaration {\r\n        name?: Identifier;\r\n        typeParameters?: NodeArray<TypeParameterDeclaration>;\r\n        heritageClauses?: NodeArray<HeritageClause>;\r\n        members: NodeArray<ClassElement>;\r\n    }\r\n\r\n    export interface ClassDeclaration extends ClassLikeDeclaration, Statement {\r\n    }\r\n\r\n    export interface ClassExpression extends ClassLikeDeclaration, PrimaryExpression {\r\n    }\r\n\r\n    export interface ClassElement extends Declaration {\r\n        _classElementBrand: any;\r\n    }\r\n\r\n    export interface InterfaceDeclaration extends Declaration, Statement {\r\n        name: Identifier;\r\n        typeParameters?: NodeArray<TypeParameterDeclaration>;\r\n        heritageClauses?: NodeArray<HeritageClause>;\r\n        members: NodeArray<Declaration>;\r\n    }\r\n\r\n    export interface HeritageClause extends Node {\r\n        token: SyntaxKind;\r\n        types?: NodeArray<ExpressionWithTypeArguments>;\r\n    }\r\n\r\n    export interface TypeAliasDeclaration extends Declaration, Statement {\r\n        name: Identifier;\r\n        typeParameters?: NodeArray<TypeParameterDeclaration>;\r\n        type: TypeNode;\r\n    }\r\n\r\n    export interface EnumMember extends Declaration {\r\n        // This does include ComputedPropertyName, but the parser will give an error\r\n        // if it parses a ComputedPropertyName in an EnumMember\r\n        name: DeclarationName;\r\n        initializer?: Expression;\r\n    }\r\n\r\n    export interface EnumDeclaration extends Declaration, Statement {\r\n        name: Identifier;\r\n        members: NodeArray<EnumMember>;\r\n    }\r\n\r\n    export interface ModuleDeclaration extends Declaration, ModuleElement {\r\n        name: Identifier | LiteralExpression;\r\n        body: ModuleBlock | ModuleDeclaration;\r\n    }\r\n\r\n    export interface ModuleBlock extends Node, ModuleElement {\r\n        statements: NodeArray<ModuleElement>\r\n    }\r\n\r\n    export interface ImportEqualsDeclaration extends Declaration, ModuleElement {\r\n        name: Identifier;\r\n\r\n        // 'EntityName' for an internal module reference, 'ExternalModuleReference' for an external\r\n        // module reference.\r\n        moduleReference: EntityName | ExternalModuleReference;\r\n    }\r\n\r\n    export interface ExternalModuleReference extends Node {\r\n        expression?: Expression;\r\n    }\r\n\r\n    // In case of:\r\n    // import \"mod\"  => importClause = undefined, moduleSpecifier = \"mod\"\r\n    // In rest of the cases, module specifier is string literal corresponding to module\r\n    // ImportClause information is shown at its declaration below.\r\n    export interface ImportDeclaration extends ModuleElement {\r\n        importClause?: ImportClause;\r\n        moduleSpecifier: Expression;\r\n    }\r\n\r\n    // In case of:\r\n    // import d from \"mod\" => name = d, namedBinding = undefined\r\n    // import * as ns from \"mod\" => name = undefined, namedBinding: NamespaceImport = { name: ns }\r\n    // import d, * as ns from \"mod\" => name = d, namedBinding: NamespaceImport = { name: ns }\r\n    // import { a, b as x } from \"mod\" => name = undefined, namedBinding: NamedImports = { elements: [{ name: a }, { name: x, propertyName: b}]}\r\n    // import d, { a, b as x } from \"mod\" => name = d, namedBinding: NamedImports = { elements: [{ name: a }, { name: x, propertyName: b}]}\r\n    export interface ImportClause extends Declaration {\r\n        name?: Identifier; // Default binding\r\n        namedBindings?: NamespaceImport | NamedImports;\r\n    }\r\n\r\n    export interface NamespaceImport extends Declaration {\r\n        name: Identifier;\r\n    }\r\n\r\n    export interface ExportDeclaration extends Declaration, ModuleElement {\r\n        exportClause?: NamedExports;\r\n        moduleSpecifier?: Expression;\r\n    }\r\n\r\n    export interface NamedImportsOrExports extends Node {\r\n        elements: NodeArray<ImportOrExportSpecifier>;\r\n    }\r\n\r\n    export type NamedImports = NamedImportsOrExports;\r\n    export type NamedExports = NamedImportsOrExports;\r\n\r\n    export interface ImportOrExportSpecifier extends Declaration {\r\n        propertyName?: Identifier;  // Name preceding \"as\" keyword (or undefined when \"as\" is absent)\r\n        name: Identifier;           // Declared name\r\n    }\r\n\r\n    export type ImportSpecifier = ImportOrExportSpecifier;\r\n    export type ExportSpecifier = ImportOrExportSpecifier;\r\n\r\n    export interface ExportAssignment extends Declaration, ModuleElement {\r\n        isExportEquals?: boolean;\r\n        expression: Expression;\r\n    }\r\n\r\n    export interface FileReference extends TextRange {\r\n        fileName: string;\r\n    }\r\n\r\n    export interface CommentRange extends TextRange {\r\n        hasTrailingNewLine?: boolean;\r\n        kind: SyntaxKind;\r\n    }\r\n\r\n    // represents a top level: { type } expression in a JSDoc comment.\r\n    export interface JSDocTypeExpression extends Node {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocType extends TypeNode {\r\n        _jsDocTypeBrand: any;\r\n    }\r\n\r\n    export interface JSDocAllType extends JSDocType {\r\n        _JSDocAllTypeBrand: any;\r\n    }\r\n\r\n    export interface JSDocUnknownType extends JSDocType {\r\n        _JSDocUnknownTypeBrand: any;\r\n    }\r\n\r\n    export interface JSDocArrayType extends JSDocType {\r\n        elementType: JSDocType;\r\n    }\r\n\r\n    export interface JSDocUnionType extends JSDocType {\r\n        types: NodeArray<JSDocType>;\r\n    }\r\n\r\n    export interface JSDocTupleType extends JSDocType {\r\n        types: NodeArray<JSDocType>;\r\n    }\r\n\r\n    export interface JSDocNonNullableType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocNullableType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocRecordType extends JSDocType, TypeLiteralNode {\r\n        members: NodeArray<JSDocRecordMember>;\r\n    }\r\n\r\n    export interface JSDocTypeReference extends JSDocType {\r\n        name: EntityName;\r\n        typeArguments: NodeArray<JSDocType>\r\n    }\r\n\r\n    export interface JSDocOptionalType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocFunctionType extends JSDocType, SignatureDeclaration {\r\n        parameters: NodeArray<ParameterDeclaration>;\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocVariadicType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocConstructorType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocThisType extends JSDocType {\r\n        type: JSDocType;\r\n    }\r\n\r\n    export interface JSDocRecordMember extends PropertyDeclaration {\r\n        name: Identifier | LiteralExpression,\r\n        type?: JSDocType\r\n    }\r\n\r\n    export interface JSDocComment extends Node {\r\n        tags: NodeArray<JSDocTag>;\r\n    }\r\n\r\n    export interface JSDocTag extends Node {\r\n        atToken: Node;\r\n        tagName: Identifier;\r\n    }\r\n\r\n    export interface JSDocTemplateTag extends JSDocTag {\r\n        typeParameters: NodeArray<TypeParameterDeclaration>;\r\n    }\r\n\r\n    export interface JSDocReturnTag extends JSDocTag {\r\n        typeExpression: JSDocTypeExpression;\r\n    }\r\n\r\n    export interface JSDocTypeTag extends JSDocTag {\r\n        typeExpression: JSDocTypeExpression;\r\n    }\r\n\r\n    export interface JSDocParameterTag extends JSDocTag {\r\n        preParameterName?: Identifier;\r\n        typeExpression?: JSDocTypeExpression;\r\n        postParameterName?: Identifier;\r\n        isBracketed: boolean;\r\n    }\r\n\r\n    // Source files are declarations when they are external modules.\r\n    export interface SourceFile extends Declaration {\r\n        statements: NodeArray<ModuleElement>;\r\n        endOfFileToken: Node;\r\n\r\n        fileName: string;\r\n        text: string;\r\n\r\n        amdDependencies: {path: string; name: string}[];\r\n        moduleName: string;\r\n        referencedFiles: FileReference[];\r\n\r\n        hasNoDefaultLib: boolean;\r\n\r\n        languageVersion: ScriptTarget;\r\n\r\n        // The first node that causes this file to be an external module\r\n        /* @internal */ externalModuleIndicator: Node;\r\n\r\n        /* @internal */ isDefaultLib: boolean;\r\n        /* @internal */ identifiers: Map<string>;\r\n        /* @internal */ nodeCount: number;\r\n        /* @internal */ identifierCount: number;\r\n        /* @internal */ symbolCount: number;\r\n\r\n        // File level diagnostics reported by the parser (includes diagnostics about /// references\r\n        // as well as code diagnostics).\r\n        /* @internal */ parseDiagnostics: Diagnostic[];\r\n\r\n        // File level diagnostics reported by the binder.\r\n        /* @internal */ bindDiagnostics: Diagnostic[];\r\n\r\n        // Stores a line map for the file.\r\n        // This field should never be used directly to obtain line map, use getLineMap function instead.\r\n        /* @internal */ lineMap: number[];\r\n    }\r\n\r\n    export interface ScriptReferenceHost {\r\n        getCompilerOptions(): CompilerOptions;\r\n        getSourceFile(fileName: string): SourceFile;\r\n        getCurrentDirectory(): string;\r\n    }\r\n\r\n    export interface ParseConfigHost {\r\n        readDirectory(rootDir: string, extension: string, exclude: string[]): string[];\r\n    }\r\n\r\n    export interface WriteFileCallback {\r\n        (fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void): void;\r\n    }\r\n\r\n    export interface Program extends ScriptReferenceHost {\r\n        /**\r\n         * Get a list of files in the program\r\n         */\r\n        getSourceFiles(): SourceFile[];\r\n\r\n        /**\r\n         * Emits the JavaScript and declaration files.  If targetSourceFile is not specified, then\r\n         * the JavaScript and declaration files will be produced for all the files in this program.\r\n         * If targetSourceFile is specified, then only the JavaScript and declaration for that\r\n         * specific file will be generated.\r\n         *\r\n         * If writeFile is not specified then the writeFile callback from the compiler host will be\r\n         * used for writing the JavaScript and declaration files.  Otherwise, the writeFile parameter\r\n         * will be invoked when writing the JavaScript and declaration files.\r\n         */\r\n        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback): EmitResult;\r\n\r\n        getSyntacticDiagnostics(sourceFile?: SourceFile): Diagnostic[];\r\n        getGlobalDiagnostics(): Diagnostic[];\r\n        getSemanticDiagnostics(sourceFile?: SourceFile): Diagnostic[];\r\n        getDeclarationDiagnostics(sourceFile?: SourceFile): Diagnostic[];\r\n        /* @internal */ getCompilerOptionsDiagnostics(): Diagnostic[];\r\n\r\n        /** \r\n         * Gets a type checker that can be used to semantically analyze source fils in the program.\r\n         */\r\n        getTypeChecker(): TypeChecker;\r\n\r\n        /* @internal */ getCommonSourceDirectory(): string;\r\n\r\n        // For testing purposes only.  Should not be used by any other consumers (including the\r\n        // language service).\r\n        /* @internal */ getDiagnosticsProducingTypeChecker(): TypeChecker;\r\n\r\n        /* @internal */ getNodeCount(): number;\r\n        /* @internal */ getIdentifierCount(): number;\r\n        /* @internal */ getSymbolCount(): number;\r\n        /* @internal */ getTypeCount(): number;\r\n    }\r\n\r\n    export interface SourceMapSpan {\r\n        /** Line number in the .js file. */\r\n        emittedLine: number; \r\n        /** Column number in the .js file. */\r\n        emittedColumn: number;  \r\n        /** Line number in the .ts file. */\r\n        sourceLine: number; \r\n        /** Column number in the .ts file. */\r\n        sourceColumn: number; \r\n        /** Optional name (index into names array) associated with this span. */\r\n        nameIndex?: number; \r\n        /** .ts file (index into sources array) associated with this span */\r\n        sourceIndex: number;\r\n    }\r\n\r\n    export interface SourceMapData {\r\n        sourceMapFilePath: string;           // Where the sourcemap file is written\r\n        jsSourceMappingURL: string;          // source map URL written in the .js file\r\n        sourceMapFile: string;               // Source map's file field - .js file name\r\n        sourceMapSourceRoot: string;         // Source map's sourceRoot field - location where the sources will be present if not \"\"\r\n        sourceMapSources: string[];          // Source map's sources field - list of sources that can be indexed in this source map\r\n        sourceMapSourcesContent?: string[];  // Source map's sourcesContent field - list of the sources' text to be embedded in the source map\r\n        inputSourceFileNames: string[];      // Input source file (which one can use on program to get the file), 1:1 mapping with the sourceMapSources list\r\n        sourceMapNames?: string[];           // Source map's names field - list of names that can be indexed in this source map\r\n        sourceMapMappings: string;           // Source map's mapping field - encoded source map spans\r\n        sourceMapDecodedMappings: SourceMapSpan[];  // Raw source map spans that were encoded into the sourceMapMappings\r\n    }\r\n\r\n    /** Return code used by getEmitOutput function to indicate status of the function */\r\n    export enum ExitStatus {\r\n        // Compiler ran successfully.  Either this was a simple do-nothing compilation (for example,\r\n        // when -version or -help was provided, or this was a normal compilation, no diagnostics\r\n        // were produced, and all outputs were generated successfully.\r\n        Success = 0,\r\n\r\n        // Diagnostics were produced and because of them no code was generated.\r\n        DiagnosticsPresent_OutputsSkipped = 1,\r\n\r\n        // Diagnostics were produced and outputs were generated in spite of them.\r\n        DiagnosticsPresent_OutputsGenerated = 2,\r\n    }\r\n\r\n    export interface EmitResult {\r\n        emitSkipped: boolean;\r\n        diagnostics: Diagnostic[];\r\n        /* @internal */ sourceMaps: SourceMapData[];  // Array of sourceMapData if compiler emitted sourcemaps\r\n    }\r\n\r\n    export interface TypeCheckerHost {\r\n        getCompilerOptions(): CompilerOptions;\r\n\r\n        getSourceFiles(): SourceFile[];\r\n        getSourceFile(fileName: string): SourceFile;\r\n    }\r\n\r\n    export interface TypeChecker {\r\n        getTypeOfSymbolAtLocation(symbol: Symbol, node: Node): Type;\r\n        getDeclaredTypeOfSymbol(symbol: Symbol): Type;\r\n        getPropertiesOfType(type: Type): Symbol[];\r\n        getPropertyOfType(type: Type, propertyName: string): Symbol;\r\n        getSignaturesOfType(type: Type, kind: SignatureKind): Signature[];\r\n        getIndexTypeOfType(type: Type, kind: IndexKind): Type;\r\n        getReturnTypeOfSignature(signature: Signature): Type;\r\n\r\n        getSymbolsInScope(location: Node, meaning: SymbolFlags): Symbol[];\r\n        getSymbolAtLocation(node: Node): Symbol;\r\n        getShorthandAssignmentValueSymbol(location: Node): Symbol;\r\n        getTypeAtLocation(node: Node): Type;\r\n        typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;\r\n        symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags): string;\r\n        getSymbolDisplayBuilder(): SymbolDisplayBuilder;\r\n        getFullyQualifiedName(symbol: Symbol): string;\r\n        getAugmentedPropertiesOfType(type: Type): Symbol[];\r\n        getRootSymbols(symbol: Symbol): Symbol[];\r\n        getContextualType(node: Expression): Type;\r\n        getResolvedSignature(node: CallLikeExpression, candidatesOutArray?: Signature[]): Signature;\r\n        getSignatureFromDeclaration(declaration: SignatureDeclaration): Signature;\r\n        isImplementationOfOverload(node: FunctionLikeDeclaration): boolean;\r\n        isUndefinedSymbol(symbol: Symbol): boolean;\r\n        isArgumentsSymbol(symbol: Symbol): boolean;\r\n\r\n        getConstantValue(node: EnumMember | PropertyAccessExpression | ElementAccessExpression): number;\r\n        isValidPropertyAccess(node: PropertyAccessExpression | QualifiedName, propertyName: string): boolean;\r\n        getAliasedSymbol(symbol: Symbol): Symbol;\r\n        getExportsOfModule(moduleSymbol: Symbol): Symbol[];\r\n\r\n        // Should not be called directly.  Should only be accessed through the Program instance.\r\n        /* @internal */ getDiagnostics(sourceFile?: SourceFile): Diagnostic[];\r\n        /* @internal */ getGlobalDiagnostics(): Diagnostic[];\r\n        /* @internal */ getEmitResolver(sourceFile?: SourceFile): EmitResolver;\r\n\r\n        /* @internal */ getNodeCount(): number;\r\n        /* @internal */ getIdentifierCount(): number;\r\n        /* @internal */ getSymbolCount(): number;\r\n        /* @internal */ getTypeCount(): number;\r\n    }\r\n\r\n    export interface SymbolDisplayBuilder {\r\n        buildTypeDisplay(type: Type, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildSymbolDisplay(symbol: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, meaning?: SymbolFlags, flags?: SymbolFormatFlags): void;\r\n        buildSignatureDisplay(signatures: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildParameterDisplay(parameter: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildTypeParameterDisplay(tp: TypeParameter, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildTypeParameterDisplayFromSymbol(symbol: Symbol, writer: SymbolWriter, enclosingDeclaraiton?: Node, flags?: TypeFormatFlags): void;\r\n        buildDisplayForParametersAndDelimiters(parameters: Symbol[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildDisplayForTypeParametersAndDelimiters(typeParameters: TypeParameter[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n        buildReturnTypeDisplay(signature: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags): void;\r\n    }\r\n\r\n    export interface SymbolWriter {\r\n        writeKeyword(text: string): void;\r\n        writeOperator(text: string): void;\r\n        writePunctuation(text: string): void;\r\n        writeSpace(text: string): void;\r\n        writeStringLiteral(text: string): void;\r\n        writeParameter(text: string): void;\r\n        writeSymbol(text: string, symbol: Symbol): void;\r\n        writeLine(): void;\r\n        increaseIndent(): void;\r\n        decreaseIndent(): void;\r\n        clear(): void;\r\n\r\n        // Called when the symbol writer encounters a symbol to write.  Currently only used by the\r\n        // declaration emitter to help determine if it should patch up the final declaration file\r\n        // with import statements it previously saw (but chose not to emit).\r\n        trackSymbol(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags): void;\r\n    }\r\n\r\n    export const enum TypeFormatFlags {\r\n        None                            = 0x00000000,\r\n        WriteArrayAsGenericType         = 0x00000001,  // Write Array<T> instead T[]\r\n        UseTypeOfFunction               = 0x00000002,  // Write typeof instead of function type literal\r\n        NoTruncation                    = 0x00000004,  // Don't truncate typeToString result\r\n        WriteArrowStyleSignature        = 0x00000008,  // Write arrow style signature\r\n        WriteOwnNameForAnyLike          = 0x00000010,  // Write symbol's own name instead of 'any' for any like types (eg. unknown, __resolving__ etc)\r\n        WriteTypeArgumentsOfSignature   = 0x00000020,  // Write the type arguments instead of type parameters of the signature\r\n        InElementType                   = 0x00000040,  // Writing an array or union element type\r\n        UseFullyQualifiedType           = 0x00000080,  // Write out the fully qualified type name (eg. Module.Type, instead of Type)\r\n    }\r\n\r\n    export const enum SymbolFormatFlags {\r\n        None = 0x00000000,\r\n\r\n        // Write symbols's type argument if it is instantiated symbol\r\n        // eg. class C<T> { p: T }   <-- Show p as C<T>.p here\r\n        //     var a: C<number>;\r\n        //     var p = a.p;  <--- Here p is property of C<number> so show it as C<number>.p instead of just C.p\r\n        WriteTypeParametersOrArguments = 0x00000001,\r\n\r\n        // Use only external alias information to get the symbol name in the given context\r\n        // eg.  module m { export class c { } } import x = m.c;\r\n        // When this flag is specified m.c will be used to refer to the class instead of alias symbol x\r\n        UseOnlyExternalAliasing = 0x00000002,\r\n    }\r\n\r\n    /* @internal */\r\n    export const enum SymbolAccessibility {\r\n        Accessible,\r\n        NotAccessible,\r\n        CannotBeNamed\r\n    }\r\n    \r\n    export interface TypePredicate {\r\n        parameterName: string;\r\n        parameterIndex: number;\r\n        type: Type;\r\n    }\r\n\r\n    /* @internal */\r\n    export type AnyImportSyntax = ImportDeclaration | ImportEqualsDeclaration;\r\n\r\n    /* @internal */\r\n    export interface SymbolVisibilityResult {\r\n        accessibility: SymbolAccessibility;\r\n        aliasesToMakeVisible?: AnyImportSyntax[]; // aliases that need to have this symbol visible\r\n        errorSymbolName?: string; // Optional symbol name that results in error\r\n        errorNode?: Node; // optional node that results in error\r\n    }\r\n\r\n    /* @internal */\r\n    export interface SymbolAccessiblityResult extends SymbolVisibilityResult {\r\n        errorModuleName?: string // If the symbol is not visible from module, module's name\r\n    }\r\n\r\n    /* @internal */\r\n    export interface EmitResolver {\r\n        hasGlobalName(name: string): boolean;\r\n        getReferencedExportContainer(node: Identifier): SourceFile | ModuleDeclaration | EnumDeclaration;\r\n        getReferencedImportDeclaration(node: Identifier): Declaration;\r\n        getReferencedNestedRedeclaration(node: Identifier): Declaration;\r\n        isNestedRedeclaration(node: Declaration): boolean;\r\n        isValueAliasDeclaration(node: Node): boolean;\r\n        isReferencedAliasDeclaration(node: Node, checkChildren?: boolean): boolean;\r\n        isTopLevelValueImportEqualsWithEntityName(node: ImportEqualsDeclaration): boolean;\r\n        getNodeCheckFlags(node: Node): NodeCheckFlags;\r\n        isDeclarationVisible(node: Declaration): boolean;\r\n        collectLinkedAliases(node: Identifier): Node[];\r\n        isImplementationOfOverload(node: FunctionLikeDeclaration): boolean;\r\n        writeTypeOfDeclaration(declaration: AccessorDeclaration | VariableLikeDeclaration, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter): void;\r\n        writeReturnTypeOfSignatureDeclaration(signatureDeclaration: SignatureDeclaration, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter): void;\r\n        writeTypeOfExpression(expr: Expression, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter): void;\r\n        isSymbolAccessible(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags): SymbolAccessiblityResult;\r\n        isEntityNameVisible(entityName: EntityName | Expression, enclosingDeclaration: Node): SymbolVisibilityResult;\r\n        // Returns the constant value this property access resolves to, or 'undefined' for a non-constant\r\n        getConstantValue(node: EnumMember | PropertyAccessExpression | ElementAccessExpression): number;\r\n        getBlockScopedVariableId(node: Identifier): number;\r\n        getReferencedValueDeclaration(reference: Identifier): Declaration;\r\n        serializeTypeOfNode(node: Node): string | string[];\r\n        serializeParameterTypesOfNode(node: Node): (string | string[])[];\r\n        serializeReturnTypeOfNode(node: Node): string | string[];\r\n    }\r\n\r\n    export const enum SymbolFlags {\r\n        None                    = 0,\r\n        FunctionScopedVariable  = 0x00000001,  // Variable (var) or parameter\r\n        BlockScopedVariable     = 0x00000002,  // A block-scoped variable (let or const)\r\n        Property                = 0x00000004,  // Property or enum member\r\n        EnumMember              = 0x00000008,  // Enum member\r\n        Function                = 0x00000010,  // Function\r\n        Class                   = 0x00000020,  // Class\r\n        Interface               = 0x00000040,  // Interface\r\n        ConstEnum               = 0x00000080,  // Const enum\r\n        RegularEnum             = 0x00000100,  // Enum\r\n        ValueModule             = 0x00000200,  // Instantiated module\r\n        NamespaceModule         = 0x00000400,  // Uninstantiated module\r\n        TypeLiteral             = 0x00000800,  // Type Literal\r\n        ObjectLiteral           = 0x00001000,  // Object Literal\r\n        Method                  = 0x00002000,  // Method\r\n        Constructor             = 0x00004000,  // Constructor\r\n        GetAccessor             = 0x00008000,  // Get accessor\r\n        SetAccessor             = 0x00010000,  // Set accessor\r\n        Signature               = 0x00020000,  // Call, construct, or index signature\r\n        TypeParameter           = 0x00040000,  // Type parameter\r\n        TypeAlias               = 0x00080000,  // Type alias\r\n        ExportValue             = 0x00100000,  // Exported value marker (see comment in declareModuleMember in binder)\r\n        ExportType              = 0x00200000,  // Exported type marker (see comment in declareModuleMember in binder)\r\n        ExportNamespace         = 0x00400000,  // Exported namespace marker (see comment in declareModuleMember in binder)\r\n        Alias                   = 0x00800000,  // An alias for another symbol (see comment in isAliasSymbolDeclaration in checker)\r\n        Instantiated            = 0x01000000,  // Instantiated symbol\r\n        Merged                  = 0x02000000,  // Merged symbol (created during program binding)\r\n        Transient               = 0x04000000,  // Transient symbol (created during type check)\r\n        Prototype               = 0x08000000,  // Prototype property (no source representation)\r\n        UnionProperty           = 0x10000000,  // Property in union type\r\n        Optional                = 0x20000000,  // Optional property\r\n        ExportStar              = 0x40000000,  // Export * declaration\r\n\r\n        Enum = RegularEnum | ConstEnum,\r\n        Variable = FunctionScopedVariable | BlockScopedVariable,\r\n        Value = Variable | Property | EnumMember | Function | Class | Enum | ValueModule | Method | GetAccessor | SetAccessor,\r\n        Type = Class | Interface | Enum | TypeLiteral | ObjectLiteral | TypeParameter | TypeAlias,\r\n        Namespace = ValueModule | NamespaceModule,\r\n        Module = ValueModule | NamespaceModule,\r\n        Accessor = GetAccessor | SetAccessor,\r\n\r\n        // Variables can be redeclared, but can not redeclare a block-scoped declaration with the\r\n        // same name, or any other value that is not a variable, e.g. ValueModule or Class\r\n        FunctionScopedVariableExcludes = Value & ~FunctionScopedVariable,\r\n\r\n        // Block-scoped declarations are not allowed to be re-declared\r\n        // they can not merge with anything in the value space\r\n        BlockScopedVariableExcludes = Value,\r\n\r\n        ParameterExcludes = Value,\r\n        PropertyExcludes = Value,\r\n        EnumMemberExcludes = Value,\r\n        FunctionExcludes = Value & ~(Function | ValueModule),\r\n        ClassExcludes = (Value | Type) & ~ValueModule,\r\n        InterfaceExcludes = Type & ~Interface,\r\n        RegularEnumExcludes = (Value | Type) & ~(RegularEnum | ValueModule), // regular enums merge only with regular enums and modules\r\n        ConstEnumExcludes = (Value | Type) & ~ConstEnum, // const enums merge only with const enums\r\n        ValueModuleExcludes = Value & ~(Function | Class | RegularEnum | ValueModule),\r\n        NamespaceModuleExcludes = 0,\r\n        MethodExcludes = Value & ~Method,\r\n        GetAccessorExcludes = Value & ~SetAccessor,\r\n        SetAccessorExcludes = Value & ~GetAccessor,\r\n        TypeParameterExcludes = Type & ~TypeParameter,\r\n        TypeAliasExcludes = Type,\r\n        AliasExcludes = Alias,\r\n\r\n        ModuleMember = Variable | Function | Class | Interface | Enum | Module | TypeAlias | Alias,\r\n\r\n        ExportHasLocal = Function | Class | Enum | ValueModule,\r\n\r\n        HasExports = Class | Enum | Module,\r\n        HasMembers = Class | Interface | TypeLiteral | ObjectLiteral,\r\n\r\n        BlockScoped = BlockScopedVariable | Class | Enum,\r\n\r\n        PropertyOrAccessor = Property | Accessor,\r\n        Export = ExportNamespace | ExportType | ExportValue,\r\n    }\r\n\r\n    export interface Symbol {\r\n        flags: SymbolFlags;                     // Symbol flags\r\n        name: string;                           // Name of symbol\r\n        declarations?: Declaration[];           // Declarations associated with this symbol\r\n        valueDeclaration?: Declaration;         // First value declaration of the symbol\r\n\r\n        members?: SymbolTable;                  // Class, interface or literal instance members\r\n        exports?: SymbolTable;                  // Module exports\r\n        /* @internal */ id?: number;            // Unique id (used to look up SymbolLinks)\r\n        /* @internal */ mergeId?: number;       // Merge id (used to look up merged symbol)\r\n        /* @internal */ parent?: Symbol;        // Parent symbol\r\n        /* @internal */ exportSymbol?: Symbol;  // Exported symbol associated with this symbol\r\n        /* @internal */ constEnumOnlyModule?: boolean; // True if module contains only const enums or other modules with only const enums\r\n    }\r\n\r\n    /* @internal */ \r\n    export interface SymbolLinks {\r\n        target?: Symbol;                    // Resolved (non-alias) target of an alias\r\n        type?: Type;                        // Type of value symbol\r\n        declaredType?: Type;                // Type of class, interface, enum, type alias, or type parameter\r\n        typeParameters?: TypeParameter[];   // Type parameters of type alias (undefined if non-generic)\r\n        instantiations?: Map<Type>;         // Instantiations of generic type alias (undefined if non-generic)\r\n        mapper?: TypeMapper;                // Type mapper for instantiation alias\r\n        referenced?: boolean;               // True if alias symbol has been referenced as a value\r\n        unionType?: UnionType;              // Containing union type for union property\r\n        resolvedExports?: SymbolTable;      // Resolved exports of module\r\n        exportsChecked?: boolean;           // True if exports of external module have been checked\r\n        isNestedRedeclaration?: boolean;    // True if symbol is block scoped redeclaration\r\n    }\r\n\r\n    /* @internal */ \r\n    export interface TransientSymbol extends Symbol, SymbolLinks { }\r\n\r\n    export interface SymbolTable {\r\n        [index: string]: Symbol;\r\n    }\r\n\r\n    /* @internal */ \r\n    export const enum NodeCheckFlags {\r\n        TypeChecked                 = 0x00000001,  // Node has been type checked\r\n        LexicalThis                 = 0x00000002,  // Lexical 'this' reference\r\n        CaptureThis                 = 0x00000004,  // Lexical 'this' used in body\r\n        EmitExtends                 = 0x00000008,  // Emit __extends\r\n        SuperInstance               = 0x00000010,  // Instance 'super' reference\r\n        SuperStatic                 = 0x00000020,  // Static 'super' reference\r\n        ContextChecked              = 0x00000040,  // Contextual types have been assigned\r\n\r\n        // Values for enum members have been computed, and any errors have been reported for them.\r\n        EnumValuesComputed          = 0x00000080,\r\n        BlockScopedBindingInLoop    = 0x00000100,\r\n        EmitDecorate                = 0x00000200,  // Emit __decorate\r\n        EmitParam                   = 0x00000400,  // Emit __param helper for decorators\r\n        LexicalModuleMergesWithClass = 0x00000800,  // Instantiated lexical module declaration is merged with a previous class declaration.\r\n    }\r\n\r\n    /* @internal */ \r\n    export interface NodeLinks {\r\n        resolvedType?: Type;              // Cached type of type node\r\n        resolvedSignature?: Signature;    // Cached signature of signature node or call expression\r\n        resolvedSymbol?: Symbol;          // Cached name resolution result\r\n        flags?: NodeCheckFlags;           // Set of flags specific to Node\r\n        enumMemberValue?: number;         // Constant value of enum member\r\n        isIllegalTypeReferenceInConstraint?: boolean; // Is type reference in constraint refers to the type parameter from the same list\r\n        isVisible?: boolean;              // Is this node visible\r\n        generatedName?: string;           // Generated name for module, enum, or import declaration\r\n        generatedNames?: Map<string>;     // Generated names table for source file\r\n        assignmentChecks?: Map<boolean>;  // Cache of assignment checks\r\n        hasReportedStatementInAmbientContext?: boolean;  // Cache boolean if we report statements in ambient context\r\n        importOnRightSide?: Symbol;       // for import declarations - import that appear on the right side\r\n    }\r\n\r\n    export const enum TypeFlags {\r\n        Any                     = 0x00000001,\r\n        String                  = 0x00000002,\r\n        Number                  = 0x00000004,\r\n        Boolean                 = 0x00000008,\r\n        Void                    = 0x00000010,\r\n        Undefined               = 0x00000020,\r\n        Null                    = 0x00000040,\r\n        Enum                    = 0x00000080,  // Enum type\r\n        StringLiteral           = 0x00000100,  // String literal type\r\n        TypeParameter           = 0x00000200,  // Type parameter\r\n        Class                   = 0x00000400,  // Class\r\n        Interface               = 0x00000800,  // Interface\r\n        Reference               = 0x00001000,  // Generic type reference\r\n        Tuple                   = 0x00002000,  // Tuple\r\n        Union                   = 0x00004000,  // Union\r\n        Anonymous               = 0x00008000,  // Anonymous\r\n        Instantiated            = 0x00010000,  // Instantiated anonymous type\r\n        /* @internal */\r\n        FromSignature           = 0x00020000,  // Created for signature assignment check\r\n        ObjectLiteral           = 0x00040000,  // Originates in an object literal\r\n        /* @internal */\r\n        ContainsUndefinedOrNull = 0x00080000,  // Type is or contains Undefined or Null type\r\n        /* @internal */\r\n        ContainsObjectLiteral   = 0x00100000,  // Type is or contains object literal type\r\n        ESSymbol                = 0x00200000,  // Type of symbol primitive introduced in ES6\r\n\r\n        /* @internal */ \r\n        Intrinsic = Any | String | Number | Boolean | ESSymbol | Void | Undefined | Null,\r\n        /* @internal */ \r\n        Primitive = String | Number | Boolean | ESSymbol | Void | Undefined | Null | StringLiteral | Enum,\r\n        StringLike = String | StringLiteral,\r\n        NumberLike = Number | Enum,\r\n        ObjectType = Class | Interface | Reference | Tuple | Anonymous,\r\n        /* @internal */ \r\n        RequiresWidening = ContainsUndefinedOrNull | ContainsObjectLiteral\r\n    }\r\n\r\n    // Properties common to all types\r\n    export interface Type {\r\n        flags: TypeFlags;               // Flags\r\n        /* @internal */ id: number;     // Unique ID\r\n        symbol?: Symbol;                // Symbol associated with type (if any)\r\n    }\r\n\r\n    /* @internal */ \r\n    // Intrinsic types (TypeFlags.Intrinsic)\r\n    export interface IntrinsicType extends Type {\r\n        intrinsicName: string;  // Name of intrinsic type\r\n    }\r\n\r\n    // String literal types (TypeFlags.StringLiteral)\r\n    export interface StringLiteralType extends Type {\r\n        text: string;  // Text of string literal\r\n    }\r\n\r\n    // Object types (TypeFlags.ObjectType)\r\n    export interface ObjectType extends Type { }\r\n\r\n    // Class and interface types (TypeFlags.Class and TypeFlags.Interface)\r\n    export interface InterfaceType extends ObjectType {\r\n        typeParameters: TypeParameter[];           // Type parameters (undefined if non-generic)\r\n        outerTypeParameters: TypeParameter[];      // Outer type parameters (undefined if none)\r\n        localTypeParameters: TypeParameter[];      // Local type parameters (undefined if none)\r\n    }\r\n\r\n    export interface InterfaceTypeWithBaseTypes extends InterfaceType {\r\n        baseTypes: ObjectType[];\r\n    }\r\n\r\n    export interface InterfaceTypeWithDeclaredMembers extends InterfaceType {\r\n        declaredProperties: Symbol[];              // Declared members\r\n        declaredCallSignatures: Signature[];       // Declared call signatures\r\n        declaredConstructSignatures: Signature[];  // Declared construct signatures\r\n        declaredStringIndexType: Type;             // Declared string index type\r\n        declaredNumberIndexType: Type;             // Declared numeric index type\r\n    }\r\n\r\n    // Type references (TypeFlags.Reference)\r\n    export interface TypeReference extends ObjectType {\r\n        target: GenericType;    // Type reference target\r\n        typeArguments: Type[];  // Type reference type arguments\r\n    }\r\n\r\n    // Generic class and interface types\r\n    export interface GenericType extends InterfaceType, TypeReference {\r\n        /* @internal */\r\n        instantiations: Map<TypeReference>;   // Generic instantiation cache\r\n    }\r\n\r\n    export interface TupleType extends ObjectType {\r\n        elementTypes: Type[];          // Element types\r\n        baseArrayType: TypeReference;  // Array<T> where T is best common type of element types\r\n    }\r\n\r\n    export interface UnionType extends Type {\r\n        types: Type[];                    // Constituent types\r\n        /* @internal */\r\n        reducedType: Type;                // Reduced union type (all subtypes removed)\r\n        /* @internal */\r\n        resolvedProperties: SymbolTable;  // Cache of resolved properties\r\n    }\r\n\r\n    /* @internal */\r\n    // Resolved object or union type\r\n    export interface ResolvedType extends ObjectType, UnionType {\r\n        members: SymbolTable;              // Properties by name\r\n        properties: Symbol[];              // Properties\r\n        callSignatures: Signature[];       // Call signatures of type\r\n        constructSignatures: Signature[];  // Construct signatures of type\r\n        stringIndexType?: Type;            // String index type\r\n        numberIndexType?: Type;            // Numeric index type\r\n    }\r\n\r\n    // Just a place to cache element types of iterables and iterators\r\n    /* @internal */\r\n    export interface IterableOrIteratorType extends ObjectType, UnionType {\r\n        iterableElementType?: Type;\r\n        iteratorElementType?: Type;\r\n    }\r\n\r\n    // Type parameters (TypeFlags.TypeParameter)\r\n    export interface TypeParameter extends Type {\r\n        constraint: Type;        // Constraint\r\n        /* @internal */\r\n        target?: TypeParameter;  // Instantiation target\r\n        /* @internal */\r\n        mapper?: TypeMapper;     // Instantiation mapper\r\n    }\r\n\r\n    export const enum SignatureKind {\r\n        Call,\r\n        Construct,\r\n    }\r\n\r\n    export interface Signature {\r\n        declaration: SignatureDeclaration;  // Originating declaration\r\n        typeParameters: TypeParameter[];    // Type parameters (undefined if non-generic)\r\n        parameters: Symbol[];               // Parameters\r\n        typePredicate?: TypePredicate;      // Type predicate\r\n        /* @internal */\r\n        resolvedReturnType: Type;           // Resolved return type\r\n        /* @internal */\r\n        minArgumentCount: number;           // Number of non-optional parameters\r\n        /* @internal */\r\n        hasRestParameter: boolean;          // True if last parameter is rest parameter\r\n        /* @internal */\r\n        hasStringLiterals: boolean;         // True if specialized\r\n        /* @internal */\r\n        target?: Signature;                 // Instantiation target\r\n        /* @internal */\r\n        mapper?: TypeMapper;                // Instantiation mapper\r\n        /* @internal */\r\n        unionSignatures?: Signature[];      // Underlying signatures of a union signature\r\n        /* @internal */\r\n        erasedSignatureCache?: Signature;   // Erased version of signature (deferred)\r\n        /* @internal */\r\n        isolatedSignatureType?: ObjectType; // A manufactured type that just contains the signature for purposes of signature comparison\r\n    }\r\n\r\n    export const enum IndexKind {\r\n        String,\r\n        Number,\r\n    }\r\n\r\n    /* @internal */\r\n    export interface TypeMapper {\r\n        (t: TypeParameter): Type;\r\n    }\r\n\r\n    /* @internal */\r\n    export interface TypeInferences {\r\n        primary: Type[];    // Inferences made directly to a type parameter\r\n        secondary: Type[];  // Inferences made to a type parameter in a union type\r\n        isFixed: boolean;   // Whether the type parameter is fixed, as defined in section 4.12.2 of the TypeScript spec\r\n                            // If a type parameter is fixed, no more inferences can be made for the type parameter\r\n    }\r\n\r\n    /* @internal */\r\n    export interface InferenceContext {\r\n        typeParameters: TypeParameter[];    // Type parameters for which inferences are made\r\n        inferUnionTypes: boolean;           // Infer union types for disjoint candidates (otherwise undefinedType)\r\n        inferences: TypeInferences[];       // Inferences made for each type parameter\r\n        inferredTypes: Type[];              // Inferred type for each type parameter\r\n        failedTypeParameterIndex?: number;  // Index of type parameter for which inference failed\r\n        // It is optional because in contextual signature instantiation, nothing fails\r\n    }\r\n\r\n    export interface DiagnosticMessage {\r\n        key: string;\r\n        category: DiagnosticCategory;\r\n        code: number;\r\n    }\r\n\r\n    /**\r\n     * A linked list of formatted diagnostic messages to be used as part of a multiline message.\r\n     * It is built from the bottom up, leaving the head to be the \"main\" diagnostic.\r\n     * While it seems that DiagnosticMessageChain is structurally similar to DiagnosticMessage,\r\n     * the difference is that messages are all preformatted in DMC.\r\n     */\r\n    export interface DiagnosticMessageChain {\r\n        messageText: string;\r\n        category: DiagnosticCategory;\r\n        code: number;\r\n        next?: DiagnosticMessageChain;\r\n    }\r\n\r\n    export interface Diagnostic {\r\n        file: SourceFile;\r\n        start: number;\r\n        length: number;\r\n        messageText: string | DiagnosticMessageChain;\r\n        category: DiagnosticCategory;\r\n        code: number;\r\n    }\r\n\r\n    export enum DiagnosticCategory {\r\n        Warning,\r\n        Error,\r\n        Message,\r\n    }\r\n\r\n    export interface CompilerOptions {\r\n        allowNonTsExtensions?: boolean;\r\n        charset?: string;\r\n        declaration?: boolean;\r\n        diagnostics?: boolean;\r\n        emitBOM?: boolean;\r\n        help?: boolean;\r\n        inlineSourceMap?: boolean;\r\n        inlineSources?: boolean;\r\n        listFiles?: boolean;\r\n        locale?: string;\r\n        mapRoot?: string;\r\n        module?: ModuleKind;\r\n        newLine?: NewLineKind;\r\n        noEmit?: boolean;\r\n        noEmitHelpers?: boolean;\r\n        noEmitOnError?: boolean;\r\n        noErrorTruncation?: boolean;\r\n        noImplicitAny?: boolean;\r\n        noLib?: boolean;\r\n        noResolve?: boolean;\r\n        out?: string;\r\n        outDir?: string;\r\n        preserveConstEnums?: boolean;\r\n        project?: string;\r\n        removeComments?: boolean;\r\n        rootDir?: string;\r\n        sourceMap?: boolean;\r\n        sourceRoot?: string;\r\n        suppressImplicitAnyIndexErrors?: boolean;\r\n        target?: ScriptTarget;\r\n        version?: boolean;\r\n        watch?: boolean;\r\n        isolatedModules?: boolean;\r\n        experimentalDecorators?: boolean;\r\n        emitDecoratorMetadata?: boolean;\r\n        /* @internal */ stripInternal?: boolean;\r\n        /* @internal */ skipDefaultLibCheck?: boolean;\r\n        [option: string]: string | number | boolean;\r\n    }\r\n\r\n    export const enum ModuleKind {\r\n        None = 0,\r\n        CommonJS = 1,\r\n        AMD = 2,\r\n        UMD = 3,\r\n        System = 4,\r\n    }\r\n\r\n    export const enum NewLineKind {\r\n        CarriageReturnLineFeed = 0,\r\n        LineFeed = 1,\r\n    }\r\n\t\r\n    export interface LineAndCharacter {\r\n        line: number;\r\n        /*\r\n         * This value denotes the character position in line and is different from the 'column' because of tab characters.\r\n         */\r\n        character: number;\r\n    }\r\n\r\n    export const enum ScriptTarget {\r\n        ES3 = 0,\r\n        ES5 = 1,\r\n        ES6 = 2,\r\n        Latest = ES6,\r\n    }\r\n\r\n    export interface ParsedCommandLine {\r\n        options: CompilerOptions;\r\n        fileNames: string[];\r\n        errors: Diagnostic[];\r\n    }\r\n\r\n    /* @internal */\r\n    export interface CommandLineOption {\r\n        name: string;\r\n        type: string | Map<number>;         // \"string\", \"number\", \"boolean\", or an object literal mapping named values to actual values\r\n        isFilePath?: boolean;               // True if option value is a path or fileName\r\n        shortName?: string;                 // A short mnemonic for convenience - for instance, 'h' can be used in place of 'help'\r\n        description?: DiagnosticMessage;    // The message describing what the command line switch does\r\n        paramType?: DiagnosticMessage;      // The name to be used for a non-boolean option's parameter\r\n        error?: DiagnosticMessage;          // The error given when the argument does not fit a customized 'type'\r\n        experimental?: boolean;\r\n    }\r\n\r\n    /* @internal */\r\n    export const enum CharacterCodes {\r\n        nullCharacter = 0,\r\n        maxAsciiCharacter = 0x7F,\r\n\r\n        lineFeed = 0x0A,              // \\n\r\n        carriageReturn = 0x0D,        // \\r\r\n        lineSeparator = 0x2028,\r\n        paragraphSeparator = 0x2029,\r\n        nextLine = 0x0085,\r\n\r\n        // Unicode 3.0 space characters\r\n        space = 0x0020,   // \" \"\r\n        nonBreakingSpace = 0x00A0,   //\r\n        enQuad = 0x2000,\r\n        emQuad = 0x2001,\r\n        enSpace = 0x2002,\r\n        emSpace = 0x2003,\r\n        threePerEmSpace = 0x2004,\r\n        fourPerEmSpace = 0x2005,\r\n        sixPerEmSpace = 0x2006,\r\n        figureSpace = 0x2007,\r\n        punctuationSpace = 0x2008,\r\n        thinSpace = 0x2009,\r\n        hairSpace = 0x200A,\r\n        zeroWidthSpace = 0x200B,\r\n        narrowNoBreakSpace = 0x202F,\r\n        ideographicSpace = 0x3000,\r\n        mathematicalSpace = 0x205F,\r\n        ogham = 0x1680,\r\n\r\n        _ = 0x5F,\r\n        $ = 0x24,\r\n\r\n        _0 = 0x30,\r\n        _1 = 0x31,\r\n        _2 = 0x32,\r\n        _3 = 0x33,\r\n        _4 = 0x34,\r\n        _5 = 0x35,\r\n        _6 = 0x36,\r\n        _7 = 0x37,\r\n        _8 = 0x38,\r\n        _9 = 0x39,\r\n\r\n        a = 0x61,\r\n        b = 0x62,\r\n        c = 0x63,\r\n        d = 0x64,\r\n        e = 0x65,\r\n        f = 0x66,\r\n        g = 0x67,\r\n        h = 0x68,\r\n        i = 0x69,\r\n        j = 0x6A,\r\n        k = 0x6B,\r\n        l = 0x6C,\r\n        m = 0x6D,\r\n        n = 0x6E,\r\n        o = 0x6F,\r\n        p = 0x70,\r\n        q = 0x71,\r\n        r = 0x72,\r\n        s = 0x73,\r\n        t = 0x74,\r\n        u = 0x75,\r\n        v = 0x76,\r\n        w = 0x77,\r\n        x = 0x78,\r\n        y = 0x79,\r\n        z = 0x7A,\r\n\r\n        A = 0x41,\r\n        B = 0x42,\r\n        C = 0x43,\r\n        D = 0x44,\r\n        E = 0x45,\r\n        F = 0x46,\r\n        G = 0x47,\r\n        H = 0x48,\r\n        I = 0x49,\r\n        J = 0x4A,\r\n        K = 0x4B,\r\n        L = 0x4C,\r\n        M = 0x4D,\r\n        N = 0x4E,\r\n        O = 0x4F,\r\n        P = 0x50,\r\n        Q = 0x51,\r\n        R = 0x52,\r\n        S = 0x53,\r\n        T = 0x54,\r\n        U = 0x55,\r\n        V = 0x56,\r\n        W = 0x57,\r\n        X = 0x58,\r\n        Y = 0x59,\r\n        Z = 0x5a,\r\n\r\n        ampersand = 0x26,             // &\r\n        asterisk = 0x2A,              // *\r\n        at = 0x40,                    // @\r\n        backslash = 0x5C,             // \\\r\n        backtick = 0x60,              // `\r\n        bar = 0x7C,                   // |\r\n        caret = 0x5E,                 // ^\r\n        closeBrace = 0x7D,            // }\r\n        closeBracket = 0x5D,          // ]\r\n        closeParen = 0x29,            // )\r\n        colon = 0x3A,                 // :\r\n        comma = 0x2C,                 // ,\r\n        dot = 0x2E,                   // .\r\n        doubleQuote = 0x22,           // \"\r\n        equals = 0x3D,                // =\r\n        exclamation = 0x21,           // !\r\n        greaterThan = 0x3E,           // >\r\n        hash = 0x23,                  // #\r\n        lessThan = 0x3C,              // <\r\n        minus = 0x2D,                 // -\r\n        openBrace = 0x7B,             // {\r\n        openBracket = 0x5B,           // [\r\n        openParen = 0x28,             // (\r\n        percent = 0x25,               // %\r\n        plus = 0x2B,                  // +\r\n        question = 0x3F,              // ?\r\n        semicolon = 0x3B,             // ;\r\n        singleQuote = 0x27,           // '\r\n        slash = 0x2F,                 // /\r\n        tilde = 0x7E,                 // ~\r\n\r\n        backspace = 0x08,             // \\b\r\n        formFeed = 0x0C,              // \\f\r\n        byteOrderMark = 0xFEFF,\r\n        tab = 0x09,                   // \\t\r\n        verticalTab = 0x0B,           // \\v\r\n    }\r\n\r\n    export interface CancellationToken {\r\n        isCancellationRequested(): boolean;\r\n    }\r\n\r\n    export interface CompilerHost {\r\n        getSourceFile(fileName: string, languageVersion: ScriptTarget, onError?: (message: string) => void): SourceFile;\r\n        getDefaultLibFileName(options: CompilerOptions): string;\r\n        getCancellationToken? (): CancellationToken;\r\n        writeFile: WriteFileCallback;\r\n        getCurrentDirectory(): string;\r\n        getCanonicalFileName(fileName: string): string;\r\n        useCaseSensitiveFileNames(): boolean;\r\n        getNewLine(): string;\r\n    }\r\n\r\n    export interface TextSpan {\r\n        start: number;\r\n        length: number;\r\n    }\r\n\r\n    export interface TextChangeRange {\r\n        span: TextSpan;\r\n        newLength: number;\r\n    }\r\n\r\n    /* @internal */\r\n    export interface DiagnosticCollection {\r\n        // Adds a diagnostic to this diagnostic collection.\r\n        add(diagnostic: Diagnostic): void;\r\n\r\n        // Gets all the diagnostics that aren't associated with a file.\r\n        getGlobalDiagnostics(): Diagnostic[];\r\n\r\n        // If fileName is provided, gets all the diagnostics associated with that file name.\r\n        // Otherwise, returns all the diagnostics (global and file associated) in this colletion.\r\n        getDiagnostics(fileName?: string): Diagnostic[];\r\n\r\n        // Gets a count of how many times this collection has been modified.  This value changes\r\n        // each time 'add' is called (regardless of whether or not an equivalent diagnostic was\r\n        // already in the collection).  As such, it can be used as a simple way to tell if any\r\n        // operation caused diagnostics to be returned by storing and comparing the return value\r\n        // of this method before/after the operation is performed.\r\n        getModificationCount(): number;\r\n    }\r\n}\r\n"},{"name":"core.ts","text":"/// <reference path=\"types.ts\"/>\r\n\r\n/* @internal */\r\nmodule ts {\r\n    // Ternary values are defined such that\r\n    // x & y is False if either x or y is False.\r\n    // x & y is Maybe if either x or y is Maybe, but neither x or y is False.\r\n    // x & y is True if both x and y are True.\r\n    // x | y is False if both x and y are False.\r\n    // x | y is Maybe if either x or y is Maybe, but neither x or y is True.\r\n    // x | y is True if either x or y is True.\r\n    export const enum Ternary {\r\n        False = 0,\r\n        Maybe = 1,\r\n        True  = -1\r\n    }\r\n\r\n    export function createFileMap<T>(getCanonicalFileName: (fileName: string) => string): FileMap<T> {\r\n        let files: Map<T> = {};\r\n        return {\r\n            get,\r\n            set,\r\n            contains,\r\n            remove,\r\n            forEachValue: forEachValueInMap\r\n        }\r\n\r\n        function set(fileName: string, value: T) {\r\n            files[normalizeKey(fileName)] = value;\r\n        }\r\n\r\n        function get(fileName: string) {\r\n            return files[normalizeKey(fileName)];\r\n        }\r\n\r\n        function contains(fileName: string) {\r\n            return hasProperty(files, normalizeKey(fileName));\r\n        }\r\n\r\n        function remove (fileName: string) {\r\n            let key = normalizeKey(fileName);\r\n            delete files[key];\r\n        }\r\n\r\n        function forEachValueInMap(f: (value: T) => void) {\r\n            forEachValue(files, f);\r\n        }\r\n\r\n        function normalizeKey(key: string) {\r\n            return getCanonicalFileName(normalizeSlashes(key));\r\n        }\r\n    }\r\n\r\n    export const enum Comparison {\r\n        LessThan    = -1,\r\n        EqualTo     = 0,\r\n        GreaterThan = 1\r\n    }\r\n\r\n    export interface StringSet extends Map<any> { }\r\n\r\n    export function forEach<T, U>(array: T[], callback: (element: T, index: number) => U): U {\r\n        if (array) {\r\n            for (let i = 0, len = array.length; i < len; i++) {\r\n                let result = callback(array[i], i);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    export function contains<T>(array: T[], value: T): boolean {\r\n        if (array) {\r\n            for (let v of array) {\r\n                if (v === value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function indexOf<T>(array: T[], value: T): number {\r\n        if (array) {\r\n            for (let i = 0, len = array.length; i < len; i++) {\r\n                if (array[i] === value) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    export function countWhere<T>(array: T[], predicate: (x: T) => boolean): number {\r\n        let count = 0;\r\n        if (array) {\r\n            for (let v of array) {\r\n                if (predicate(v)) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    export function filter<T>(array: T[], f: (x: T) => boolean): T[]{\r\n        let result: T[];\r\n        if (array) {\r\n            result = [];\r\n            for (let item of array) {\r\n                if (f(item)) {\r\n                    result.push(item);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function map<T, U>(array: T[], f: (x: T) => U): U[]{\r\n        let result: U[];\r\n        if (array) {\r\n            result = [];\r\n            for (let v of array) {\r\n                result.push(f(v));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function concatenate<T>(array1: T[], array2: T[]): T[] {\r\n        if (!array2 || !array2.length) return array1;\r\n        if (!array1 || !array1.length) return array2;\r\n\r\n        return array1.concat(array2);\r\n    }\r\n\r\n    export function deduplicate<T>(array: T[]): T[]{\r\n        let result: T[];\r\n        if (array) {\r\n            result = [];\r\n            for (let item of array) {\r\n                if (!contains(result, item)) {\r\n                    result.push(item);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function sum(array: any[], prop: string): number {\r\n        let result = 0;\r\n        for (let v of array) {\r\n            result += v[prop];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function addRange<T>(to: T[], from: T[]): void {\r\n        if (to && from) {\r\n            for (let v of from) {\r\n                to.push(v);\r\n            }\r\n        }\r\n    } \r\n\r\n    export function rangeEquals<T>(array1: T[], array2: T[], pos: number, end: number) {\r\n        while (pos < end) {\r\n            if (array1[pos] !== array2[pos]) {\r\n                return false;\r\n            }\r\n            pos++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the last element of an array if non-empty, undefined otherwise.\r\n     */\r\n    export function lastOrUndefined<T>(array: T[]): T {\r\n        if (array.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return array[array.length - 1];\r\n    }\r\n\r\n    export function binarySearch(array: number[], value: number): number {\r\n        let low = 0;\r\n        let high = array.length - 1;\r\n\r\n        while (low <= high) {\r\n            let middle = low + ((high - low) >> 1);\r\n            let midValue = array[middle];\r\n\r\n            if (midValue === value) {\r\n                return middle;\r\n            }\r\n            else if (midValue > value) {\r\n                high = middle - 1;\r\n            }\r\n            else {\r\n                low = middle + 1;\r\n            }\r\n        }\r\n\r\n        return ~low;\r\n    }\r\n\r\n    export function reduceLeft<T>(array: T[], f: (a: T, x: T) => T): T;\r\n    export function reduceLeft<T, U>(array: T[], f: (a: U, x: T) => U, initial: U): U;\r\n    export function reduceLeft<T, U>(array: T[], f: (a: U, x: T) => U, initial?: U): U {\r\n        if (array) {\r\n            var count = array.length;\r\n            if (count > 0) {\r\n                var pos = 0;\r\n                var result = arguments.length <= 2 ? array[pos++] : initial;\r\n                while (pos < count) {\r\n                    result = f(<U>result, array[pos++]);\r\n                }\r\n                return <U>result;\r\n            }\r\n        }\r\n        return initial;\r\n    }\r\n\r\n    export function reduceRight<T>(array: T[], f: (a: T, x: T) => T): T;\r\n    export function reduceRight<T, U>(array: T[], f: (a: U, x: T) => U, initial: U): U;\r\n    export function reduceRight<T, U>(array: T[], f: (a: U, x: T) => U, initial?: U): U {\r\n        if (array) {\r\n            var pos = array.length - 1;\r\n            if (pos >= 0) {\r\n                var result = arguments.length <= 2 ? array[pos--] : initial;\r\n                while (pos >= 0) {\r\n                    result = f(<U>result, array[pos--]);\r\n                }\r\n                return <U>result;\r\n            }\r\n        }\r\n        return initial;\r\n    }\r\n\r\n    let hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n    export function hasProperty<T>(map: Map<T>, key: string): boolean {\r\n        return hasOwnProperty.call(map, key);\r\n    }\r\n\r\n    export function getProperty<T>(map: Map<T>, key: string): T {\r\n        return hasOwnProperty.call(map, key) ? map[key] : undefined;\r\n    }\r\n\r\n    export function isEmpty<T>(map: Map<T>) {\r\n        for (let id in map) {\r\n            if (hasProperty(map, id)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    export function clone<T>(object: T): T {\r\n        let result: any = {};\r\n        for (let id in object) {\r\n            result[id] = (<any>object)[id];\r\n        }\r\n        return <T>result;\r\n    }\r\n\r\n    export function extend<T>(first: Map<T>, second: Map<T>): Map<T> {\r\n        let result: Map<T> = {};\r\n        for (let id in first) {\r\n            result[id] = first[id];\r\n        }\r\n        for (let id in second) {\r\n            if (!hasProperty(result, id)) {\r\n                result[id] = second[id];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function forEachValue<T, U>(map: Map<T>, callback: (value: T) => U): U {\r\n        let result: U;\r\n        for (let id in map) {\r\n            if (result = callback(map[id])) break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function forEachKey<T, U>(map: Map<T>, callback: (key: string) => U): U {\r\n        let result: U;\r\n        for (let id in map) {\r\n            if (result = callback(id)) break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function lookUp<T>(map: Map<T>, key: string): T {\r\n        return hasProperty(map, key) ? map[key] : undefined;\r\n    }\r\n\r\n    export function copyMap<T>(source: Map<T>, target: Map<T>): void {\r\n        for (let p in source) {\r\n            target[p] = source[p];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a map from the elements of an array.\r\n     *\r\n     * @param array the array of input elements.\r\n     * @param makeKey a function that produces a key for a given element.\r\n     *\r\n     * This function makes no effort to avoid collisions; if any two elements produce\r\n     * the same key with the given 'makeKey' function, then the element with the higher\r\n     * index in the array will be the one associated with the produced key.\r\n     */\r\n    export function arrayToMap<T>(array: T[], makeKey: (value: T) => string): Map<T> {\r\n        let result: Map<T> = {};\r\n\r\n        forEach(array, value => {\r\n            result[makeKey(value)] = value;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    export function memoize<T>(callback: () => T): () => T {\r\n        let value: T;\r\n        return () => {\r\n            if (callback) {\r\n                value = callback();\r\n                callback = undefined;\r\n            }\r\n            return value;\r\n        };\r\n    }\r\n\r\n    function formatStringFromArgs(text: string, args: { [index: number]: any; }, baseIndex?: number): string {\r\n        baseIndex = baseIndex || 0;\r\n\r\n        return text.replace(/{(\\d+)}/g, (match, index?) => args[+index + baseIndex]);\r\n    }\r\n\r\n    export let localizedDiagnosticMessages: Map<string> = undefined;\r\n\r\n    export function getLocaleSpecificMessage(message: string) {\r\n        return localizedDiagnosticMessages && localizedDiagnosticMessages[message]\r\n            ? localizedDiagnosticMessages[message]\r\n            : message;\r\n    }\r\n\r\n    export function createFileDiagnostic(file: SourceFile, start: number, length: number, message: DiagnosticMessage, ...args: any[]): Diagnostic;\r\n    export function createFileDiagnostic(file: SourceFile, start: number, length: number, message: DiagnosticMessage): Diagnostic {\r\n        let end = start + length;\r\n\r\n        Debug.assert(start >= 0, \"start must be non-negative, is \" + start);\r\n        Debug.assert(length >= 0, \"length must be non-negative, is \" + length);\r\n\r\n        if (file) {\r\n            Debug.assert(start <= file.text.length, `start must be within the bounds of the file. ${ start } > ${ file.text.length }`);\r\n            Debug.assert(end <= file.text.length, `end must be the bounds of the file. ${ end } > ${ file.text.length }`);\r\n        }\r\n\r\n        let text = getLocaleSpecificMessage(message.key);\r\n        \r\n        if (arguments.length > 4) {\r\n            text = formatStringFromArgs(text, arguments, 4);\r\n        }\r\n\r\n        return {\r\n            file,\r\n            start,\r\n            length,\r\n\r\n            messageText: text,\r\n            category: message.category,\r\n            code: message.code,\r\n        };\r\n    }\r\n\r\n    export function createCompilerDiagnostic(message: DiagnosticMessage, ...args: any[]): Diagnostic;\r\n    export function createCompilerDiagnostic(message: DiagnosticMessage): Diagnostic {\r\n        let text = getLocaleSpecificMessage(message.key);\r\n\r\n        if (arguments.length > 1) {\r\n            text = formatStringFromArgs(text, arguments, 1);\r\n        }\r\n\r\n        return {\r\n            file: undefined,\r\n            start: undefined,\r\n            length: undefined,\r\n\r\n            messageText: text,\r\n            category: message.category,\r\n            code: message.code\r\n        };\r\n    }\r\n\r\n    export function chainDiagnosticMessages(details: DiagnosticMessageChain, message: DiagnosticMessage, ...args: any[]): DiagnosticMessageChain;\r\n    export function chainDiagnosticMessages(details: DiagnosticMessageChain, message: DiagnosticMessage): DiagnosticMessageChain {\r\n        let text = getLocaleSpecificMessage(message.key);\r\n\r\n        if (arguments.length > 2) {\r\n            text = formatStringFromArgs(text, arguments, 2);\r\n        }\r\n\r\n        return {\r\n            messageText: text,\r\n            category: message.category,\r\n            code: message.code,\r\n\r\n            next: details\r\n        };\r\n    }\r\n\r\n    export function concatenateDiagnosticMessageChains(headChain: DiagnosticMessageChain, tailChain: DiagnosticMessageChain): DiagnosticMessageChain {\r\n        Debug.assert(!headChain.next);\r\n        headChain.next = tailChain;\r\n        return headChain;\r\n    }\r\n\r\n    export function compareValues<T>(a: T, b: T): Comparison {\r\n        if (a === b) return Comparison.EqualTo;\r\n        if (a === undefined) return Comparison.LessThan;\r\n        if (b === undefined) return Comparison.GreaterThan;\r\n        return a < b ? Comparison.LessThan : Comparison.GreaterThan;\r\n    }\r\n\r\n    function getDiagnosticFileName(diagnostic: Diagnostic): string {\r\n        return diagnostic.file ? diagnostic.file.fileName : undefined;\r\n    }\r\n\r\n    export function compareDiagnostics(d1: Diagnostic, d2: Diagnostic): Comparison {\r\n        return compareValues(getDiagnosticFileName(d1), getDiagnosticFileName(d2)) ||\r\n            compareValues(d1.start, d2.start) ||\r\n            compareValues(d1.length, d2.length) ||\r\n            compareValues(d1.code, d2.code) ||\r\n            compareMessageText(d1.messageText, d2.messageText) ||\r\n            Comparison.EqualTo;\r\n    }\r\n\r\n    function compareMessageText(text1: string | DiagnosticMessageChain, text2: string | DiagnosticMessageChain): Comparison {\r\n        while (text1 && text2) {\r\n            // We still have both chains.\r\n            let string1 = typeof text1 === \"string\" ? text1 : text1.messageText;\r\n            let string2 = typeof text2 === \"string\" ? text2 : text2.messageText;\r\n\r\n            let res = compareValues(string1, string2);\r\n            if (res) {\r\n                return res;\r\n            }\r\n\r\n            text1 = typeof text1 === \"string\" ? undefined : text1.next;\r\n            text2 = typeof text2 === \"string\" ? undefined : text2.next;\r\n        }\r\n\r\n        if (!text1 && !text2) {\r\n            // if the chains are done, then these messages are the same.\r\n            return Comparison.EqualTo;\r\n        }\r\n\r\n        // We still have one chain remaining.  The shorter chain should come first.\r\n        return text1 ? Comparison.GreaterThan : Comparison.LessThan;\r\n    }\r\n\r\n    export function sortAndDeduplicateDiagnostics(diagnostics: Diagnostic[]): Diagnostic[]{\r\n        return deduplicateSortedDiagnostics(diagnostics.sort(compareDiagnostics));\r\n    }\r\n\r\n    export function deduplicateSortedDiagnostics(diagnostics: Diagnostic[]): Diagnostic[] {\r\n        if (diagnostics.length < 2) {\r\n            return diagnostics;\r\n        }\r\n\r\n        let newDiagnostics = [diagnostics[0]];\r\n        let previousDiagnostic = diagnostics[0];\r\n        for (let i = 1; i < diagnostics.length; i++) {\r\n            let currentDiagnostic = diagnostics[i];\r\n            let isDupe = compareDiagnostics(currentDiagnostic, previousDiagnostic) === Comparison.EqualTo;\r\n            if (!isDupe) {\r\n                newDiagnostics.push(currentDiagnostic);\r\n                previousDiagnostic = currentDiagnostic;\r\n            }\r\n        }\r\n\r\n        return newDiagnostics;\r\n    }\r\n\r\n    export function normalizeSlashes(path: string): string {\r\n        return path.replace(/\\\\/g, \"/\");\r\n    }\r\n\r\n    // Returns length of path root (i.e. length of \"/\", \"x:/\", \"//server/share/, file:///user/files\")\r\n    export function getRootLength(path: string): number {\r\n        if (path.charCodeAt(0) === CharacterCodes.slash) {\r\n            if (path.charCodeAt(1) !== CharacterCodes.slash) return 1;\r\n            let p1 = path.indexOf(\"/\", 2);\r\n            if (p1 < 0) return 2;\r\n            let p2 = path.indexOf(\"/\", p1 + 1);\r\n            if (p2 < 0) return p1 + 1;\r\n            return p2 + 1;\r\n        }\r\n        if (path.charCodeAt(1) === CharacterCodes.colon) {\r\n            if (path.charCodeAt(2) === CharacterCodes.slash) return 3;\r\n            return 2;\r\n        }\r\n        // Per RFC 1738 'file' URI schema has the shape file://<host>/<path>\r\n        // if <host> is omitted then it is assumed that host value is 'localhost',\r\n        // however slash after the omitted <host> is not removed.\r\n        // file:///folder1/file1 - this is a correct URI\r\n        // file://folder2/file2 - this is an incorrect URI\r\n        if (path.lastIndexOf(\"file:///\", 0) === 0) {\r\n            return \"file:///\".length;\r\n        }\r\n        let idx = path.indexOf('://');\r\n        if (idx !== -1) {\r\n            return idx + \"://\".length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    export let directorySeparator = \"/\";\r\n    function getNormalizedParts(normalizedSlashedPath: string, rootLength: number) {\r\n        let parts = normalizedSlashedPath.substr(rootLength).split(directorySeparator);\r\n        let normalized: string[] = [];\r\n        for (let part of parts) {\r\n            if (part !== \".\") {\r\n                if (part === \"..\" && normalized.length > 0 && lastOrUndefined(normalized) !== \"..\") {\r\n                    normalized.pop();\r\n                }\r\n                else {\r\n                    // A part may be an empty string (which is 'falsy') if the path had consecutive slashes,\r\n                    // e.g. \"path//file.ts\".  Drop these before re-joining the parts.\r\n                    if(part) {\r\n                        normalized.push(part);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return normalized;\r\n    }\r\n\r\n    export function normalizePath(path: string): string {\r\n        path = normalizeSlashes(path);\r\n        let rootLength = getRootLength(path);\r\n        let normalized = getNormalizedParts(path, rootLength);\r\n        return path.substr(0, rootLength) + normalized.join(directorySeparator);\r\n    }\r\n\r\n    export function getDirectoryPath(path: string) {\r\n        return path.substr(0, Math.max(getRootLength(path), path.lastIndexOf(directorySeparator)));\r\n    }\r\n\r\n    export function isUrl(path: string) {\r\n        return path && !isRootedDiskPath(path) && path.indexOf(\"://\") !== -1;\r\n    }\r\n\r\n    export function isRootedDiskPath(path: string) {\r\n        return getRootLength(path) !== 0;\r\n    }\r\n\r\n    function normalizedPathComponents(path: string, rootLength: number) {\r\n        let normalizedParts = getNormalizedParts(path, rootLength);\r\n        return [path.substr(0, rootLength)].concat(normalizedParts);\r\n    }\r\n\r\n    export function getNormalizedPathComponents(path: string, currentDirectory: string) {\r\n        path = normalizeSlashes(path);\r\n        let rootLength = getRootLength(path);\r\n        if (rootLength == 0) {\r\n            // If the path is not rooted it is relative to current directory\r\n            path = combinePaths(normalizeSlashes(currentDirectory), path);\r\n            rootLength = getRootLength(path);\r\n        }\r\n\r\n        return normalizedPathComponents(path, rootLength);\r\n    }\r\n\r\n    export function getNormalizedAbsolutePath(fileName: string, currentDirectory: string) {\r\n        return getNormalizedPathFromPathComponents(getNormalizedPathComponents(fileName, currentDirectory));\r\n    }\r\n\r\n    export function getNormalizedPathFromPathComponents(pathComponents: string[]) {\r\n        if (pathComponents && pathComponents.length) {\r\n            return pathComponents[0] + pathComponents.slice(1).join(directorySeparator);\r\n        }\r\n    }\r\n\r\n    function getNormalizedPathComponentsOfUrl(url: string) {\r\n        // Get root length of http://www.website.com/folder1/foler2/\r\n        // In this example the root is:  http://www.website.com/ \r\n        // normalized path components should be [\"http://www.website.com/\", \"folder1\", \"folder2\"]\r\n\r\n        let urlLength = url.length;\r\n        // Initial root length is http:// part\r\n        let rootLength = url.indexOf(\"://\") + \"://\".length;\r\n        while (rootLength < urlLength) {\r\n            // Consume all immediate slashes in the protocol \r\n            // eg.initial rootlength is just file:// but it needs to consume another \"/\" in file:///\r\n            if (url.charCodeAt(rootLength) === CharacterCodes.slash) {\r\n                rootLength++;\r\n            }\r\n            else {\r\n                // non slash character means we continue proceeding to next component of root search \r\n                break;\r\n            }\r\n        }\r\n\r\n        // there are no parts after http:// just return current string as the pathComponent\r\n        if (rootLength === urlLength) {\r\n            return [url];\r\n        }\r\n\r\n        // Find the index of \"/\" after website.com so the root can be http://www.website.com/ (from existing http://)\r\n        let indexOfNextSlash = url.indexOf(directorySeparator, rootLength);\r\n        if (indexOfNextSlash !== -1) {\r\n            // Found the \"/\" after the website.com so the root is length of http://www.website.com/ \r\n            // and get components afetr the root normally like any other folder components\r\n            rootLength = indexOfNextSlash + 1;\r\n            return normalizedPathComponents(url, rootLength);\r\n        }\r\n        else {\r\n            // Can't find the host assume the rest of the string as component \r\n            // but make sure we append \"/\"  to it as root is not joined using \"/\"\r\n            // eg. if url passed in was http://website.com we want to use root as [http://website.com/] \r\n            // so that other path manipulations will be correct and it can be merged with relative paths correctly\r\n            return [url + directorySeparator];\r\n        }\r\n    }\r\n\r\n    function getNormalizedPathOrUrlComponents(pathOrUrl: string, currentDirectory: string) {\r\n        if (isUrl(pathOrUrl)) {\r\n            return getNormalizedPathComponentsOfUrl(pathOrUrl);\r\n        }\r\n        else {\r\n            return getNormalizedPathComponents(pathOrUrl, currentDirectory);\r\n        }\r\n    }\r\n\r\n    export function getRelativePathToDirectoryOrUrl(directoryPathOrUrl: string, relativeOrAbsolutePath: string, currentDirectory: string, getCanonicalFileName: (fileName: string) => string, isAbsolutePathAnUrl: boolean) {\r\n        let pathComponents = getNormalizedPathOrUrlComponents(relativeOrAbsolutePath, currentDirectory);\r\n        let directoryComponents = getNormalizedPathOrUrlComponents(directoryPathOrUrl, currentDirectory);\r\n        if (directoryComponents.length > 1 && lastOrUndefined(directoryComponents) === \"\") {\r\n            // If the directory path given was of type test/cases/ then we really need components of directory to be only till its name\r\n            // that is  [\"test\", \"cases\", \"\"] needs to be actually [\"test\", \"cases\"]\r\n            directoryComponents.length--;\r\n        }\r\n\r\n        // Find the component that differs\r\n        for (var joinStartIndex = 0; joinStartIndex < pathComponents.length && joinStartIndex < directoryComponents.length; joinStartIndex++) {\r\n            if (getCanonicalFileName(directoryComponents[joinStartIndex]) !== getCanonicalFileName(pathComponents[joinStartIndex])) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Get the relative path\r\n        if (joinStartIndex) {\r\n            let relativePath = \"\";\r\n            let relativePathComponents = pathComponents.slice(joinStartIndex, pathComponents.length);\r\n            for (; joinStartIndex < directoryComponents.length; joinStartIndex++) {\r\n                if (directoryComponents[joinStartIndex] !== \"\") {\r\n                    relativePath = relativePath + \"..\" + directorySeparator;\r\n                }\r\n            }\r\n\r\n            return relativePath + relativePathComponents.join(directorySeparator);\r\n        }\r\n\r\n        // Cant find the relative path, get the absolute path\r\n        let absolutePath = getNormalizedPathFromPathComponents(pathComponents);\r\n        if (isAbsolutePathAnUrl && isRootedDiskPath(absolutePath)) {\r\n            absolutePath = \"file:///\" + absolutePath;\r\n        }\r\n\r\n        return absolutePath;\r\n    }\r\n\r\n    export function getBaseFileName(path: string) {\r\n        let i = path.lastIndexOf(directorySeparator);\r\n        return i < 0 ? path : path.substring(i + 1);\r\n    }\r\n\r\n    export function combinePaths(path1: string, path2: string) {\r\n        if (!(path1 && path1.length)) return path2;\r\n        if (!(path2 && path2.length)) return path1;\r\n        if (getRootLength(path2) !== 0) return path2;\r\n        if (path1.charAt(path1.length - 1) === directorySeparator) return path1 + path2;\r\n        return path1 + directorySeparator + path2;\r\n    }\r\n\r\n    export function fileExtensionIs(path: string, extension: string): boolean {\r\n        let pathLen = path.length;\r\n        let extLen = extension.length;\r\n        return pathLen > extLen && path.substr(pathLen - extLen, extLen) === extension;\r\n    }\r\n\r\n    /**\r\n     *  List of supported extensions in order of file resolution precedence.\r\n     */\r\n    export const supportedExtensions = [\".ts\", \".d.ts\"];\r\n\r\n    const extensionsToRemove = [\".d.ts\", \".ts\", \".js\"];\r\n    export function removeFileExtension(path: string): string {\r\n        for (let ext of extensionsToRemove) {\r\n            if (fileExtensionIs(path, ext)) {\r\n                return path.substr(0, path.length - ext.length);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n\r\n    let backslashOrDoubleQuote = /[\\\"\\\\]/g;\r\n    let escapedCharsRegExp = /[\\u0000-\\u001f\\t\\v\\f\\b\\r\\n\\u2028\\u2029\\u0085]/g;\r\n    let escapedCharsMap: Map<string> = {\r\n        \"\\0\": \"\\\\0\",\r\n        \"\\t\": \"\\\\t\",\r\n        \"\\v\": \"\\\\v\",\r\n        \"\\f\": \"\\\\f\",\r\n        \"\\b\": \"\\\\b\",\r\n        \"\\r\": \"\\\\r\",\r\n        \"\\n\": \"\\\\n\",\r\n        \"\\\\\": \"\\\\\\\\\",\r\n        \"\\\"\": \"\\\\\\\"\",\r\n        \"\\u2028\": \"\\\\u2028\", // lineSeparator\r\n        \"\\u2029\": \"\\\\u2029\", // paragraphSeparator\r\n        \"\\u0085\": \"\\\\u0085\"  // nextLine\r\n    };\r\n\r\n    export interface ObjectAllocator {\r\n        getNodeConstructor(kind: SyntaxKind): new () => Node;\r\n        getSymbolConstructor(): new (flags: SymbolFlags, name: string) => Symbol;\r\n        getTypeConstructor(): new (checker: TypeChecker, flags: TypeFlags) => Type;\r\n        getSignatureConstructor(): new (checker: TypeChecker) => Signature;\r\n    }\r\n\r\n    function Symbol(flags: SymbolFlags, name: string) {\r\n        this.flags = flags;\r\n        this.name = name;\r\n        this.declarations = undefined;\r\n    }\r\n\r\n    function Type(checker: TypeChecker, flags: TypeFlags) {\r\n        this.flags = flags;\r\n    }\r\n\r\n    function Signature(checker: TypeChecker) {\r\n    }\r\n\r\n    export let objectAllocator: ObjectAllocator = {\r\n        getNodeConstructor: kind => {\r\n            function Node() {\r\n            }\r\n            Node.prototype = {\r\n                kind: kind,\r\n                pos: 0,\r\n                end: 0,\r\n                flags: 0,\r\n                parent: undefined,\r\n            };\r\n            return <any>Node;\r\n        },\r\n        getSymbolConstructor: () => <any>Symbol,\r\n        getTypeConstructor: () => <any>Type,\r\n        getSignatureConstructor: () => <any>Signature\r\n    }\r\n\r\n    export const enum AssertionLevel {\r\n        None = 0,\r\n        Normal = 1,\r\n        Aggressive = 2,\r\n        VeryAggressive = 3,\r\n    }\r\n\r\n    export module Debug {\r\n        let currentAssertionLevel = AssertionLevel.None;\r\n\r\n        export function shouldAssert(level: AssertionLevel): boolean {\r\n            return currentAssertionLevel >= level;\r\n        }\r\n\r\n        export function assert(expression: boolean, message?: string, verboseDebugInfo?: () => string): void {\r\n            if (!expression) {\r\n                let verboseDebugString = \"\";\r\n                if (verboseDebugInfo) {\r\n                    verboseDebugString = \"\\r\\nVerbose Debug Information: \" + verboseDebugInfo();\r\n                }\r\n\r\n                throw new Error(\"Debug Failure. False expression: \" + (message || \"\") + verboseDebugString);\r\n            }\r\n        }\r\n\r\n        export function fail(message?: string): void {\r\n            Debug.assert(false, message);\r\n        }\r\n    }\r\n}\r\n"},{"name":"diagnosticInformationMap.generated.ts","text":"// <auto-generated />\r\n/// <reference path=\"types.ts\" />\r\n/* @internal */\r\nmodule ts {\r\n    export var Diagnostics = {\r\n        Unterminated_string_literal: { code: 1002, category: DiagnosticCategory.Error, key: \"Unterminated string literal.\" },\r\n        Identifier_expected: { code: 1003, category: DiagnosticCategory.Error, key: \"Identifier expected.\" },\r\n        _0_expected: { code: 1005, category: DiagnosticCategory.Error, key: \"'{0}' expected.\" },\r\n        A_file_cannot_have_a_reference_to_itself: { code: 1006, category: DiagnosticCategory.Error, key: \"A file cannot have a reference to itself.\" },\r\n        Trailing_comma_not_allowed: { code: 1009, category: DiagnosticCategory.Error, key: \"Trailing comma not allowed.\" },\r\n        Asterisk_Slash_expected: { code: 1010, category: DiagnosticCategory.Error, key: \"'*/' expected.\" },\r\n        Unexpected_token: { code: 1012, category: DiagnosticCategory.Error, key: \"Unexpected token.\" },\r\n        A_rest_parameter_must_be_last_in_a_parameter_list: { code: 1014, category: DiagnosticCategory.Error, key: \"A rest parameter must be last in a parameter list.\" },\r\n        Parameter_cannot_have_question_mark_and_initializer: { code: 1015, category: DiagnosticCategory.Error, key: \"Parameter cannot have question mark and initializer.\" },\r\n        A_required_parameter_cannot_follow_an_optional_parameter: { code: 1016, category: DiagnosticCategory.Error, key: \"A required parameter cannot follow an optional parameter.\" },\r\n        An_index_signature_cannot_have_a_rest_parameter: { code: 1017, category: DiagnosticCategory.Error, key: \"An index signature cannot have a rest parameter.\" },\r\n        An_index_signature_parameter_cannot_have_an_accessibility_modifier: { code: 1018, category: DiagnosticCategory.Error, key: \"An index signature parameter cannot have an accessibility modifier.\" },\r\n        An_index_signature_parameter_cannot_have_a_question_mark: { code: 1019, category: DiagnosticCategory.Error, key: \"An index signature parameter cannot have a question mark.\" },\r\n        An_index_signature_parameter_cannot_have_an_initializer: { code: 1020, category: DiagnosticCategory.Error, key: \"An index signature parameter cannot have an initializer.\" },\r\n        An_index_signature_must_have_a_type_annotation: { code: 1021, category: DiagnosticCategory.Error, key: \"An index signature must have a type annotation.\" },\r\n        An_index_signature_parameter_must_have_a_type_annotation: { code: 1022, category: DiagnosticCategory.Error, key: \"An index signature parameter must have a type annotation.\" },\r\n        An_index_signature_parameter_type_must_be_string_or_number: { code: 1023, category: DiagnosticCategory.Error, key: \"An index signature parameter type must be 'string' or 'number'.\" },\r\n        A_class_or_interface_declaration_can_only_have_one_extends_clause: { code: 1024, category: DiagnosticCategory.Error, key: \"A class or interface declaration can only have one 'extends' clause.\" },\r\n        An_extends_clause_must_precede_an_implements_clause: { code: 1025, category: DiagnosticCategory.Error, key: \"An 'extends' clause must precede an 'implements' clause.\" },\r\n        A_class_can_only_extend_a_single_class: { code: 1026, category: DiagnosticCategory.Error, key: \"A class can only extend a single class.\" },\r\n        A_class_declaration_can_only_have_one_implements_clause: { code: 1027, category: DiagnosticCategory.Error, key: \"A class declaration can only have one 'implements' clause.\" },\r\n        Accessibility_modifier_already_seen: { code: 1028, category: DiagnosticCategory.Error, key: \"Accessibility modifier already seen.\" },\r\n        _0_modifier_must_precede_1_modifier: { code: 1029, category: DiagnosticCategory.Error, key: \"'{0}' modifier must precede '{1}' modifier.\" },\r\n        _0_modifier_already_seen: { code: 1030, category: DiagnosticCategory.Error, key: \"'{0}' modifier already seen.\" },\r\n        _0_modifier_cannot_appear_on_a_class_element: { code: 1031, category: DiagnosticCategory.Error, key: \"'{0}' modifier cannot appear on a class element.\" },\r\n        An_interface_declaration_cannot_have_an_implements_clause: { code: 1032, category: DiagnosticCategory.Error, key: \"An interface declaration cannot have an 'implements' clause.\" },\r\n        super_must_be_followed_by_an_argument_list_or_member_access: { code: 1034, category: DiagnosticCategory.Error, key: \"'super' must be followed by an argument list or member access.\" },\r\n        Only_ambient_modules_can_use_quoted_names: { code: 1035, category: DiagnosticCategory.Error, key: \"Only ambient modules can use quoted names.\" },\r\n        Statements_are_not_allowed_in_ambient_contexts: { code: 1036, category: DiagnosticCategory.Error, key: \"Statements are not allowed in ambient contexts.\" },\r\n        A_declare_modifier_cannot_be_used_in_an_already_ambient_context: { code: 1038, category: DiagnosticCategory.Error, key: \"A 'declare' modifier cannot be used in an already ambient context.\" },\r\n        Initializers_are_not_allowed_in_ambient_contexts: { code: 1039, category: DiagnosticCategory.Error, key: \"Initializers are not allowed in ambient contexts.\" },\r\n        _0_modifier_cannot_appear_on_a_module_element: { code: 1044, category: DiagnosticCategory.Error, key: \"'{0}' modifier cannot appear on a module element.\" },\r\n        A_declare_modifier_cannot_be_used_with_an_interface_declaration: { code: 1045, category: DiagnosticCategory.Error, key: \"A 'declare' modifier cannot be used with an interface declaration.\" },\r\n        A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: { code: 1046, category: DiagnosticCategory.Error, key: \"A 'declare' modifier is required for a top level declaration in a .d.ts file.\" },\r\n        A_rest_parameter_cannot_be_optional: { code: 1047, category: DiagnosticCategory.Error, key: \"A rest parameter cannot be optional.\" },\r\n        A_rest_parameter_cannot_have_an_initializer: { code: 1048, category: DiagnosticCategory.Error, key: \"A rest parameter cannot have an initializer.\" },\r\n        A_set_accessor_must_have_exactly_one_parameter: { code: 1049, category: DiagnosticCategory.Error, key: \"A 'set' accessor must have exactly one parameter.\" },\r\n        A_set_accessor_cannot_have_an_optional_parameter: { code: 1051, category: DiagnosticCategory.Error, key: \"A 'set' accessor cannot have an optional parameter.\" },\r\n        A_set_accessor_parameter_cannot_have_an_initializer: { code: 1052, category: DiagnosticCategory.Error, key: \"A 'set' accessor parameter cannot have an initializer.\" },\r\n        A_set_accessor_cannot_have_rest_parameter: { code: 1053, category: DiagnosticCategory.Error, key: \"A 'set' accessor cannot have rest parameter.\" },\r\n        A_get_accessor_cannot_have_parameters: { code: 1054, category: DiagnosticCategory.Error, key: \"A 'get' accessor cannot have parameters.\" },\r\n        Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: { code: 1056, category: DiagnosticCategory.Error, key: \"Accessors are only available when targeting ECMAScript 5 and higher.\" },\r\n        Enum_member_must_have_initializer: { code: 1061, category: DiagnosticCategory.Error, key: \"Enum member must have initializer.\" },\r\n        An_export_assignment_cannot_be_used_in_a_namespace: { code: 1063, category: DiagnosticCategory.Error, key: \"An export assignment cannot be used in a namespace.\" },\r\n        Ambient_enum_elements_can_only_have_integer_literal_initializers: { code: 1066, category: DiagnosticCategory.Error, key: \"Ambient enum elements can only have integer literal initializers.\" },\r\n        Unexpected_token_A_constructor_method_accessor_or_property_was_expected: { code: 1068, category: DiagnosticCategory.Error, key: \"Unexpected token. A constructor, method, accessor, or property was expected.\" },\r\n        A_declare_modifier_cannot_be_used_with_an_import_declaration: { code: 1079, category: DiagnosticCategory.Error, key: \"A 'declare' modifier cannot be used with an import declaration.\" },\r\n        Invalid_reference_directive_syntax: { code: 1084, category: DiagnosticCategory.Error, key: \"Invalid 'reference' directive syntax.\" },\r\n        Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: { code: 1085, category: DiagnosticCategory.Error, key: \"Octal literals are not available when targeting ECMAScript 5 and higher.\" },\r\n        An_accessor_cannot_be_declared_in_an_ambient_context: { code: 1086, category: DiagnosticCategory.Error, key: \"An accessor cannot be declared in an ambient context.\" },\r\n        _0_modifier_cannot_appear_on_a_constructor_declaration: { code: 1089, category: DiagnosticCategory.Error, key: \"'{0}' modifier cannot appear on a constructor declaration.\" },\r\n        _0_modifier_cannot_appear_on_a_parameter: { code: 1090, category: DiagnosticCategory.Error, key: \"'{0}' modifier cannot appear on a parameter.\" },\r\n        Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: { code: 1091, category: DiagnosticCategory.Error, key: \"Only a single variable declaration is allowed in a 'for...in' statement.\" },\r\n        Type_parameters_cannot_appear_on_a_constructor_declaration: { code: 1092, category: DiagnosticCategory.Error, key: \"Type parameters cannot appear on a constructor declaration.\" },\r\n        Type_annotation_cannot_appear_on_a_constructor_declaration: { code: 1093, category: DiagnosticCategory.Error, key: \"Type annotation cannot appear on a constructor declaration.\" },\r\n        An_accessor_cannot_have_type_parameters: { code: 1094, category: DiagnosticCategory.Error, key: \"An accessor cannot have type parameters.\" },\r\n        A_set_accessor_cannot_have_a_return_type_annotation: { code: 1095, category: DiagnosticCategory.Error, key: \"A 'set' accessor cannot have a return type annotation.\" },\r\n        An_index_signature_must_have_exactly_one_parameter: { code: 1096, category: DiagnosticCategory.Error, key: \"An index signature must have exactly one parameter.\" },\r\n        _0_list_cannot_be_empty: { code: 1097, category: DiagnosticCategory.Error, key: \"'{0}' list cannot be empty.\" },\r\n        Type_parameter_list_cannot_be_empty: { code: 1098, category: DiagnosticCategory.Error, key: \"Type parameter list cannot be empty.\" },\r\n        Type_argument_list_cannot_be_empty: { code: 1099, category: DiagnosticCategory.Error, key: \"Type argument list cannot be empty.\" },\r\n        Invalid_use_of_0_in_strict_mode: { code: 1100, category: DiagnosticCategory.Error, key: \"Invalid use of '{0}' in strict mode.\" },\r\n        with_statements_are_not_allowed_in_strict_mode: { code: 1101, category: DiagnosticCategory.Error, key: \"'with' statements are not allowed in strict mode.\" },\r\n        delete_cannot_be_called_on_an_identifier_in_strict_mode: { code: 1102, category: DiagnosticCategory.Error, key: \"'delete' cannot be called on an identifier in strict mode.\" },\r\n        A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: { code: 1104, category: DiagnosticCategory.Error, key: \"A 'continue' statement can only be used within an enclosing iteration statement.\" },\r\n        A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: { code: 1105, category: DiagnosticCategory.Error, key: \"A 'break' statement can only be used within an enclosing iteration or switch statement.\" },\r\n        Jump_target_cannot_cross_function_boundary: { code: 1107, category: DiagnosticCategory.Error, key: \"Jump target cannot cross function boundary.\" },\r\n        A_return_statement_can_only_be_used_within_a_function_body: { code: 1108, category: DiagnosticCategory.Error, key: \"A 'return' statement can only be used within a function body.\" },\r\n        Expression_expected: { code: 1109, category: DiagnosticCategory.Error, key: \"Expression expected.\" },\r\n        Type_expected: { code: 1110, category: DiagnosticCategory.Error, key: \"Type expected.\" },\r\n        A_class_member_cannot_be_declared_optional: { code: 1112, category: DiagnosticCategory.Error, key: \"A class member cannot be declared optional.\" },\r\n        A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: { code: 1113, category: DiagnosticCategory.Error, key: \"A 'default' clause cannot appear more than once in a 'switch' statement.\" },\r\n        Duplicate_label_0: { code: 1114, category: DiagnosticCategory.Error, key: \"Duplicate label '{0}'\" },\r\n        A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: { code: 1115, category: DiagnosticCategory.Error, key: \"A 'continue' statement can only jump to a label of an enclosing iteration statement.\" },\r\n        A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: { code: 1116, category: DiagnosticCategory.Error, key: \"A 'break' statement can only jump to a label of an enclosing statement.\" },\r\n        An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode: { code: 1117, category: DiagnosticCategory.Error, key: \"An object literal cannot have multiple properties with the same name in strict mode.\" },\r\n        An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: { code: 1118, category: DiagnosticCategory.Error, key: \"An object literal cannot have multiple get/set accessors with the same name.\" },\r\n        An_object_literal_cannot_have_property_and_accessor_with_the_same_name: { code: 1119, category: DiagnosticCategory.Error, key: \"An object literal cannot have property and accessor with the same name.\" },\r\n        An_export_assignment_cannot_have_modifiers: { code: 1120, category: DiagnosticCategory.Error, key: \"An export assignment cannot have modifiers.\" },\r\n        Octal_literals_are_not_allowed_in_strict_mode: { code: 1121, category: DiagnosticCategory.Error, key: \"Octal literals are not allowed in strict mode.\" },\r\n        A_tuple_type_element_list_cannot_be_empty: { code: 1122, category: DiagnosticCategory.Error, key: \"A tuple type element list cannot be empty.\" },\r\n        Variable_declaration_list_cannot_be_empty: { code: 1123, category: DiagnosticCategory.Error, key: \"Variable declaration list cannot be empty.\" },\r\n        Digit_expected: { code: 1124, category: DiagnosticCategory.Error, key: \"Digit expected.\" },\r\n        Hexadecimal_digit_expected: { code: 1125, category: DiagnosticCategory.Error, key: \"Hexadecimal digit expected.\" },\r\n        Unexpected_end_of_text: { code: 1126, category: DiagnosticCategory.Error, key: \"Unexpected end of text.\" },\r\n        Invalid_character: { code: 1127, category: DiagnosticCategory.Error, key: \"Invalid character.\" },\r\n        Declaration_or_statement_expected: { code: 1128, category: DiagnosticCategory.Error, key: \"Declaration or statement expected.\" },\r\n        Statement_expected: { code: 1129, category: DiagnosticCategory.Error, key: \"Statement expected.\" },\r\n        case_or_default_expected: { code: 1130, category: DiagnosticCategory.Error, key: \"'case' or 'default' expected.\" },\r\n        Property_or_signature_expected: { code: 1131, category: DiagnosticCategory.Error, key: \"Property or signature expected.\" },\r\n        Enum_member_expected: { code: 1132, category: DiagnosticCategory.Error, key: \"Enum member expected.\" },\r\n        Type_reference_expected: { code: 1133, category: DiagnosticCategory.Error, key: \"Type reference expected.\" },\r\n        Variable_declaration_expected: { code: 1134, category: DiagnosticCategory.Error, key: \"Variable declaration expected.\" },\r\n        Argument_expression_expected: { code: 1135, category: DiagnosticCategory.Error, key: \"Argument expression expected.\" },\r\n        Property_assignment_expected: { code: 1136, category: DiagnosticCategory.Error, key: \"Property assignment expected.\" },\r\n        Expression_or_comma_expected: { code: 1137, category: DiagnosticCategory.Error, key: \"Expression or comma expected.\" },\r\n        Parameter_declaration_expected: { code: 1138, category: DiagnosticCategory.Error, key: \"Parameter declaration expected.\" },\r\n        Type_parameter_declaration_expected: { code: 1139, category: DiagnosticCategory.Error, key: \"Type parameter declaration expected.\" },\r\n        Type_argument_expected: { code: 1140, category: DiagnosticCategory.Error, key: \"Type argument expected.\" },\r\n        String_literal_expected: { code: 1141, category: DiagnosticCategory.Error, key: \"String literal expected.\" },\r\n        Line_break_not_permitted_here: { code: 1142, category: DiagnosticCategory.Error, key: \"Line break not permitted here.\" },\r\n        or_expected: { code: 1144, category: DiagnosticCategory.Error, key: \"'{' or ';' expected.\" },\r\n        Modifiers_not_permitted_on_index_signature_members: { code: 1145, category: DiagnosticCategory.Error, key: \"Modifiers not permitted on index signature members.\" },\r\n        Declaration_expected: { code: 1146, category: DiagnosticCategory.Error, key: \"Declaration expected.\" },\r\n        Import_declarations_in_a_namespace_cannot_reference_a_module: { code: 1147, category: DiagnosticCategory.Error, key: \"Import declarations in a namespace cannot reference a module.\" },\r\n        Cannot_compile_modules_unless_the_module_flag_is_provided: { code: 1148, category: DiagnosticCategory.Error, key: \"Cannot compile modules unless the '--module' flag is provided.\" },\r\n        File_name_0_differs_from_already_included_file_name_1_only_in_casing: { code: 1149, category: DiagnosticCategory.Error, key: \"File name '{0}' differs from already included file name '{1}' only in casing\" },\r\n        new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: { code: 1150, category: DiagnosticCategory.Error, key: \"'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.\" },\r\n        var_let_or_const_expected: { code: 1152, category: DiagnosticCategory.Error, key: \"'var', 'let' or 'const' expected.\" },\r\n        let_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1153, category: DiagnosticCategory.Error, key: \"'let' declarations are only available when targeting ECMAScript 6 and higher.\" },\r\n        const_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1154, category: DiagnosticCategory.Error, key: \"'const' declarations are only available when targeting ECMAScript 6 and higher.\" },\r\n        const_declarations_must_be_initialized: { code: 1155, category: DiagnosticCategory.Error, key: \"'const' declarations must be initialized\" },\r\n        const_declarations_can_only_be_declared_inside_a_block: { code: 1156, category: DiagnosticCategory.Error, key: \"'const' declarations can only be declared inside a block.\" },\r\n        let_declarations_can_only_be_declared_inside_a_block: { code: 1157, category: DiagnosticCategory.Error, key: \"'let' declarations can only be declared inside a block.\" },\r\n        Unterminated_template_literal: { code: 1160, category: DiagnosticCategory.Error, key: \"Unterminated template literal.\" },\r\n        Unterminated_regular_expression_literal: { code: 1161, category: DiagnosticCategory.Error, key: \"Unterminated regular expression literal.\" },\r\n        An_object_member_cannot_be_declared_optional: { code: 1162, category: DiagnosticCategory.Error, key: \"An object member cannot be declared optional.\" },\r\n        A_yield_expression_is_only_allowed_in_a_generator_body: { code: 1163, category: DiagnosticCategory.Error, key: \"A 'yield' expression is only allowed in a generator body.\" },\r\n        Computed_property_names_are_not_allowed_in_enums: { code: 1164, category: DiagnosticCategory.Error, key: \"Computed property names are not allowed in enums.\" },\r\n        A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol: { code: 1165, category: DiagnosticCategory.Error, key: \"A computed property name in an ambient context must directly refer to a built-in symbol.\" },\r\n        A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol: { code: 1166, category: DiagnosticCategory.Error, key: \"A computed property name in a class property declaration must directly refer to a built-in symbol.\" },\r\n        Computed_property_names_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1167, category: DiagnosticCategory.Error, key: \"Computed property names are only available when targeting ECMAScript 6 and higher.\" },\r\n        A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol: { code: 1168, category: DiagnosticCategory.Error, key: \"A computed property name in a method overload must directly refer to a built-in symbol.\" },\r\n        A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol: { code: 1169, category: DiagnosticCategory.Error, key: \"A computed property name in an interface must directly refer to a built-in symbol.\" },\r\n        A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol: { code: 1170, category: DiagnosticCategory.Error, key: \"A computed property name in a type literal must directly refer to a built-in symbol.\" },\r\n        A_comma_expression_is_not_allowed_in_a_computed_property_name: { code: 1171, category: DiagnosticCategory.Error, key: \"A comma expression is not allowed in a computed property name.\" },\r\n        extends_clause_already_seen: { code: 1172, category: DiagnosticCategory.Error, key: \"'extends' clause already seen.\" },\r\n        extends_clause_must_precede_implements_clause: { code: 1173, category: DiagnosticCategory.Error, key: \"'extends' clause must precede 'implements' clause.\" },\r\n        Classes_can_only_extend_a_single_class: { code: 1174, category: DiagnosticCategory.Error, key: \"Classes can only extend a single class.\" },\r\n        implements_clause_already_seen: { code: 1175, category: DiagnosticCategory.Error, key: \"'implements' clause already seen.\" },\r\n        Interface_declaration_cannot_have_implements_clause: { code: 1176, category: DiagnosticCategory.Error, key: \"Interface declaration cannot have 'implements' clause.\" },\r\n        Binary_digit_expected: { code: 1177, category: DiagnosticCategory.Error, key: \"Binary digit expected.\" },\r\n        Octal_digit_expected: { code: 1178, category: DiagnosticCategory.Error, key: \"Octal digit expected.\" },\r\n        Unexpected_token_expected: { code: 1179, category: DiagnosticCategory.Error, key: \"Unexpected token. '{' expected.\" },\r\n        Property_destructuring_pattern_expected: { code: 1180, category: DiagnosticCategory.Error, key: \"Property destructuring pattern expected.\" },\r\n        Array_element_destructuring_pattern_expected: { code: 1181, category: DiagnosticCategory.Error, key: \"Array element destructuring pattern expected.\" },\r\n        A_destructuring_declaration_must_have_an_initializer: { code: 1182, category: DiagnosticCategory.Error, key: \"A destructuring declaration must have an initializer.\" },\r\n        Destructuring_declarations_are_not_allowed_in_ambient_contexts: { code: 1183, category: DiagnosticCategory.Error, key: \"Destructuring declarations are not allowed in ambient contexts.\" },\r\n        An_implementation_cannot_be_declared_in_ambient_contexts: { code: 1184, category: DiagnosticCategory.Error, key: \"An implementation cannot be declared in ambient contexts.\" },\r\n        Modifiers_cannot_appear_here: { code: 1184, category: DiagnosticCategory.Error, key: \"Modifiers cannot appear here.\" },\r\n        Merge_conflict_marker_encountered: { code: 1185, category: DiagnosticCategory.Error, key: \"Merge conflict marker encountered.\" },\r\n        A_rest_element_cannot_have_an_initializer: { code: 1186, category: DiagnosticCategory.Error, key: \"A rest element cannot have an initializer.\" },\r\n        A_parameter_property_may_not_be_a_binding_pattern: { code: 1187, category: DiagnosticCategory.Error, key: \"A parameter property may not be a binding pattern.\" },\r\n        Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: { code: 1188, category: DiagnosticCategory.Error, key: \"Only a single variable declaration is allowed in a 'for...of' statement.\" },\r\n        The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: { code: 1189, category: DiagnosticCategory.Error, key: \"The variable declaration of a 'for...in' statement cannot have an initializer.\" },\r\n        The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: { code: 1190, category: DiagnosticCategory.Error, key: \"The variable declaration of a 'for...of' statement cannot have an initializer.\" },\r\n        An_import_declaration_cannot_have_modifiers: { code: 1191, category: DiagnosticCategory.Error, key: \"An import declaration cannot have modifiers.\" },\r\n        Module_0_has_no_default_export: { code: 1192, category: DiagnosticCategory.Error, key: \"Module '{0}' has no default export.\" },\r\n        An_export_declaration_cannot_have_modifiers: { code: 1193, category: DiagnosticCategory.Error, key: \"An export declaration cannot have modifiers.\" },\r\n        Export_declarations_are_not_permitted_in_a_namespace: { code: 1194, category: DiagnosticCategory.Error, key: \"Export declarations are not permitted in a namespace.\" },\r\n        Catch_clause_variable_name_must_be_an_identifier: { code: 1195, category: DiagnosticCategory.Error, key: \"Catch clause variable name must be an identifier.\" },\r\n        Catch_clause_variable_cannot_have_a_type_annotation: { code: 1196, category: DiagnosticCategory.Error, key: \"Catch clause variable cannot have a type annotation.\" },\r\n        Catch_clause_variable_cannot_have_an_initializer: { code: 1197, category: DiagnosticCategory.Error, key: \"Catch clause variable cannot have an initializer.\" },\r\n        An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: { code: 1198, category: DiagnosticCategory.Error, key: \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\" },\r\n        Unterminated_Unicode_escape_sequence: { code: 1199, category: DiagnosticCategory.Error, key: \"Unterminated Unicode escape sequence.\" },\r\n        Line_terminator_not_permitted_before_arrow: { code: 1200, category: DiagnosticCategory.Error, key: \"Line terminator not permitted before arrow.\" },\r\n        Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_or_import_d_from_mod_instead: { code: 1202, category: DiagnosticCategory.Error, key: \"Import assignment cannot be used when targeting ECMAScript 6 or higher. Consider using 'import * as ns from \\\"mod\\\"', 'import {a} from \\\"mod\\\"' or 'import d from \\\"mod\\\"' instead.\" },\r\n        Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_export_default_instead: { code: 1203, category: DiagnosticCategory.Error, key: \"Export assignment cannot be used when targeting ECMAScript 6 or higher. Consider using 'export default' instead.\" },\r\n        Cannot_compile_modules_into_commonjs_amd_system_or_umd_when_targeting_ES6_or_higher: { code: 1204, category: DiagnosticCategory.Error, key: \"Cannot compile modules into 'commonjs', 'amd', 'system' or 'umd' when targeting 'ES6' or higher.\" },\r\n        Decorators_are_only_available_when_targeting_ECMAScript_5_and_higher: { code: 1205, category: DiagnosticCategory.Error, key: \"Decorators are only available when targeting ECMAScript 5 and higher.\" },\r\n        Decorators_are_not_valid_here: { code: 1206, category: DiagnosticCategory.Error, key: \"Decorators are not valid here.\" },\r\n        Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: { code: 1207, category: DiagnosticCategory.Error, key: \"Decorators cannot be applied to multiple get/set accessors of the same name.\" },\r\n        Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided: { code: 1208, category: DiagnosticCategory.Error, key: \"Cannot compile namespaces when the '--isolatedModules' flag is provided.\" },\r\n        Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided: { code: 1209, category: DiagnosticCategory.Error, key: \"Ambient const enums are not allowed when the '--isolatedModules' flag is provided.\" },\r\n        Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode: { code: 1210, category: DiagnosticCategory.Error, key: \"Invalid use of '{0}'. Class definitions are automatically in strict mode.\" },\r\n        A_class_declaration_without_the_default_modifier_must_have_a_name: { code: 1211, category: DiagnosticCategory.Error, key: \"A class declaration without the 'default' modifier must have a name\" },\r\n        Identifier_expected_0_is_a_reserved_word_in_strict_mode: { code: 1212, category: DiagnosticCategory.Error, key: \"Identifier expected. '{0}' is a reserved word in strict mode\" },\r\n        Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: { code: 1213, category: DiagnosticCategory.Error, key: \"Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.\" },\r\n        Type_expected_0_is_a_reserved_word_in_strict_mode: { code: 1215, category: DiagnosticCategory.Error, key: \"Type expected. '{0}' is a reserved word in strict mode\" },\r\n        Type_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: { code: 1216, category: DiagnosticCategory.Error, key: \"Type expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.\" },\r\n        Export_assignment_is_not_supported_when_module_flag_is_system: { code: 1218, category: DiagnosticCategory.Error, key: \"Export assignment is not supported when '--module' flag is 'system'.\" },\r\n        Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning: { code: 1219, category: DiagnosticCategory.Error, key: \"Experimental support for decorators is a feature that is subject to change in a future release. Specify '--experimentalDecorators' to remove this warning.\" },\r\n        Generators_are_only_available_when_targeting_ECMAScript_6_or_higher: { code: 1220, category: DiagnosticCategory.Error, key: \"Generators are only available when targeting ECMAScript 6 or higher.\" },\r\n        Generators_are_not_allowed_in_an_ambient_context: { code: 1221, category: DiagnosticCategory.Error, key: \"Generators are not allowed in an ambient context.\" },\r\n        An_overload_signature_cannot_be_declared_as_a_generator: { code: 1222, category: DiagnosticCategory.Error, key: \"An overload signature cannot be declared as a generator.\" },\r\n        _0_tag_already_specified: { code: 1223, category: DiagnosticCategory.Error, key: \"'{0}' tag already specified.\" },\r\n        Signature_0_must_have_a_type_predicate: { code: 1224, category: DiagnosticCategory.Error, key: \"Signature '{0}' must have a type predicate.\" },\r\n        Cannot_find_parameter_0: { code: 1225, category: DiagnosticCategory.Error, key: \"Cannot find parameter '{0}'.\" },\r\n        Type_predicate_0_is_not_assignable_to_1: { code: 1226, category: DiagnosticCategory.Error, key: \"Type predicate '{0}' is not assignable to '{1}'.\" },\r\n        Parameter_0_is_not_in_the_same_position_as_parameter_1: { code: 1227, category: DiagnosticCategory.Error, key: \"Parameter '{0}' is not in the same position as parameter '{1}'.\" },\r\n        A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: { code: 1228, category: DiagnosticCategory.Error, key: \"A type predicate is only allowed in return type position for functions and methods.\" },\r\n        A_type_predicate_cannot_reference_a_rest_parameter: { code: 1229, category: DiagnosticCategory.Error, key: \"A type predicate cannot reference a rest parameter.\" },\r\n        A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: { code: 1230, category: DiagnosticCategory.Error, key: \"A type predicate cannot reference element '{0}' in a binding pattern.\" },\r\n        Duplicate_identifier_0: { code: 2300, category: DiagnosticCategory.Error, key: \"Duplicate identifier '{0}'.\" },\r\n        Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: { code: 2301, category: DiagnosticCategory.Error, key: \"Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.\" },\r\n        Static_members_cannot_reference_class_type_parameters: { code: 2302, category: DiagnosticCategory.Error, key: \"Static members cannot reference class type parameters.\" },\r\n        Circular_definition_of_import_alias_0: { code: 2303, category: DiagnosticCategory.Error, key: \"Circular definition of import alias '{0}'.\" },\r\n        Cannot_find_name_0: { code: 2304, category: DiagnosticCategory.Error, key: \"Cannot find name '{0}'.\" },\r\n        Module_0_has_no_exported_member_1: { code: 2305, category: DiagnosticCategory.Error, key: \"Module '{0}' has no exported member '{1}'.\" },\r\n        File_0_is_not_a_module: { code: 2306, category: DiagnosticCategory.Error, key: \"File '{0}' is not a module.\" },\r\n        Cannot_find_module_0: { code: 2307, category: DiagnosticCategory.Error, key: \"Cannot find module '{0}'.\" },\r\n        A_module_cannot_have_more_than_one_export_assignment: { code: 2308, category: DiagnosticCategory.Error, key: \"A module cannot have more than one export assignment.\" },\r\n        An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: { code: 2309, category: DiagnosticCategory.Error, key: \"An export assignment cannot be used in a module with other exported elements.\" },\r\n        Type_0_recursively_references_itself_as_a_base_type: { code: 2310, category: DiagnosticCategory.Error, key: \"Type '{0}' recursively references itself as a base type.\" },\r\n        A_class_may_only_extend_another_class: { code: 2311, category: DiagnosticCategory.Error, key: \"A class may only extend another class.\" },\r\n        An_interface_may_only_extend_a_class_or_another_interface: { code: 2312, category: DiagnosticCategory.Error, key: \"An interface may only extend a class or another interface.\" },\r\n        Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list: { code: 2313, category: DiagnosticCategory.Error, key: \"Constraint of a type parameter cannot reference any type parameter from the same type parameter list.\" },\r\n        Generic_type_0_requires_1_type_argument_s: { code: 2314, category: DiagnosticCategory.Error, key: \"Generic type '{0}' requires {1} type argument(s).\" },\r\n        Type_0_is_not_generic: { code: 2315, category: DiagnosticCategory.Error, key: \"Type '{0}' is not generic.\" },\r\n        Global_type_0_must_be_a_class_or_interface_type: { code: 2316, category: DiagnosticCategory.Error, key: \"Global type '{0}' must be a class or interface type.\" },\r\n        Global_type_0_must_have_1_type_parameter_s: { code: 2317, category: DiagnosticCategory.Error, key: \"Global type '{0}' must have {1} type parameter(s).\" },\r\n        Cannot_find_global_type_0: { code: 2318, category: DiagnosticCategory.Error, key: \"Cannot find global type '{0}'.\" },\r\n        Named_property_0_of_types_1_and_2_are_not_identical: { code: 2319, category: DiagnosticCategory.Error, key: \"Named property '{0}' of types '{1}' and '{2}' are not identical.\" },\r\n        Interface_0_cannot_simultaneously_extend_types_1_and_2: { code: 2320, category: DiagnosticCategory.Error, key: \"Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'.\" },\r\n        Excessive_stack_depth_comparing_types_0_and_1: { code: 2321, category: DiagnosticCategory.Error, key: \"Excessive stack depth comparing types '{0}' and '{1}'.\" },\r\n        Type_0_is_not_assignable_to_type_1: { code: 2322, category: DiagnosticCategory.Error, key: \"Type '{0}' is not assignable to type '{1}'.\" },\r\n        Property_0_is_missing_in_type_1: { code: 2324, category: DiagnosticCategory.Error, key: \"Property '{0}' is missing in type '{1}'.\" },\r\n        Property_0_is_private_in_type_1_but_not_in_type_2: { code: 2325, category: DiagnosticCategory.Error, key: \"Property '{0}' is private in type '{1}' but not in type '{2}'.\" },\r\n        Types_of_property_0_are_incompatible: { code: 2326, category: DiagnosticCategory.Error, key: \"Types of property '{0}' are incompatible.\" },\r\n        Property_0_is_optional_in_type_1_but_required_in_type_2: { code: 2327, category: DiagnosticCategory.Error, key: \"Property '{0}' is optional in type '{1}' but required in type '{2}'.\" },\r\n        Types_of_parameters_0_and_1_are_incompatible: { code: 2328, category: DiagnosticCategory.Error, key: \"Types of parameters '{0}' and '{1}' are incompatible.\" },\r\n        Index_signature_is_missing_in_type_0: { code: 2329, category: DiagnosticCategory.Error, key: \"Index signature is missing in type '{0}'.\" },\r\n        Index_signatures_are_incompatible: { code: 2330, category: DiagnosticCategory.Error, key: \"Index signatures are incompatible.\" },\r\n        this_cannot_be_referenced_in_a_module_or_namespace_body: { code: 2331, category: DiagnosticCategory.Error, key: \"'this' cannot be referenced in a module or namespace body.\" },\r\n        this_cannot_be_referenced_in_current_location: { code: 2332, category: DiagnosticCategory.Error, key: \"'this' cannot be referenced in current location.\" },\r\n        this_cannot_be_referenced_in_constructor_arguments: { code: 2333, category: DiagnosticCategory.Error, key: \"'this' cannot be referenced in constructor arguments.\" },\r\n        this_cannot_be_referenced_in_a_static_property_initializer: { code: 2334, category: DiagnosticCategory.Error, key: \"'this' cannot be referenced in a static property initializer.\" },\r\n        super_can_only_be_referenced_in_a_derived_class: { code: 2335, category: DiagnosticCategory.Error, key: \"'super' can only be referenced in a derived class.\" },\r\n        super_cannot_be_referenced_in_constructor_arguments: { code: 2336, category: DiagnosticCategory.Error, key: \"'super' cannot be referenced in constructor arguments.\" },\r\n        Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: { code: 2337, category: DiagnosticCategory.Error, key: \"Super calls are not permitted outside constructors or in nested functions inside constructors\" },\r\n        super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: { code: 2338, category: DiagnosticCategory.Error, key: \"'super' property access is permitted only in a constructor, member function, or member accessor of a derived class\" },\r\n        Property_0_does_not_exist_on_type_1: { code: 2339, category: DiagnosticCategory.Error, key: \"Property '{0}' does not exist on type '{1}'.\" },\r\n        Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: { code: 2340, category: DiagnosticCategory.Error, key: \"Only public and protected methods of the base class are accessible via the 'super' keyword\" },\r\n        Property_0_is_private_and_only_accessible_within_class_1: { code: 2341, category: DiagnosticCategory.Error, key: \"Property '{0}' is private and only accessible within class '{1}'.\" },\r\n        An_index_expression_argument_must_be_of_type_string_number_symbol_or_any: { code: 2342, category: DiagnosticCategory.Error, key: \"An index expression argument must be of type 'string', 'number', 'symbol, or 'any'.\" },\r\n        Type_0_does_not_satisfy_the_constraint_1: { code: 2344, category: DiagnosticCategory.Error, key: \"Type '{0}' does not satisfy the constraint '{1}'.\" },\r\n        Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: { code: 2345, category: DiagnosticCategory.Error, key: \"Argument of type '{0}' is not assignable to parameter of type '{1}'.\" },\r\n        Supplied_parameters_do_not_match_any_signature_of_call_target: { code: 2346, category: DiagnosticCategory.Error, key: \"Supplied parameters do not match any signature of call target.\" },\r\n        Untyped_function_calls_may_not_accept_type_arguments: { code: 2347, category: DiagnosticCategory.Error, key: \"Untyped function calls may not accept type arguments.\" },\r\n        Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: { code: 2348, category: DiagnosticCategory.Error, key: \"Value of type '{0}' is not callable. Did you mean to include 'new'?\" },\r\n        Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: { code: 2349, category: DiagnosticCategory.Error, key: \"Cannot invoke an expression whose type lacks a call signature.\" },\r\n        Only_a_void_function_can_be_called_with_the_new_keyword: { code: 2350, category: DiagnosticCategory.Error, key: \"Only a void function can be called with the 'new' keyword.\" },\r\n        Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature: { code: 2351, category: DiagnosticCategory.Error, key: \"Cannot use 'new' with an expression whose type lacks a call or construct signature.\" },\r\n        Neither_type_0_nor_type_1_is_assignable_to_the_other: { code: 2352, category: DiagnosticCategory.Error, key: \"Neither type '{0}' nor type '{1}' is assignable to the other.\" },\r\n        No_best_common_type_exists_among_return_expressions: { code: 2354, category: DiagnosticCategory.Error, key: \"No best common type exists among return expressions.\" },\r\n        A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2355, category: DiagnosticCategory.Error, key: \"A function whose declared type is neither 'void' nor 'any' must return a value or consist of a single 'throw' statement.\" },\r\n        An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: { code: 2356, category: DiagnosticCategory.Error, key: \"An arithmetic operand must be of type 'any', 'number' or an enum type.\" },\r\n        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: { code: 2357, category: DiagnosticCategory.Error, key: \"The operand of an increment or decrement operator must be a variable, property or indexer.\" },\r\n        The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2358, category: DiagnosticCategory.Error, key: \"The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.\" },\r\n        The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: { code: 2359, category: DiagnosticCategory.Error, key: \"The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.\" },\r\n        The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol: { code: 2360, category: DiagnosticCategory.Error, key: \"The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.\" },\r\n        The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2361, category: DiagnosticCategory.Error, key: \"The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter\" },\r\n        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2362, category: DiagnosticCategory.Error, key: \"The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.\" },\r\n        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2363, category: DiagnosticCategory.Error, key: \"The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.\" },\r\n        Invalid_left_hand_side_of_assignment_expression: { code: 2364, category: DiagnosticCategory.Error, key: \"Invalid left-hand side of assignment expression.\" },\r\n        Operator_0_cannot_be_applied_to_types_1_and_2: { code: 2365, category: DiagnosticCategory.Error, key: \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\" },\r\n        Type_parameter_name_cannot_be_0: { code: 2368, category: DiagnosticCategory.Error, key: \"Type parameter name cannot be '{0}'\" },\r\n        A_parameter_property_is_only_allowed_in_a_constructor_implementation: { code: 2369, category: DiagnosticCategory.Error, key: \"A parameter property is only allowed in a constructor implementation.\" },\r\n        A_rest_parameter_must_be_of_an_array_type: { code: 2370, category: DiagnosticCategory.Error, key: \"A rest parameter must be of an array type.\" },\r\n        A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: { code: 2371, category: DiagnosticCategory.Error, key: \"A parameter initializer is only allowed in a function or constructor implementation.\" },\r\n        Parameter_0_cannot_be_referenced_in_its_initializer: { code: 2372, category: DiagnosticCategory.Error, key: \"Parameter '{0}' cannot be referenced in its initializer.\" },\r\n        Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: { code: 2373, category: DiagnosticCategory.Error, key: \"Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.\" },\r\n        Duplicate_string_index_signature: { code: 2374, category: DiagnosticCategory.Error, key: \"Duplicate string index signature.\" },\r\n        Duplicate_number_index_signature: { code: 2375, category: DiagnosticCategory.Error, key: \"Duplicate number index signature.\" },\r\n        A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: { code: 2376, category: DiagnosticCategory.Error, key: \"A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.\" },\r\n        Constructors_for_derived_classes_must_contain_a_super_call: { code: 2377, category: DiagnosticCategory.Error, key: \"Constructors for derived classes must contain a 'super' call.\" },\r\n        A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2378, category: DiagnosticCategory.Error, key: \"A 'get' accessor must return a value or consist of a single 'throw' statement.\" },\r\n        Getter_and_setter_accessors_do_not_agree_in_visibility: { code: 2379, category: DiagnosticCategory.Error, key: \"Getter and setter accessors do not agree in visibility.\" },\r\n        get_and_set_accessor_must_have_the_same_type: { code: 2380, category: DiagnosticCategory.Error, key: \"'get' and 'set' accessor must have the same type.\" },\r\n        A_signature_with_an_implementation_cannot_use_a_string_literal_type: { code: 2381, category: DiagnosticCategory.Error, key: \"A signature with an implementation cannot use a string literal type.\" },\r\n        Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: { code: 2382, category: DiagnosticCategory.Error, key: \"Specialized overload signature is not assignable to any non-specialized signature.\" },\r\n        Overload_signatures_must_all_be_exported_or_not_exported: { code: 2383, category: DiagnosticCategory.Error, key: \"Overload signatures must all be exported or not exported.\" },\r\n        Overload_signatures_must_all_be_ambient_or_non_ambient: { code: 2384, category: DiagnosticCategory.Error, key: \"Overload signatures must all be ambient or non-ambient.\" },\r\n        Overload_signatures_must_all_be_public_private_or_protected: { code: 2385, category: DiagnosticCategory.Error, key: \"Overload signatures must all be public, private or protected.\" },\r\n        Overload_signatures_must_all_be_optional_or_required: { code: 2386, category: DiagnosticCategory.Error, key: \"Overload signatures must all be optional or required.\" },\r\n        Function_overload_must_be_static: { code: 2387, category: DiagnosticCategory.Error, key: \"Function overload must be static.\" },\r\n        Function_overload_must_not_be_static: { code: 2388, category: DiagnosticCategory.Error, key: \"Function overload must not be static.\" },\r\n        Function_implementation_name_must_be_0: { code: 2389, category: DiagnosticCategory.Error, key: \"Function implementation name must be '{0}'.\" },\r\n        Constructor_implementation_is_missing: { code: 2390, category: DiagnosticCategory.Error, key: \"Constructor implementation is missing.\" },\r\n        Function_implementation_is_missing_or_not_immediately_following_the_declaration: { code: 2391, category: DiagnosticCategory.Error, key: \"Function implementation is missing or not immediately following the declaration.\" },\r\n        Multiple_constructor_implementations_are_not_allowed: { code: 2392, category: DiagnosticCategory.Error, key: \"Multiple constructor implementations are not allowed.\" },\r\n        Duplicate_function_implementation: { code: 2393, category: DiagnosticCategory.Error, key: \"Duplicate function implementation.\" },\r\n        Overload_signature_is_not_compatible_with_function_implementation: { code: 2394, category: DiagnosticCategory.Error, key: \"Overload signature is not compatible with function implementation.\" },\r\n        Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: { code: 2395, category: DiagnosticCategory.Error, key: \"Individual declarations in merged declaration {0} must be all exported or all local.\" },\r\n        Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: { code: 2396, category: DiagnosticCategory.Error, key: \"Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.\" },\r\n        Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: { code: 2399, category: DiagnosticCategory.Error, key: \"Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.\" },\r\n        Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: { code: 2400, category: DiagnosticCategory.Error, key: \"Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.\" },\r\n        Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: { code: 2401, category: DiagnosticCategory.Error, key: \"Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.\" },\r\n        Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: { code: 2402, category: DiagnosticCategory.Error, key: \"Expression resolves to '_super' that compiler uses to capture base class reference.\" },\r\n        Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: { code: 2403, category: DiagnosticCategory.Error, key: \"Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.\" },\r\n        The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: { code: 2404, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...in' statement cannot use a type annotation.\" },\r\n        The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: { code: 2405, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...in' statement must be of type 'string' or 'any'.\" },\r\n        Invalid_left_hand_side_in_for_in_statement: { code: 2406, category: DiagnosticCategory.Error, key: \"Invalid left-hand side in 'for...in' statement.\" },\r\n        The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2407, category: DiagnosticCategory.Error, key: \"The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.\" },\r\n        Setters_cannot_return_a_value: { code: 2408, category: DiagnosticCategory.Error, key: \"Setters cannot return a value.\" },\r\n        Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: { code: 2409, category: DiagnosticCategory.Error, key: \"Return type of constructor signature must be assignable to the instance type of the class\" },\r\n        All_symbols_within_a_with_block_will_be_resolved_to_any: { code: 2410, category: DiagnosticCategory.Error, key: \"All symbols within a 'with' block will be resolved to 'any'.\" },\r\n        Property_0_of_type_1_is_not_assignable_to_string_index_type_2: { code: 2411, category: DiagnosticCategory.Error, key: \"Property '{0}' of type '{1}' is not assignable to string index type '{2}'.\" },\r\n        Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2: { code: 2412, category: DiagnosticCategory.Error, key: \"Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'.\" },\r\n        Numeric_index_type_0_is_not_assignable_to_string_index_type_1: { code: 2413, category: DiagnosticCategory.Error, key: \"Numeric index type '{0}' is not assignable to string index type '{1}'.\" },\r\n        Class_name_cannot_be_0: { code: 2414, category: DiagnosticCategory.Error, key: \"Class name cannot be '{0}'\" },\r\n        Class_0_incorrectly_extends_base_class_1: { code: 2415, category: DiagnosticCategory.Error, key: \"Class '{0}' incorrectly extends base class '{1}'.\" },\r\n        Class_static_side_0_incorrectly_extends_base_class_static_side_1: { code: 2417, category: DiagnosticCategory.Error, key: \"Class static side '{0}' incorrectly extends base class static side '{1}'.\" },\r\n        Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0: { code: 2419, category: DiagnosticCategory.Error, key: \"Type name '{0}' in extends clause does not reference constructor function for '{0}'.\" },\r\n        Class_0_incorrectly_implements_interface_1: { code: 2420, category: DiagnosticCategory.Error, key: \"Class '{0}' incorrectly implements interface '{1}'.\" },\r\n        A_class_may_only_implement_another_class_or_interface: { code: 2422, category: DiagnosticCategory.Error, key: \"A class may only implement another class or interface.\" },\r\n        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: { code: 2423, category: DiagnosticCategory.Error, key: \"Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.\" },\r\n        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: { code: 2424, category: DiagnosticCategory.Error, key: \"Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.\" },\r\n        Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2425, category: DiagnosticCategory.Error, key: \"Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.\" },\r\n        Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2426, category: DiagnosticCategory.Error, key: \"Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.\" },\r\n        Interface_name_cannot_be_0: { code: 2427, category: DiagnosticCategory.Error, key: \"Interface name cannot be '{0}'\" },\r\n        All_declarations_of_an_interface_must_have_identical_type_parameters: { code: 2428, category: DiagnosticCategory.Error, key: \"All declarations of an interface must have identical type parameters.\" },\r\n        Interface_0_incorrectly_extends_interface_1: { code: 2430, category: DiagnosticCategory.Error, key: \"Interface '{0}' incorrectly extends interface '{1}'.\" },\r\n        Enum_name_cannot_be_0: { code: 2431, category: DiagnosticCategory.Error, key: \"Enum name cannot be '{0}'\" },\r\n        In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: { code: 2432, category: DiagnosticCategory.Error, key: \"In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.\" },\r\n        A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: { code: 2433, category: DiagnosticCategory.Error, key: \"A namespace declaration cannot be in a different file from a class or function with which it is merged\" },\r\n        A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: { code: 2434, category: DiagnosticCategory.Error, key: \"A namespace declaration cannot be located prior to a class or function with which it is merged\" },\r\n        Ambient_modules_cannot_be_nested_in_other_modules: { code: 2435, category: DiagnosticCategory.Error, key: \"Ambient modules cannot be nested in other modules.\" },\r\n        Ambient_module_declaration_cannot_specify_relative_module_name: { code: 2436, category: DiagnosticCategory.Error, key: \"Ambient module declaration cannot specify relative module name.\" },\r\n        Module_0_is_hidden_by_a_local_declaration_with_the_same_name: { code: 2437, category: DiagnosticCategory.Error, key: \"Module '{0}' is hidden by a local declaration with the same name\" },\r\n        Import_name_cannot_be_0: { code: 2438, category: DiagnosticCategory.Error, key: \"Import name cannot be '{0}'\" },\r\n        Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: { code: 2439, category: DiagnosticCategory.Error, key: \"Import or export declaration in an ambient module declaration cannot reference module through relative module name.\" },\r\n        Import_declaration_conflicts_with_local_declaration_of_0: { code: 2440, category: DiagnosticCategory.Error, key: \"Import declaration conflicts with local declaration of '{0}'\" },\r\n        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: { code: 2441, category: DiagnosticCategory.Error, key: \"Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.\" },\r\n        Types_have_separate_declarations_of_a_private_property_0: { code: 2442, category: DiagnosticCategory.Error, key: \"Types have separate declarations of a private property '{0}'.\" },\r\n        Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: { code: 2443, category: DiagnosticCategory.Error, key: \"Property '{0}' is protected but type '{1}' is not a class derived from '{2}'.\" },\r\n        Property_0_is_protected_in_type_1_but_public_in_type_2: { code: 2444, category: DiagnosticCategory.Error, key: \"Property '{0}' is protected in type '{1}' but public in type '{2}'.\" },\r\n        Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: { code: 2445, category: DiagnosticCategory.Error, key: \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\" },\r\n        Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1: { code: 2446, category: DiagnosticCategory.Error, key: \"Property '{0}' is protected and only accessible through an instance of class '{1}'.\" },\r\n        The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: { code: 2447, category: DiagnosticCategory.Error, key: \"The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead.\" },\r\n        Block_scoped_variable_0_used_before_its_declaration: { code: 2448, category: DiagnosticCategory.Error, key: \"Block-scoped variable '{0}' used before its declaration.\" },\r\n        The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant: { code: 2449, category: DiagnosticCategory.Error, key: \"The operand of an increment or decrement operator cannot be a constant.\" },\r\n        Left_hand_side_of_assignment_expression_cannot_be_a_constant: { code: 2450, category: DiagnosticCategory.Error, key: \"Left-hand side of assignment expression cannot be a constant.\" },\r\n        Cannot_redeclare_block_scoped_variable_0: { code: 2451, category: DiagnosticCategory.Error, key: \"Cannot redeclare block-scoped variable '{0}'.\" },\r\n        An_enum_member_cannot_have_a_numeric_name: { code: 2452, category: DiagnosticCategory.Error, key: \"An enum member cannot have a numeric name.\" },\r\n        The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly: { code: 2453, category: DiagnosticCategory.Error, key: \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\" },\r\n        Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0: { code: 2455, category: DiagnosticCategory.Error, key: \"Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'.\" },\r\n        Type_alias_0_circularly_references_itself: { code: 2456, category: DiagnosticCategory.Error, key: \"Type alias '{0}' circularly references itself.\" },\r\n        Type_alias_name_cannot_be_0: { code: 2457, category: DiagnosticCategory.Error, key: \"Type alias name cannot be '{0}'\" },\r\n        An_AMD_module_cannot_have_multiple_name_assignments: { code: 2458, category: DiagnosticCategory.Error, key: \"An AMD module cannot have multiple name assignments.\" },\r\n        Type_0_has_no_property_1_and_no_string_index_signature: { code: 2459, category: DiagnosticCategory.Error, key: \"Type '{0}' has no property '{1}' and no string index signature.\" },\r\n        Type_0_has_no_property_1: { code: 2460, category: DiagnosticCategory.Error, key: \"Type '{0}' has no property '{1}'.\" },\r\n        Type_0_is_not_an_array_type: { code: 2461, category: DiagnosticCategory.Error, key: \"Type '{0}' is not an array type.\" },\r\n        A_rest_element_must_be_last_in_an_array_destructuring_pattern: { code: 2462, category: DiagnosticCategory.Error, key: \"A rest element must be last in an array destructuring pattern\" },\r\n        A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: { code: 2463, category: DiagnosticCategory.Error, key: \"A binding pattern parameter cannot be optional in an implementation signature.\" },\r\n        A_computed_property_name_must_be_of_type_string_number_symbol_or_any: { code: 2464, category: DiagnosticCategory.Error, key: \"A computed property name must be of type 'string', 'number', 'symbol', or 'any'.\" },\r\n        this_cannot_be_referenced_in_a_computed_property_name: { code: 2465, category: DiagnosticCategory.Error, key: \"'this' cannot be referenced in a computed property name.\" },\r\n        super_cannot_be_referenced_in_a_computed_property_name: { code: 2466, category: DiagnosticCategory.Error, key: \"'super' cannot be referenced in a computed property name.\" },\r\n        A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: { code: 2467, category: DiagnosticCategory.Error, key: \"A computed property name cannot reference a type parameter from its containing type.\" },\r\n        Cannot_find_global_value_0: { code: 2468, category: DiagnosticCategory.Error, key: \"Cannot find global value '{0}'.\" },\r\n        The_0_operator_cannot_be_applied_to_type_symbol: { code: 2469, category: DiagnosticCategory.Error, key: \"The '{0}' operator cannot be applied to type 'symbol'.\" },\r\n        Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object: { code: 2470, category: DiagnosticCategory.Error, key: \"'Symbol' reference does not refer to the global Symbol constructor object.\" },\r\n        A_computed_property_name_of_the_form_0_must_be_of_type_symbol: { code: 2471, category: DiagnosticCategory.Error, key: \"A computed property name of the form '{0}' must be of type 'symbol'.\" },\r\n        Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: { code: 2472, category: DiagnosticCategory.Error, key: \"Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher.\" },\r\n        Enum_declarations_must_all_be_const_or_non_const: { code: 2473, category: DiagnosticCategory.Error, key: \"Enum declarations must all be const or non-const.\" },\r\n        In_const_enum_declarations_member_initializer_must_be_constant_expression: { code: 2474, category: DiagnosticCategory.Error, key: \"In 'const' enum declarations member initializer must be constant expression.\" },\r\n        const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment: { code: 2475, category: DiagnosticCategory.Error, key: \"'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment.\" },\r\n        A_const_enum_member_can_only_be_accessed_using_a_string_literal: { code: 2476, category: DiagnosticCategory.Error, key: \"A const enum member can only be accessed using a string literal.\" },\r\n        const_enum_member_initializer_was_evaluated_to_a_non_finite_value: { code: 2477, category: DiagnosticCategory.Error, key: \"'const' enum member initializer was evaluated to a non-finite value.\" },\r\n        const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: { code: 2478, category: DiagnosticCategory.Error, key: \"'const' enum member initializer was evaluated to disallowed value 'NaN'.\" },\r\n        Property_0_does_not_exist_on_const_enum_1: { code: 2479, category: DiagnosticCategory.Error, key: \"Property '{0}' does not exist on 'const' enum '{1}'.\" },\r\n        let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: { code: 2480, category: DiagnosticCategory.Error, key: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\" },\r\n        Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: { code: 2481, category: DiagnosticCategory.Error, key: \"Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'.\" },\r\n        The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: { code: 2483, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...of' statement cannot use a type annotation.\" },\r\n        Export_declaration_conflicts_with_exported_declaration_of_0: { code: 2484, category: DiagnosticCategory.Error, key: \"Export declaration conflicts with exported declaration of '{0}'\" },\r\n        The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant: { code: 2485, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...of' statement cannot be a previously defined constant.\" },\r\n        The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant: { code: 2486, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...in' statement cannot be a previously defined constant.\" },\r\n        Invalid_left_hand_side_in_for_of_statement: { code: 2487, category: DiagnosticCategory.Error, key: \"Invalid left-hand side in 'for...of' statement.\" },\r\n        Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator: { code: 2488, category: DiagnosticCategory.Error, key: \"Type must have a '[Symbol.iterator]()' method that returns an iterator.\" },\r\n        An_iterator_must_have_a_next_method: { code: 2489, category: DiagnosticCategory.Error, key: \"An iterator must have a 'next()' method.\" },\r\n        The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property: { code: 2490, category: DiagnosticCategory.Error, key: \"The type returned by the 'next()' method of an iterator must have a 'value' property.\" },\r\n        The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: { code: 2491, category: DiagnosticCategory.Error, key: \"The left-hand side of a 'for...in' statement cannot be a destructuring pattern.\" },\r\n        Cannot_redeclare_identifier_0_in_catch_clause: { code: 2492, category: DiagnosticCategory.Error, key: \"Cannot redeclare identifier '{0}' in catch clause\" },\r\n        Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2: { code: 2493, category: DiagnosticCategory.Error, key: \"Tuple type '{0}' with length '{1}' cannot be assigned to tuple with length '{2}'.\" },\r\n        Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: { code: 2494, category: DiagnosticCategory.Error, key: \"Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher.\" },\r\n        Type_0_is_not_an_array_type_or_a_string_type: { code: 2495, category: DiagnosticCategory.Error, key: \"Type '{0}' is not an array type or a string type.\" },\r\n        The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: { code: 2496, category: DiagnosticCategory.Error, key: \"The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.\" },\r\n        Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct: { code: 2497, category: DiagnosticCategory.Error, key: \"Module '{0}' resolves to a non-module entity and cannot be imported using this construct.\" },\r\n        Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: { code: 2498, category: DiagnosticCategory.Error, key: \"Module '{0}' uses 'export =' and cannot be used with 'export *'.\" },\r\n        An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: { code: 2499, category: DiagnosticCategory.Error, key: \"An interface can only extend an identifier/qualified-name with optional type arguments.\" },\r\n        A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: { code: 2500, category: DiagnosticCategory.Error, key: \"A class can only implement an identifier/qualified-name with optional type arguments.\" },\r\n        A_rest_element_cannot_contain_a_binding_pattern: { code: 2501, category: DiagnosticCategory.Error, key: \"A rest element cannot contain a binding pattern.\" },\r\n        _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: { code: 2502, category: DiagnosticCategory.Error, key: \"'{0}' is referenced directly or indirectly in its own type annotation.\" },\r\n        Cannot_find_namespace_0: { code: 2503, category: DiagnosticCategory.Error, key: \"Cannot find namespace '{0}'.\" },\r\n        No_best_common_type_exists_among_yield_expressions: { code: 2504, category: DiagnosticCategory.Error, key: \"No best common type exists among yield expressions.\" },\r\n        A_generator_cannot_have_a_void_type_annotation: { code: 2505, category: DiagnosticCategory.Error, key: \"A generator cannot have a 'void' type annotation.\" },\r\n        Import_declaration_0_is_using_private_name_1: { code: 4000, category: DiagnosticCategory.Error, key: \"Import declaration '{0}' is using private name '{1}'.\" },\r\n        Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: { code: 4002, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of exported class has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4004, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of exported interface has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4006, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4008, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4010, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of public static method from exported class has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4012, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of public method from exported class has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4014, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of method from exported interface has or is using private name '{1}'.\" },\r\n        Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4016, category: DiagnosticCategory.Error, key: \"Type parameter '{0}' of exported function has or is using private name '{1}'.\" },\r\n        Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4019, category: DiagnosticCategory.Error, key: \"Implements clause of exported class '{0}' has or is using private name '{1}'.\" },\r\n        Extends_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4020, category: DiagnosticCategory.Error, key: \"Extends clause of exported class '{0}' has or is using private name '{1}'.\" },\r\n        Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: { code: 4022, category: DiagnosticCategory.Error, key: \"Extends clause of exported interface '{0}' has or is using private name '{1}'.\" },\r\n        Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4023, category: DiagnosticCategory.Error, key: \"Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Exported_variable_0_has_or_is_using_name_1_from_private_module_2: { code: 4024, category: DiagnosticCategory.Error, key: \"Exported variable '{0}' has or is using name '{1}' from private module '{2}'.\" },\r\n        Exported_variable_0_has_or_is_using_private_name_1: { code: 4025, category: DiagnosticCategory.Error, key: \"Exported variable '{0}' has or is using private name '{1}'.\" },\r\n        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4026, category: DiagnosticCategory.Error, key: \"Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4027, category: DiagnosticCategory.Error, key: \"Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4028, category: DiagnosticCategory.Error, key: \"Public static property '{0}' of exported class has or is using private name '{1}'.\" },\r\n        Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4029, category: DiagnosticCategory.Error, key: \"Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4030, category: DiagnosticCategory.Error, key: \"Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Public_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4031, category: DiagnosticCategory.Error, key: \"Public property '{0}' of exported class has or is using private name '{1}'.\" },\r\n        Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4032, category: DiagnosticCategory.Error, key: \"Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'.\" },\r\n        Property_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4033, category: DiagnosticCategory.Error, key: \"Property '{0}' of exported interface has or is using private name '{1}'.\" },\r\n        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4034, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4035, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'.\" },\r\n        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4036, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4037, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public property setter from exported class has or is using private name '{1}'.\" },\r\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4038, category: DiagnosticCategory.Error, key: \"Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.\" },\r\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4039, category: DiagnosticCategory.Error, key: \"Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4040, category: DiagnosticCategory.Error, key: \"Return type of public static property getter from exported class has or is using private name '{0}'.\" },\r\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4041, category: DiagnosticCategory.Error, key: \"Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.\" },\r\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4042, category: DiagnosticCategory.Error, key: \"Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4043, category: DiagnosticCategory.Error, key: \"Return type of public property getter from exported class has or is using private name '{0}'.\" },\r\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4044, category: DiagnosticCategory.Error, key: \"Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4045, category: DiagnosticCategory.Error, key: \"Return type of constructor signature from exported interface has or is using private name '{0}'.\" },\r\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4046, category: DiagnosticCategory.Error, key: \"Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4047, category: DiagnosticCategory.Error, key: \"Return type of call signature from exported interface has or is using private name '{0}'.\" },\r\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4048, category: DiagnosticCategory.Error, key: \"Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4049, category: DiagnosticCategory.Error, key: \"Return type of index signature from exported interface has or is using private name '{0}'.\" },\r\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4050, category: DiagnosticCategory.Error, key: \"Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named.\" },\r\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4051, category: DiagnosticCategory.Error, key: \"Return type of public static method from exported class has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: { code: 4052, category: DiagnosticCategory.Error, key: \"Return type of public static method from exported class has or is using private name '{0}'.\" },\r\n        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4053, category: DiagnosticCategory.Error, key: \"Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named.\" },\r\n        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4054, category: DiagnosticCategory.Error, key: \"Return type of public method from exported class has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: { code: 4055, category: DiagnosticCategory.Error, key: \"Return type of public method from exported class has or is using private name '{0}'.\" },\r\n        Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4056, category: DiagnosticCategory.Error, key: \"Return type of method from exported interface has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: { code: 4057, category: DiagnosticCategory.Error, key: \"Return type of method from exported interface has or is using private name '{0}'.\" },\r\n        Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4058, category: DiagnosticCategory.Error, key: \"Return type of exported function has or is using name '{0}' from external module {1} but cannot be named.\" },\r\n        Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: { code: 4059, category: DiagnosticCategory.Error, key: \"Return type of exported function has or is using name '{0}' from private module '{1}'.\" },\r\n        Return_type_of_exported_function_has_or_is_using_private_name_0: { code: 4060, category: DiagnosticCategory.Error, key: \"Return type of exported function has or is using private name '{0}'.\" },\r\n        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4061, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4062, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: { code: 4063, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of constructor from exported class has or is using private name '{1}'.\" },\r\n        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4064, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4065, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.\" },\r\n        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4066, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4067, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of call signature from exported interface has or is using private name '{1}'.\" },\r\n        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4068, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4069, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4070, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public static method from exported class has or is using private name '{1}'.\" },\r\n        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4071, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4072, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4073, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of public method from exported class has or is using private name '{1}'.\" },\r\n        Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4074, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4075, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of method from exported interface has or is using private name '{1}'.\" },\r\n        Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4076, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named.\" },\r\n        Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: { code: 4077, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'.\" },\r\n        Parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4078, category: DiagnosticCategory.Error, key: \"Parameter '{0}' of exported function has or is using private name '{1}'.\" },\r\n        Exported_type_alias_0_has_or_is_using_private_name_1: { code: 4081, category: DiagnosticCategory.Error, key: \"Exported type alias '{0}' has or is using private name '{1}'.\" },\r\n        Default_export_of_the_module_has_or_is_using_private_name_0: { code: 4082, category: DiagnosticCategory.Error, key: \"Default export of the module has or is using private name '{0}'.\" },\r\n        Loop_contains_block_scoped_variable_0_referenced_by_a_function_in_the_loop_This_is_only_supported_in_ECMAScript_6_or_higher: { code: 4091, category: DiagnosticCategory.Error, key: \"Loop contains block-scoped variable '{0}' referenced by a function in the loop. This is only supported in ECMAScript 6 or higher.\" },\r\n        The_current_host_does_not_support_the_0_option: { code: 5001, category: DiagnosticCategory.Error, key: \"The current host does not support the '{0}' option.\" },\r\n        Cannot_find_the_common_subdirectory_path_for_the_input_files: { code: 5009, category: DiagnosticCategory.Error, key: \"Cannot find the common subdirectory path for the input files.\" },\r\n        Cannot_read_file_0_Colon_1: { code: 5012, category: DiagnosticCategory.Error, key: \"Cannot read file '{0}': {1}\" },\r\n        Unsupported_file_encoding: { code: 5013, category: DiagnosticCategory.Error, key: \"Unsupported file encoding.\" },\r\n        Failed_to_parse_file_0_Colon_1: { code: 5014, category: DiagnosticCategory.Error, key: \"Failed to parse file '{0}': {1}.\" },\r\n        Unknown_compiler_option_0: { code: 5023, category: DiagnosticCategory.Error, key: \"Unknown compiler option '{0}'.\" },\r\n        Compiler_option_0_requires_a_value_of_type_1: { code: 5024, category: DiagnosticCategory.Error, key: \"Compiler option '{0}' requires a value of type {1}.\" },\r\n        Could_not_write_file_0_Colon_1: { code: 5033, category: DiagnosticCategory.Error, key: \"Could not write file '{0}': {1}\" },\r\n        Option_mapRoot_cannot_be_specified_without_specifying_sourceMap_option: { code: 5038, category: DiagnosticCategory.Error, key: \"Option 'mapRoot' cannot be specified without specifying 'sourceMap' option.\" },\r\n        Option_sourceRoot_cannot_be_specified_without_specifying_sourceMap_option: { code: 5039, category: DiagnosticCategory.Error, key: \"Option 'sourceRoot' cannot be specified without specifying 'sourceMap' option.\" },\r\n        Option_noEmit_cannot_be_specified_with_option_out_or_outDir: { code: 5040, category: DiagnosticCategory.Error, key: \"Option 'noEmit' cannot be specified with option 'out' or 'outDir'.\" },\r\n        Option_noEmit_cannot_be_specified_with_option_declaration: { code: 5041, category: DiagnosticCategory.Error, key: \"Option 'noEmit' cannot be specified with option 'declaration'.\" },\r\n        Option_project_cannot_be_mixed_with_source_files_on_a_command_line: { code: 5042, category: DiagnosticCategory.Error, key: \"Option 'project' cannot be mixed with source files on a command line.\" },\r\n        Option_sourceMap_cannot_be_specified_with_option_isolatedModules: { code: 5043, category: DiagnosticCategory.Error, key: \"Option 'sourceMap' cannot be specified with option 'isolatedModules'.\" },\r\n        Option_declaration_cannot_be_specified_with_option_isolatedModules: { code: 5044, category: DiagnosticCategory.Error, key: \"Option 'declaration' cannot be specified with option 'isolatedModules'.\" },\r\n        Option_noEmitOnError_cannot_be_specified_with_option_isolatedModules: { code: 5045, category: DiagnosticCategory.Error, key: \"Option 'noEmitOnError' cannot be specified with option 'isolatedModules'.\" },\r\n        Option_out_cannot_be_specified_with_option_isolatedModules: { code: 5046, category: DiagnosticCategory.Error, key: \"Option 'out' cannot be specified with option 'isolatedModules'.\" },\r\n        Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES6_or_higher: { code: 5047, category: DiagnosticCategory.Error, key: \"Option 'isolatedModules' can only be used when either option'--module' is provided or option 'target' is 'ES6' or higher.\" },\r\n        Option_sourceMap_cannot_be_specified_with_option_inlineSourceMap: { code: 5048, category: DiagnosticCategory.Error, key: \"Option 'sourceMap' cannot be specified with option 'inlineSourceMap'.\" },\r\n        Option_sourceRoot_cannot_be_specified_with_option_inlineSourceMap: { code: 5049, category: DiagnosticCategory.Error, key: \"Option 'sourceRoot' cannot be specified with option 'inlineSourceMap'.\" },\r\n        Option_mapRoot_cannot_be_specified_with_option_inlineSourceMap: { code: 5050, category: DiagnosticCategory.Error, key: \"Option 'mapRoot' cannot be specified with option 'inlineSourceMap'.\" },\r\n        Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: { code: 5051, category: DiagnosticCategory.Error, key: \"Option 'inlineSources' can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided.\" },\r\n        Concatenate_and_emit_output_to_single_file: { code: 6001, category: DiagnosticCategory.Message, key: \"Concatenate and emit output to single file.\" },\r\n        Generates_corresponding_d_ts_file: { code: 6002, category: DiagnosticCategory.Message, key: \"Generates corresponding '.d.ts' file.\" },\r\n        Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: { code: 6003, category: DiagnosticCategory.Message, key: \"Specifies the location where debugger should locate map files instead of generated locations.\" },\r\n        Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: { code: 6004, category: DiagnosticCategory.Message, key: \"Specifies the location where debugger should locate TypeScript files instead of source locations.\" },\r\n        Watch_input_files: { code: 6005, category: DiagnosticCategory.Message, key: \"Watch input files.\" },\r\n        Redirect_output_structure_to_the_directory: { code: 6006, category: DiagnosticCategory.Message, key: \"Redirect output structure to the directory.\" },\r\n        Do_not_erase_const_enum_declarations_in_generated_code: { code: 6007, category: DiagnosticCategory.Message, key: \"Do not erase const enum declarations in generated code.\" },\r\n        Do_not_emit_outputs_if_any_errors_were_reported: { code: 6008, category: DiagnosticCategory.Message, key: \"Do not emit outputs if any errors were reported.\" },\r\n        Do_not_emit_comments_to_output: { code: 6009, category: DiagnosticCategory.Message, key: \"Do not emit comments to output.\" },\r\n        Do_not_emit_outputs: { code: 6010, category: DiagnosticCategory.Message, key: \"Do not emit outputs.\" },\r\n        Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES6_experimental: { code: 6015, category: DiagnosticCategory.Message, key: \"Specify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES6' (experimental)\" },\r\n        Specify_module_code_generation_Colon_commonjs_amd_system_or_umd: { code: 6016, category: DiagnosticCategory.Message, key: \"Specify module code generation: 'commonjs', 'amd', 'system' or 'umd'\" },\r\n        Print_this_message: { code: 6017, category: DiagnosticCategory.Message, key: \"Print this message.\" },\r\n        Print_the_compiler_s_version: { code: 6019, category: DiagnosticCategory.Message, key: \"Print the compiler's version.\" },\r\n        Compile_the_project_in_the_given_directory: { code: 6020, category: DiagnosticCategory.Message, key: \"Compile the project in the given directory.\" },\r\n        Syntax_Colon_0: { code: 6023, category: DiagnosticCategory.Message, key: \"Syntax: {0}\" },\r\n        options: { code: 6024, category: DiagnosticCategory.Message, key: \"options\" },\r\n        file: { code: 6025, category: DiagnosticCategory.Message, key: \"file\" },\r\n        Examples_Colon_0: { code: 6026, category: DiagnosticCategory.Message, key: \"Examples: {0}\" },\r\n        Options_Colon: { code: 6027, category: DiagnosticCategory.Message, key: \"Options:\" },\r\n        Version_0: { code: 6029, category: DiagnosticCategory.Message, key: \"Version {0}\" },\r\n        Insert_command_line_options_and_files_from_a_file: { code: 6030, category: DiagnosticCategory.Message, key: \"Insert command line options and files from a file.\" },\r\n        File_change_detected_Starting_incremental_compilation: { code: 6032, category: DiagnosticCategory.Message, key: \"File change detected. Starting incremental compilation...\" },\r\n        KIND: { code: 6034, category: DiagnosticCategory.Message, key: \"KIND\" },\r\n        FILE: { code: 6035, category: DiagnosticCategory.Message, key: \"FILE\" },\r\n        VERSION: { code: 6036, category: DiagnosticCategory.Message, key: \"VERSION\" },\r\n        LOCATION: { code: 6037, category: DiagnosticCategory.Message, key: \"LOCATION\" },\r\n        DIRECTORY: { code: 6038, category: DiagnosticCategory.Message, key: \"DIRECTORY\" },\r\n        Compilation_complete_Watching_for_file_changes: { code: 6042, category: DiagnosticCategory.Message, key: \"Compilation complete. Watching for file changes.\" },\r\n        Generates_corresponding_map_file: { code: 6043, category: DiagnosticCategory.Message, key: \"Generates corresponding '.map' file.\" },\r\n        Compiler_option_0_expects_an_argument: { code: 6044, category: DiagnosticCategory.Error, key: \"Compiler option '{0}' expects an argument.\" },\r\n        Unterminated_quoted_string_in_response_file_0: { code: 6045, category: DiagnosticCategory.Error, key: \"Unterminated quoted string in response file '{0}'.\" },\r\n        Argument_for_module_option_must_be_commonjs_amd_system_or_umd: { code: 6046, category: DiagnosticCategory.Error, key: \"Argument for '--module' option must be 'commonjs', 'amd', 'system' or 'umd'.\" },\r\n        Argument_for_target_option_must_be_ES3_ES5_or_ES6: { code: 6047, category: DiagnosticCategory.Error, key: \"Argument for '--target' option must be 'ES3', 'ES5', or 'ES6'.\" },\r\n        Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: { code: 6048, category: DiagnosticCategory.Error, key: \"Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.\" },\r\n        Unsupported_locale_0: { code: 6049, category: DiagnosticCategory.Error, key: \"Unsupported locale '{0}'.\" },\r\n        Unable_to_open_file_0: { code: 6050, category: DiagnosticCategory.Error, key: \"Unable to open file '{0}'.\" },\r\n        Corrupted_locale_file_0: { code: 6051, category: DiagnosticCategory.Error, key: \"Corrupted locale file {0}.\" },\r\n        Raise_error_on_expressions_and_declarations_with_an_implied_any_type: { code: 6052, category: DiagnosticCategory.Message, key: \"Raise error on expressions and declarations with an implied 'any' type.\" },\r\n        File_0_not_found: { code: 6053, category: DiagnosticCategory.Error, key: \"File '{0}' not found.\" },\r\n        File_0_has_unsupported_extension_The_only_supported_extensions_are_1: { code: 6054, category: DiagnosticCategory.Error, key: \"File '{0}' has unsupported extension. The only supported extensions are {1}.\" },\r\n        Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: { code: 6055, category: DiagnosticCategory.Message, key: \"Suppress noImplicitAny errors for indexing objects lacking index signatures.\" },\r\n        Do_not_emit_declarations_for_code_that_has_an_internal_annotation: { code: 6056, category: DiagnosticCategory.Message, key: \"Do not emit declarations for code that has an '@internal' annotation.\" },\r\n        Preserve_new_lines_when_emitting_code: { code: 6057, category: DiagnosticCategory.Message, key: \"Preserve new-lines when emitting code.\" },\r\n        Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: { code: 6058, category: DiagnosticCategory.Message, key: \"Specifies the root directory of input files. Use to control the output directory structure with --outDir.\" },\r\n        File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: { code: 6059, category: DiagnosticCategory.Error, key: \"File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files.\" },\r\n        Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: { code: 6060, category: DiagnosticCategory.Message, key: \"Specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).\" },\r\n        NEWLINE: { code: 6061, category: DiagnosticCategory.Message, key: \"NEWLINE\" },\r\n        Argument_for_newLine_option_must_be_CRLF_or_LF: { code: 6062, category: DiagnosticCategory.Error, key: \"Argument for '--newLine' option must be 'CRLF' or 'LF'.\" },\r\n        Option_experimentalDecorators_must_also_be_specified_when_option_emitDecoratorMetadata_is_specified: { code: 6064, category: DiagnosticCategory.Error, key: \"Option 'experimentalDecorators' must also be specified when option 'emitDecoratorMetadata' is specified.\" },\r\n        Enables_experimental_support_for_ES7_decorators: { code: 6065, category: DiagnosticCategory.Message, key: \"Enables experimental support for ES7 decorators.\" },\r\n        Enables_experimental_support_for_emitting_type_metadata_for_decorators: { code: 6066, category: DiagnosticCategory.Message, key: \"Enables experimental support for emitting type metadata for decorators.\" },\r\n        Variable_0_implicitly_has_an_1_type: { code: 7005, category: DiagnosticCategory.Error, key: \"Variable '{0}' implicitly has an '{1}' type.\" },\r\n        Parameter_0_implicitly_has_an_1_type: { code: 7006, category: DiagnosticCategory.Error, key: \"Parameter '{0}' implicitly has an '{1}' type.\" },\r\n        Member_0_implicitly_has_an_1_type: { code: 7008, category: DiagnosticCategory.Error, key: \"Member '{0}' implicitly has an '{1}' type.\" },\r\n        new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: { code: 7009, category: DiagnosticCategory.Error, key: \"'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.\" },\r\n        _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: { code: 7010, category: DiagnosticCategory.Error, key: \"'{0}', which lacks return-type annotation, implicitly has an '{1}' return type.\" },\r\n        Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: { code: 7011, category: DiagnosticCategory.Error, key: \"Function expression, which lacks return-type annotation, implicitly has an '{0}' return type.\" },\r\n        Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7013, category: DiagnosticCategory.Error, key: \"Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.\" },\r\n        Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation: { code: 7016, category: DiagnosticCategory.Error, key: \"Property '{0}' implicitly has type 'any', because its 'set' accessor lacks a type annotation.\" },\r\n        Index_signature_of_object_type_implicitly_has_an_any_type: { code: 7017, category: DiagnosticCategory.Error, key: \"Index signature of object type implicitly has an 'any' type.\" },\r\n        Object_literal_s_property_0_implicitly_has_an_1_type: { code: 7018, category: DiagnosticCategory.Error, key: \"Object literal's property '{0}' implicitly has an '{1}' type.\" },\r\n        Rest_parameter_0_implicitly_has_an_any_type: { code: 7019, category: DiagnosticCategory.Error, key: \"Rest parameter '{0}' implicitly has an 'any[]' type.\" },\r\n        Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7020, category: DiagnosticCategory.Error, key: \"Call signature, which lacks return-type annotation, implicitly has an 'any' return type.\" },\r\n        _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: { code: 7022, category: DiagnosticCategory.Error, key: \"'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.\" },\r\n        _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7023, category: DiagnosticCategory.Error, key: \"'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\" },\r\n        Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7024, category: DiagnosticCategory.Error, key: \"Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\" },\r\n        Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type: { code: 7025, category: DiagnosticCategory.Error, key: \"Generator implicitly has type '{0}' because it does not yield any values. Consider supplying a return type.\" },\r\n        You_cannot_rename_this_element: { code: 8000, category: DiagnosticCategory.Error, key: \"You cannot rename this element.\" },\r\n        You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: { code: 8001, category: DiagnosticCategory.Error, key: \"You cannot rename elements that are defined in the standard TypeScript library.\" },\r\n        import_can_only_be_used_in_a_ts_file: { code: 8002, category: DiagnosticCategory.Error, key: \"'import ... =' can only be used in a .ts file.\" },\r\n        export_can_only_be_used_in_a_ts_file: { code: 8003, category: DiagnosticCategory.Error, key: \"'export=' can only be used in a .ts file.\" },\r\n        type_parameter_declarations_can_only_be_used_in_a_ts_file: { code: 8004, category: DiagnosticCategory.Error, key: \"'type parameter declarations' can only be used in a .ts file.\" },\r\n        implements_clauses_can_only_be_used_in_a_ts_file: { code: 8005, category: DiagnosticCategory.Error, key: \"'implements clauses' can only be used in a .ts file.\" },\r\n        interface_declarations_can_only_be_used_in_a_ts_file: { code: 8006, category: DiagnosticCategory.Error, key: \"'interface declarations' can only be used in a .ts file.\" },\r\n        module_declarations_can_only_be_used_in_a_ts_file: { code: 8007, category: DiagnosticCategory.Error, key: \"'module declarations' can only be used in a .ts file.\" },\r\n        type_aliases_can_only_be_used_in_a_ts_file: { code: 8008, category: DiagnosticCategory.Error, key: \"'type aliases' can only be used in a .ts file.\" },\r\n        _0_can_only_be_used_in_a_ts_file: { code: 8009, category: DiagnosticCategory.Error, key: \"'{0}' can only be used in a .ts file.\" },\r\n        types_can_only_be_used_in_a_ts_file: { code: 8010, category: DiagnosticCategory.Error, key: \"'types' can only be used in a .ts file.\" },\r\n        type_arguments_can_only_be_used_in_a_ts_file: { code: 8011, category: DiagnosticCategory.Error, key: \"'type arguments' can only be used in a .ts file.\" },\r\n        parameter_modifiers_can_only_be_used_in_a_ts_file: { code: 8012, category: DiagnosticCategory.Error, key: \"'parameter modifiers' can only be used in a .ts file.\" },\r\n        property_declarations_can_only_be_used_in_a_ts_file: { code: 8014, category: DiagnosticCategory.Error, key: \"'property declarations' can only be used in a .ts file.\" },\r\n        enum_declarations_can_only_be_used_in_a_ts_file: { code: 8015, category: DiagnosticCategory.Error, key: \"'enum declarations' can only be used in a .ts file.\" },\r\n        type_assertion_expressions_can_only_be_used_in_a_ts_file: { code: 8016, category: DiagnosticCategory.Error, key: \"'type assertion expressions' can only be used in a .ts file.\" },\r\n        decorators_can_only_be_used_in_a_ts_file: { code: 8017, category: DiagnosticCategory.Error, key: \"'decorators' can only be used in a .ts file.\" },\r\n        Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_class_extends_clauses: { code: 9002, category: DiagnosticCategory.Error, key: \"Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clauses.\" },\r\n        class_expressions_are_not_currently_supported: { code: 9003, category: DiagnosticCategory.Error, key: \"'class' expressions are not currently supported.\" },\r\n    };\r\n}"},{"name":"scanner.ts","text":"/// <reference path=\"core.ts\"/>\r\n/// <reference path=\"diagnosticInformationMap.generated.ts\"/>\r\n\r\nmodule ts {\r\n    export interface ErrorCallback {\r\n        (message: DiagnosticMessage, length: number): void;\r\n    }\r\n\r\n    export interface Scanner {\r\n        getStartPos(): number;\r\n        getToken(): SyntaxKind;\r\n        getTextPos(): number;\r\n        getTokenPos(): number;\r\n        getTokenText(): string;\r\n        getTokenValue(): string;\r\n        hasExtendedUnicodeEscape(): boolean;\r\n        hasPrecedingLineBreak(): boolean;\r\n        isIdentifier(): boolean;\r\n        isReservedWord(): boolean;\r\n        isUnterminated(): boolean;\r\n        reScanGreaterToken(): SyntaxKind;\r\n        reScanSlashToken(): SyntaxKind;\r\n        reScanTemplateToken(): SyntaxKind;\r\n        scan(): SyntaxKind;\r\n        // Sets the text for the scanner to scan.  An optional subrange starting point and length\r\n        // can be provided to have the scanner only scan a portion of the text.\r\n        setText(text: string, start?: number, length?: number): void;\r\n        setOnError(onError: ErrorCallback): void;\r\n        setScriptTarget(scriptTarget: ScriptTarget): void;\r\n        setTextPos(textPos: number): void;\r\n        // Invokes the provided callback then unconditionally restores the scanner to the state it \r\n        // was in immediately prior to invoking the callback.  The result of invoking the callback\r\n        // is returned from this function.\r\n        lookAhead<T>(callback: () => T): T;\r\n\r\n        // Invokes the provided callback.  If the callback returns something falsy, then it restores\r\n        // the scanner to the state it was in immediately prior to invoking the callback.  If the \r\n        // callback returns something truthy, then the scanner state is not rolled back.  The result\r\n        // of invoking the callback is returned from this function.\r\n        tryScan<T>(callback: () => T): T;\r\n    }\r\n\r\n    let textToToken: Map<SyntaxKind> = {\r\n        \"any\": SyntaxKind.AnyKeyword,\r\n        \"as\": SyntaxKind.AsKeyword,\r\n        \"boolean\": SyntaxKind.BooleanKeyword,\r\n        \"break\": SyntaxKind.BreakKeyword,\r\n        \"case\": SyntaxKind.CaseKeyword,\r\n        \"catch\": SyntaxKind.CatchKeyword,\r\n        \"class\": SyntaxKind.ClassKeyword,\r\n        \"continue\": SyntaxKind.ContinueKeyword,\r\n        \"const\": SyntaxKind.ConstKeyword,\r\n        \"constructor\": SyntaxKind.ConstructorKeyword,\r\n        \"debugger\": SyntaxKind.DebuggerKeyword,\r\n        \"declare\": SyntaxKind.DeclareKeyword,\r\n        \"default\": SyntaxKind.DefaultKeyword,\r\n        \"delete\": SyntaxKind.DeleteKeyword,\r\n        \"do\": SyntaxKind.DoKeyword,\r\n        \"else\": SyntaxKind.ElseKeyword,\r\n        \"enum\": SyntaxKind.EnumKeyword,\r\n        \"export\": SyntaxKind.ExportKeyword,\r\n        \"extends\": SyntaxKind.ExtendsKeyword,\r\n        \"false\": SyntaxKind.FalseKeyword,\r\n        \"finally\": SyntaxKind.FinallyKeyword,\r\n        \"for\": SyntaxKind.ForKeyword,\r\n        \"from\": SyntaxKind.FromKeyword,\r\n        \"function\": SyntaxKind.FunctionKeyword,\r\n        \"get\": SyntaxKind.GetKeyword,\r\n        \"if\": SyntaxKind.IfKeyword,\r\n        \"implements\": SyntaxKind.ImplementsKeyword,\r\n        \"import\": SyntaxKind.ImportKeyword,\r\n        \"in\": SyntaxKind.InKeyword,\r\n        \"instanceof\": SyntaxKind.InstanceOfKeyword,\r\n        \"interface\": SyntaxKind.InterfaceKeyword,\r\n        \"is\": SyntaxKind.IsKeyword,\r\n        \"let\": SyntaxKind.LetKeyword,\r\n        \"module\": SyntaxKind.ModuleKeyword,\r\n        \"namespace\": SyntaxKind.NamespaceKeyword,\r\n        \"new\": SyntaxKind.NewKeyword,\r\n        \"null\": SyntaxKind.NullKeyword,\r\n        \"number\": SyntaxKind.NumberKeyword,\r\n        \"package\": SyntaxKind.PackageKeyword,\r\n        \"private\": SyntaxKind.PrivateKeyword,\r\n        \"protected\": SyntaxKind.ProtectedKeyword,\r\n        \"public\": SyntaxKind.PublicKeyword,\r\n        \"require\": SyntaxKind.RequireKeyword,\r\n        \"return\": SyntaxKind.ReturnKeyword,\r\n        \"set\": SyntaxKind.SetKeyword,\r\n        \"static\": SyntaxKind.StaticKeyword,\r\n        \"string\": SyntaxKind.StringKeyword,\r\n        \"super\": SyntaxKind.SuperKeyword,\r\n        \"switch\": SyntaxKind.SwitchKeyword,\r\n        \"symbol\": SyntaxKind.SymbolKeyword,\r\n        \"this\": SyntaxKind.ThisKeyword,\r\n        \"throw\": SyntaxKind.ThrowKeyword,\r\n        \"true\": SyntaxKind.TrueKeyword,\r\n        \"try\": SyntaxKind.TryKeyword,\r\n        \"type\": SyntaxKind.TypeKeyword,\r\n        \"typeof\": SyntaxKind.TypeOfKeyword,\r\n        \"var\": SyntaxKind.VarKeyword,\r\n        \"void\": SyntaxKind.VoidKeyword,\r\n        \"while\": SyntaxKind.WhileKeyword,\r\n        \"with\": SyntaxKind.WithKeyword,\r\n        \"yield\": SyntaxKind.YieldKeyword,\r\n        \"of\": SyntaxKind.OfKeyword,\r\n        \"{\": SyntaxKind.OpenBraceToken,\r\n        \"}\": SyntaxKind.CloseBraceToken,\r\n        \"(\": SyntaxKind.OpenParenToken,\r\n        \")\": SyntaxKind.CloseParenToken,\r\n        \"[\": SyntaxKind.OpenBracketToken,\r\n        \"]\": SyntaxKind.CloseBracketToken,\r\n        \".\": SyntaxKind.DotToken,\r\n        \"...\": SyntaxKind.DotDotDotToken,\r\n        \";\": SyntaxKind.SemicolonToken,\r\n        \",\": SyntaxKind.CommaToken,\r\n        \"<\": SyntaxKind.LessThanToken,\r\n        \">\": SyntaxKind.GreaterThanToken,\r\n        \"<=\": SyntaxKind.LessThanEqualsToken,\r\n        \">=\": SyntaxKind.GreaterThanEqualsToken,\r\n        \"==\": SyntaxKind.EqualsEqualsToken,\r\n        \"!=\": SyntaxKind.ExclamationEqualsToken,\r\n        \"===\": SyntaxKind.EqualsEqualsEqualsToken,\r\n        \"!==\": SyntaxKind.ExclamationEqualsEqualsToken,\r\n        \"=>\": SyntaxKind.EqualsGreaterThanToken,\r\n        \"+\": SyntaxKind.PlusToken,\r\n        \"-\": SyntaxKind.MinusToken,\r\n        \"*\": SyntaxKind.AsteriskToken,\r\n        \"/\": SyntaxKind.SlashToken,\r\n        \"%\": SyntaxKind.PercentToken,\r\n        \"++\": SyntaxKind.PlusPlusToken,\r\n        \"--\": SyntaxKind.MinusMinusToken,\r\n        \"<<\": SyntaxKind.LessThanLessThanToken,\r\n        \">>\": SyntaxKind.GreaterThanGreaterThanToken,\r\n        \">>>\": SyntaxKind.GreaterThanGreaterThanGreaterThanToken,\r\n        \"&\": SyntaxKind.AmpersandToken,\r\n        \"|\": SyntaxKind.BarToken,\r\n        \"^\": SyntaxKind.CaretToken,\r\n        \"!\": SyntaxKind.ExclamationToken,\r\n        \"~\": SyntaxKind.TildeToken,\r\n        \"&&\": SyntaxKind.AmpersandAmpersandToken,\r\n        \"||\": SyntaxKind.BarBarToken,\r\n        \"?\": SyntaxKind.QuestionToken,\r\n        \":\": SyntaxKind.ColonToken,\r\n        \"=\": SyntaxKind.EqualsToken,\r\n        \"+=\": SyntaxKind.PlusEqualsToken,\r\n        \"-=\": SyntaxKind.MinusEqualsToken,\r\n        \"*=\": SyntaxKind.AsteriskEqualsToken,\r\n        \"/=\": SyntaxKind.SlashEqualsToken,\r\n        \"%=\": SyntaxKind.PercentEqualsToken,\r\n        \"<<=\": SyntaxKind.LessThanLessThanEqualsToken,\r\n        \">>=\": SyntaxKind.GreaterThanGreaterThanEqualsToken,\r\n        \">>>=\": SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,\r\n        \"&=\": SyntaxKind.AmpersandEqualsToken,\r\n        \"|=\": SyntaxKind.BarEqualsToken,\r\n        \"^=\": SyntaxKind.CaretEqualsToken,\r\n        \"@\": SyntaxKind.AtToken,\r\n    };\r\n\r\n    /*\r\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\r\n        IdentifierStart ::\r\n            Can contain Unicode 3.0.0  categories:\r\n            Uppercase letter (Lu),\r\n            Lowercase letter (Ll),\r\n            Titlecase letter (Lt),\r\n            Modifier letter (Lm),\r\n            Other letter (Lo), or\r\n            Letter number (Nl).\r\n        IdentifierPart :: =\r\n            Can contain IdentifierStart + Unicode 3.0.0  categories:\r\n            Non-spacing mark (Mn),\r\n            Combining spacing mark (Mc),\r\n            Decimal number (Nd), or\r\n            Connector punctuation (Pc).\r\n\r\n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\r\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\r\n    */\r\n    let unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\r\n    let unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\r\n\r\n    /*\r\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: ISyntaxToken Names and Identifiers\r\n        IdentifierStart ::\r\n            Can contain Unicode 6.2  categories:\r\n            Uppercase letter (Lu),\r\n            Lowercase letter (Ll),\r\n            Titlecase letter (Lt),\r\n            Modifier letter (Lm),\r\n            Other letter (Lo), or\r\n            Letter number (Nl).\r\n        IdentifierPart ::\r\n            Can contain IdentifierStart + Unicode 6.2  categories:\r\n            Non-spacing mark (Mn),\r\n            Combining spacing mark (Mc),\r\n            Decimal number (Nd),\r\n            Connector punctuation (Pc),\r\n            <ZWNJ>, or\r\n            <ZWJ>.\r\n\r\n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\r\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\r\n    */\r\n    let unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\r\n    let unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\r\n\r\n    function lookupInUnicodeMap(code: number, map: number[]): boolean {\r\n        // Bail out quickly if it couldn't possibly be in the map.\r\n        if (code < map[0]) {\r\n            return false;\r\n        }\r\n\r\n        // Perform binary search in one of the Unicode range maps\r\n        let lo: number = 0;\r\n        let hi: number = map.length;\r\n        let mid: number;\r\n\r\n        while (lo + 1 < hi) {\r\n            mid = lo + (hi - lo) / 2;\r\n            // mid has to be even to catch a range's beginning\r\n            mid -= mid % 2;\r\n            if (map[mid] <= code && code <= map[mid + 1]) {\r\n                return true;\r\n            }\r\n\r\n            if (code < map[mid]) {\r\n                hi = mid;\r\n            }\r\n            else {\r\n                lo = mid + 2;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* @internal */ export function isUnicodeIdentifierStart(code: number, languageVersion: ScriptTarget) {\r\n        return languageVersion >= ScriptTarget.ES5 ?\r\n            lookupInUnicodeMap(code, unicodeES5IdentifierStart) :\r\n            lookupInUnicodeMap(code, unicodeES3IdentifierStart);\r\n    }\r\n\r\n    function isUnicodeIdentifierPart(code: number, languageVersion: ScriptTarget) {\r\n        return languageVersion >= ScriptTarget.ES5 ?\r\n            lookupInUnicodeMap(code, unicodeES5IdentifierPart) :\r\n            lookupInUnicodeMap(code, unicodeES3IdentifierPart);\r\n    }\r\n\r\n    function makeReverseMap(source: Map<number>): string[] {\r\n        let result: string[] = [];\r\n        for (let name in source) {\r\n            if (source.hasOwnProperty(name)) {\r\n                result[source[name]] = name;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    let tokenStrings = makeReverseMap(textToToken);\r\n\r\n    export function tokenToString(t: SyntaxKind): string {\r\n        return tokenStrings[t];\r\n    }\r\n\r\n    /* @internal */\r\n    export function stringToToken(s: string): SyntaxKind {\r\n        return textToToken[s];\r\n    }\r\n\r\n    /* @internal */ \r\n    export function computeLineStarts(text: string): number[] {\r\n        let result: number[] = new Array();\r\n        let pos = 0;\r\n        let lineStart = 0;\r\n        while (pos < text.length) {\r\n           let ch = text.charCodeAt(pos++);\r\n           switch (ch) {\r\n                case CharacterCodes.carriageReturn:\r\n                    if (text.charCodeAt(pos) === CharacterCodes.lineFeed) {\r\n                        pos++;\r\n                    }\r\n                case CharacterCodes.lineFeed:\r\n                    result.push(lineStart);\r\n                    lineStart = pos;\r\n                    break;\r\n                default:\r\n                    if (ch > CharacterCodes.maxAsciiCharacter && isLineBreak(ch)) {\r\n                        result.push(lineStart);\r\n                        lineStart = pos;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        result.push(lineStart);\r\n        return result;\r\n    }\r\n\r\n    export function getPositionOfLineAndCharacter(sourceFile: SourceFile, line: number, character: number): number {\r\n        return computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character);\r\n    }\r\n\r\n    /* @internal */ \r\n    export function computePositionOfLineAndCharacter(lineStarts: number[], line: number, character: number): number {\r\n        Debug.assert(line >= 0 && line < lineStarts.length);\r\n        return lineStarts[line] + character;\r\n    }\r\n\r\n    /* @internal */ \r\n    export function getLineStarts(sourceFile: SourceFile): number[] {\r\n        return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));\r\n    }\r\n\r\n    /* @internal */ \r\n    export function computeLineAndCharacterOfPosition(lineStarts: number[], position: number) {\r\n        let lineNumber = binarySearch(lineStarts, position);\r\n        if (lineNumber < 0) {\r\n            // If the actual position was not found, \r\n            // the binary search returns the negative value of the next line start\r\n            // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20\r\n            // then the search will return -2\r\n            lineNumber = ~lineNumber - 1;\r\n        }\r\n        return {\r\n            line: lineNumber,\r\n            character: position - lineStarts[lineNumber]\r\n        };\r\n    }\r\n\r\n    export function getLineAndCharacterOfPosition(sourceFile: SourceFile, position: number): LineAndCharacter {\r\n        return computeLineAndCharacterOfPosition(getLineStarts(sourceFile), position);\r\n    }\r\n\r\n    let hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n    export function isWhiteSpace(ch: number): boolean {\r\n        // Note: nextLine is in the Zs space, and should be considered to be a whitespace.\r\n        // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.\r\n        return ch === CharacterCodes.space ||\r\n            ch === CharacterCodes.tab ||\r\n            ch === CharacterCodes.verticalTab ||\r\n            ch === CharacterCodes.formFeed ||\r\n            ch === CharacterCodes.nonBreakingSpace ||\r\n            ch === CharacterCodes.nextLine ||\r\n            ch === CharacterCodes.ogham ||\r\n            ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace ||\r\n            ch === CharacterCodes.narrowNoBreakSpace ||\r\n            ch === CharacterCodes.mathematicalSpace ||\r\n            ch === CharacterCodes.ideographicSpace ||\r\n            ch === CharacterCodes.byteOrderMark;\r\n    }\r\n\r\n    export function isLineBreak(ch: number): boolean {\r\n        // ES5 7.3:\r\n        // The ECMAScript line terminator characters are listed in Table 3.\r\n        //     Table 3: Line Terminator Characters\r\n        //     Code Unit Value     Name                    Formal Name\r\n        //     \\u000A              Line Feed               <LF>\r\n        //     \\u000D              Carriage Return         <CR>\r\n        //     \\u2028              Line separator          <LS>\r\n        //     \\u2029              Paragraph separator     <PS>\r\n        // Only the characters in Table 3 are treated as line terminators. Other new line or line \r\n        // breaking characters are treated as white space but not as line terminators. \r\n\r\n        return ch === CharacterCodes.lineFeed ||\r\n            ch === CharacterCodes.carriageReturn ||\r\n            ch === CharacterCodes.lineSeparator ||\r\n            ch === CharacterCodes.paragraphSeparator;\r\n    }\r\n\r\n    function isDigit(ch: number): boolean {\r\n        return ch >= CharacterCodes._0 && ch <= CharacterCodes._9;\r\n    }\r\n\r\n    /* @internal */ \r\n    export function isOctalDigit(ch: number): boolean {\r\n        return ch >= CharacterCodes._0 && ch <= CharacterCodes._7;\r\n    }\r\n\r\n    /* @internal */ \r\n    export function skipTrivia(text: string, pos: number, stopAfterLineBreak?: boolean): number {\r\n        while (true) {\r\n            let ch = text.charCodeAt(pos);\r\n            switch (ch) {\r\n                case CharacterCodes.carriageReturn:\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.lineFeed) {\r\n                        pos++;\r\n                    }\r\n                case CharacterCodes.lineFeed:\r\n                    pos++;\r\n                    if (stopAfterLineBreak) {\r\n                        return pos;\r\n                    }\r\n                    continue;\r\n                case CharacterCodes.tab:\r\n                case CharacterCodes.verticalTab:\r\n                case CharacterCodes.formFeed:\r\n                case CharacterCodes.space:\r\n                    pos++;\r\n                    continue;\r\n                case CharacterCodes.slash:\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.slash) {\r\n                        pos += 2;\r\n                        while (pos < text.length) {\r\n                            if (isLineBreak(text.charCodeAt(pos))) {\r\n                                break;\r\n                            }\r\n                            pos++;\r\n                        }\r\n                        continue;\r\n                    }\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.asterisk) {\r\n                        pos += 2;\r\n                        while (pos < text.length) {\r\n                            if (text.charCodeAt(pos) === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {\r\n                                pos += 2;\r\n                                break;\r\n                            }\r\n                            pos++;\r\n                        }\r\n                        continue;\r\n                    }\r\n                    break;\r\n\r\n                case CharacterCodes.lessThan:\r\n                case CharacterCodes.equals:\r\n                case CharacterCodes.greaterThan:\r\n                    if (isConflictMarkerTrivia(text, pos)) {\r\n                        pos = scanConflictMarkerTrivia(text, pos);\r\n                        continue;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if (ch > CharacterCodes.maxAsciiCharacter && (isWhiteSpace(ch) || isLineBreak(ch))) {\r\n                        pos++;\r\n                        continue;\r\n                    }\r\n                    break;\r\n            }\r\n            return pos;\r\n        }\r\n    }\r\n\r\n    // All conflict markers consist of the same character repeated seven times.  If it is \r\n    // a <<<<<<< or >>>>>>> marker then it is also followd by a space.\r\n    let mergeConflictMarkerLength = \"<<<<<<<\".length;\r\n\r\n    function isConflictMarkerTrivia(text: string, pos: number) {\r\n        Debug.assert(pos >= 0);\r\n\r\n        // Conflict markers must be at the start of a line.\r\n        if (pos === 0 || isLineBreak(text.charCodeAt(pos - 1))) {\r\n            let ch = text.charCodeAt(pos);\r\n\r\n            if ((pos + mergeConflictMarkerLength) < text.length) {\r\n                for (let i = 0, n = mergeConflictMarkerLength; i < n; i++) {\r\n                    if (text.charCodeAt(pos + i) !== ch) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return ch === CharacterCodes.equals ||\r\n                    text.charCodeAt(pos + mergeConflictMarkerLength) === CharacterCodes.space;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function scanConflictMarkerTrivia(text: string, pos: number, error?: ErrorCallback) {\r\n        if (error) {\r\n            error(Diagnostics.Merge_conflict_marker_encountered, mergeConflictMarkerLength);\r\n        }\r\n\r\n        let ch = text.charCodeAt(pos);\r\n        let len = text.length;\r\n\r\n        if (ch === CharacterCodes.lessThan || ch === CharacterCodes.greaterThan) {\r\n            while (pos < len && !isLineBreak(text.charCodeAt(pos))) {\r\n                pos++;\r\n            }\r\n        }\r\n        else {\r\n            Debug.assert(ch === CharacterCodes.equals);\r\n            // Consume everything from the start of the mid-conlict marker to the start of the next\r\n            // end-conflict marker.\r\n            while (pos < len) {\r\n                let ch = text.charCodeAt(pos);\r\n                if (ch === CharacterCodes.greaterThan && isConflictMarkerTrivia(text, pos)) {\r\n                    break;\r\n                }\r\n\r\n                pos++;\r\n            }\r\n        }\r\n\r\n        return pos;\r\n    }\r\n\r\n    // Extract comments from the given source text starting at the given position. If trailing is \r\n    // false, whitespace is skipped until the first line break and comments between that location \r\n    // and the next token are returned.If trailing is true, comments occurring between the given \r\n    // position and the next line break are returned.The return value is an array containing a \r\n    // TextRange for each comment. Single-line comment ranges include the beginning '//' characters \r\n    // but not the ending line break. Multi - line comment ranges include the beginning '/* and \r\n    // ending '*/' characters.The return value is undefined if no comments were found.\r\n    function getCommentRanges(text: string, pos: number, trailing: boolean): CommentRange[] {\r\n        let result: CommentRange[];\r\n        let collecting = trailing || pos === 0;\r\n        while (true) {\r\n            let ch = text.charCodeAt(pos);\r\n            switch (ch) {\r\n                case CharacterCodes.carriageReturn:\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.lineFeed) {\r\n                        pos++;\r\n                    }\r\n                case CharacterCodes.lineFeed:\r\n                    pos++;\r\n                    if (trailing) {\r\n                        return result;\r\n                    }\r\n                    collecting = true;\r\n                    if (result && result.length) {\r\n                        lastOrUndefined(result).hasTrailingNewLine = true;\r\n                    }\r\n                    continue;\r\n                case CharacterCodes.tab:\r\n                case CharacterCodes.verticalTab:\r\n                case CharacterCodes.formFeed:\r\n                case CharacterCodes.space:\r\n                    pos++;\r\n                    continue;\r\n                case CharacterCodes.slash:\r\n                    let nextChar = text.charCodeAt(pos + 1);\r\n                    let hasTrailingNewLine = false;\r\n                    if (nextChar === CharacterCodes.slash || nextChar === CharacterCodes.asterisk) {\r\n                        let kind = nextChar === CharacterCodes.slash ? SyntaxKind.SingleLineCommentTrivia : SyntaxKind.MultiLineCommentTrivia;\r\n                        let startPos = pos;\r\n                        pos += 2;\r\n                        if (nextChar === CharacterCodes.slash) {\r\n                            while (pos < text.length) {\r\n                                if (isLineBreak(text.charCodeAt(pos))) {\r\n                                    hasTrailingNewLine = true;\r\n                                    break;\r\n                                }\r\n                                pos++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            while (pos < text.length) {\r\n                                if (text.charCodeAt(pos) === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {\r\n                                    pos += 2;\r\n                                    break;\r\n                                }\r\n                                pos++;\r\n                            }\r\n                        }\r\n                        if (collecting) {\r\n                            if (!result) {\r\n                                result = [];\r\n                            }\r\n\r\n                            result.push({ pos: startPos, end: pos, hasTrailingNewLine, kind });\r\n                        }\r\n                        continue;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (ch > CharacterCodes.maxAsciiCharacter && (isWhiteSpace(ch) || isLineBreak(ch))) {\r\n                        if (result && result.length && isLineBreak(ch)) {\r\n                            lastOrUndefined(result).hasTrailingNewLine = true;\r\n                        }\r\n                        pos++;\r\n                        continue;\r\n                    }\r\n                    break;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export function getLeadingCommentRanges(text: string, pos: number): CommentRange[] {\r\n        return getCommentRanges(text, pos, /*trailing*/ false);\r\n    }\r\n\r\n    export function getTrailingCommentRanges(text: string, pos: number): CommentRange[] {\r\n        return getCommentRanges(text, pos, /*trailing*/ true);\r\n    }\r\n\r\n    export function isIdentifierStart(ch: number, languageVersion: ScriptTarget): boolean {\r\n        return ch >= CharacterCodes.A && ch <= CharacterCodes.Z || ch >= CharacterCodes.a && ch <= CharacterCodes.z ||\r\n            ch === CharacterCodes.$ || ch === CharacterCodes._ ||\r\n            ch > CharacterCodes.maxAsciiCharacter && isUnicodeIdentifierStart(ch, languageVersion);\r\n    }\r\n\r\n    export function isIdentifierPart(ch: number, languageVersion: ScriptTarget): boolean {\r\n        return ch >= CharacterCodes.A && ch <= CharacterCodes.Z || ch >= CharacterCodes.a && ch <= CharacterCodes.z ||\r\n            ch >= CharacterCodes._0 && ch <= CharacterCodes._9 || ch === CharacterCodes.$ || ch === CharacterCodes._ ||\r\n            ch > CharacterCodes.maxAsciiCharacter && isUnicodeIdentifierPart(ch, languageVersion);\r\n    }\r\n\r\n    /* @internal */ \r\n    // Creates a scanner over a (possibly unspecified) range of a piece of text.\r\n    export function createScanner(languageVersion: ScriptTarget,\r\n                                  skipTrivia: boolean,\r\n                                  text?: string,\r\n                                  onError?: ErrorCallback,\r\n                                  start?: number,\r\n                                  length?: number): Scanner {\r\n        // Current position (end position of text of current token)\r\n        let pos: number;       \r\n\r\n        // end of text\r\n        let end: number;       \r\n\r\n        // Start position of whitespace before current token\r\n        let startPos: number;  \r\n\r\n        // Start position of text of current token\r\n        let tokenPos: number;  \r\n\r\n        let token: SyntaxKind;\r\n        let tokenValue: string;\r\n        let precedingLineBreak: boolean;\r\n        let hasExtendedUnicodeEscape: boolean;\r\n        let tokenIsUnterminated: boolean;\r\n\r\n        setText(text, start, length);\r\n\r\n        return {\r\n            getStartPos: () => startPos,\r\n            getTextPos: () => pos,\r\n            getToken: () => token,\r\n            getTokenPos: () => tokenPos,\r\n            getTokenText: () => text.substring(tokenPos, pos),\r\n            getTokenValue: () => tokenValue,\r\n            hasExtendedUnicodeEscape: () => hasExtendedUnicodeEscape,\r\n            hasPrecedingLineBreak: () => precedingLineBreak,\r\n            isIdentifier: () => token === SyntaxKind.Identifier || token > SyntaxKind.LastReservedWord,\r\n            isReservedWord: () => token >= SyntaxKind.FirstReservedWord && token <= SyntaxKind.LastReservedWord,\r\n            isUnterminated: () => tokenIsUnterminated,\r\n            reScanGreaterToken,\r\n            reScanSlashToken,\r\n            reScanTemplateToken,\r\n            scan,\r\n            setText,\r\n            setScriptTarget,\r\n            setOnError,\r\n            setTextPos,\r\n            tryScan,\r\n            lookAhead,\r\n        };\r\n\r\n        function error(message: DiagnosticMessage, length?: number): void {\r\n            if (onError) {\r\n                onError(message, length || 0);\r\n            }\r\n        }\r\n\r\n        function isIdentifierStart(ch: number): boolean {\r\n            return ch >= CharacterCodes.A && ch <= CharacterCodes.Z || ch >= CharacterCodes.a && ch <= CharacterCodes.z ||\r\n                ch === CharacterCodes.$ || ch === CharacterCodes._ ||\r\n                ch > CharacterCodes.maxAsciiCharacter && isUnicodeIdentifierStart(ch, languageVersion);\r\n        }\r\n\r\n        function isIdentifierPart(ch: number): boolean {\r\n            return ch >= CharacterCodes.A && ch <= CharacterCodes.Z || ch >= CharacterCodes.a && ch <= CharacterCodes.z ||\r\n                ch >= CharacterCodes._0 && ch <= CharacterCodes._9 || ch === CharacterCodes.$ || ch === CharacterCodes._ ||\r\n                ch > CharacterCodes.maxAsciiCharacter && isUnicodeIdentifierPart(ch, languageVersion);\r\n        }\r\n\r\n        function scanNumber(): number {\r\n            let start = pos;\r\n            while (isDigit(text.charCodeAt(pos))) pos++;\r\n            if (text.charCodeAt(pos) === CharacterCodes.dot) {\r\n                pos++;\r\n                while (isDigit(text.charCodeAt(pos))) pos++;\r\n            }\r\n            let end = pos;\r\n            if (text.charCodeAt(pos) === CharacterCodes.E || text.charCodeAt(pos) === CharacterCodes.e) {\r\n                pos++;\r\n                if (text.charCodeAt(pos) === CharacterCodes.plus || text.charCodeAt(pos) === CharacterCodes.minus) pos++;\r\n                if (isDigit(text.charCodeAt(pos))) {\r\n                    pos++;\r\n                    while (isDigit(text.charCodeAt(pos))) pos++;\r\n                    end = pos;\r\n                }\r\n                else {\r\n                    error(Diagnostics.Digit_expected);\r\n                }\r\n            }\r\n            return +(text.substring(start, end));\r\n        }\r\n\r\n        function scanOctalDigits(): number {\r\n            let start = pos;\r\n            while (isOctalDigit(text.charCodeAt(pos))) {\r\n                pos++;\r\n            }\r\n            return +(text.substring(start, pos));\r\n        }\r\n        \r\n        /**\r\n         * Scans the given number of hexadecimal digits in the text,\r\n         * returning -1 if the given number is unavailable.\r\n         */\r\n        function scanExactNumberOfHexDigits(count: number): number {\r\n            return scanHexDigits(/*minCount*/ count, /*scanAsManyAsPossible*/ false);\r\n        }\r\n        \r\n        /**\r\n         * Scans as many hexadecimal digits as are available in the text,\r\n         * returning -1 if the given number of digits was unavailable.\r\n         */\r\n        function scanMinimumNumberOfHexDigits(count: number): number {\r\n            return scanHexDigits(/*minCount*/ count, /*scanAsManyAsPossible*/ true);\r\n        }\r\n\r\n        function scanHexDigits(minCount: number, scanAsManyAsPossible: boolean): number {\r\n            let digits = 0;\r\n            let value = 0;\r\n            while (digits < minCount || scanAsManyAsPossible) {\r\n                let ch = text.charCodeAt(pos);\r\n                if (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {\r\n                    value = value * 16 + ch - CharacterCodes._0;\r\n                }\r\n                else if (ch >= CharacterCodes.A && ch <= CharacterCodes.F) {\r\n                    value = value * 16 + ch - CharacterCodes.A + 10;\r\n                }\r\n                else if (ch >= CharacterCodes.a && ch <= CharacterCodes.f) {\r\n                    value = value * 16 + ch - CharacterCodes.a + 10;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                pos++;\r\n                digits++;\r\n            }\r\n            if (digits < minCount) {\r\n                value = -1;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        function scanString(): string {\r\n            let quote = text.charCodeAt(pos++);\r\n            let result = \"\";\r\n            let start = pos;\r\n            while (true) {\r\n                if (pos >= end) {\r\n                    result += text.substring(start, pos);\r\n                    tokenIsUnterminated = true;\r\n                    error(Diagnostics.Unterminated_string_literal);\r\n                    break;\r\n                }\r\n                let ch = text.charCodeAt(pos);\r\n                if (ch === quote) {\r\n                    result += text.substring(start, pos);\r\n                    pos++;\r\n                    break;\r\n                }\r\n                if (ch === CharacterCodes.backslash) {\r\n                    result += text.substring(start, pos);\r\n                    result += scanEscapeSequence();\r\n                    start = pos;\r\n                    continue;\r\n                }\r\n                if (isLineBreak(ch)) {\r\n                    result += text.substring(start, pos);\r\n                    tokenIsUnterminated = true;\r\n                    error(Diagnostics.Unterminated_string_literal);\r\n                    break;\r\n                }\r\n                pos++;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Sets the current 'tokenValue' and returns a NoSubstitutionTemplateLiteral or\r\n         * a literal component of a TemplateExpression.\r\n         */\r\n        function scanTemplateAndSetTokenValue(): SyntaxKind {\r\n            let startedWithBacktick = text.charCodeAt(pos) === CharacterCodes.backtick;\r\n\r\n            pos++;\r\n            let start = pos;\r\n            let contents = \"\"\r\n            let resultingToken: SyntaxKind;\r\n\r\n            while (true) {\r\n                if (pos >= end) {\r\n                    contents += text.substring(start, pos);\r\n                    tokenIsUnterminated = true;\r\n                    error(Diagnostics.Unterminated_template_literal);\r\n                    resultingToken = startedWithBacktick ? SyntaxKind.NoSubstitutionTemplateLiteral : SyntaxKind.TemplateTail;\r\n                    break;\r\n                }\r\n\r\n                let currChar = text.charCodeAt(pos);\r\n\r\n                // '`'\r\n                if (currChar === CharacterCodes.backtick) {\r\n                    contents += text.substring(start, pos);\r\n                    pos++;\r\n                    resultingToken = startedWithBacktick ? SyntaxKind.NoSubstitutionTemplateLiteral : SyntaxKind.TemplateTail;\r\n                    break;\r\n                }\r\n\r\n                // '${'\r\n                if (currChar === CharacterCodes.$ && pos + 1 < end && text.charCodeAt(pos + 1) === CharacterCodes.openBrace) {\r\n                    contents += text.substring(start, pos);\r\n                    pos += 2;\r\n                    resultingToken = startedWithBacktick ? SyntaxKind.TemplateHead : SyntaxKind.TemplateMiddle;\r\n                    break;\r\n                }\r\n\r\n                // Escape character\r\n                if (currChar === CharacterCodes.backslash) {\r\n                    contents += text.substring(start, pos);\r\n                    contents += scanEscapeSequence();\r\n                    start = pos;\r\n                    continue;\r\n                }\r\n\r\n                // Speculated ECMAScript 6 Spec 11.8.6.1:\r\n                // <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for Template Values\r\n                if (currChar === CharacterCodes.carriageReturn) {\r\n                    contents += text.substring(start, pos);\r\n                    pos++;\r\n\r\n                    if (pos < end && text.charCodeAt(pos) === CharacterCodes.lineFeed) {\r\n                        pos++;\r\n                    }\r\n\r\n                    contents += \"\\n\";\r\n                    start = pos;\r\n                    continue;\r\n                }\r\n\r\n                pos++;\r\n            }\r\n\r\n            Debug.assert(resultingToken !== undefined);\r\n\r\n            tokenValue = contents;\r\n            return resultingToken;\r\n        }\r\n\r\n        function scanEscapeSequence(): string {\r\n            pos++;\r\n            if (pos >= end) {\r\n                error(Diagnostics.Unexpected_end_of_text);\r\n                return \"\";\r\n            }\r\n            let ch = text.charCodeAt(pos++);\r\n            switch (ch) {\r\n                case CharacterCodes._0:\r\n                    return \"\\0\";\r\n                case CharacterCodes.b:\r\n                    return \"\\b\";\r\n                case CharacterCodes.t:\r\n                    return \"\\t\";\r\n                case CharacterCodes.n:\r\n                    return \"\\n\";\r\n                case CharacterCodes.v:\r\n                    return \"\\v\";\r\n                case CharacterCodes.f:\r\n                    return \"\\f\";\r\n                case CharacterCodes.r:\r\n                    return \"\\r\";\r\n                case CharacterCodes.singleQuote:\r\n                    return \"\\'\";\r\n                case CharacterCodes.doubleQuote:\r\n                    return \"\\\"\";\r\n                case CharacterCodes.u:\r\n                    // '\\u{DDDDDDDD}'\r\n                    if (pos < end && text.charCodeAt(pos) === CharacterCodes.openBrace) {\r\n                        hasExtendedUnicodeEscape = true;\r\n                        pos++;\r\n                        return scanExtendedUnicodeEscape();\r\n                    }\r\n                    \r\n                    // '\\uDDDD'\r\n                    return scanHexadecimalEscape(/*numDigits*/ 4)\r\n                    \r\n                case CharacterCodes.x:\r\n                    // '\\xDD'\r\n                    return scanHexadecimalEscape(/*numDigits*/ 2)\r\n\r\n                // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),\r\n                // the line terminator is interpreted to be \"the empty code unit sequence\".\r\n                case CharacterCodes.carriageReturn:\r\n                    if (pos < end && text.charCodeAt(pos) === CharacterCodes.lineFeed) {\r\n                        pos++;\r\n                    }\r\n                    // fall through\r\n                case CharacterCodes.lineFeed:\r\n                case CharacterCodes.lineSeparator:\r\n                case CharacterCodes.paragraphSeparator:\r\n                    return \"\"\r\n                default:\r\n                    return String.fromCharCode(ch);\r\n            }\r\n        }\r\n        \r\n        function scanHexadecimalEscape(numDigits: number): string {\r\n            let escapedValue = scanExactNumberOfHexDigits(numDigits);\r\n            \r\n            if (escapedValue >= 0) {\r\n                return String.fromCharCode(escapedValue);\r\n            }\r\n            else {\r\n                error(Diagnostics.Hexadecimal_digit_expected);\r\n                return \"\"\r\n            }\r\n        }\r\n        \r\n        function scanExtendedUnicodeEscape(): string {\r\n            let escapedValue = scanMinimumNumberOfHexDigits(1);\r\n            let isInvalidExtendedEscape = false;\r\n\r\n            // Validate the value of the digit\r\n            if (escapedValue < 0) {\r\n                error(Diagnostics.Hexadecimal_digit_expected)\r\n                isInvalidExtendedEscape = true;\r\n            }\r\n            else if (escapedValue > 0x10FFFF) {\r\n                error(Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\r\n                isInvalidExtendedEscape = true;\r\n            }\r\n\r\n            if (pos >= end) {\r\n                error(Diagnostics.Unexpected_end_of_text);\r\n                isInvalidExtendedEscape = true;\r\n            }\r\n            else if (text.charCodeAt(pos) == CharacterCodes.closeBrace) {\r\n                // Only swallow the following character up if it's a '}'.\r\n                pos++;\r\n            }\r\n            else {\r\n                error(Diagnostics.Unterminated_Unicode_escape_sequence);\r\n                isInvalidExtendedEscape = true;\r\n            }\r\n\r\n            if (isInvalidExtendedEscape) {\r\n                return \"\";\r\n            }\r\n\r\n            return utf16EncodeAsString(escapedValue);\r\n        }\r\n        \r\n        // Derived from the 10.1.1 UTF16Encoding of the ES6 Spec.\r\n        function utf16EncodeAsString(codePoint: number): string {\r\n            Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);\r\n            \r\n            if (codePoint <= 65535) {\r\n                return String.fromCharCode(codePoint);\r\n            }\r\n            \r\n            let codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;\r\n            let codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;\r\n            \r\n            return String.fromCharCode(codeUnit1, codeUnit2);\r\n        }\r\n\r\n        // Current character is known to be a backslash. Check for Unicode escape of the form '\\uXXXX'\r\n        // and return code point value if valid Unicode escape is found. Otherwise return -1.\r\n        function peekUnicodeEscape(): number {\r\n            if (pos + 5 < end && text.charCodeAt(pos + 1) === CharacterCodes.u) {\r\n                let start = pos;\r\n                pos += 2;\r\n                let value = scanExactNumberOfHexDigits(4);\r\n                pos = start;\r\n                return value;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function scanIdentifierParts(): string {\r\n            let result = \"\";\r\n            let start = pos;\r\n            while (pos < end) {\r\n                let ch = text.charCodeAt(pos);\r\n                if (isIdentifierPart(ch)) {\r\n                    pos++;\r\n                }\r\n                else if (ch === CharacterCodes.backslash) {\r\n                    ch = peekUnicodeEscape();\r\n                    if (!(ch >= 0 && isIdentifierPart(ch))) {\r\n                        break;\r\n                    }\r\n                    result += text.substring(start, pos);\r\n                    result += String.fromCharCode(ch);\r\n                    // Valid Unicode escape is always six characters\r\n                    pos += 6;\r\n                    start = pos;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            result += text.substring(start, pos);\r\n            return result;\r\n        }\r\n\r\n        function getIdentifierToken(): SyntaxKind {\r\n            // Reserved words are between 2 and 11 characters long and start with a lowercase letter\r\n            let len = tokenValue.length;\r\n            if (len >= 2 && len <= 11) {\r\n                let ch = tokenValue.charCodeAt(0);\r\n                if (ch >= CharacterCodes.a && ch <= CharacterCodes.z && hasOwnProperty.call(textToToken, tokenValue)) {\r\n                    return token = textToToken[tokenValue];\r\n                }\r\n            }\r\n            return token = SyntaxKind.Identifier;\r\n        }\r\n\r\n        function scanBinaryOrOctalDigits(base: number): number {\r\n            Debug.assert(base !== 2 || base !== 8, \"Expected either base 2 or base 8\");\r\n\r\n            let value = 0;\r\n            // For counting number of digits; Valid binaryIntegerLiteral must have at least one binary digit following B or b.\r\n            // Similarly valid octalIntegerLiteral must have at least one octal digit following o or O.\r\n            let numberOfDigits = 0;  \r\n            while (true) {\r\n                let ch = text.charCodeAt(pos);\r\n                let valueOfCh = ch - CharacterCodes._0;\r\n                if (!isDigit(ch) || valueOfCh >= base) {\r\n                    break;\r\n                }\r\n                value = value * base + valueOfCh;\r\n                pos++;\r\n                numberOfDigits++;\r\n            }\r\n            // Invalid binaryIntegerLiteral or octalIntegerLiteral\r\n            if (numberOfDigits === 0) {\r\n                return -1;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        function scan(): SyntaxKind {\r\n            startPos = pos;\r\n            hasExtendedUnicodeEscape = false;\r\n            precedingLineBreak = false;\r\n            tokenIsUnterminated = false;\r\n            while (true) {\r\n                tokenPos = pos;\r\n                if (pos >= end) {\r\n                    return token = SyntaxKind.EndOfFileToken;\r\n                }\r\n                let ch = text.charCodeAt(pos);\r\n                switch (ch) {\r\n                    case CharacterCodes.lineFeed:\r\n                    case CharacterCodes.carriageReturn:\r\n                        precedingLineBreak = true;\r\n                        if (skipTrivia) {\r\n                            pos++;\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            if (ch === CharacterCodes.carriageReturn && pos + 1 < end && text.charCodeAt(pos + 1) === CharacterCodes.lineFeed) {\r\n                                // consume both CR and LF\r\n                                pos += 2;\r\n                            }\r\n                            else {\r\n                                pos++;\r\n                            }\r\n                            return token = SyntaxKind.NewLineTrivia;\r\n                        }\r\n                    case CharacterCodes.tab:\r\n                    case CharacterCodes.verticalTab:\r\n                    case CharacterCodes.formFeed:\r\n                    case CharacterCodes.space:\r\n                        if (skipTrivia) {\r\n                            pos++;\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            while (pos < end && isWhiteSpace(text.charCodeAt(pos))) {\r\n                                pos++;\r\n                            }\r\n                            return token = SyntaxKind.WhitespaceTrivia;\r\n                        }\r\n                    case CharacterCodes.exclamation:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            if (text.charCodeAt(pos + 2) === CharacterCodes.equals) {\r\n                                return pos += 3, token = SyntaxKind.ExclamationEqualsEqualsToken;\r\n                            }\r\n                            return pos += 2, token = SyntaxKind.ExclamationEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.ExclamationToken;\r\n                    case CharacterCodes.doubleQuote:\r\n                    case CharacterCodes.singleQuote:\r\n                        tokenValue = scanString();\r\n                        return token = SyntaxKind.StringLiteral;\r\n                    case CharacterCodes.backtick:\r\n                        return token = scanTemplateAndSetTokenValue()\r\n                    case CharacterCodes.percent:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.PercentEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.PercentToken;\r\n                    case CharacterCodes.ampersand:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.ampersand) {\r\n                            return pos += 2, token = SyntaxKind.AmpersandAmpersandToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.AmpersandEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.AmpersandToken;\r\n                    case CharacterCodes.openParen:\r\n                        return pos++, token = SyntaxKind.OpenParenToken;\r\n                    case CharacterCodes.closeParen:\r\n                        return pos++, token = SyntaxKind.CloseParenToken;\r\n                    case CharacterCodes.asterisk:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.AsteriskEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.AsteriskToken;\r\n                    case CharacterCodes.plus:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.plus) {\r\n                            return pos += 2, token = SyntaxKind.PlusPlusToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.PlusEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.PlusToken;\r\n                    case CharacterCodes.comma:\r\n                        return pos++, token = SyntaxKind.CommaToken;\r\n                    case CharacterCodes.minus:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.minus) {\r\n                            return pos += 2, token = SyntaxKind.MinusMinusToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.MinusEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.MinusToken;\r\n                    case CharacterCodes.dot:\r\n                        if (isDigit(text.charCodeAt(pos + 1))) {\r\n                            tokenValue = \"\" + scanNumber();\r\n                            return token = SyntaxKind.NumericLiteral;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.dot && text.charCodeAt(pos + 2) === CharacterCodes.dot) {\r\n                            return pos += 3, token = SyntaxKind.DotDotDotToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.DotToken;\r\n                    case CharacterCodes.slash:\r\n                        // Single-line comment\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.slash) {\r\n                            pos += 2;\r\n\r\n                            while (pos < end) {\r\n                                if (isLineBreak(text.charCodeAt(pos))) {\r\n                                    break;\r\n                                }\r\n                                pos++;\r\n\r\n                            }\r\n\r\n                            if (skipTrivia) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                return token = SyntaxKind.SingleLineCommentTrivia;\r\n                            }\r\n                        }\r\n                        // Multi-line comment\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.asterisk) {\r\n                            pos += 2;\r\n\r\n                            let commentClosed = false;\r\n                            while (pos < end) {\r\n                                let ch = text.charCodeAt(pos);\r\n\r\n                                if (ch === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {\r\n                                    pos += 2;\r\n                                    commentClosed = true;\r\n                                    break;\r\n                                }\r\n\r\n                                if (isLineBreak(ch)) {\r\n                                    precedingLineBreak = true;\r\n                                }\r\n                                pos++;\r\n                            }\r\n\r\n                            if (!commentClosed) {\r\n                                error(Diagnostics.Asterisk_Slash_expected);\r\n                            }\r\n\r\n                            if (skipTrivia) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                tokenIsUnterminated = !commentClosed;\r\n                                return token = SyntaxKind.MultiLineCommentTrivia;\r\n                            }\r\n                        }\r\n\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.SlashEqualsToken;\r\n                        }\r\n\r\n                        return pos++, token = SyntaxKind.SlashToken;\r\n\r\n                    case CharacterCodes._0:\r\n                        if (pos + 2 < end && (text.charCodeAt(pos + 1) === CharacterCodes.X || text.charCodeAt(pos + 1) === CharacterCodes.x)) {\r\n                            pos += 2;\r\n                            let value = scanMinimumNumberOfHexDigits(1);\r\n                            if (value < 0) {\r\n                                error(Diagnostics.Hexadecimal_digit_expected);\r\n                                value = 0;\r\n                            }\r\n                            tokenValue = \"\" + value;\r\n                            return token = SyntaxKind.NumericLiteral;\r\n                        }\r\n                        else if (pos + 2 < end && (text.charCodeAt(pos + 1) === CharacterCodes.B || text.charCodeAt(pos + 1) === CharacterCodes.b)) {\r\n                            pos += 2;\r\n                            let value = scanBinaryOrOctalDigits(/* base */ 2);\r\n                            if (value < 0) {\r\n                                error(Diagnostics.Binary_digit_expected);\r\n                                value = 0;\r\n                            }\r\n                            tokenValue = \"\" + value;\r\n                            return token = SyntaxKind.NumericLiteral;\r\n                        }\r\n                        else if (pos + 2 < end && (text.charCodeAt(pos + 1) === CharacterCodes.O || text.charCodeAt(pos + 1) === CharacterCodes.o)) {\r\n                            pos += 2;\r\n                            let value = scanBinaryOrOctalDigits(/* base */ 8);\r\n                            if (value < 0) {\r\n                                error(Diagnostics.Octal_digit_expected);\r\n                                value = 0;\r\n                            }\r\n                            tokenValue = \"\" + value;\r\n                            return token = SyntaxKind.NumericLiteral;\r\n                        }\r\n                        // Try to parse as an octal\r\n                        if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\r\n                            tokenValue = \"\" + scanOctalDigits();\r\n                            return token = SyntaxKind.NumericLiteral;\r\n                        }\r\n                        // This fall-through is a deviation from the EcmaScript grammar. The grammar says that a leading zero\r\n                        // can only be followed by an octal digit, a dot, or the end of the number literal. However, we are being\r\n                        // permissive and allowing decimal digits of the form 08* and 09* (which many browsers also do).\r\n                    case CharacterCodes._1:\r\n                    case CharacterCodes._2:\r\n                    case CharacterCodes._3:\r\n                    case CharacterCodes._4:\r\n                    case CharacterCodes._5:\r\n                    case CharacterCodes._6:\r\n                    case CharacterCodes._7:\r\n                    case CharacterCodes._8:\r\n                    case CharacterCodes._9:\r\n                        tokenValue = \"\" + scanNumber();\r\n                        return token = SyntaxKind.NumericLiteral;\r\n                    case CharacterCodes.colon:\r\n                        return pos++, token = SyntaxKind.ColonToken;\r\n                    case CharacterCodes.semicolon:\r\n                        return pos++, token = SyntaxKind.SemicolonToken;\r\n                    case CharacterCodes.lessThan:\r\n                        if (isConflictMarkerTrivia(text, pos)) {\r\n                            pos = scanConflictMarkerTrivia(text, pos, error);\r\n                            if (skipTrivia) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                return token = SyntaxKind.ConflictMarkerTrivia;\r\n                            }\r\n                        }\r\n\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.lessThan) {\r\n                            if (text.charCodeAt(pos + 2) === CharacterCodes.equals) {\r\n                                return pos += 3, token = SyntaxKind.LessThanLessThanEqualsToken;\r\n                            }\r\n                            return pos += 2, token = SyntaxKind.LessThanLessThanToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.LessThanEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.LessThanToken;\r\n                    case CharacterCodes.equals:\r\n                        if (isConflictMarkerTrivia(text, pos)) {\r\n                            pos = scanConflictMarkerTrivia(text, pos, error);\r\n                            if (skipTrivia) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                return token = SyntaxKind.ConflictMarkerTrivia;\r\n                            }\r\n                        }\r\n\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            if (text.charCodeAt(pos + 2) === CharacterCodes.equals) {\r\n                                return pos += 3, token = SyntaxKind.EqualsEqualsEqualsToken;\r\n                            }\r\n                            return pos += 2, token = SyntaxKind.EqualsEqualsToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.greaterThan) {\r\n                            return pos += 2, token = SyntaxKind.EqualsGreaterThanToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.EqualsToken;\r\n                    case CharacterCodes.greaterThan:\r\n                        if (isConflictMarkerTrivia(text, pos)) {\r\n                            pos = scanConflictMarkerTrivia(text, pos, error);\r\n                            if (skipTrivia) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                return token = SyntaxKind.ConflictMarkerTrivia;\r\n                            }\r\n                        }\r\n\r\n                        return pos++, token = SyntaxKind.GreaterThanToken;\r\n                    case CharacterCodes.question:\r\n                        return pos++, token = SyntaxKind.QuestionToken;\r\n                    case CharacterCodes.openBracket:\r\n                        return pos++, token = SyntaxKind.OpenBracketToken;\r\n                    case CharacterCodes.closeBracket:\r\n                        return pos++, token = SyntaxKind.CloseBracketToken;\r\n                    case CharacterCodes.caret:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.CaretEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.CaretToken;\r\n                    case CharacterCodes.openBrace:\r\n                        return pos++, token = SyntaxKind.OpenBraceToken;\r\n                    case CharacterCodes.bar:\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.bar) {\r\n                            return pos += 2, token = SyntaxKind.BarBarToken;\r\n                        }\r\n                        if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                            return pos += 2, token = SyntaxKind.BarEqualsToken;\r\n                        }\r\n                        return pos++, token = SyntaxKind.BarToken;\r\n                    case CharacterCodes.closeBrace:\r\n                        return pos++, token = SyntaxKind.CloseBraceToken;\r\n                    case CharacterCodes.tilde:\r\n                        return pos++, token = SyntaxKind.TildeToken;\r\n                    case CharacterCodes.at:\r\n                        return pos++, token = SyntaxKind.AtToken;\r\n                    case CharacterCodes.backslash:\r\n                        let cookedChar = peekUnicodeEscape();\r\n                        if (cookedChar >= 0 && isIdentifierStart(cookedChar)) {\r\n                            pos += 6;\r\n                            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\r\n                            return token = getIdentifierToken();\r\n                        }\r\n                        error(Diagnostics.Invalid_character);\r\n                        return pos++, token = SyntaxKind.Unknown;\r\n                    default:\r\n                        if (isIdentifierStart(ch)) {\r\n                            pos++;\r\n                            while (pos < end && isIdentifierPart(ch = text.charCodeAt(pos))) pos++;\r\n                            tokenValue = text.substring(tokenPos, pos);\r\n                            if (ch === CharacterCodes.backslash) {\r\n                                tokenValue += scanIdentifierParts();\r\n                            }\r\n                            return token = getIdentifierToken();\r\n                        }\r\n                        else if (isWhiteSpace(ch)) {\r\n                            pos++;\r\n                            continue;\r\n                        }\r\n                        else if (isLineBreak(ch)) {\r\n                            precedingLineBreak = true;\r\n                            pos++;\r\n                            continue;\r\n                        }\r\n                        error(Diagnostics.Invalid_character);\r\n                        return pos++, token = SyntaxKind.Unknown;\r\n                }\r\n            }\r\n        }\r\n\r\n        function reScanGreaterToken(): SyntaxKind {\r\n            if (token === SyntaxKind.GreaterThanToken) {\r\n                if (text.charCodeAt(pos) === CharacterCodes.greaterThan) {\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.greaterThan) {\r\n                        if (text.charCodeAt(pos + 2) === CharacterCodes.equals) {\r\n                            return pos += 3, token = SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken;\r\n                        }\r\n                        return pos += 2, token = SyntaxKind.GreaterThanGreaterThanGreaterThanToken;\r\n                    }\r\n                    if (text.charCodeAt(pos + 1) === CharacterCodes.equals) {\r\n                        return pos += 2, token = SyntaxKind.GreaterThanGreaterThanEqualsToken;\r\n                    }\r\n                    return pos++, token = SyntaxKind.GreaterThanGreaterThanToken;\r\n                }\r\n                if (text.charCodeAt(pos) === CharacterCodes.equals) {\r\n                    return pos++, token = SyntaxKind.GreaterThanEqualsToken;\r\n                }\r\n            }\r\n            return token;\r\n        }\r\n\r\n        function reScanSlashToken(): SyntaxKind {\r\n            if (token === SyntaxKind.SlashToken || token === SyntaxKind.SlashEqualsToken) {\r\n                let p = tokenPos + 1;\r\n                let inEscape = false;\r\n                let inCharacterClass = false;\r\n                while (true) {\r\n                    // If we reach the end of a file, or hit a newline, then this is an unterminated\r\n                    // regex.  Report error and return what we have so far.\r\n                    if (p >= end) {\r\n                        tokenIsUnterminated = true;\r\n                        error(Diagnostics.Unterminated_regular_expression_literal)\r\n                        break;\r\n                    }\r\n\r\n                    let ch = text.charCodeAt(p);\r\n                    if (isLineBreak(ch)) {\r\n                        tokenIsUnterminated = true;\r\n                        error(Diagnostics.Unterminated_regular_expression_literal)\r\n                        break;\r\n                    }\r\n\r\n                    if (inEscape) {\r\n                        // Parsing an escape character;\r\n                        // reset the flag and just advance to the next char.\r\n                        inEscape = false;\r\n                    }\r\n                    else if (ch === CharacterCodes.slash && !inCharacterClass) {\r\n                        // A slash within a character class is permissible,\r\n                        // but in general it signals the end of the regexp literal.\r\n                        p++;\r\n                        break;\r\n                    }\r\n                    else if (ch === CharacterCodes.openBracket) {\r\n                        inCharacterClass = true;\r\n                    }\r\n                    else if (ch === CharacterCodes.backslash) {\r\n                        inEscape = true;\r\n                    }\r\n                    else if (ch === CharacterCodes.closeBracket) {\r\n                        inCharacterClass = false;\r\n                    }\r\n                    p++;\r\n                }\r\n\r\n                while (p < end && isIdentifierPart(text.charCodeAt(p))) {\r\n                    p++;\r\n                }\r\n                pos = p;\r\n                tokenValue = text.substring(tokenPos, pos);\r\n                token = SyntaxKind.RegularExpressionLiteral;\r\n            }\r\n            return token;\r\n        }\r\n\r\n        /**\r\n         * Unconditionally back up and scan a template expression portion.\r\n         */\r\n        function reScanTemplateToken(): SyntaxKind {\r\n            Debug.assert(token === SyntaxKind.CloseBraceToken, \"'reScanTemplateToken' should only be called on a '}'\");\r\n            pos = tokenPos;\r\n            return token = scanTemplateAndSetTokenValue();\r\n        }\r\n\r\n        function speculationHelper<T>(callback: () => T, isLookahead: boolean): T {\r\n            let savePos = pos;\r\n            let saveStartPos = startPos;\r\n            let saveTokenPos = tokenPos;\r\n            let saveToken = token;\r\n            let saveTokenValue = tokenValue;\r\n            let savePrecedingLineBreak = precedingLineBreak;\r\n            let result = callback();\r\n\r\n            // If our callback returned something 'falsy' or we're just looking ahead,\r\n            // then unconditionally restore us to where we were.\r\n            if (!result || isLookahead) {\r\n                pos = savePos;\r\n                startPos = saveStartPos;\r\n                tokenPos = saveTokenPos;\r\n                token = saveToken;\r\n                tokenValue = saveTokenValue;\r\n                precedingLineBreak = savePrecedingLineBreak;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function lookAhead<T>(callback: () => T): T {\r\n            return speculationHelper(callback, /*isLookahead:*/ true);\r\n        }\r\n\r\n        function tryScan<T>(callback: () => T): T {\r\n            return speculationHelper(callback, /*isLookahead:*/ false);\r\n        }\r\n\r\n        function setText(newText: string, start: number, length: number) {\r\n            text = newText || \"\";\r\n            end = length === undefined ? text.length : start + length;\r\n            setTextPos(start || 0);\r\n        }\r\n\r\n        function setOnError(errorCallback: ErrorCallback) {\r\n            onError = errorCallback;\r\n        }\r\n\r\n        function setScriptTarget(scriptTarget: ScriptTarget) {\r\n            languageVersion = scriptTarget;\r\n        }\r\n\r\n        function setTextPos(textPos: number) {\r\n            Debug.assert(textPos >= 0);\r\n            pos = textPos;\r\n            startPos = textPos;\r\n            tokenPos = textPos;\r\n            token = SyntaxKind.Unknown;\r\n            precedingLineBreak = false;\r\n\r\n            tokenValue = undefined;\r\n            hasExtendedUnicodeEscape = false;\r\n            tokenIsUnterminated = false;\r\n        }\r\n    }\r\n}\r\n"},{"name":"utilities.ts","text":"/// <reference path=\"binder.ts\" />\r\n\r\n/* @internal */\r\nmodule ts {\r\n    export interface ReferencePathMatchResult {\r\n        fileReference?: FileReference\r\n        diagnosticMessage?: DiagnosticMessage\r\n        isNoDefaultLib?: boolean\r\n    }\r\n\r\n    export interface SynthesizedNode extends Node {\r\n        leadingCommentRanges?: CommentRange[];\r\n        trailingCommentRanges?: CommentRange[];\r\n        startsOnNewLine: boolean;\r\n    }\r\n\r\n    export function getDeclarationOfKind(symbol: Symbol, kind: SyntaxKind): Declaration {\r\n        let declarations = symbol.declarations;\r\n        for (let declaration of declarations) {\r\n            if (declaration.kind === kind) {\r\n                return declaration;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    export interface StringSymbolWriter extends SymbolWriter {\r\n        string(): string;\r\n    }\r\n\r\n    export interface EmitHost extends ScriptReferenceHost {\r\n        getSourceFiles(): SourceFile[];\r\n\r\n        getCommonSourceDirectory(): string;\r\n        getCanonicalFileName(fileName: string): string;\r\n        getNewLine(): string;\r\n\r\n        writeFile: WriteFileCallback;\r\n    }\r\n\r\n    // Pool writers to avoid needing to allocate them for every symbol we write.\r\n    let stringWriters: StringSymbolWriter[] = [];\r\n    export function getSingleLineStringWriter(): StringSymbolWriter {\r\n        if (stringWriters.length == 0) {\r\n            let str = \"\";\r\n\r\n            let writeText: (text: string) => void = text => str += text;\r\n            return {\r\n                string: () => str,\r\n                writeKeyword: writeText,\r\n                writeOperator: writeText,\r\n                writePunctuation: writeText,\r\n                writeSpace: writeText,\r\n                writeStringLiteral: writeText,\r\n                writeParameter: writeText,\r\n                writeSymbol: writeText,\r\n\r\n                // Completely ignore indentation for string writers.  And map newlines to\r\n                // a single space.\r\n                writeLine: () => str += \" \",\r\n                increaseIndent: () => { },\r\n                decreaseIndent: () => { },\r\n                clear: () => str = \"\",\r\n                trackSymbol: () => { }\r\n            };\r\n        }\r\n\r\n        return stringWriters.pop();\r\n    }\r\n\r\n    export function releaseStringWriter(writer: StringSymbolWriter) {\r\n        writer.clear()\r\n        stringWriters.push(writer);\r\n    }\r\n\r\n    export function getFullWidth(node: Node) {\r\n        return node.end - node.pos;\r\n    }\r\n\r\n    // Returns true if this node contains a parse error anywhere underneath it.\r\n    export function containsParseError(node: Node): boolean {\r\n        aggregateChildData(node);\r\n        return (node.parserContextFlags & ParserContextFlags.ThisNodeOrAnySubNodesHasError) !== 0\r\n    }\r\n\r\n    function aggregateChildData(node: Node): void {\r\n        if (!(node.parserContextFlags & ParserContextFlags.HasAggregatedChildData)) {\r\n            // A node is considered to contain a parse error if:\r\n            //  a) the parser explicitly marked that it had an error\r\n            //  b) any of it's children reported that it had an error.\r\n            let thisNodeOrAnySubNodesHasError = ((node.parserContextFlags & ParserContextFlags.ThisNodeHasError) !== 0) ||\r\n                forEachChild(node, containsParseError);\r\n\r\n            // If so, mark ourselves accordingly. \r\n            if (thisNodeOrAnySubNodesHasError) {\r\n                node.parserContextFlags |= ParserContextFlags.ThisNodeOrAnySubNodesHasError;\r\n            }\r\n\r\n            // Also mark that we've propogated the child information to this node.  This way we can\r\n            // always consult the bit directly on this node without needing to check its children\r\n            // again.\r\n            node.parserContextFlags |= ParserContextFlags.HasAggregatedChildData;\r\n        }\r\n    }\r\n\r\n    export function getSourceFileOfNode(node: Node): SourceFile {\r\n        while (node && node.kind !== SyntaxKind.SourceFile) {\r\n            node = node.parent;\r\n        }\r\n        return <SourceFile>node;\r\n    }\r\n\r\n    export function getStartPositionOfLine(line: number, sourceFile: SourceFile): number {\r\n        Debug.assert(line >= 0);\r\n        return getLineStarts(sourceFile)[line];\r\n    }\r\n\r\n    // This is a useful function for debugging purposes.\r\n    export function nodePosToString(node: Node): string {\r\n        let file = getSourceFileOfNode(node);\r\n        let loc = getLineAndCharacterOfPosition(file, node.pos);\r\n        return `${ file.fileName }(${ loc.line + 1 },${ loc.character + 1 })`;\r\n    }\r\n\r\n    export function getStartPosOfNode(node: Node): number {\r\n        return node.pos;\r\n    }\r\n\r\n    // Returns true if this node is missing from the actual source code.  'missing' is different\r\n    // from 'undefined/defined'.  When a node is undefined (which can happen for optional nodes\r\n    // in the tree), it is definitel missing.  HOwever, a node may be defined, but still be \r\n    // missing.  This happens whenever the parser knows it needs to parse something, but can't\r\n    // get anything in the source code that it expects at that location.  For example:\r\n    //\r\n    //          let a: ;\r\n    //\r\n    // Here, the Type in the Type-Annotation is not-optional (as there is a colon in the source \r\n    // code).  So the parser will attempt to parse out a type, and will create an actual node.\r\n    // However, this node will be 'missing' in the sense that no actual source-code/tokens are\r\n    // contained within it.\r\n    export function nodeIsMissing(node: Node) {\r\n        if (!node) {\r\n            return true;\r\n        }\r\n\r\n        return node.pos === node.end && node.kind !== SyntaxKind.EndOfFileToken;\r\n    }\r\n\r\n    export function nodeIsPresent(node: Node) {\r\n        return !nodeIsMissing(node);\r\n    }\r\n\r\n    export function getTokenPosOfNode(node: Node, sourceFile?: SourceFile): number {\r\n        // With nodes that have no width (i.e. 'Missing' nodes), we actually *don't*\r\n        // want to skip trivia because this will launch us forward to the next token.\r\n        if (nodeIsMissing(node)) {\r\n            return node.pos;\r\n        }\r\n\r\n        return skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.pos);\r\n    }\r\n\r\n    export function getNonDecoratorTokenPosOfNode(node: Node, sourceFile?: SourceFile): number {\r\n        if (nodeIsMissing(node) || !node.decorators) {\r\n            return getTokenPosOfNode(node, sourceFile);\r\n        }\r\n\r\n        return skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.decorators.end);        \r\n    }\r\n\r\n    export function getSourceTextOfNodeFromSourceFile(sourceFile: SourceFile, node: Node): string {\r\n        if (nodeIsMissing(node)) {\r\n            return \"\";\r\n        }\r\n\r\n        let text = sourceFile.text;\r\n        return text.substring(skipTrivia(text, node.pos), node.end);\r\n    }\r\n\r\n    export function getTextOfNodeFromSourceText(sourceText: string, node: Node): string {\r\n        if (nodeIsMissing(node)) {\r\n            return \"\";\r\n        }\r\n\r\n        return sourceText.substring(skipTrivia(sourceText, node.pos), node.end);\r\n    }\r\n\r\n    export function getTextOfNode(node: Node): string {\r\n        return getSourceTextOfNodeFromSourceFile(getSourceFileOfNode(node), node);\r\n    }\r\n\r\n    // Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__'\r\n    export function escapeIdentifier(identifier: string): string {\r\n        return identifier.length >= 2 && identifier.charCodeAt(0) === CharacterCodes._ && identifier.charCodeAt(1) === CharacterCodes._ ? \"_\" + identifier : identifier;\r\n    }\r\n\r\n    // Remove extra underscore from escaped identifier\r\n    export function unescapeIdentifier(identifier: string): string {\r\n        return identifier.length >= 3 && identifier.charCodeAt(0) === CharacterCodes._ && identifier.charCodeAt(1) === CharacterCodes._ && identifier.charCodeAt(2) === CharacterCodes._ ? identifier.substr(1) : identifier;\r\n    }\r\n\r\n    // Make an identifier from an external module name by extracting the string after the last \"/\" and replacing\r\n    // all non-alphanumeric characters with underscores\r\n    export function makeIdentifierFromModuleName(moduleName: string): string {\r\n        return getBaseFileName(moduleName).replace(/\\W/g, \"_\");\r\n    }\r\n\r\n    export function isBlockOrCatchScoped(declaration: Declaration) {\r\n        return (getCombinedNodeFlags(declaration) & NodeFlags.BlockScoped) !== 0 ||\r\n            isCatchClauseVariableDeclaration(declaration);\r\n    }\r\n\r\n    // Gets the nearest enclosing block scope container that has the provided node \r\n    // as a descendant, that is not the provided node.\r\n    export function getEnclosingBlockScopeContainer(node: Node): Node {\r\n        let current = node.parent;\r\n        while (current) {\r\n            if (isFunctionLike(current)) {\r\n                return current;\r\n            }\r\n            switch (current.kind) {\r\n                case SyntaxKind.SourceFile:\r\n                case SyntaxKind.CaseBlock:\r\n                case SyntaxKind.CatchClause:\r\n                case SyntaxKind.ModuleDeclaration:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                    return current;\r\n                case SyntaxKind.Block:\r\n                    // function block is not considered block-scope container\r\n                    // see comment in binder.ts: bind(...), case for SyntaxKind.Block\r\n                    if (!isFunctionLike(current.parent)) {\r\n                        return current;\r\n                    }\r\n            }\r\n\r\n            current = current.parent;\r\n        }\r\n    }\r\n\r\n    export function isCatchClauseVariableDeclaration(declaration: Declaration) {\r\n        return declaration &&\r\n            declaration.kind === SyntaxKind.VariableDeclaration &&\r\n            declaration.parent &&\r\n            declaration.parent.kind === SyntaxKind.CatchClause;\r\n    }\r\n\r\n    // Return display name of an identifier\r\n    // Computed property names will just be emitted as \"[<expr>]\", where <expr> is the source\r\n    // text of the expression in the computed property.\r\n    export function declarationNameToString(name: DeclarationName) {\r\n        return getFullWidth(name) === 0 ? \"(Missing)\" : getTextOfNode(name);\r\n    }\r\n\r\n    export function createDiagnosticForNode(node: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): Diagnostic {\r\n        let sourceFile = getSourceFileOfNode(node);\r\n        let span = getErrorSpanForNode(sourceFile, node);\r\n        return createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2);\r\n    }\r\n\r\n    export function createDiagnosticForNodeFromMessageChain(node: Node, messageChain: DiagnosticMessageChain): Diagnostic {\r\n        let sourceFile = getSourceFileOfNode(node);\r\n        let span = getErrorSpanForNode(sourceFile, node);\r\n        return {\r\n            file: sourceFile,\r\n            start: span.start,\r\n            length: span.length,\r\n            code: messageChain.code,\r\n            category: messageChain.category,\r\n            messageText: messageChain.next ? messageChain : messageChain.messageText\r\n        };\r\n    }\r\n\r\n    export function getSpanOfTokenAtPosition(sourceFile: SourceFile, pos: number): TextSpan {\r\n        let scanner = createScanner(sourceFile.languageVersion, /*skipTrivia*/ true, sourceFile.text, /*onError:*/ undefined, pos);\r\n        scanner.scan();\r\n        let start = scanner.getTokenPos();\r\n        return createTextSpanFromBounds(start, scanner.getTextPos());\r\n    }\r\n\r\n    export function getErrorSpanForNode(sourceFile: SourceFile, node: Node): TextSpan {\r\n        let errorNode = node;\r\n        switch (node.kind) {\r\n            case SyntaxKind.SourceFile:\r\n                let pos = skipTrivia(sourceFile.text, 0, /*stopAfterLineBreak*/ false);\r\n                if (pos === sourceFile.text.length) {\r\n                    // file is empty - return span for the beginning of the file\r\n                    return createTextSpan(0, 0);\r\n                }\r\n                return getSpanOfTokenAtPosition(sourceFile, pos);\r\n            // This list is a work in progress. Add missing node kinds to improve their error\r\n            // spans.\r\n            case SyntaxKind.VariableDeclaration:\r\n            case SyntaxKind.BindingElement:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.EnumDeclaration:\r\n            case SyntaxKind.EnumMember:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.FunctionExpression:\r\n                errorNode = (<Declaration>node).name;\r\n                break;\r\n        }\r\n\r\n        if (errorNode === undefined) {\r\n            // If we don't have a better node, then just set the error on the first token of \r\n            // construct.\r\n            return getSpanOfTokenAtPosition(sourceFile, node.pos);\r\n        }\r\n\r\n        let pos = nodeIsMissing(errorNode)\r\n            ? errorNode.pos\r\n            : skipTrivia(sourceFile.text, errorNode.pos);\r\n\r\n        return createTextSpanFromBounds(pos, errorNode.end);\r\n    }\r\n\r\n    export function isExternalModule(file: SourceFile): boolean {\r\n        return file.externalModuleIndicator !== undefined;\r\n    }\r\n\r\n    export function isDeclarationFile(file: SourceFile): boolean {\r\n        return (file.flags & NodeFlags.DeclarationFile) !== 0;\r\n    }\r\n\r\n    export function isConstEnumDeclaration(node: Node): boolean {\r\n        return node.kind === SyntaxKind.EnumDeclaration && isConst(node);\r\n    }\r\n\r\n    function walkUpBindingElementsAndPatterns(node: Node): Node {\r\n        while (node && (node.kind === SyntaxKind.BindingElement || isBindingPattern(node))) {\r\n            node = node.parent;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    // Returns the node flags for this node and all relevant parent nodes.  This is done so that \r\n    // nodes like variable declarations and binding elements can returned a view of their flags\r\n    // that includes the modifiers from their container.  i.e. flags like export/declare aren't\r\n    // stored on the variable declaration directly, but on the containing variable statement \r\n    // (if it has one).  Similarly, flags for let/const are store on the variable declaration\r\n    // list.  By calling this function, all those flags are combined so that the client can treat\r\n    // the node as if it actually had those flags.\r\n    export function getCombinedNodeFlags(node: Node): NodeFlags {\r\n        node = walkUpBindingElementsAndPatterns(node);\r\n\r\n        let flags = node.flags;\r\n        if (node.kind === SyntaxKind.VariableDeclaration) {\r\n            node = node.parent;\r\n        }\r\n\r\n        if (node && node.kind === SyntaxKind.VariableDeclarationList) {\r\n            flags |= node.flags;\r\n            node = node.parent;\r\n        }\r\n\r\n        if (node && node.kind === SyntaxKind.VariableStatement) {\r\n            flags |= node.flags;\r\n        }\r\n\r\n        return flags;\r\n    }\r\n\r\n    export function isConst(node: Node): boolean {\r\n        return !!(getCombinedNodeFlags(node) & NodeFlags.Const);\r\n    }\r\n\r\n    export function isLet(node: Node): boolean {\r\n        return !!(getCombinedNodeFlags(node) & NodeFlags.Let);\r\n    }\r\n\r\n    export function isPrologueDirective(node: Node): boolean {\r\n        return node.kind === SyntaxKind.ExpressionStatement && (<ExpressionStatement>node).expression.kind === SyntaxKind.StringLiteral;\r\n    }\r\n\r\n    export function getLeadingCommentRangesOfNode(node: Node, sourceFileOfNode: SourceFile) {\r\n        // If parameter/type parameter, the prev token trailing comments are part of this node too\r\n        if (node.kind === SyntaxKind.Parameter || node.kind === SyntaxKind.TypeParameter) {\r\n            // e.g.   (/** blah */ a, /** blah */ b);\r\n\r\n            // e.g.:     (\r\n            //            /** blah */ a,\r\n            //            /** blah */ b);\r\n            return concatenate(\r\n                getTrailingCommentRanges(sourceFileOfNode.text, node.pos),\r\n                getLeadingCommentRanges(sourceFileOfNode.text, node.pos));\r\n        }\r\n        else {\r\n            return getLeadingCommentRanges(sourceFileOfNode.text, node.pos);\r\n        }\r\n    }\r\n\r\n    export function getJsDocComments(node: Node, sourceFileOfNode: SourceFile) {\r\n        return filter(getLeadingCommentRangesOfNode(node, sourceFileOfNode), isJsDocComment);\r\n\r\n        function isJsDocComment(comment: CommentRange) {\r\n            // True if the comment starts with '/**' but not if it is '/**/'\r\n            return sourceFileOfNode.text.charCodeAt(comment.pos + 1) === CharacterCodes.asterisk &&\r\n                sourceFileOfNode.text.charCodeAt(comment.pos + 2) === CharacterCodes.asterisk &&\r\n                sourceFileOfNode.text.charCodeAt(comment.pos + 3) !== CharacterCodes.slash;\r\n        }\r\n    }\r\n\r\n    export let fullTripleSlashReferencePathRegEx = /^(\\/\\/\\/\\s*<reference\\s+path\\s*=\\s*)('|\")(.+?)\\2.*?\\/>/\r\n\r\n    export function isTypeNode(node: Node): boolean {\r\n        if (SyntaxKind.FirstTypeNode <= node.kind && node.kind <= SyntaxKind.LastTypeNode) {\r\n            return true;\r\n        }\r\n\r\n        switch (node.kind) {\r\n            case SyntaxKind.AnyKeyword:\r\n            case SyntaxKind.NumberKeyword:\r\n            case SyntaxKind.StringKeyword:\r\n            case SyntaxKind.BooleanKeyword:\r\n            case SyntaxKind.SymbolKeyword:\r\n                return true;\r\n            case SyntaxKind.VoidKeyword:\r\n                return node.parent.kind !== SyntaxKind.VoidExpression;\r\n            case SyntaxKind.StringLiteral:\r\n                // Specialized signatures can have string literals as their parameters' type names\r\n                return node.parent.kind === SyntaxKind.Parameter;\r\n            case SyntaxKind.ExpressionWithTypeArguments:\r\n                return true;\r\n\r\n            // Identifiers and qualified names may be type nodes, depending on their context. Climb\r\n            // above them to find the lowest container\r\n            case SyntaxKind.Identifier:\r\n                // If the identifier is the RHS of a qualified name, then it's a type iff its parent is.\r\n                if (node.parent.kind === SyntaxKind.QualifiedName && (<QualifiedName>node.parent).right === node) {\r\n                    node = node.parent;\r\n                }\r\n                else if (node.parent.kind === SyntaxKind.PropertyAccessExpression && (<PropertyAccessExpression>node.parent).name === node) {\r\n                    node = node.parent;\r\n                }\r\n            // fall through\r\n            case SyntaxKind.QualifiedName:\r\n            case SyntaxKind.PropertyAccessExpression:\r\n                // At this point, node is either a qualified name or an identifier\r\n                Debug.assert(node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.QualifiedName || node.kind === SyntaxKind.PropertyAccessExpression,\r\n                    \"'node' was expected to be a qualified name, identifier or property access in 'isTypeNode'.\");\r\n\r\n                let parent = node.parent;\r\n                if (parent.kind === SyntaxKind.TypeQuery) {\r\n                    return false;\r\n                }\r\n                // Do not recursively call isTypeNode on the parent. In the example:\r\n                //\r\n                //     let a: A.B.C;\r\n                //\r\n                // Calling isTypeNode would consider the qualified name A.B a type node. Only C or\r\n                // A.B.C is a type node.\r\n                if (SyntaxKind.FirstTypeNode <= parent.kind && parent.kind <= SyntaxKind.LastTypeNode) {\r\n                    return true;\r\n                }\r\n                switch (parent.kind) {\r\n                    case SyntaxKind.ExpressionWithTypeArguments:\r\n                        return true;\r\n                    case SyntaxKind.TypeParameter:\r\n                        return node === (<TypeParameterDeclaration>parent).constraint;\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.PropertySignature:\r\n                    case SyntaxKind.Parameter:\r\n                    case SyntaxKind.VariableDeclaration:\r\n                        return node === (<VariableLikeDeclaration>parent).type;\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.ArrowFunction:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.MethodDeclaration:\r\n                    case SyntaxKind.MethodSignature:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                        return node === (<FunctionLikeDeclaration>parent).type;\r\n                    case SyntaxKind.CallSignature:\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                        return node === (<SignatureDeclaration>parent).type;\r\n                    case SyntaxKind.TypeAssertionExpression:\r\n                        return node === (<TypeAssertion>parent).type;\r\n                    case SyntaxKind.CallExpression:\r\n                    case SyntaxKind.NewExpression:\r\n                        return (<CallExpression>parent).typeArguments && indexOf((<CallExpression>parent).typeArguments, node) >= 0;\r\n                    case SyntaxKind.TaggedTemplateExpression:\r\n                        // TODO (drosen): TaggedTemplateExpressions may eventually support type arguments.\r\n                        return false;\r\n                }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Warning: This has the same semantics as the forEach family of functions,\r\n    //          in that traversal terminates in the event that 'visitor' supplies a truthy value.\r\n    export function forEachReturnStatement<T>(body: Block, visitor: (stmt: ReturnStatement) => T): T {\r\n\r\n        return traverse(body);\r\n\r\n        function traverse(node: Node): T {\r\n            switch (node.kind) {\r\n                case SyntaxKind.ReturnStatement:\r\n                    return visitor(<ReturnStatement>node);\r\n                case SyntaxKind.CaseBlock:\r\n                case SyntaxKind.Block:\r\n                case SyntaxKind.IfStatement:\r\n                case SyntaxKind.DoStatement:\r\n                case SyntaxKind.WhileStatement:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                case SyntaxKind.WithStatement:\r\n                case SyntaxKind.SwitchStatement:\r\n                case SyntaxKind.CaseClause:\r\n                case SyntaxKind.DefaultClause:\r\n                case SyntaxKind.LabeledStatement:\r\n                case SyntaxKind.TryStatement:\r\n                case SyntaxKind.CatchClause:\r\n                    return forEachChild(node, traverse);\r\n            }\r\n        }\r\n    }\r\n\r\n    export function forEachYieldExpression(body: Block, visitor: (expr: YieldExpression) => void): void {\r\n\r\n        return traverse(body);\r\n\r\n        function traverse(node: Node): void {\r\n            switch (node.kind) {\r\n                case SyntaxKind.YieldExpression:\r\n                    visitor(<YieldExpression>node);\r\n                    let operand = (<YieldExpression>node).expression;\r\n                    if (operand) {\r\n                        traverse(operand);\r\n                    }\r\n                case SyntaxKind.EnumDeclaration:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                case SyntaxKind.ModuleDeclaration:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                case SyntaxKind.ClassDeclaration:\r\n                    // These are not allowed inside a generator now, but eventually they may be allowed\r\n                    // as local types. Regardless, any yield statements contained within them should be\r\n                    // skipped in this traversal.\r\n                    return;\r\n                default:\r\n                    if (isFunctionLike(node)) {\r\n                        let name = (<FunctionLikeDeclaration>node).name;\r\n                        if (name && name.kind === SyntaxKind.ComputedPropertyName) {\r\n                            // Note that we will not include methods/accessors of a class because they would require\r\n                            // first descending into the class. This is by design.\r\n                            traverse((<ComputedPropertyName>name).expression);\r\n                            return;\r\n                        }\r\n                    }\r\n                    else if (!isTypeNode(node)) {\r\n                        // This is the general case, which should include mostly expressions and statements.\r\n                        // Also includes NodeArrays.\r\n                        forEachChild(node, traverse);\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    export function isVariableLike(node: Node): boolean {\r\n        if (node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.BindingElement:\r\n                case SyntaxKind.EnumMember:\r\n                case SyntaxKind.Parameter:\r\n                case SyntaxKind.PropertyAssignment:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.ShorthandPropertyAssignment:\r\n                case SyntaxKind.VariableDeclaration:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isAccessor(node: Node): boolean {\r\n        if (node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isClassLike(node: Node): boolean {\r\n        if (node) {\r\n            return node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.ClassExpression;\r\n        }\r\n    }\r\n\r\n    export function isFunctionLike(node: Node): boolean {\r\n        if (node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isFunctionBlock(node: Node) {\r\n        return node && node.kind === SyntaxKind.Block && isFunctionLike(node.parent);\r\n    }\r\n\r\n    export function isObjectLiteralMethod(node: Node) {\r\n        return node && node.kind === SyntaxKind.MethodDeclaration && node.parent.kind === SyntaxKind.ObjectLiteralExpression;\r\n    }\r\n\r\n    export function getContainingFunction(node: Node): FunctionLikeDeclaration {\r\n        while (true) {\r\n            node = node.parent;\r\n            if (!node || isFunctionLike(node)) {\r\n                return <FunctionLikeDeclaration>node;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getThisContainer(node: Node, includeArrowFunctions: boolean): Node {\r\n        while (true) {\r\n            node = node.parent;\r\n            if (!node) {\r\n                return undefined;\r\n            }\r\n            switch (node.kind) {\r\n                case SyntaxKind.ComputedPropertyName:\r\n                    // If the grandparent node is an object literal (as opposed to a class),\r\n                    // then the computed property is not a 'this' container.\r\n                    // A computed property name in a class needs to be a this container\r\n                    // so that we can error on it.\r\n                    if (node.parent.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                        return node;\r\n                    }\r\n                    // If this is a computed property, then the parent should not\r\n                    // make it a this container. The parent might be a property\r\n                    // in an object literal, like a method or accessor. But in order for\r\n                    // such a parent to be a this container, the reference must be in\r\n                    // the *body* of the container.\r\n                    node = node.parent;\r\n                    break;\r\n                case SyntaxKind.Decorator:\r\n                    // Decorators are always applied outside of the body of a class or method. \r\n                    if (node.parent.kind === SyntaxKind.Parameter && isClassElement(node.parent.parent)) {\r\n                        // If the decorator's parent is a Parameter, we resolve the this container from\r\n                        // the grandparent class declaration.\r\n                        node = node.parent.parent;\r\n                    }\r\n                    else if (isClassElement(node.parent)) {\r\n                        // If the decorator's parent is a class element, we resolve the 'this' container\r\n                        // from the parent class declaration.\r\n                        node = node.parent;\r\n                    }\r\n                    break;\r\n                case SyntaxKind.ArrowFunction:\r\n                    if (!includeArrowFunctions) {\r\n                        continue;\r\n                    }\r\n                // Fall through\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ModuleDeclaration:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.EnumDeclaration:\r\n                case SyntaxKind.SourceFile:\r\n                    return node;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getSuperContainer(node: Node, includeFunctions: boolean): Node {\r\n        while (true) {\r\n            node = node.parent;\r\n            if (!node) return node;\r\n            switch (node.kind) {\r\n                case SyntaxKind.ComputedPropertyName:\r\n                    // If the grandparent node is an object literal (as opposed to a class),\r\n                    // then the computed property is not a 'super' container.\r\n                    // A computed property name in a class needs to be a super container\r\n                    // so that we can error on it.\r\n                    if (node.parent.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                        return node;\r\n                    }\r\n                    // If this is a computed property, then the parent should not\r\n                    // make it a super container. The parent might be a property\r\n                    // in an object literal, like a method or accessor. But in order for\r\n                    // such a parent to be a super container, the reference must be in\r\n                    // the *body* of the container.\r\n                    node = node.parent;\r\n                    break;\r\n                case SyntaxKind.Decorator:\r\n                    // Decorators are always applied outside of the body of a class or method. \r\n                    if (node.parent.kind === SyntaxKind.Parameter && isClassElement(node.parent.parent)) {\r\n                        // If the decorator's parent is a Parameter, we resolve the this container from\r\n                        // the grandparent class declaration.\r\n                        node = node.parent.parent;\r\n                    }\r\n                    else if (isClassElement(node.parent)) {\r\n                        // If the decorator's parent is a class element, we resolve the 'this' container\r\n                        // from the parent class declaration.\r\n                        node = node.parent;\r\n                    }\r\n                    break;\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    if (!includeFunctions) {\r\n                        continue;\r\n                    }\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                    return node;\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getInvokedExpression(node: CallLikeExpression): Expression {\r\n        if (node.kind === SyntaxKind.TaggedTemplateExpression) {\r\n            return (<TaggedTemplateExpression>node).tag;\r\n        }\r\n        \r\n        // Will either be a CallExpression or NewExpression.\r\n        return (<CallExpression>node).expression;\r\n    }\r\n\r\n    export function nodeCanBeDecorated(node: Node): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ClassDeclaration:\r\n                // classes are valid targets\r\n                return true;\r\n\r\n            case SyntaxKind.PropertyDeclaration:\r\n                // property declarations are valid if their parent is a class declaration.\r\n                return node.parent.kind === SyntaxKind.ClassDeclaration;\r\n\r\n            case SyntaxKind.Parameter:\r\n                // if the parameter's parent has a body and its grandparent is a class declaration, this is a valid target;\r\n                return (<FunctionLikeDeclaration>node.parent).body && node.parent.parent.kind === SyntaxKind.ClassDeclaration;\r\n\r\n            case SyntaxKind.GetAccessor:\r\n            case SyntaxKind.SetAccessor:\r\n            case SyntaxKind.MethodDeclaration:\r\n                // if this method has a body and its parent is a class declaration, this is a valid target.\r\n                return (<FunctionLikeDeclaration>node).body && node.parent.kind === SyntaxKind.ClassDeclaration;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function nodeIsDecorated(node: Node): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ClassDeclaration:\r\n                if (node.decorators) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            case SyntaxKind.PropertyDeclaration:\r\n            case SyntaxKind.Parameter:\r\n                if (node.decorators) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            case SyntaxKind.GetAccessor:\r\n                if ((<FunctionLikeDeclaration>node).body && node.decorators) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.SetAccessor:\r\n                if ((<FunctionLikeDeclaration>node).body && node.decorators) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function childIsDecorated(node: Node): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ClassDeclaration:\r\n                return forEach((<ClassDeclaration>node).members, nodeOrChildIsDecorated);\r\n\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.SetAccessor:\r\n                return forEach((<FunctionLikeDeclaration>node).parameters, nodeIsDecorated);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function nodeOrChildIsDecorated(node: Node): boolean {\r\n        return nodeIsDecorated(node) || childIsDecorated(node);\r\n    }\r\n\r\n    export function isExpression(node: Node): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ThisKeyword:\r\n            case SyntaxKind.SuperKeyword:\r\n            case SyntaxKind.NullKeyword:\r\n            case SyntaxKind.TrueKeyword:\r\n            case SyntaxKind.FalseKeyword:\r\n            case SyntaxKind.RegularExpressionLiteral:\r\n            case SyntaxKind.ArrayLiteralExpression:\r\n            case SyntaxKind.ObjectLiteralExpression:\r\n            case SyntaxKind.PropertyAccessExpression:\r\n            case SyntaxKind.ElementAccessExpression:\r\n            case SyntaxKind.CallExpression:\r\n            case SyntaxKind.NewExpression:\r\n            case SyntaxKind.TaggedTemplateExpression:\r\n            case SyntaxKind.TypeAssertionExpression:\r\n            case SyntaxKind.ParenthesizedExpression:\r\n            case SyntaxKind.FunctionExpression:\r\n            case SyntaxKind.ClassExpression:\r\n            case SyntaxKind.ArrowFunction:\r\n            case SyntaxKind.VoidExpression:\r\n            case SyntaxKind.DeleteExpression:\r\n            case SyntaxKind.TypeOfExpression:\r\n            case SyntaxKind.PrefixUnaryExpression:\r\n            case SyntaxKind.PostfixUnaryExpression:\r\n            case SyntaxKind.BinaryExpression:\r\n            case SyntaxKind.ConditionalExpression:\r\n            case SyntaxKind.SpreadElementExpression:\r\n            case SyntaxKind.TemplateExpression:\r\n            case SyntaxKind.NoSubstitutionTemplateLiteral:\r\n            case SyntaxKind.OmittedExpression:\r\n            case SyntaxKind.YieldExpression:\r\n                return true;\r\n            case SyntaxKind.QualifiedName:\r\n                while (node.parent.kind === SyntaxKind.QualifiedName) {\r\n                    node = node.parent;\r\n                }\r\n\r\n                return node.parent.kind === SyntaxKind.TypeQuery;\r\n            case SyntaxKind.Identifier:\r\n                if (node.parent.kind === SyntaxKind.TypeQuery) {\r\n                    return true;\r\n                }\r\n            // fall through\r\n            case SyntaxKind.NumericLiteral:\r\n            case SyntaxKind.StringLiteral:\r\n                let parent = node.parent;\r\n                switch (parent.kind) {\r\n                    case SyntaxKind.VariableDeclaration:\r\n                    case SyntaxKind.Parameter:\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.PropertySignature:\r\n                    case SyntaxKind.EnumMember:\r\n                    case SyntaxKind.PropertyAssignment:\r\n                    case SyntaxKind.BindingElement:\r\n                        return (<VariableLikeDeclaration>parent).initializer === node;\r\n                    case SyntaxKind.ExpressionStatement:\r\n                    case SyntaxKind.IfStatement:\r\n                    case SyntaxKind.DoStatement:\r\n                    case SyntaxKind.WhileStatement:\r\n                    case SyntaxKind.ReturnStatement:\r\n                    case SyntaxKind.WithStatement:\r\n                    case SyntaxKind.SwitchStatement:\r\n                    case SyntaxKind.CaseClause:\r\n                    case SyntaxKind.ThrowStatement:\r\n                    case SyntaxKind.SwitchStatement:\r\n                        return (<ExpressionStatement>parent).expression === node;\r\n                    case SyntaxKind.ForStatement:\r\n                        let forStatement = <ForStatement>parent;\r\n                        return (forStatement.initializer === node && forStatement.initializer.kind !== SyntaxKind.VariableDeclarationList) ||\r\n                            forStatement.condition === node ||\r\n                            forStatement.incrementor === node;\r\n                    case SyntaxKind.ForInStatement:\r\n                    case SyntaxKind.ForOfStatement:\r\n                        let forInStatement = <ForInStatement | ForOfStatement>parent;\r\n                        return (forInStatement.initializer === node && forInStatement.initializer.kind !== SyntaxKind.VariableDeclarationList) ||\r\n                            forInStatement.expression === node;\r\n                    case SyntaxKind.TypeAssertionExpression:\r\n                        return node === (<TypeAssertion>parent).expression;\r\n                    case SyntaxKind.TemplateSpan:\r\n                        return node === (<TemplateSpan>parent).expression;\r\n                    case SyntaxKind.ComputedPropertyName:\r\n                        return node === (<ComputedPropertyName>parent).expression;\r\n                    case SyntaxKind.Decorator:\r\n                        return true;\r\n                    default:\r\n                        if (isExpression(parent)) {\r\n                            return true;\r\n                        }\r\n                }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function isInstantiatedModule(node: ModuleDeclaration, preserveConstEnums: boolean) {\r\n        let moduleState = getModuleInstanceState(node)\r\n        return moduleState === ModuleInstanceState.Instantiated ||\r\n            (preserveConstEnums && moduleState === ModuleInstanceState.ConstEnumOnly);\r\n    }\r\n\r\n    export function isExternalModuleImportEqualsDeclaration(node: Node) {\r\n        return node.kind === SyntaxKind.ImportEqualsDeclaration && (<ImportEqualsDeclaration>node).moduleReference.kind === SyntaxKind.ExternalModuleReference;\r\n    }\r\n\r\n    export function getExternalModuleImportEqualsDeclarationExpression(node: Node) {\r\n        Debug.assert(isExternalModuleImportEqualsDeclaration(node));\r\n        return (<ExternalModuleReference>(<ImportEqualsDeclaration>node).moduleReference).expression;\r\n    }\r\n\r\n    export function isInternalModuleImportEqualsDeclaration(node: Node) {\r\n        return node.kind === SyntaxKind.ImportEqualsDeclaration && (<ImportEqualsDeclaration>node).moduleReference.kind !== SyntaxKind.ExternalModuleReference;\r\n    }\r\n\r\n    export function getExternalModuleName(node: Node): Expression {\r\n        if (node.kind === SyntaxKind.ImportDeclaration) {\r\n            return (<ImportDeclaration>node).moduleSpecifier;\r\n        }\r\n        if (node.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n            let reference = (<ImportEqualsDeclaration>node).moduleReference;\r\n            if (reference.kind === SyntaxKind.ExternalModuleReference) {\r\n                return (<ExternalModuleReference>reference).expression;\r\n            }\r\n        }\r\n        if (node.kind === SyntaxKind.ExportDeclaration) {\r\n            return (<ExportDeclaration>node).moduleSpecifier;\r\n        }\r\n    }\r\n\r\n    export function hasQuestionToken(node: Node) {\r\n        if (node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.Parameter:\r\n                    return (<ParameterDeclaration>node).questionToken !== undefined;\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    return (<MethodDeclaration>node).questionToken !== undefined;\r\n                case SyntaxKind.ShorthandPropertyAssignment:\r\n                case SyntaxKind.PropertyAssignment:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                    return (<PropertyDeclaration>node).questionToken !== undefined;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isJSDocConstructSignature(node: Node) {\r\n        return node.kind === SyntaxKind.JSDocFunctionType &&\r\n            (<JSDocFunctionType>node).parameters.length > 0 &&\r\n            (<JSDocFunctionType>node).parameters[0].type.kind === SyntaxKind.JSDocConstructorType;\r\n    }\r\n\r\n    function getJSDocTag(node: Node, kind: SyntaxKind): JSDocTag {\r\n        if (node && node.jsDocComment) {\r\n            for (let tag of node.jsDocComment.tags) {\r\n                if (tag.kind === kind) {\r\n                    return tag;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getJSDocTypeTag(node: Node): JSDocTypeTag {\r\n        return <JSDocTypeTag>getJSDocTag(node, SyntaxKind.JSDocTypeTag);\r\n    }\r\n\r\n    export function getJSDocReturnTag(node: Node): JSDocReturnTag {\r\n        return <JSDocReturnTag>getJSDocTag(node, SyntaxKind.JSDocReturnTag);\r\n    }\r\n\r\n    export function getJSDocTemplateTag(node: Node): JSDocTemplateTag {\r\n        return <JSDocTemplateTag>getJSDocTag(node, SyntaxKind.JSDocTemplateTag);\r\n    }\r\n\r\n    export function getCorrespondingJSDocParameterTag(parameter: ParameterDeclaration): JSDocParameterTag {\r\n        if (parameter.name && parameter.name.kind === SyntaxKind.Identifier) {\r\n            // If it's a parameter, see if the parent has a jsdoc comment with an @param \r\n            // annotation.\r\n            let parameterName = (<Identifier>parameter.name).text;\r\n\r\n            let docComment = parameter.parent.jsDocComment;\r\n            if (docComment) {\r\n                return <JSDocParameterTag>forEach(docComment.tags, t => {\r\n                    if (t.kind === SyntaxKind.JSDocParameterTag) {\r\n                        let parameterTag = <JSDocParameterTag>t;\r\n                        let name = parameterTag.preParameterName || parameterTag.postParameterName;\r\n                        if (name.text === parameterName) {\r\n                            return t;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    export function hasRestParameter(s: SignatureDeclaration): boolean {\r\n        return isRestParameter(lastOrUndefined(s.parameters));\r\n    }\r\n\r\n    export function isRestParameter(node: ParameterDeclaration) {\r\n        if (node) {\r\n            if (node.parserContextFlags & ParserContextFlags.JavaScriptFile) {\r\n                if (node.type && node.type.kind === SyntaxKind.JSDocVariadicType) {\r\n                    return true;\r\n                }\r\n\r\n                let paramTag = getCorrespondingJSDocParameterTag(node);\r\n                if (paramTag && paramTag.typeExpression) {\r\n                    return paramTag.typeExpression.type.kind === SyntaxKind.JSDocVariadicType;\r\n                }\r\n            }\r\n\r\n            return node.dotDotDotToken !== undefined;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isLiteralKind(kind: SyntaxKind): boolean {\r\n        return SyntaxKind.FirstLiteralToken <= kind && kind <= SyntaxKind.LastLiteralToken;\r\n    }\r\n\r\n    export function isTextualLiteralKind(kind: SyntaxKind): boolean {\r\n        return kind === SyntaxKind.StringLiteral || kind === SyntaxKind.NoSubstitutionTemplateLiteral;\r\n    }\r\n\r\n    export function isTemplateLiteralKind(kind: SyntaxKind): boolean {\r\n        return SyntaxKind.FirstTemplateToken <= kind && kind <= SyntaxKind.LastTemplateToken;\r\n    }\r\n\r\n    export function isBindingPattern(node: Node) {\r\n        return !!node && (node.kind === SyntaxKind.ArrayBindingPattern || node.kind === SyntaxKind.ObjectBindingPattern);\r\n    }\r\n\r\n    export function isInAmbientContext(node: Node): boolean {\r\n        while (node) {\r\n            if (node.flags & (NodeFlags.Ambient | NodeFlags.DeclarationFile)) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parent;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function isDeclaration(node: Node): boolean {\r\n        switch (node.kind) {\r\n            case SyntaxKind.ArrowFunction:\r\n            case SyntaxKind.BindingElement:\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.Constructor:\r\n            case SyntaxKind.EnumDeclaration:\r\n            case SyntaxKind.EnumMember:\r\n            case SyntaxKind.ExportSpecifier:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.FunctionExpression:\r\n            case SyntaxKind.GetAccessor:\r\n            case SyntaxKind.ImportClause:\r\n            case SyntaxKind.ImportEqualsDeclaration:\r\n            case SyntaxKind.ImportSpecifier:\r\n            case SyntaxKind.InterfaceDeclaration:\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.MethodSignature:\r\n            case SyntaxKind.ModuleDeclaration:\r\n            case SyntaxKind.NamespaceImport:\r\n            case SyntaxKind.Parameter:\r\n            case SyntaxKind.PropertyAssignment:\r\n            case SyntaxKind.PropertyDeclaration:\r\n            case SyntaxKind.PropertySignature:\r\n            case SyntaxKind.SetAccessor:\r\n            case SyntaxKind.ShorthandPropertyAssignment:\r\n            case SyntaxKind.TypeAliasDeclaration:\r\n            case SyntaxKind.TypeParameter:\r\n            case SyntaxKind.VariableDeclaration:\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function isStatement(n: Node): boolean {\r\n        switch (n.kind) {\r\n            case SyntaxKind.BreakStatement:\r\n            case SyntaxKind.ContinueStatement:\r\n            case SyntaxKind.DebuggerStatement:\r\n            case SyntaxKind.DoStatement:\r\n            case SyntaxKind.ExpressionStatement:\r\n            case SyntaxKind.EmptyStatement:\r\n            case SyntaxKind.ForInStatement:\r\n            case SyntaxKind.ForOfStatement:\r\n            case SyntaxKind.ForStatement:\r\n            case SyntaxKind.IfStatement:\r\n            case SyntaxKind.LabeledStatement:\r\n            case SyntaxKind.ReturnStatement:\r\n            case SyntaxKind.SwitchStatement:\r\n            case SyntaxKind.ThrowKeyword:\r\n            case SyntaxKind.TryStatement:\r\n            case SyntaxKind.VariableStatement:\r\n            case SyntaxKind.WhileStatement:\r\n            case SyntaxKind.WithStatement:\r\n            case SyntaxKind.ExportAssignment:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    export function isClassElement(n: Node): boolean {\r\n        switch (n.kind) {\r\n            case SyntaxKind.Constructor:\r\n            case SyntaxKind.PropertyDeclaration:\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.GetAccessor:\r\n            case SyntaxKind.SetAccessor:\r\n            case SyntaxKind.MethodSignature:\r\n            case SyntaxKind.IndexSignature:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    // True if the given identifier, string literal, or number literal is the name of a declaration node\r\n    export function isDeclarationName(name: Node): boolean {\r\n        if (name.kind !== SyntaxKind.Identifier && name.kind !== SyntaxKind.StringLiteral && name.kind !== SyntaxKind.NumericLiteral) {\r\n            return false;\r\n        }\r\n\r\n        let parent = name.parent;\r\n        if (parent.kind === SyntaxKind.ImportSpecifier || parent.kind === SyntaxKind.ExportSpecifier) {\r\n            if ((<ImportOrExportSpecifier>parent).propertyName) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (isDeclaration(parent)) {\r\n            return (<Declaration>parent).name === name;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // An alias symbol is created by one of the following declarations:\r\n    // import <symbol> = ...\r\n    // import <symbol> from ...\r\n    // import * as <symbol> from ...\r\n    // import { x as <symbol> } from ...\r\n    // export { x as <symbol> } from ...\r\n    // export = ...\r\n    // export default ...\r\n    export function isAliasSymbolDeclaration(node: Node): boolean {\r\n        return node.kind === SyntaxKind.ImportEqualsDeclaration ||\r\n            node.kind === SyntaxKind.ImportClause && !!(<ImportClause>node).name ||\r\n            node.kind === SyntaxKind.NamespaceImport ||\r\n            node.kind === SyntaxKind.ImportSpecifier ||\r\n            node.kind === SyntaxKind.ExportSpecifier ||\r\n            node.kind === SyntaxKind.ExportAssignment && (<ExportAssignment>node).expression.kind === SyntaxKind.Identifier;\r\n    }\r\n\r\n    export function getClassExtendsHeritageClauseElement(node: ClassLikeDeclaration) {\r\n        let heritageClause = getHeritageClause(node.heritageClauses, SyntaxKind.ExtendsKeyword);\r\n        return heritageClause && heritageClause.types.length > 0 ? heritageClause.types[0] : undefined;\r\n    }\r\n\r\n    export function getClassImplementsHeritageClauseElements(node: ClassDeclaration) {\r\n        let heritageClause = getHeritageClause(node.heritageClauses, SyntaxKind.ImplementsKeyword);\r\n        return heritageClause ? heritageClause.types : undefined;\r\n    }\r\n\r\n    export function getInterfaceBaseTypeNodes(node: InterfaceDeclaration) {\r\n        let heritageClause = getHeritageClause(node.heritageClauses, SyntaxKind.ExtendsKeyword);\r\n        return heritageClause ? heritageClause.types : undefined;\r\n    }\r\n\r\n    export function getHeritageClause(clauses: NodeArray<HeritageClause>, kind: SyntaxKind) {\r\n        if (clauses) {\r\n            for (let clause of clauses) {\r\n                if (clause.token === kind) {\r\n                    return clause;\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    export function tryResolveScriptReference(host: ScriptReferenceHost, sourceFile: SourceFile, reference: FileReference) {\r\n        if (!host.getCompilerOptions().noResolve) {\r\n            let referenceFileName = isRootedDiskPath(reference.fileName) ? reference.fileName : combinePaths(getDirectoryPath(sourceFile.fileName), reference.fileName);\r\n            referenceFileName = getNormalizedAbsolutePath(referenceFileName, host.getCurrentDirectory());\r\n            return host.getSourceFile(referenceFileName);\r\n        }\r\n    }\r\n\r\n    export function getAncestor(node: Node, kind: SyntaxKind): Node {\r\n        while (node) {\r\n            if (node.kind === kind) {\r\n                return node;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    export function getFileReferenceFromReferencePath(comment: string, commentRange: CommentRange): ReferencePathMatchResult {\r\n        let simpleReferenceRegEx = /^\\/\\/\\/\\s*<reference\\s+/gim;\r\n        let isNoDefaultLibRegEx = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib\\s*=\\s*)('|\")(.+?)\\2\\s*\\/>/gim;\r\n        if (simpleReferenceRegEx.exec(comment)) {\r\n            if (isNoDefaultLibRegEx.exec(comment)) {\r\n                return {\r\n                    isNoDefaultLib: true\r\n                }\r\n            }\r\n            else {\r\n                let matchResult = fullTripleSlashReferencePathRegEx.exec(comment);\r\n                if (matchResult) {\r\n                    let start = commentRange.pos;\r\n                    let end = commentRange.end;\r\n                    return {\r\n                        fileReference: {\r\n                            pos: start,\r\n                            end: end,\r\n                            fileName: matchResult[3]\r\n                        },\r\n                        isNoDefaultLib: false\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        diagnosticMessage: Diagnostics.Invalid_reference_directive_syntax,\r\n                        isNoDefaultLib: false\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    export function isKeyword(token: SyntaxKind): boolean {\r\n        return SyntaxKind.FirstKeyword <= token && token <= SyntaxKind.LastKeyword;\r\n    }\r\n\r\n    export function isTrivia(token: SyntaxKind) {\r\n        return SyntaxKind.FirstTriviaToken <= token && token <= SyntaxKind.LastTriviaToken;\r\n    }\r\n\r\n    /**\r\n     * A declaration has a dynamic name if both of the following are true:\r\n     *   1. The declaration has a computed property name\r\n     *   2. The computed name is *not* expressed as Symbol.<name>, where name\r\n     *      is a property of the Symbol constructor that denotes a built in\r\n     *      Symbol.\r\n     */\r\n    export function hasDynamicName(declaration: Declaration): boolean {\r\n        return declaration.name &&\r\n            declaration.name.kind === SyntaxKind.ComputedPropertyName &&\r\n            !isWellKnownSymbolSyntactically((<ComputedPropertyName>declaration.name).expression);\r\n    }\r\n\r\n    /**\r\n     * Checks if the expression is of the form:\r\n     *    Symbol.name\r\n     * where Symbol is literally the word \"Symbol\", and name is any identifierName\r\n     */\r\n    export function isWellKnownSymbolSyntactically(node: Expression): boolean {\r\n        return node.kind === SyntaxKind.PropertyAccessExpression && isESSymbolIdentifier((<PropertyAccessExpression>node).expression);\r\n    }\r\n\r\n    export function getPropertyNameForPropertyNameNode(name: DeclarationName): string {\r\n        if (name.kind === SyntaxKind.Identifier || name.kind === SyntaxKind.StringLiteral || name.kind === SyntaxKind.NumericLiteral) {\r\n            return (<Identifier | LiteralExpression>name).text;\r\n        }\r\n        if (name.kind === SyntaxKind.ComputedPropertyName) {\r\n            let nameExpression = (<ComputedPropertyName>name).expression;\r\n            if (isWellKnownSymbolSyntactically(nameExpression)) {\r\n                let rightHandSideName = (<PropertyAccessExpression>nameExpression).name.text;\r\n                return getPropertyNameForKnownSymbolName(rightHandSideName);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    export function getPropertyNameForKnownSymbolName(symbolName: string): string {\r\n        return \"__@\" + symbolName;\r\n    }\r\n\r\n    /**\r\n     * Includes the word \"Symbol\" with unicode escapes\r\n     */\r\n    export function isESSymbolIdentifier(node: Node): boolean {\r\n        return node.kind === SyntaxKind.Identifier && (<Identifier>node).text === \"Symbol\";\r\n    }\r\n\r\n    export function isModifier(token: SyntaxKind): boolean {\r\n        switch (token) {\r\n            case SyntaxKind.PublicKeyword:\r\n            case SyntaxKind.PrivateKeyword:\r\n            case SyntaxKind.ProtectedKeyword:\r\n            case SyntaxKind.StaticKeyword:\r\n            case SyntaxKind.ExportKeyword:\r\n            case SyntaxKind.DeclareKeyword:\r\n            case SyntaxKind.ConstKeyword:\r\n            case SyntaxKind.DefaultKeyword:\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function isParameterDeclaration(node: VariableLikeDeclaration) {\r\n        let root = getRootDeclaration(node);\r\n        return root.kind === SyntaxKind.Parameter;\r\n    }\r\n\r\n    export function getRootDeclaration(node: Node): Node {\r\n        while (node.kind === SyntaxKind.BindingElement) {\r\n            node = node.parent.parent;\r\n        }\r\n        return node;\r\n    }\r\n        \r\n    export function nodeStartsNewLexicalEnvironment(n: Node): boolean {\r\n        return isFunctionLike(n) || n.kind === SyntaxKind.ModuleDeclaration || n.kind === SyntaxKind.SourceFile;\r\n    }\r\n\r\n    export function nodeIsSynthesized(node: Node): boolean {\r\n        return node.pos === -1;\r\n    }\r\n\r\n    export function createSynthesizedNode(kind: SyntaxKind, startsOnNewLine?: boolean): Node {\r\n        let node = <SynthesizedNode>createNode(kind);\r\n        node.pos = -1;\r\n        node.end = -1;\r\n        node.startsOnNewLine = startsOnNewLine;\r\n        return node;\r\n    }\r\n\r\n    export function createSynthesizedNodeArray(): NodeArray<any> {\r\n        var array = <NodeArray<any>>[];\r\n        array.pos = -1;\r\n        array.end = -1;\r\n        return array;\r\n    }\r\n\r\n    export function createDiagnosticCollection(): DiagnosticCollection {\r\n        let nonFileDiagnostics: Diagnostic[] = [];\r\n        let fileDiagnostics: Map<Diagnostic[]> = {};\r\n\r\n        let diagnosticsModified = false;\r\n        let modificationCount = 0;\r\n\r\n        return {\r\n            add,\r\n            getGlobalDiagnostics,\r\n            getDiagnostics,\r\n            getModificationCount\r\n        };\r\n\r\n        function getModificationCount() {\r\n            return modificationCount;\r\n        }\r\n\r\n        function add(diagnostic: Diagnostic): void {\r\n            let diagnostics: Diagnostic[];\r\n            if (diagnostic.file) {\r\n                diagnostics = fileDiagnostics[diagnostic.file.fileName];\r\n                if (!diagnostics) {\r\n                    diagnostics = [];\r\n                    fileDiagnostics[diagnostic.file.fileName] = diagnostics;\r\n                }\r\n            }\r\n            else {\r\n                diagnostics = nonFileDiagnostics;\r\n            }\r\n\r\n            diagnostics.push(diagnostic);\r\n            diagnosticsModified = true;\r\n            modificationCount++;\r\n        }\r\n\r\n        function getGlobalDiagnostics(): Diagnostic[] {\r\n            sortAndDeduplicate();\r\n            return nonFileDiagnostics;\r\n        }\r\n\r\n        function getDiagnostics(fileName?: string): Diagnostic[] {\r\n            sortAndDeduplicate();\r\n            if (fileName) {\r\n                return fileDiagnostics[fileName] || [];\r\n            }\r\n\r\n            let allDiagnostics: Diagnostic[] = [];\r\n            function pushDiagnostic(d: Diagnostic) {\r\n                allDiagnostics.push(d);\r\n            }\r\n\r\n            forEach(nonFileDiagnostics, pushDiagnostic);\r\n\r\n            for (let key in fileDiagnostics) {\r\n                if (hasProperty(fileDiagnostics, key)) {\r\n                    forEach(fileDiagnostics[key], pushDiagnostic);\r\n                }\r\n            }\r\n\r\n            return sortAndDeduplicateDiagnostics(allDiagnostics);\r\n        }\r\n\r\n        function sortAndDeduplicate() {\r\n            if (!diagnosticsModified) {\r\n                return;\r\n            }\r\n\r\n            diagnosticsModified = false;\r\n            nonFileDiagnostics = sortAndDeduplicateDiagnostics(nonFileDiagnostics);\r\n\r\n            for (let key in fileDiagnostics) {\r\n                if (hasProperty(fileDiagnostics, key)) {\r\n                    fileDiagnostics[key] = sortAndDeduplicateDiagnostics(fileDiagnostics[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,\r\n    // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in\r\n    // the language service. These characters should be escaped when printing, and if any characters are added,\r\n    // the map below must be updated. Note that this regexp *does not* include the 'delete' character.\r\n    // There is no reason for this other than that JSON.stringify does not handle it either.\r\n    let escapedCharsRegExp = /[\\\\\\\"\\u0000-\\u001f\\t\\v\\f\\b\\r\\n\\u2028\\u2029\\u0085]/g;\r\n    let escapedCharsMap: Map<string> = {\r\n        \"\\0\": \"\\\\0\",\r\n        \"\\t\": \"\\\\t\",\r\n        \"\\v\": \"\\\\v\",\r\n        \"\\f\": \"\\\\f\",\r\n        \"\\b\": \"\\\\b\",\r\n        \"\\r\": \"\\\\r\",\r\n        \"\\n\": \"\\\\n\",\r\n        \"\\\\\": \"\\\\\\\\\",\r\n        \"\\\"\": \"\\\\\\\"\",\r\n        \"\\u2028\": \"\\\\u2028\", // lineSeparator\r\n        \"\\u2029\": \"\\\\u2029\", // paragraphSeparator\r\n        \"\\u0085\": \"\\\\u0085\"  // nextLine\r\n    };\r\n\r\n    /**\r\n     * Based heavily on the abstract 'Quote'/'QuoteJSONString' operation from ECMA-262 (24.3.2.2),\r\n     * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)\r\n     * Note that this doesn't actually wrap the input in double quotes.\r\n     */\r\n    export function escapeString(s: string): string {\r\n        s = escapedCharsRegExp.test(s) ? s.replace(escapedCharsRegExp, getReplacement) : s;\r\n\r\n        return s;\r\n\r\n        function getReplacement(c: string) {\r\n            return escapedCharsMap[c] || get16BitUnicodeEscapeSequence(c.charCodeAt(0));\r\n        }\r\n    }\r\n\r\n    function get16BitUnicodeEscapeSequence(charCode: number): string {\r\n        let hexCharCode = charCode.toString(16).toUpperCase();\r\n        let paddedHexCode = (\"0000\" + hexCharCode).slice(-4);\r\n        return \"\\\\u\" + paddedHexCode;\r\n    }\r\n\r\n    let nonAsciiCharacters = /[^\\u0000-\\u007F]/g;\r\n    export function escapeNonAsciiCharacters(s: string): string {\r\n        // Replace non-ASCII characters with '\\uNNNN' escapes if any exist.\r\n        // Otherwise just return the original string.\r\n        return nonAsciiCharacters.test(s) ?\r\n            s.replace(nonAsciiCharacters, c => get16BitUnicodeEscapeSequence(c.charCodeAt(0))) :\r\n            s;\r\n    }\r\n\r\n    export interface EmitTextWriter {\r\n        write(s: string): void;\r\n        writeTextOfNode(sourceFile: SourceFile, node: Node): void;\r\n        writeLine(): void;\r\n        increaseIndent(): void;\r\n        decreaseIndent(): void;\r\n        getText(): string;\r\n        rawWrite(s: string): void;\r\n        writeLiteral(s: string): void;\r\n        getTextPos(): number;\r\n        getLine(): number;\r\n        getColumn(): number;\r\n        getIndent(): number;\r\n    }\r\n\r\n    let indentStrings: string[] = [\"\", \"    \"];\r\n    export function getIndentString(level: number) {\r\n        if (indentStrings[level] === undefined) {\r\n            indentStrings[level] = getIndentString(level - 1) + indentStrings[1];\r\n        }\r\n        return indentStrings[level];\r\n    }\r\n\r\n    export function getIndentSize() {\r\n        return indentStrings[1].length;\r\n    }\r\n\r\n    export function createTextWriter(newLine: String): EmitTextWriter {\r\n        let output = \"\";\r\n        let indent = 0;\r\n        let lineStart = true;\r\n        let lineCount = 0;\r\n        let linePos = 0;\r\n\r\n        function write(s: string) {\r\n            if (s && s.length) {\r\n                if (lineStart) {\r\n                    output += getIndentString(indent);\r\n                    lineStart = false;\r\n                }\r\n                output += s;\r\n            }\r\n        }\r\n\r\n        function rawWrite(s: string) {\r\n            if (s !== undefined) {\r\n                if (lineStart) {\r\n                    lineStart = false;\r\n                }\r\n                output += s;\r\n            }\r\n        }\r\n\r\n        function writeLiteral(s: string) {\r\n            if (s && s.length) {\r\n                write(s);\r\n                let lineStartsOfS = computeLineStarts(s);\r\n                if (lineStartsOfS.length > 1) {\r\n                    lineCount = lineCount + lineStartsOfS.length - 1;\r\n                    linePos = output.length - s.length + lastOrUndefined(lineStartsOfS);\r\n                }\r\n            }\r\n        }\r\n\r\n        function writeLine() {\r\n            if (!lineStart) {\r\n                output += newLine;\r\n                lineCount++;\r\n                linePos = output.length;\r\n                lineStart = true;\r\n            }\r\n        }\r\n\r\n        function writeTextOfNode(sourceFile: SourceFile, node: Node) {\r\n            write(getSourceTextOfNodeFromSourceFile(sourceFile, node));\r\n        }\r\n\r\n        return {\r\n            write,\r\n            rawWrite,\r\n            writeTextOfNode,\r\n            writeLiteral,\r\n            writeLine,\r\n            increaseIndent: () => indent++,\r\n            decreaseIndent: () => indent--,\r\n            getIndent: () => indent,\r\n            getTextPos: () => output.length,\r\n            getLine: () => lineCount + 1,\r\n            getColumn: () => lineStart ? indent * getIndentSize() + 1 : output.length - linePos + 1,\r\n            getText: () => output,\r\n        };\r\n    }\r\n\r\n    export function getOwnEmitOutputFilePath(sourceFile: SourceFile, host: EmitHost, extension: string) {\r\n        let compilerOptions = host.getCompilerOptions();\r\n        let emitOutputFilePathWithoutExtension: string;\r\n        if (compilerOptions.outDir) {\r\n            emitOutputFilePathWithoutExtension = removeFileExtension(getSourceFilePathInNewDir(sourceFile, host, compilerOptions.outDir));\r\n        }\r\n        else {\r\n            emitOutputFilePathWithoutExtension = removeFileExtension(sourceFile.fileName);\r\n        }\r\n\r\n        return emitOutputFilePathWithoutExtension + extension;\r\n    }\r\n\r\n    export function getSourceFilePathInNewDir(sourceFile: SourceFile, host: EmitHost, newDirPath: string) {\r\n        let sourceFilePath = getNormalizedAbsolutePath(sourceFile.fileName, host.getCurrentDirectory());\r\n        sourceFilePath = sourceFilePath.replace(host.getCommonSourceDirectory(), \"\");\r\n        return combinePaths(newDirPath, sourceFilePath);\r\n    }\r\n\r\n    export function writeFile(host: EmitHost, diagnostics: Diagnostic[], fileName: string, data: string, writeByteOrderMark: boolean) {\r\n        host.writeFile(fileName, data, writeByteOrderMark, hostErrorMessage => {\r\n            diagnostics.push(createCompilerDiagnostic(Diagnostics.Could_not_write_file_0_Colon_1, fileName, hostErrorMessage));\r\n        });\r\n    }\r\n\r\n    export function getLineOfLocalPosition(currentSourceFile: SourceFile, pos: number) {\r\n        return getLineAndCharacterOfPosition(currentSourceFile, pos).line;\r\n    }\r\n\r\n    export function getFirstConstructorWithBody(node: ClassLikeDeclaration): ConstructorDeclaration {\r\n        return forEach(node.members, member => {\r\n            if (member.kind === SyntaxKind.Constructor && nodeIsPresent((<ConstructorDeclaration>member).body)) {\r\n                return <ConstructorDeclaration>member;\r\n            }\r\n        });\r\n    }\r\n\r\n    export function shouldEmitToOwnFile(sourceFile: SourceFile, compilerOptions: CompilerOptions): boolean {\r\n        if (!isDeclarationFile(sourceFile)) {\r\n            if ((isExternalModule(sourceFile) || !compilerOptions.out)) {\r\n                // 1. in-browser single file compilation scenario\r\n                // 2. non .js file\r\n                return compilerOptions.isolatedModules || !fileExtensionIs(sourceFile.fileName, \".js\");\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function getAllAccessorDeclarations(declarations: NodeArray<Declaration>, accessor: AccessorDeclaration) {\r\n        let firstAccessor: AccessorDeclaration;\r\n        let secondAccessor: AccessorDeclaration;\r\n        let getAccessor: AccessorDeclaration;\r\n        let setAccessor: AccessorDeclaration;\r\n        if (hasDynamicName(accessor)) {\r\n            firstAccessor = accessor;\r\n            if (accessor.kind === SyntaxKind.GetAccessor) {\r\n                getAccessor = accessor;\r\n            }\r\n            else if (accessor.kind === SyntaxKind.SetAccessor) {\r\n                setAccessor = accessor;\r\n            }\r\n            else {\r\n                Debug.fail(\"Accessor has wrong kind\");\r\n            }\r\n        }\r\n        else {\r\n            forEach(declarations, (member: Declaration) => {\r\n                if ((member.kind === SyntaxKind.GetAccessor || member.kind === SyntaxKind.SetAccessor)\r\n                    && (member.flags & NodeFlags.Static) === (accessor.flags & NodeFlags.Static)) {\r\n                    let memberName = getPropertyNameForPropertyNameNode(member.name);\r\n                    let accessorName = getPropertyNameForPropertyNameNode(accessor.name);\r\n                    if (memberName === accessorName) {\r\n                        if (!firstAccessor) {\r\n                            firstAccessor = <AccessorDeclaration>member;\r\n                        }\r\n                        else if (!secondAccessor) {\r\n                            secondAccessor = <AccessorDeclaration>member;\r\n                        }\r\n\r\n                        if (member.kind === SyntaxKind.GetAccessor && !getAccessor) {\r\n                            getAccessor = <AccessorDeclaration>member;\r\n                        }\r\n\r\n                        if (member.kind === SyntaxKind.SetAccessor && !setAccessor) {\r\n                            setAccessor = <AccessorDeclaration>member;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return {\r\n            firstAccessor,\r\n            secondAccessor,\r\n            getAccessor,\r\n            setAccessor\r\n        };\r\n    }\r\n\r\n    export function emitNewLineBeforeLeadingComments(currentSourceFile: SourceFile, writer: EmitTextWriter, node: TextRange, leadingComments: CommentRange[]) {\r\n        // If the leading comments start on different line than the start of node, write new line\r\n        if (leadingComments && leadingComments.length && node.pos !== leadingComments[0].pos &&\r\n            getLineOfLocalPosition(currentSourceFile, node.pos) !== getLineOfLocalPosition(currentSourceFile, leadingComments[0].pos)) {\r\n            writer.writeLine();\r\n        }\r\n    }\r\n\r\n    export function emitComments(currentSourceFile: SourceFile, writer: EmitTextWriter, comments: CommentRange[], trailingSeparator: boolean, newLine: string,\r\n        writeComment: (currentSourceFile: SourceFile, writer: EmitTextWriter, comment: CommentRange, newLine: string) => void) {\r\n        let emitLeadingSpace = !trailingSeparator;\r\n        forEach(comments, comment => {\r\n            if (emitLeadingSpace) {\r\n                writer.write(\" \");\r\n                emitLeadingSpace = false;\r\n            }\r\n            writeComment(currentSourceFile, writer, comment, newLine);\r\n            if (comment.hasTrailingNewLine) {\r\n                writer.writeLine();\r\n            }\r\n            else if (trailingSeparator) {\r\n                writer.write(\" \");\r\n            }\r\n            else {\r\n                // Emit leading space to separate comment during next comment emit\r\n                emitLeadingSpace = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    export function writeCommentRange(currentSourceFile: SourceFile, writer: EmitTextWriter, comment: CommentRange, newLine: string) {\r\n        if (currentSourceFile.text.charCodeAt(comment.pos + 1) === CharacterCodes.asterisk) {\r\n            let firstCommentLineAndCharacter = getLineAndCharacterOfPosition(currentSourceFile, comment.pos);\r\n            let lineCount = getLineStarts(currentSourceFile).length;\r\n            let firstCommentLineIndent: number;\r\n            for (let pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {\r\n                let nextLineStart = (currentLine + 1) === lineCount\r\n                    ? currentSourceFile.text.length + 1\r\n                    : getStartPositionOfLine(currentLine + 1, currentSourceFile);\r\n\r\n                if (pos !== comment.pos) {\r\n                    // If we are not emitting first line, we need to write the spaces to adjust the alignment\r\n                    if (firstCommentLineIndent === undefined) {\r\n                        firstCommentLineIndent = calculateIndent(getStartPositionOfLine(firstCommentLineAndCharacter.line, currentSourceFile), comment.pos);\r\n                    }\r\n\r\n                    // These are number of spaces writer is going to write at current indent\r\n                    let currentWriterIndentSpacing = writer.getIndent() * getIndentSize();\r\n\r\n                    // Number of spaces we want to be writing\r\n                    // eg: Assume writer indent\r\n                    // module m {\r\n                    //         /* starts at character 9 this is line 1\r\n                    //    * starts at character pos 4 line                        --1  = 8 - 8 + 3\r\n                    //   More left indented comment */                            --2  = 8 - 8 + 2\r\n                    //     class c { }\r\n                    // }\r\n                    // module m {\r\n                    //     /* this is line 1 -- Assume current writer indent 8\r\n                    //      * line                                                --3 = 8 - 4 + 5\r\n                    //            More right indented comment */                  --4 = 8 - 4 + 11\r\n                    //     class c { }\r\n                    // }\r\n                    let spacesToEmit = currentWriterIndentSpacing - firstCommentLineIndent + calculateIndent(pos, nextLineStart);\r\n                    if (spacesToEmit > 0) {\r\n                        let numberOfSingleSpacesToEmit = spacesToEmit % getIndentSize();\r\n                        let indentSizeSpaceString = getIndentString((spacesToEmit - numberOfSingleSpacesToEmit) / getIndentSize());\r\n\r\n                        // Write indent size string ( in eg 1: = \"\", 2: \"\" , 3: string with 8 spaces 4: string with 12 spaces\r\n                        writer.rawWrite(indentSizeSpaceString);\r\n\r\n                        // Emit the single spaces (in eg: 1: 3 spaces, 2: 2 spaces, 3: 1 space, 4: 3 spaces)\r\n                        while (numberOfSingleSpacesToEmit) {\r\n                            writer.rawWrite(\" \");\r\n                            numberOfSingleSpacesToEmit--;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // No spaces to emit write empty string\r\n                        writer.rawWrite(\"\");\r\n                    }\r\n                }\r\n\r\n                // Write the comment line text\r\n                writeTrimmedCurrentLine(pos, nextLineStart);\r\n\r\n                pos = nextLineStart;\r\n            }\r\n        }\r\n        else {\r\n            // Single line comment of style //....\r\n            writer.write(currentSourceFile.text.substring(comment.pos, comment.end));\r\n        }\r\n\r\n        function writeTrimmedCurrentLine(pos: number, nextLineStart: number) {\r\n            let end = Math.min(comment.end, nextLineStart - 1);\r\n            let currentLineText = currentSourceFile.text.substring(pos, end).replace(/^\\s+|\\s+$/g, '');\r\n            if (currentLineText) {\r\n                // trimmed forward and ending spaces text\r\n                writer.write(currentLineText);\r\n                if (end !== comment.end) {\r\n                    writer.writeLine();\r\n                }\r\n            }\r\n            else {\r\n                // Empty string - make sure we write empty line\r\n                writer.writeLiteral(newLine);\r\n            }\r\n        }\r\n\r\n        function calculateIndent(pos: number, end: number) {\r\n            let currentLineIndent = 0;\r\n            for (; pos < end && isWhiteSpace(currentSourceFile.text.charCodeAt(pos)); pos++) {\r\n                if (currentSourceFile.text.charCodeAt(pos) === CharacterCodes.tab) {\r\n                    // Tabs = TabSize = indent size and go to next tabStop\r\n                    currentLineIndent += getIndentSize() - (currentLineIndent % getIndentSize());\r\n                }\r\n                else {\r\n                    // Single space\r\n                    currentLineIndent++;\r\n                }\r\n            }\r\n\r\n            return currentLineIndent;\r\n        }\r\n    }\r\n\r\n    export function modifierToFlag(token: SyntaxKind): NodeFlags {\r\n        switch (token) {\r\n            case SyntaxKind.StaticKeyword: return NodeFlags.Static;\r\n            case SyntaxKind.PublicKeyword: return NodeFlags.Public;\r\n            case SyntaxKind.ProtectedKeyword: return NodeFlags.Protected;\r\n            case SyntaxKind.PrivateKeyword: return NodeFlags.Private;\r\n            case SyntaxKind.ExportKeyword: return NodeFlags.Export;\r\n            case SyntaxKind.DeclareKeyword: return NodeFlags.Ambient;\r\n            case SyntaxKind.ConstKeyword: return NodeFlags.Const;\r\n            case SyntaxKind.DefaultKeyword: return NodeFlags.Default;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    export function isLeftHandSideExpression(expr: Expression): boolean {\r\n        if (expr) {\r\n            switch (expr.kind) {\r\n                case SyntaxKind.PropertyAccessExpression:\r\n                case SyntaxKind.ElementAccessExpression:\r\n                case SyntaxKind.NewExpression:\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.TaggedTemplateExpression:\r\n                case SyntaxKind.ArrayLiteralExpression:\r\n                case SyntaxKind.ParenthesizedExpression:\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                case SyntaxKind.ClassExpression:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.Identifier:\r\n                case SyntaxKind.RegularExpressionLiteral:\r\n                case SyntaxKind.NumericLiteral:\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NoSubstitutionTemplateLiteral:\r\n                case SyntaxKind.TemplateExpression:\r\n                case SyntaxKind.FalseKeyword:\r\n                case SyntaxKind.NullKeyword:\r\n                case SyntaxKind.ThisKeyword:\r\n                case SyntaxKind.TrueKeyword:\r\n                case SyntaxKind.SuperKeyword:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function isAssignmentOperator(token: SyntaxKind): boolean {\r\n        return token >= SyntaxKind.FirstAssignment && token <= SyntaxKind.LastAssignment;\r\n    }\r\n\r\n    // Returns false if this heritage clause element's expression contains something unsupported\r\n    // (i.e. not a name or dotted name).\r\n    export function isSupportedExpressionWithTypeArguments(node: ExpressionWithTypeArguments): boolean {\r\n        return isSupportedExpressionWithTypeArgumentsRest(node.expression);\r\n    }\r\n\r\n    function isSupportedExpressionWithTypeArgumentsRest(node: Expression): boolean {\r\n        if (node.kind === SyntaxKind.Identifier) {\r\n            return true;\r\n        }\r\n        else if (node.kind === SyntaxKind.PropertyAccessExpression) {\r\n            return isSupportedExpressionWithTypeArgumentsRest((<PropertyAccessExpression>node).expression);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    export function isRightSideOfQualifiedNameOrPropertyAccess(node: Node) {\r\n        return (node.parent.kind === SyntaxKind.QualifiedName && (<QualifiedName>node.parent).right === node) ||\r\n            (node.parent.kind === SyntaxKind.PropertyAccessExpression && (<PropertyAccessExpression>node.parent).name === node);\r\n    }\r\n\r\n    export function getLocalSymbolForExportDefault(symbol: Symbol) {\r\n        return symbol && symbol.valueDeclaration && (symbol.valueDeclaration.flags & NodeFlags.Default) ? symbol.valueDeclaration.localSymbol : undefined;\r\n    }\r\n\r\n    export function isJavaScript(fileName: string) {\r\n        return fileExtensionIs(fileName, \".js\");\r\n    }\r\n\r\n    /**\r\n     * Replace each instance of non-ascii characters by one, two, three, or four escape sequences \r\n     * representing the UTF-8 encoding of the character, and return the expanded char code list.\r\n     */\r\n    function getExpandedCharCodes(input: string): number[] {\r\n        let output: number[] = [];\r\n        let length = input.length;\r\n        let leadSurrogate: number = undefined;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            let charCode = input.charCodeAt(i);\r\n\r\n            // handel utf8\r\n            if (charCode < 0x80) {\r\n                output.push(charCode);\r\n            }\r\n            else if (charCode < 0x800) {\r\n                output.push((charCode >> 6) | 0B11000000);\r\n                output.push((charCode & 0B00111111) | 0B10000000);\r\n            }\r\n            else if (charCode < 0x10000) {\r\n                output.push((charCode >> 12) | 0B11100000);\r\n                output.push(((charCode >> 6) & 0B00111111) | 0B10000000);\r\n                output.push((charCode & 0B00111111) | 0B10000000);\r\n            }\r\n            else if (charCode < 0x20000) {\r\n                output.push((charCode >> 18) | 0B11110000);\r\n                output.push(((charCode >> 12) & 0B00111111) | 0B10000000);\r\n                output.push(((charCode >> 6) & 0B00111111) | 0B10000000);\r\n                output.push((charCode & 0B00111111) | 0B10000000);\r\n            }\r\n            else {\r\n                Debug.assert(false, \"Unexpected code point\");\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    const base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n    /**\r\n     * Converts a string to a base-64 encoded ASCII string.\r\n     */\r\n    export function convertToBase64(input: string): string {\r\n        var result = \"\";\r\n        let charCodes = getExpandedCharCodes(input);\r\n        let i = 0;\r\n        let length = charCodes.length;\r\n        let byte1: number, byte2: number, byte3: number, byte4: number;\r\n\r\n        while (i < length) {\r\n            // Convert every 6-bits in the input 3 character points\r\n            // into a base64 digit\r\n            byte1 = charCodes[i] >> 2;\r\n            byte2 = (charCodes[i] & 0B00000011) << 4 | charCodes[i + 1] >> 4;\r\n            byte3 = (charCodes[i + 1] & 0B00001111) << 2 | charCodes[i + 2] >> 6;\r\n            byte4 = charCodes[i + 2] & 0B00111111;\r\n\r\n            // We are out of characters in the input, set the extra\r\n            // digits to 64 (padding character).\r\n            if (i + 1 >= length) {\r\n                byte3 = byte4 = 64;\r\n            }\r\n            else if (i + 2 >= length) {\r\n                byte4 = 64;\r\n            }\r\n\r\n            // Write to the ouput\r\n            result += base64Digits.charAt(byte1) + base64Digits.charAt(byte2) + base64Digits.charAt(byte3) + base64Digits.charAt(byte4);\r\n\r\n            i += 3;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    const carriageReturnLineFeed = \"\\r\\n\";\r\n    const lineFeed = \"\\n\";\r\n    export function getNewLineCharacter(options: CompilerOptions): string {\r\n        if (options.newLine === NewLineKind.CarriageReturnLineFeed) {\r\n            return carriageReturnLineFeed;\r\n        }\r\n        else if (options.newLine === NewLineKind.LineFeed) {\r\n            return lineFeed;\r\n        }\r\n        else if (sys) {\r\n            return sys.newLine\r\n        }\r\n        return carriageReturnLineFeed;\r\n    }\r\n}\r\n\r\nmodule ts {\r\n    export function getDefaultLibFileName(options: CompilerOptions): string {\r\n        return options.target === ScriptTarget.ES6 ? \"lib.es6.d.ts\" : \"lib.d.ts\";\r\n    }\r\n\r\n    export function textSpanEnd(span: TextSpan) {\r\n        return span.start + span.length\r\n    }\r\n\r\n    export function textSpanIsEmpty(span: TextSpan) {\r\n        return span.length === 0\r\n    }\r\n\r\n    export function textSpanContainsPosition(span: TextSpan, position: number) {\r\n        return position >= span.start && position < textSpanEnd(span);\r\n    }\r\n\r\n    // Returns true if 'span' contains 'other'.\r\n    export function textSpanContainsTextSpan(span: TextSpan, other: TextSpan) {\r\n        return other.start >= span.start && textSpanEnd(other) <= textSpanEnd(span);\r\n    }\r\n\r\n    export function textSpanOverlapsWith(span: TextSpan, other: TextSpan) {\r\n        let overlapStart = Math.max(span.start, other.start);\r\n        let overlapEnd = Math.min(textSpanEnd(span), textSpanEnd(other));\r\n        return overlapStart < overlapEnd;\r\n    }\r\n\r\n    export function textSpanOverlap(span1: TextSpan, span2: TextSpan) {\r\n        let overlapStart = Math.max(span1.start, span2.start);\r\n        let overlapEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));\r\n        if (overlapStart < overlapEnd) {\r\n            return createTextSpanFromBounds(overlapStart, overlapEnd);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    export function textSpanIntersectsWithTextSpan(span: TextSpan, other: TextSpan) {\r\n        return other.start <= textSpanEnd(span) && textSpanEnd(other) >= span.start\r\n    }\r\n\r\n    export function textSpanIntersectsWith(span: TextSpan, start: number, length: number) {\r\n        let end = start + length;\r\n        return start <= textSpanEnd(span) && end >= span.start;\r\n    }\r\n\r\n    export function textSpanIntersectsWithPosition(span: TextSpan, position: number) {\r\n        return position <= textSpanEnd(span) && position >= span.start;\r\n    }\r\n\r\n    export function textSpanIntersection(span1: TextSpan, span2: TextSpan) {\r\n        let intersectStart = Math.max(span1.start, span2.start);\r\n        let intersectEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));\r\n        if (intersectStart <= intersectEnd) {\r\n            return createTextSpanFromBounds(intersectStart, intersectEnd);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    export function createTextSpan(start: number, length: number): TextSpan {\r\n        if (start < 0) {\r\n            throw new Error(\"start < 0\");\r\n        }\r\n        if (length < 0) {\r\n            throw new Error(\"length < 0\");\r\n        }\r\n\r\n        return { start, length };\r\n    }\r\n\r\n    export function createTextSpanFromBounds(start: number, end: number) {\r\n        return createTextSpan(start, end - start);\r\n    }\r\n\r\n    export function textChangeRangeNewSpan(range: TextChangeRange) {\r\n        return createTextSpan(range.span.start, range.newLength);\r\n    }\r\n\r\n    export function textChangeRangeIsUnchanged(range: TextChangeRange) {\r\n        return textSpanIsEmpty(range.span) && range.newLength === 0;\r\n    }\r\n\r\n    export function createTextChangeRange(span: TextSpan, newLength: number): TextChangeRange {\r\n        if (newLength < 0) {\r\n            throw new Error(\"newLength < 0\");\r\n        }\r\n\r\n        return { span, newLength };\r\n    }\r\n\r\n    export let unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0);\r\n\r\n    /**\r\n     * Called to merge all the changes that occurred across several versions of a script snapshot \r\n     * into a single change.  i.e. if a user keeps making successive edits to a script we will\r\n     * have a text change from V1 to V2, V2 to V3, ..., Vn.  \r\n     * \r\n     * This function will then merge those changes into a single change range valid between V1 and\r\n     * Vn.\r\n     */\r\n    export function collapseTextChangeRangesAcrossMultipleVersions(changes: TextChangeRange[]): TextChangeRange {\r\n        if (changes.length === 0) {\r\n            return unchangedTextChangeRange;\r\n        }\r\n\r\n        if (changes.length === 1) {\r\n            return changes[0];\r\n        }\r\n\r\n        // We change from talking about { { oldStart, oldLength }, newLength } to { oldStart, oldEnd, newEnd }\r\n        // as it makes things much easier to reason about.\r\n        let change0 = changes[0];\r\n\r\n        let oldStartN = change0.span.start;\r\n        let oldEndN = textSpanEnd(change0.span);\r\n        let newEndN = oldStartN + change0.newLength;\r\n\r\n        for (let i = 1; i < changes.length; i++) {\r\n            let nextChange = changes[i];\r\n\r\n            // Consider the following case:\r\n            // i.e. two edits.  The first represents the text change range { { 10, 50 }, 30 }.  i.e. The span starting\r\n            // at 10, with length 50 is reduced to length 30.  The second represents the text change range { { 30, 30 }, 40 }.\r\n            // i.e. the span starting at 30 with length 30 is increased to length 40.\r\n            //\r\n            //      0         10        20        30        40        50        60        70        80        90        100\r\n            //      -------------------------------------------------------------------------------------------------------\r\n            //                |                                                 /                                          \r\n            //                |                                            /----                                           \r\n            //  T1            |                                       /----                                                \r\n            //                |                                  /----                                                     \r\n            //                |                             /----                                                          \r\n            //      -------------------------------------------------------------------------------------------------------\r\n            //                                     |                            \\                                          \r\n            //                                     |                               \\                                       \r\n            //   T2                                |                                 \\                                     \r\n            //                                     |                                   \\                                   \r\n            //                                     |                                      \\                                \r\n            //      -------------------------------------------------------------------------------------------------------\r\n            //\r\n            // Merging these turns out to not be too difficult.  First, determining the new start of the change is trivial\r\n            // it's just the min of the old and new starts.  i.e.:\r\n            //\r\n            //      0         10        20        30        40        50        60        70        80        90        100\r\n            //      ------------------------------------------------------------*------------------------------------------\r\n            //                |                                                 /                                          \r\n            //                |                                            /----                                           \r\n            //  T1            |                                       /----                                                \r\n            //                |                                  /----                                                     \r\n            //                |                             /----                                                          \r\n            //      ----------------------------------------$-------------------$------------------------------------------\r\n            //                .                    |                            \\                                          \r\n            //                .                    |                               \\                                       \r\n            //   T2           .                    |                                 \\                                     \r\n            //                .                    |                                   \\                                   \r\n            //                .                    |                                      \\                                \r\n            //      ----------------------------------------------------------------------*--------------------------------\r\n            //\r\n            // (Note the dots represent the newly inferrred start.\r\n            // Determining the new and old end is also pretty simple.  Basically it boils down to paying attention to the\r\n            // absolute positions at the asterixes, and the relative change between the dollar signs. Basically, we see\r\n            // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that\r\n            // means:\r\n            //\r\n            //      0         10        20        30        40        50        60        70        80        90        100\r\n            //      --------------------------------------------------------------------------------*----------------------\r\n            //                |                                                                     /                      \r\n            //                |                                                                /----                       \r\n            //  T1            |                                                           /----                            \r\n            //                |                                                      /----                                 \r\n            //                |                                                 /----                                      \r\n            //      ------------------------------------------------------------$------------------------------------------\r\n            //                .                    |                            \\                                          \r\n            //                .                    |                               \\                                       \r\n            //   T2           .                    |                                 \\                                     \r\n            //                .                    |                                   \\                                   \r\n            //                .                    |                                      \\                                \r\n            //      ----------------------------------------------------------------------*--------------------------------\r\n            //\r\n            // In other words (in this case), we're recognizing that the second edit happened after where the first edit\r\n            // ended with a delta of 20 characters (60 - 40).  Thus, if we go back in time to where the first edit started\r\n            // that's the same as if we started at char 80 instead of 60.  \r\n            //\r\n            // As it so happens, the same logic applies if the second edit precedes the first edit.  In that case rahter\r\n            // than pusing the first edit forward to match the second, we'll push the second edit forward to match the\r\n            // first.\r\n            //\r\n            // In this case that means we have { oldStart: 10, oldEnd: 80, newEnd: 70 } or, in TextChangeRange\r\n            // semantics: { { start: 10, length: 70 }, newLength: 60 }\r\n            //\r\n            // The math then works out as follows.\r\n            // If we have { oldStart1, oldEnd1, newEnd1 } and { oldStart2, oldEnd2, newEnd2 } then we can compute the \r\n            // final result like so:\r\n            //\r\n            // {\r\n            //      oldStart3: Min(oldStart1, oldStart2),\r\n            //      oldEnd3  : Max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1)),\r\n            //      newEnd3  : Max(newEnd2, newEnd2 + (newEnd1 - oldEnd2))\r\n            // }\r\n\r\n            let oldStart1 = oldStartN;\r\n            let oldEnd1 = oldEndN;\r\n            let newEnd1 = newEndN;\r\n\r\n            let oldStart2 = nextChange.span.start;\r\n            let oldEnd2 = textSpanEnd(nextChange.span);\r\n            let newEnd2 = oldStart2 + nextChange.newLength;\r\n\r\n            oldStartN = Math.min(oldStart1, oldStart2);\r\n            oldEndN = Math.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));\r\n            newEndN = Math.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));\r\n        }\r\n\r\n        return createTextChangeRange(createTextSpanFromBounds(oldStartN, oldEndN), /*newLength:*/ newEndN - oldStartN);\r\n    }\r\n\r\n    export function getTypeParameterOwner(d: Declaration): Declaration {\r\n        if (d && d.kind === SyntaxKind.TypeParameter) {\r\n            for (let current: Node = d; current; current = current.parent) {\r\n                if (isFunctionLike(current) || isClassLike(current) || current.kind === SyntaxKind.InterfaceDeclaration) {\r\n                    return <Declaration>current;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"},{"name":"parser.ts","text":"/// <reference path=\"scanner.ts\"/>\r\n/// <reference path=\"utilities.ts\"/>\r\n\r\nmodule ts {\r\n    let nodeConstructors = new Array<new () => Node>(SyntaxKind.Count);\r\n    /* @internal */ export let parseTime = 0;\r\n\r\n    export function getNodeConstructor(kind: SyntaxKind): new () => Node {\r\n        return nodeConstructors[kind] || (nodeConstructors[kind] = objectAllocator.getNodeConstructor(kind));\r\n    }\r\n\r\n    export function createNode(kind: SyntaxKind): Node {\r\n        return new (getNodeConstructor(kind))();\r\n    }\r\n\r\n    function visitNode<T>(cbNode: (node: Node) => T, node: Node): T {\r\n        if (node) {\r\n            return cbNode(node);\r\n        }\r\n    }\r\n\r\n    function visitNodeArray<T>(cbNodes: (nodes: Node[]) => T, nodes: Node[]) {\r\n        if (nodes) {\r\n            return cbNodes(nodes);\r\n        }\r\n    }\r\n\r\n    function visitEachNode<T>(cbNode: (node: Node) => T, nodes: Node[]) {\r\n        if (nodes) {\r\n            for (let node of nodes) {\r\n                let result = cbNode(node);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Invokes a callback for each child of the given node. The 'cbNode' callback is invoked for all child nodes\r\n    // stored in properties. If a 'cbNodes' callback is specified, it is invoked for embedded arrays; otherwise,\r\n    // embedded arrays are flattened and the 'cbNode' callback is invoked for each element. If a callback returns\r\n    // a truthy value, iteration stops and that value is returned. Otherwise, undefined is returned.\r\n    export function forEachChild<T>(node: Node, cbNode: (node: Node) => T, cbNodeArray?: (nodes: Node[]) => T): T {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        // The visitXXX functions could be written as local functions that close over the cbNode and cbNodeArray\r\n        // callback parameters, but that causes a closure allocation for each invocation with noticeable effects\r\n        // on performance.\r\n        let visitNodes: (cb: (node: Node | Node[]) => T, nodes: Node[]) => T = cbNodeArray ? visitNodeArray : visitEachNode;\r\n        let cbNodes = cbNodeArray || cbNode;\r\n        switch (node.kind) {\r\n            case SyntaxKind.QualifiedName:\r\n                return visitNode(cbNode, (<QualifiedName>node).left) ||\r\n                    visitNode(cbNode, (<QualifiedName>node).right);\r\n            case SyntaxKind.TypeParameter:\r\n                return visitNode(cbNode, (<TypeParameterDeclaration>node).name) ||\r\n                    visitNode(cbNode, (<TypeParameterDeclaration>node).constraint) ||\r\n                    visitNode(cbNode, (<TypeParameterDeclaration>node).expression);\r\n            case SyntaxKind.Parameter:\r\n            case SyntaxKind.PropertyDeclaration:\r\n            case SyntaxKind.PropertySignature:\r\n            case SyntaxKind.PropertyAssignment:\r\n            case SyntaxKind.ShorthandPropertyAssignment:\r\n            case SyntaxKind.VariableDeclaration:\r\n            case SyntaxKind.BindingElement:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).propertyName) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).dotDotDotToken) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).name) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).questionToken) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).type) ||\r\n                    visitNode(cbNode, (<VariableLikeDeclaration>node).initializer);\r\n            case SyntaxKind.FunctionType:\r\n            case SyntaxKind.ConstructorType:\r\n            case SyntaxKind.CallSignature:\r\n            case SyntaxKind.ConstructSignature:\r\n            case SyntaxKind.IndexSignature:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNodes(cbNodes, (<SignatureDeclaration>node).typeParameters) ||\r\n                    visitNodes(cbNodes, (<SignatureDeclaration>node).parameters) ||\r\n                    visitNode(cbNode, (<SignatureDeclaration>node).type);\r\n            case SyntaxKind.MethodDeclaration:\r\n            case SyntaxKind.MethodSignature:\r\n            case SyntaxKind.Constructor:\r\n            case SyntaxKind.GetAccessor:\r\n            case SyntaxKind.SetAccessor:\r\n            case SyntaxKind.FunctionExpression:\r\n            case SyntaxKind.FunctionDeclaration:\r\n            case SyntaxKind.ArrowFunction:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<FunctionLikeDeclaration>node).asteriskToken) ||\r\n                    visitNode(cbNode, (<FunctionLikeDeclaration>node).name) ||\r\n                    visitNode(cbNode, (<FunctionLikeDeclaration>node).questionToken) ||\r\n                    visitNodes(cbNodes, (<FunctionLikeDeclaration>node).typeParameters) ||\r\n                    visitNodes(cbNodes, (<FunctionLikeDeclaration>node).parameters) ||\r\n                    visitNode(cbNode, (<FunctionLikeDeclaration>node).type) ||\r\n                    visitNode(cbNode, (<ArrowFunction>node).equalsGreaterThanToken) ||\r\n                    visitNode(cbNode, (<FunctionLikeDeclaration>node).body);\r\n            case SyntaxKind.TypeReference:\r\n                return visitNode(cbNode, (<TypeReferenceNode>node).typeName) ||\r\n                    visitNodes(cbNodes, (<TypeReferenceNode>node).typeArguments);\r\n            case SyntaxKind.TypePredicate:\r\n                return visitNode(cbNode, (<TypePredicateNode>node).parameterName) ||\r\n                    visitNode(cbNode, (<TypePredicateNode>node).type);\r\n            case SyntaxKind.TypeQuery:\r\n                return visitNode(cbNode, (<TypeQueryNode>node).exprName);\r\n            case SyntaxKind.TypeLiteral:\r\n                return visitNodes(cbNodes, (<TypeLiteralNode>node).members);\r\n            case SyntaxKind.ArrayType:\r\n                return visitNode(cbNode, (<ArrayTypeNode>node).elementType);\r\n            case SyntaxKind.TupleType:\r\n                return visitNodes(cbNodes, (<TupleTypeNode>node).elementTypes);\r\n            case SyntaxKind.UnionType:\r\n                return visitNodes(cbNodes, (<UnionTypeNode>node).types);\r\n            case SyntaxKind.ParenthesizedType:\r\n                return visitNode(cbNode, (<ParenthesizedTypeNode>node).type);\r\n            case SyntaxKind.ObjectBindingPattern:\r\n            case SyntaxKind.ArrayBindingPattern:\r\n                return visitNodes(cbNodes, (<BindingPattern>node).elements);\r\n            case SyntaxKind.ArrayLiteralExpression:\r\n                return visitNodes(cbNodes, (<ArrayLiteralExpression>node).elements);\r\n            case SyntaxKind.ObjectLiteralExpression:\r\n                return visitNodes(cbNodes, (<ObjectLiteralExpression>node).properties);\r\n            case SyntaxKind.PropertyAccessExpression:\r\n                return visitNode(cbNode, (<PropertyAccessExpression>node).expression) ||\r\n                    visitNode(cbNode, (<PropertyAccessExpression>node).dotToken) ||\r\n                    visitNode(cbNode, (<PropertyAccessExpression>node).name);\r\n            case SyntaxKind.ElementAccessExpression:\r\n                return visitNode(cbNode, (<ElementAccessExpression>node).expression) ||\r\n                    visitNode(cbNode, (<ElementAccessExpression>node).argumentExpression);\r\n            case SyntaxKind.CallExpression:\r\n            case SyntaxKind.NewExpression:\r\n                return visitNode(cbNode, (<CallExpression>node).expression) ||\r\n                    visitNodes(cbNodes, (<CallExpression>node).typeArguments) ||\r\n                    visitNodes(cbNodes, (<CallExpression>node).arguments);\r\n            case SyntaxKind.TaggedTemplateExpression:\r\n                return visitNode(cbNode, (<TaggedTemplateExpression>node).tag) ||\r\n                    visitNode(cbNode, (<TaggedTemplateExpression>node).template);\r\n            case SyntaxKind.TypeAssertionExpression:\r\n                return visitNode(cbNode, (<TypeAssertion>node).type) ||\r\n                    visitNode(cbNode, (<TypeAssertion>node).expression);\r\n            case SyntaxKind.ParenthesizedExpression:\r\n                return visitNode(cbNode, (<ParenthesizedExpression>node).expression);\r\n            case SyntaxKind.DeleteExpression:\r\n                return visitNode(cbNode, (<DeleteExpression>node).expression);\r\n            case SyntaxKind.TypeOfExpression:\r\n                return visitNode(cbNode, (<TypeOfExpression>node).expression);\r\n            case SyntaxKind.VoidExpression:\r\n                return visitNode(cbNode, (<VoidExpression>node).expression);\r\n            case SyntaxKind.PrefixUnaryExpression:\r\n                return visitNode(cbNode, (<PrefixUnaryExpression>node).operand);\r\n            case SyntaxKind.YieldExpression:\r\n                return visitNode(cbNode, (<YieldExpression>node).asteriskToken) ||\r\n                    visitNode(cbNode, (<YieldExpression>node).expression);\r\n            case SyntaxKind.PostfixUnaryExpression:\r\n                return visitNode(cbNode, (<PostfixUnaryExpression>node).operand);\r\n            case SyntaxKind.BinaryExpression:\r\n                return visitNode(cbNode, (<BinaryExpression>node).left) ||\r\n                    visitNode(cbNode, (<BinaryExpression>node).operatorToken) ||\r\n                    visitNode(cbNode, (<BinaryExpression>node).right);\r\n            case SyntaxKind.ConditionalExpression:\r\n                return visitNode(cbNode, (<ConditionalExpression>node).condition) ||\r\n                    visitNode(cbNode, (<ConditionalExpression>node).questionToken) ||\r\n                    visitNode(cbNode, (<ConditionalExpression>node).whenTrue) ||\r\n                    visitNode(cbNode, (<ConditionalExpression>node).colonToken) ||\r\n                    visitNode(cbNode, (<ConditionalExpression>node).whenFalse);\r\n            case SyntaxKind.SpreadElementExpression:\r\n                return visitNode(cbNode, (<SpreadElementExpression>node).expression);\r\n            case SyntaxKind.Block:\r\n            case SyntaxKind.ModuleBlock:\r\n                return visitNodes(cbNodes, (<Block>node).statements);\r\n            case SyntaxKind.SourceFile:\r\n                return visitNodes(cbNodes, (<SourceFile>node).statements) ||\r\n                    visitNode(cbNode, (<SourceFile>node).endOfFileToken);\r\n            case SyntaxKind.VariableStatement:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<VariableStatement>node).declarationList);\r\n            case SyntaxKind.VariableDeclarationList:\r\n                return visitNodes(cbNodes, (<VariableDeclarationList>node).declarations);\r\n            case SyntaxKind.ExpressionStatement:\r\n                return visitNode(cbNode, (<ExpressionStatement>node).expression);\r\n            case SyntaxKind.IfStatement:\r\n                return visitNode(cbNode, (<IfStatement>node).expression) ||\r\n                    visitNode(cbNode, (<IfStatement>node).thenStatement) ||\r\n                    visitNode(cbNode, (<IfStatement>node).elseStatement);\r\n            case SyntaxKind.DoStatement:\r\n                return visitNode(cbNode, (<DoStatement>node).statement) ||\r\n                    visitNode(cbNode, (<DoStatement>node).expression);\r\n            case SyntaxKind.WhileStatement:\r\n                return visitNode(cbNode, (<WhileStatement>node).expression) ||\r\n                    visitNode(cbNode, (<WhileStatement>node).statement);\r\n            case SyntaxKind.ForStatement:\r\n                return visitNode(cbNode, (<ForStatement>node).initializer) ||\r\n                    visitNode(cbNode, (<ForStatement>node).condition) ||\r\n                    visitNode(cbNode, (<ForStatement>node).incrementor) ||\r\n                    visitNode(cbNode, (<ForStatement>node).statement);\r\n            case SyntaxKind.ForInStatement:\r\n                return visitNode(cbNode, (<ForInStatement>node).initializer) ||\r\n                    visitNode(cbNode, (<ForInStatement>node).expression) ||\r\n                    visitNode(cbNode, (<ForInStatement>node).statement);\r\n            case SyntaxKind.ForOfStatement:\r\n                return visitNode(cbNode, (<ForOfStatement>node).initializer) ||\r\n                    visitNode(cbNode, (<ForOfStatement>node).expression) ||\r\n                    visitNode(cbNode, (<ForOfStatement>node).statement);\r\n            case SyntaxKind.ContinueStatement:\r\n            case SyntaxKind.BreakStatement:\r\n                return visitNode(cbNode, (<BreakOrContinueStatement>node).label);\r\n            case SyntaxKind.ReturnStatement:\r\n                return visitNode(cbNode, (<ReturnStatement>node).expression);\r\n            case SyntaxKind.WithStatement:\r\n                return visitNode(cbNode, (<WithStatement>node).expression) ||\r\n                    visitNode(cbNode, (<WithStatement>node).statement);\r\n            case SyntaxKind.SwitchStatement:\r\n                return visitNode(cbNode, (<SwitchStatement>node).expression) ||\r\n                    visitNode(cbNode, (<SwitchStatement>node).caseBlock);\r\n            case SyntaxKind.CaseBlock:\r\n                return visitNodes(cbNodes, (<CaseBlock>node).clauses);\r\n            case SyntaxKind.CaseClause:\r\n                return visitNode(cbNode, (<CaseClause>node).expression) ||\r\n                    visitNodes(cbNodes, (<CaseClause>node).statements);\r\n            case SyntaxKind.DefaultClause:\r\n                return visitNodes(cbNodes, (<DefaultClause>node).statements);\r\n            case SyntaxKind.LabeledStatement:\r\n                return visitNode(cbNode, (<LabeledStatement>node).label) ||\r\n                    visitNode(cbNode, (<LabeledStatement>node).statement);\r\n            case SyntaxKind.ThrowStatement:\r\n                return visitNode(cbNode, (<ThrowStatement>node).expression);\r\n            case SyntaxKind.TryStatement:\r\n                return visitNode(cbNode, (<TryStatement>node).tryBlock) ||\r\n                    visitNode(cbNode, (<TryStatement>node).catchClause) ||\r\n                    visitNode(cbNode, (<TryStatement>node).finallyBlock);\r\n            case SyntaxKind.CatchClause:\r\n                return visitNode(cbNode, (<CatchClause>node).variableDeclaration) ||\r\n                    visitNode(cbNode, (<CatchClause>node).block);\r\n            case SyntaxKind.Decorator:\r\n                return visitNode(cbNode, (<Decorator>node).expression);\r\n            case SyntaxKind.ClassDeclaration:\r\n            case SyntaxKind.ClassExpression:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ClassLikeDeclaration>node).name) ||\r\n                    visitNodes(cbNodes, (<ClassLikeDeclaration>node).typeParameters) ||\r\n                    visitNodes(cbNodes, (<ClassLikeDeclaration>node).heritageClauses) ||\r\n                    visitNodes(cbNodes, (<ClassLikeDeclaration>node).members);\r\n            case SyntaxKind.InterfaceDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<InterfaceDeclaration>node).name) ||\r\n                    visitNodes(cbNodes, (<InterfaceDeclaration>node).typeParameters) ||\r\n                    visitNodes(cbNodes, (<ClassDeclaration>node).heritageClauses) ||\r\n                    visitNodes(cbNodes, (<InterfaceDeclaration>node).members);\r\n            case SyntaxKind.TypeAliasDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<TypeAliasDeclaration>node).name) ||\r\n                    visitNodes(cbNodes, (<TypeAliasDeclaration>node).typeParameters) ||\r\n                    visitNode(cbNode, (<TypeAliasDeclaration>node).type);\r\n            case SyntaxKind.EnumDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<EnumDeclaration>node).name) ||\r\n                    visitNodes(cbNodes, (<EnumDeclaration>node).members);\r\n            case SyntaxKind.EnumMember:\r\n                return visitNode(cbNode, (<EnumMember>node).name) ||\r\n                    visitNode(cbNode, (<EnumMember>node).initializer);\r\n            case SyntaxKind.ModuleDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ModuleDeclaration>node).name) ||\r\n                    visitNode(cbNode, (<ModuleDeclaration>node).body);\r\n            case SyntaxKind.ImportEqualsDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ImportEqualsDeclaration>node).name) ||\r\n                    visitNode(cbNode, (<ImportEqualsDeclaration>node).moduleReference);\r\n            case SyntaxKind.ImportDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ImportDeclaration>node).importClause) ||\r\n                    visitNode(cbNode, (<ImportDeclaration>node).moduleSpecifier);\r\n            case SyntaxKind.ImportClause:\r\n                return visitNode(cbNode, (<ImportClause>node).name) ||\r\n                    visitNode(cbNode, (<ImportClause>node).namedBindings);\r\n            case SyntaxKind.NamespaceImport:\r\n                return visitNode(cbNode, (<NamespaceImport>node).name);\r\n            case SyntaxKind.NamedImports:\r\n            case SyntaxKind.NamedExports:\r\n                return visitNodes(cbNodes, (<NamedImportsOrExports>node).elements);\r\n            case SyntaxKind.ExportDeclaration:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ExportDeclaration>node).exportClause) ||\r\n                    visitNode(cbNode, (<ExportDeclaration>node).moduleSpecifier);\r\n            case SyntaxKind.ImportSpecifier:\r\n            case SyntaxKind.ExportSpecifier:\r\n                return visitNode(cbNode, (<ImportOrExportSpecifier>node).propertyName) ||\r\n                    visitNode(cbNode, (<ImportOrExportSpecifier>node).name);\r\n            case SyntaxKind.ExportAssignment:\r\n                return visitNodes(cbNodes, node.decorators) ||\r\n                    visitNodes(cbNodes, node.modifiers) ||\r\n                    visitNode(cbNode, (<ExportAssignment>node).expression);\r\n            case SyntaxKind.TemplateExpression:\r\n                return visitNode(cbNode, (<TemplateExpression>node).head) || visitNodes(cbNodes, (<TemplateExpression>node).templateSpans);\r\n            case SyntaxKind.TemplateSpan:\r\n                return visitNode(cbNode, (<TemplateSpan>node).expression) || visitNode(cbNode, (<TemplateSpan>node).literal);\r\n            case SyntaxKind.ComputedPropertyName:\r\n                return visitNode(cbNode, (<ComputedPropertyName>node).expression);\r\n            case SyntaxKind.HeritageClause:\r\n                return visitNodes(cbNodes, (<HeritageClause>node).types);\r\n            case SyntaxKind.ExpressionWithTypeArguments:\r\n                return visitNode(cbNode, (<ExpressionWithTypeArguments>node).expression) ||\r\n                    visitNodes(cbNodes, (<ExpressionWithTypeArguments>node).typeArguments);\r\n            case SyntaxKind.ExternalModuleReference:\r\n                return visitNode(cbNode, (<ExternalModuleReference>node).expression);\r\n            case SyntaxKind.MissingDeclaration:\r\n                return visitNodes(cbNodes, node.decorators);\r\n            case SyntaxKind.JSDocTypeExpression:\r\n                return visitNode(cbNode, (<JSDocTypeExpression>node).type);\r\n            case SyntaxKind.JSDocUnionType:\r\n                return visitNodes(cbNodes, (<JSDocUnionType>node).types);\r\n            case SyntaxKind.JSDocTupleType:\r\n                return visitNodes(cbNodes, (<JSDocTupleType>node).types);\r\n            case SyntaxKind.JSDocArrayType:\r\n                return visitNode(cbNode, (<JSDocArrayType>node).elementType);\r\n            case SyntaxKind.JSDocNonNullableType:\r\n                return visitNode(cbNode, (<JSDocNonNullableType>node).type);\r\n            case SyntaxKind.JSDocNullableType:\r\n                return visitNode(cbNode, (<JSDocNullableType>node).type);\r\n            case SyntaxKind.JSDocRecordType:\r\n                return visitNodes(cbNodes, (<JSDocRecordType>node).members);\r\n            case SyntaxKind.JSDocTypeReference:\r\n                return visitNode(cbNode, (<JSDocTypeReference>node).name) ||\r\n                    visitNodes(cbNodes, (<JSDocTypeReference>node).typeArguments);\r\n            case SyntaxKind.JSDocOptionalType:\r\n                return visitNode(cbNode, (<JSDocOptionalType>node).type);\r\n            case SyntaxKind.JSDocFunctionType:\r\n                return visitNodes(cbNodes, (<JSDocFunctionType>node).parameters) ||\r\n                    visitNode(cbNode, (<JSDocFunctionType>node).type);\r\n            case SyntaxKind.JSDocVariadicType:\r\n                return visitNode(cbNode, (<JSDocVariadicType>node).type);\r\n            case SyntaxKind.JSDocConstructorType:\r\n                return visitNode(cbNode, (<JSDocConstructorType>node).type);\r\n            case SyntaxKind.JSDocThisType:\r\n                return visitNode(cbNode, (<JSDocThisType>node).type);\r\n            case SyntaxKind.JSDocRecordMember:\r\n                return visitNode(cbNode, (<JSDocRecordMember>node).name) ||\r\n                    visitNode(cbNode, (<JSDocRecordMember>node).type);\r\n            case SyntaxKind.JSDocComment:\r\n                return visitNodes(cbNodes, (<JSDocComment>node).tags);\r\n            case SyntaxKind.JSDocParameterTag:\r\n                return visitNode(cbNode, (<JSDocParameterTag>node).preParameterName) ||\r\n                    visitNode(cbNode, (<JSDocParameterTag>node).typeExpression) ||\r\n                    visitNode(cbNode, (<JSDocParameterTag>node).postParameterName);\r\n            case SyntaxKind.JSDocReturnTag:\r\n                return visitNode(cbNode, (<JSDocReturnTag>node).typeExpression);\r\n            case SyntaxKind.JSDocTypeTag:\r\n                return visitNode(cbNode, (<JSDocTypeTag>node).typeExpression);\r\n            case SyntaxKind.JSDocTemplateTag:\r\n                return visitNodes(cbNodes, (<JSDocTemplateTag>node).typeParameters);\r\n        }\r\n    }\r\n\r\n    export function createSourceFile(fileName: string, sourceText: string, languageVersion: ScriptTarget, setParentNodes = false): SourceFile {\r\n        let start = new Date().getTime();\r\n        let result = Parser.parseSourceFile(fileName, sourceText, languageVersion, /*syntaxCursor*/ undefined, setParentNodes);\r\n\r\n        parseTime += new Date().getTime() - start;\r\n        return result;\r\n    }\r\n\r\n    // Produces a new SourceFile for the 'newText' provided. The 'textChangeRange' parameter\r\n    // indicates what changed between the 'text' that this SourceFile has and the 'newText'.\r\n    // The SourceFile will be created with the compiler attempting to reuse as many nodes from\r\n    // this file as possible.\r\n    //\r\n    // Note: this function mutates nodes from this SourceFile. That means any existing nodes\r\n    // from this SourceFile that are being held onto may change as a result (including\r\n    // becoming detached from any SourceFile).  It is recommended that this SourceFile not\r\n    // be used once 'update' is called on it.\r\n    export function updateSourceFile(sourceFile: SourceFile, newText: string, textChangeRange: TextChangeRange, aggressiveChecks?: boolean): SourceFile {\r\n        return IncrementalParser.updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks);\r\n    }\r\n    \r\n    /* @internal */\r\n    export function parseIsolatedJSDocComment(content: string, start?: number, length?: number) {\r\n        return Parser.JSDocParser.parseIsolatedJSDocComment(content, start, length);\r\n    }\r\n\r\n    /* @internal */\r\n    // Exposed only for testing.\r\n    export function parseJSDocTypeExpressionForTests(content: string, start?: number, length?: number) {\r\n        return Parser.JSDocParser.parseJSDocTypeExpressionForTests(content, start, length);\r\n    }\r\n\r\n    // Implement the parser as a singleton module.  We do this for perf reasons because creating\r\n    // parser instances can actually be expensive enough to impact us on projects with many source\r\n    // files.\r\n    module Parser {\r\n        // Share a single scanner across all calls to parse a source file.  This helps speed things\r\n        // up by avoiding the cost of creating/compiling scanners over and over again.\r\n        const scanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ true);\r\n        const disallowInAndDecoratorContext = ParserContextFlags.DisallowIn | ParserContextFlags.Decorator;\r\n\r\n        let sourceFile: SourceFile;\r\n        let parseDiagnostics: Diagnostic[];\r\n        let syntaxCursor: IncrementalParser.SyntaxCursor;\r\n\r\n        let token: SyntaxKind;\r\n        let sourceText: string;\r\n        let nodeCount: number;\r\n        let identifiers: Map<string>;\r\n        let identifierCount: number;\r\n\r\n        let parsingContext: ParsingContext;\r\n\r\n        // Flags that dictate what parsing context we're in.  For example:\r\n        // Whether or not we are in strict parsing mode.  All that changes in strict parsing mode is\r\n        // that some tokens that would be considered identifiers may be considered keywords.\r\n        //\r\n        // When adding more parser context flags, consider which is the more common case that the\r\n        // flag will be in.  This should be the 'false' state for that flag.  The reason for this is\r\n        // that we don't store data in our nodes unless the value is in the *non-default* state.  So,\r\n        // for example, more often than code 'allows-in' (or doesn't 'disallow-in').  We opt for\r\n        // 'disallow-in' set to 'false'.  Otherwise, if we had 'allowsIn' set to 'true', then almost\r\n        // all nodes would need extra state on them to store this info.\r\n        //\r\n        // Note:  'allowIn' and 'allowYield' track 1:1 with the [in] and [yield] concepts in the ES6\r\n        // grammar specification.\r\n        //\r\n        // An important thing about these context concepts.  By default they are effectively inherited\r\n        // while parsing through every grammar production.  i.e. if you don't change them, then when\r\n        // you parse a sub-production, it will have the same context values as the parent production.\r\n        // This is great most of the time.  After all, consider all the 'expression' grammar productions\r\n        // and how nearly all of them pass along the 'in' and 'yield' context values:\r\n        //\r\n        // EqualityExpression[In, Yield] :\r\n        //      RelationalExpression[?In, ?Yield]\r\n        //      EqualityExpression[?In, ?Yield] == RelationalExpression[?In, ?Yield]\r\n        //      EqualityExpression[?In, ?Yield] != RelationalExpression[?In, ?Yield]\r\n        //      EqualityExpression[?In, ?Yield] === RelationalExpression[?In, ?Yield]\r\n        //      EqualityExpression[?In, ?Yield] !== RelationalExpression[?In, ?Yield]\r\n        //\r\n        // Where you have to be careful is then understanding what the points are in the grammar\r\n        // where the values are *not* passed along.  For example:\r\n        //\r\n        // SingleNameBinding[Yield,GeneratorParameter]\r\n        //      [+GeneratorParameter]BindingIdentifier[Yield] Initializer[In]opt\r\n        //      [~GeneratorParameter]BindingIdentifier[?Yield]Initializer[In, ?Yield]opt\r\n        //\r\n        // Here this is saying that if the GeneratorParameter context flag is set, that we should\r\n        // explicitly set the 'yield' context flag to false before calling into the BindingIdentifier\r\n        // and we should explicitly unset the 'yield' context flag before calling into the Initializer.\r\n        // production.  Conversely, if the GeneratorParameter context flag is not set, then we\r\n        // should leave the 'yield' context flag alone.\r\n        //\r\n        // Getting this all correct is tricky and requires careful reading of the grammar to\r\n        // understand when these values should be changed versus when they should be inherited.\r\n        //\r\n        // Note: it should not be necessary to save/restore these flags during speculative/lookahead\r\n        // parsing.  These context flags are naturally stored and restored through normal recursive\r\n        // descent parsing and unwinding.\r\n        let contextFlags: ParserContextFlags;\r\n\r\n        // Whether or not we've had a parse error since creating the last AST node.  If we have\r\n        // encountered an error, it will be stored on the next AST node we create.  Parse errors\r\n        // can be broken down into three categories:\r\n        //\r\n        // 1) An error that occurred during scanning.  For example, an unterminated literal, or a\r\n        //    character that was completely not understood.\r\n        //\r\n        // 2) A token was expected, but was not present.  This type of error is commonly produced\r\n        //    by the 'parseExpected' function.\r\n        //\r\n        // 3) A token was present that no parsing function was able to consume.  This type of error\r\n        //    only occurs in the 'abortParsingListOrMoveToNextToken' function when the parser\r\n        //    decides to skip the token.\r\n        //\r\n        // In all of these cases, we want to mark the next node as having had an error before it.\r\n        // With this mark, we can know in incremental settings if this node can be reused, or if\r\n        // we have to reparse it.  If we don't keep this information around, we may just reuse the\r\n        // node.  in that event we would then not produce the same errors as we did before, causing\r\n        // significant confusion problems.\r\n        //\r\n        // Note: it is necessary that this value be saved/restored during speculative/lookahead\r\n        // parsing.  During lookahead parsing, we will often create a node.  That node will have\r\n        // this value attached, and then this value will be set back to 'false'.  If we decide to\r\n        // rewind, we must get back to the same value we had prior to the lookahead.\r\n        //\r\n        // Note: any errors at the end of the file that do not precede a regular node, should get\r\n        // attached to the EOF token.\r\n        let parseErrorBeforeNextFinishedNode: boolean = false;\r\n\r\n        export const enum StatementFlags {\r\n            None = 0,\r\n            Statement = 1,\r\n            ModuleElement = 2,\r\n            StatementOrModuleElement = Statement | ModuleElement\r\n        }\r\n\r\n        export function parseSourceFile(fileName: string, _sourceText: string, languageVersion: ScriptTarget, _syntaxCursor: IncrementalParser.SyntaxCursor, setParentNodes?: boolean): SourceFile {\r\n            initializeState(fileName, _sourceText, languageVersion, _syntaxCursor);\r\n\r\n            let result = parseSourceFileWorker(fileName, languageVersion, setParentNodes);\r\n\r\n            clearState();\r\n\r\n            return result;\r\n        }\r\n\r\n        function initializeState(fileName: string, _sourceText: string, languageVersion: ScriptTarget, _syntaxCursor: IncrementalParser.SyntaxCursor) {\r\n            sourceText = _sourceText;\r\n            syntaxCursor = _syntaxCursor;\r\n\r\n            parseDiagnostics = [];\r\n            parsingContext = 0;\r\n            identifiers = {};\r\n            identifierCount = 0;\r\n            nodeCount = 0;\r\n\r\n            contextFlags = isJavaScript(fileName) ? ParserContextFlags.JavaScriptFile : ParserContextFlags.None;\r\n            parseErrorBeforeNextFinishedNode = false;\r\n\r\n            // Initialize and prime the scanner before parsing the source elements.\r\n            scanner.setText(sourceText);\r\n            scanner.setOnError(scanError);\r\n            scanner.setScriptTarget(languageVersion);\r\n        }\r\n\r\n        function clearState() {\r\n            // Clear out the text the scanner is pointing at, so it doesn't keep anything alive unnecessarily.\r\n            scanner.setText(\"\");\r\n            scanner.setOnError(undefined);\r\n\r\n            // Clear any data.  We don't want to accidently hold onto it for too long.\r\n            parseDiagnostics = undefined;\r\n            sourceFile = undefined;\r\n            identifiers = undefined;\r\n            syntaxCursor = undefined;\r\n            sourceText = undefined;\r\n        }\r\n\r\n        function parseSourceFileWorker(fileName: string, languageVersion: ScriptTarget, setParentNodes: boolean): SourceFile {\r\n            sourceFile = createSourceFile(fileName, languageVersion);\r\n\r\n            // Prime the scanner.\r\n            token = nextToken();\r\n            processReferenceComments(sourceFile);\r\n\r\n            sourceFile.statements = parseList(ParsingContext.SourceElements, /*checkForStrictMode*/ true, parseSourceElement);\r\n            Debug.assert(token === SyntaxKind.EndOfFileToken);\r\n            sourceFile.endOfFileToken = parseTokenNode();\r\n\r\n            setExternalModuleIndicator(sourceFile);\r\n\r\n            sourceFile.nodeCount = nodeCount;\r\n            sourceFile.identifierCount = identifierCount;\r\n            sourceFile.identifiers = identifiers;\r\n            sourceFile.parseDiagnostics = parseDiagnostics;\r\n\r\n            if (setParentNodes) {\r\n                fixupParentReferences(sourceFile);\r\n            }\r\n\r\n            // If this is a javascript file, proactively see if we can get JSDoc comments for \r\n            // relevant nodes in the file.  We'll use these to provide typing informaion if they're\r\n            // available.\r\n            if (isJavaScript(fileName)) {\r\n                addJSDocComments();\r\n            }\r\n\r\n            return sourceFile;\r\n        }\r\n\r\n        function addJSDocComments() {\r\n            forEachChild(sourceFile, visit);\r\n            return;\r\n\r\n            function visit(node: Node) {\r\n                // Add additional cases as necessary depending on how we see JSDoc comments used\r\n                // in the wild.\r\n                switch (node.kind) {\r\n                    case SyntaxKind.VariableStatement:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.Parameter:\r\n                        addJSDocComment(node);\r\n                }\r\n\r\n                forEachChild(node, visit);\r\n            }\r\n        }\r\n\r\n        function addJSDocComment(node: Node) {\r\n            let comments = getLeadingCommentRangesOfNode(node, sourceFile);\r\n            if (comments) {\r\n                for (let comment of comments) {\r\n                    let jsDocComment = JSDocParser.parseJSDocComment(node, comment.pos, comment.end - comment.pos);\r\n                    if (jsDocComment) {\r\n                        node.jsDocComment = jsDocComment;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        export function fixupParentReferences(sourceFile: Node) {\r\n            // normally parent references are set during binding. However, for clients that only need\r\n            // a syntax tree, and no semantic features, then the binding process is an unnecessary\r\n            // overhead.  This functions allows us to set all the parents, without all the expense of\r\n            // binding.\r\n\r\n            let parent: Node = sourceFile;\r\n            forEachChild(sourceFile, visitNode);\r\n            return;\r\n\r\n            function visitNode(n: Node): void {\r\n                // walk down setting parents that differ from the parent we think it should be.  This\r\n                // allows us to quickly bail out of setting parents for subtrees during incremental\r\n                // parsing\r\n                if (n.parent !== parent) {\r\n                    n.parent = parent;\r\n\r\n                    let saveParent = parent;\r\n                    parent = n;\r\n                    forEachChild(n, visitNode);\r\n                    parent = saveParent;\r\n                }\r\n            }\r\n        }\r\n\r\n        function createSourceFile(fileName: string, languageVersion: ScriptTarget): SourceFile {\r\n            let sourceFile = <SourceFile>createNode(SyntaxKind.SourceFile, /*pos*/ 0);\r\n\r\n            sourceFile.pos = 0;\r\n            sourceFile.end = sourceText.length;\r\n            sourceFile.text = sourceText;\r\n            sourceFile.bindDiagnostics = [];\r\n            sourceFile.languageVersion = languageVersion;\r\n            sourceFile.fileName = normalizePath(fileName);\r\n            sourceFile.flags = fileExtensionIs(sourceFile.fileName, \".d.ts\") ? NodeFlags.DeclarationFile : 0;\r\n\r\n            return sourceFile;\r\n        }\r\n\r\n        function setContextFlag(val: Boolean, flag: ParserContextFlags) {\r\n            if (val) {\r\n                contextFlags |= flag;\r\n            }\r\n            else {\r\n                contextFlags &= ~flag;\r\n            }\r\n        }\r\n\r\n        function setStrictModeContext(val: boolean) {\r\n            setContextFlag(val, ParserContextFlags.StrictMode);\r\n        }\r\n\r\n        function setDisallowInContext(val: boolean) {\r\n            setContextFlag(val, ParserContextFlags.DisallowIn);\r\n        }\r\n\r\n        function setYieldContext(val: boolean) {\r\n            setContextFlag(val, ParserContextFlags.Yield);\r\n        }\r\n\r\n        function setGeneratorParameterContext(val: boolean) {\r\n            setContextFlag(val, ParserContextFlags.GeneratorParameter);\r\n        }\r\n\r\n        function setDecoratorContext(val: boolean) {\r\n            setContextFlag(val, ParserContextFlags.Decorator);\r\n        }\r\n\r\n        function doOutsideOfContext<T>(flags: ParserContextFlags, func: () => T): T {\r\n            let currentContextFlags = contextFlags & flags;\r\n            if (currentContextFlags) {\r\n                setContextFlag(false, currentContextFlags);\r\n                let result = func();\r\n                setContextFlag(true, currentContextFlags);\r\n                return result;\r\n            }\r\n\r\n            // no need to do anything special as we are not in any of the requested contexts\r\n            return func();\r\n        }\r\n\r\n        function allowInAnd<T>(func: () => T): T {\r\n            if (contextFlags & ParserContextFlags.DisallowIn) {\r\n                setDisallowInContext(false);\r\n                let result = func();\r\n                setDisallowInContext(true);\r\n                return result;\r\n            }\r\n\r\n            // no need to do anything special if 'in' is already allowed.\r\n            return func();\r\n        }\r\n\r\n        function disallowInAnd<T>(func: () => T): T {\r\n            if (contextFlags & ParserContextFlags.DisallowIn) {\r\n                // no need to do anything special if 'in' is already disallowed.\r\n                return func();\r\n            }\r\n\r\n            setDisallowInContext(true);\r\n            let result = func();\r\n            setDisallowInContext(false);\r\n            return result;\r\n        }\r\n\r\n        function doInYieldContext<T>(func: () => T): T {\r\n            if (contextFlags & ParserContextFlags.Yield) {\r\n                // no need to do anything special if we're already in the [Yield] context.\r\n                return func();\r\n            }\r\n\r\n            setYieldContext(true);\r\n            let result = func();\r\n            setYieldContext(false);\r\n            return result;\r\n        }\r\n\r\n        function doOutsideOfYieldContext<T>(func: () => T): T {\r\n            if (contextFlags & ParserContextFlags.Yield) {\r\n                setYieldContext(false);\r\n                let result = func();\r\n                setYieldContext(true);\r\n                return result;\r\n            }\r\n\r\n            // no need to do anything special if we're not in the [Yield] context.\r\n            return func();\r\n        }\r\n\r\n        function doInDecoratorContext<T>(func: () => T): T {\r\n            if (contextFlags & ParserContextFlags.Decorator) {\r\n                // no need to do anything special if we're already in the [Decorator] context.\r\n                return func();\r\n            }\r\n\r\n            setDecoratorContext(true);\r\n            let result = func();\r\n            setDecoratorContext(false);\r\n            return result;\r\n        }\r\n\r\n        function inYieldContext() {\r\n            return (contextFlags & ParserContextFlags.Yield) !== 0;\r\n        }\r\n\r\n        function inStrictModeContext() {\r\n            return (contextFlags & ParserContextFlags.StrictMode) !== 0;\r\n        }\r\n\r\n        function inGeneratorParameterContext() {\r\n            return (contextFlags & ParserContextFlags.GeneratorParameter) !== 0;\r\n        }\r\n\r\n        function inDisallowInContext() {\r\n            return (contextFlags & ParserContextFlags.DisallowIn) !== 0;\r\n        }\r\n\r\n        function inDecoratorContext() {\r\n            return (contextFlags & ParserContextFlags.Decorator) !== 0;\r\n        }\r\n\r\n        function parseErrorAtCurrentToken(message: DiagnosticMessage, arg0?: any): void {\r\n            let start = scanner.getTokenPos();\r\n            let length = scanner.getTextPos() - start;\r\n\r\n            parseErrorAtPosition(start, length, message, arg0);\r\n        }\r\n\r\n        function parseErrorAtPosition(start: number, length: number, message: DiagnosticMessage, arg0?: any): void {\r\n            // Don't report another error if it would just be at the same position as the last error.\r\n            let lastError = lastOrUndefined(parseDiagnostics);\r\n            if (!lastError || start !== lastError.start) {\r\n                parseDiagnostics.push(createFileDiagnostic(sourceFile, start, length, message, arg0));\r\n            }\r\n\r\n            // Mark that we've encountered an error.  We'll set an appropriate bit on the next\r\n            // node we finish so that it can't be reused incrementally.\r\n            parseErrorBeforeNextFinishedNode = true;\r\n        }\r\n\r\n        function scanError(message: DiagnosticMessage, length?: number) {\r\n            let pos = scanner.getTextPos();\r\n            parseErrorAtPosition(pos, length || 0, message);\r\n        }\r\n\r\n        function getNodePos(): number {\r\n            return scanner.getStartPos();\r\n        }\r\n\r\n        function getNodeEnd(): number {\r\n            return scanner.getStartPos();\r\n        }\r\n\r\n        function nextToken(): SyntaxKind {\r\n            return token = scanner.scan();\r\n        }\r\n\r\n        function getTokenPos(pos: number): number {\r\n            return skipTrivia(sourceText, pos);\r\n        }\r\n\r\n        function reScanGreaterToken(): SyntaxKind {\r\n            return token = scanner.reScanGreaterToken();\r\n        }\r\n\r\n        function reScanSlashToken(): SyntaxKind {\r\n            return token = scanner.reScanSlashToken();\r\n        }\r\n\r\n        function reScanTemplateToken(): SyntaxKind {\r\n            return token = scanner.reScanTemplateToken();\r\n        }\r\n\r\n        function speculationHelper<T>(callback: () => T, isLookAhead: boolean): T {\r\n            // Keep track of the state we'll need to rollback to if lookahead fails (or if the\r\n            // caller asked us to always reset our state).\r\n            let saveToken = token;\r\n            let saveParseDiagnosticsLength = parseDiagnostics.length;\r\n            let saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;\r\n\r\n            // Note: it is not actually necessary to save/restore the context flags here.  That's\r\n            // because the saving/restorating of these flags happens naturally through the recursive\r\n            // descent nature of our parser.  However, we still store this here just so we can\r\n            // assert that that invariant holds.\r\n            let saveContextFlags = contextFlags;\r\n\r\n            // If we're only looking ahead, then tell the scanner to only lookahead as well.\r\n            // Otherwise, if we're actually speculatively parsing, then tell the scanner to do the\r\n            // same.\r\n            let result = isLookAhead\r\n                ? scanner.lookAhead(callback)\r\n                : scanner.tryScan(callback);\r\n\r\n            Debug.assert(saveContextFlags === contextFlags);\r\n\r\n            // If our callback returned something 'falsy' or we're just looking ahead,\r\n            // then unconditionally restore us to where we were.\r\n            if (!result || isLookAhead) {\r\n                token = saveToken;\r\n                parseDiagnostics.length = saveParseDiagnosticsLength;\r\n                parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        // Invokes the provided callback then unconditionally restores the parser to the state it\r\n        // was in immediately prior to invoking the callback.  The result of invoking the callback\r\n        // is returned from this function.\r\n        function lookAhead<T>(callback: () => T): T {\r\n            return speculationHelper(callback, /*isLookAhead*/ true);\r\n        }\r\n\r\n        // Invokes the provided callback.  If the callback returns something falsy, then it restores\r\n        // the parser to the state it was in immediately prior to invoking the callback.  If the\r\n        // callback returns something truthy, then the parser state is not rolled back.  The result\r\n        // of invoking the callback is returned from this function.\r\n        function tryParse<T>(callback: () => T): T {\r\n            return speculationHelper(callback, /*isLookAhead*/ false);\r\n        }\r\n\r\n        // Ignore strict mode flag because we will report an error in type checker instead.\r\n        function isIdentifier(): boolean {\r\n            if (token === SyntaxKind.Identifier) {\r\n                return true;\r\n            }\r\n\r\n            // If we have a 'yield' keyword, and we're in the [yield] context, then 'yield' is\r\n            // considered a keyword and is not an identifier.\r\n            if (token === SyntaxKind.YieldKeyword && inYieldContext()) {\r\n                return false;\r\n            }\r\n\r\n            return token > SyntaxKind.LastReservedWord;\r\n        }\r\n\r\n        function parseExpected(kind: SyntaxKind, diagnosticMessage?: DiagnosticMessage): boolean {\r\n            if (token === kind) {\r\n                nextToken();\r\n                return true;\r\n            }\r\n\r\n            // Report specific message if provided with one.  Otherwise, report generic fallback message.\r\n            if (diagnosticMessage) {\r\n                parseErrorAtCurrentToken(diagnosticMessage);\r\n            }\r\n            else {\r\n                parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(kind));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function parseOptional(t: SyntaxKind): boolean {\r\n            if (token === t) {\r\n                nextToken();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function parseOptionalToken(t: SyntaxKind): Node {\r\n            if (token === t) {\r\n                return parseTokenNode();\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function parseExpectedToken(t: SyntaxKind, reportAtCurrentPosition: boolean, diagnosticMessage: DiagnosticMessage, arg0?: any): Node {\r\n            return parseOptionalToken(t) ||\r\n                createMissingNode(t, reportAtCurrentPosition, diagnosticMessage, arg0);\r\n        }\r\n\r\n        function parseTokenNode<T extends Node>(): T {\r\n            let node = <T>createNode(token);\r\n            nextToken();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function canParseSemicolon() {\r\n            // If there's a real semicolon, then we can always parse it out.\r\n            if (token === SyntaxKind.SemicolonToken) {\r\n                return true;\r\n            }\r\n\r\n            // We can parse out an optional semicolon in ASI cases in the following cases.\r\n            return token === SyntaxKind.CloseBraceToken || token === SyntaxKind.EndOfFileToken || scanner.hasPrecedingLineBreak();\r\n        }\r\n\r\n        function parseSemicolon(): boolean {\r\n            if (canParseSemicolon()) {\r\n                if (token === SyntaxKind.SemicolonToken) {\r\n                    // consume the semicolon if it was explicitly provided.\r\n                    nextToken();\r\n                }\r\n\r\n                return true;\r\n            }\r\n            else {\r\n                return parseExpected(SyntaxKind.SemicolonToken);\r\n            }\r\n        }\r\n\r\n        function createNode(kind: SyntaxKind, pos?: number): Node {\r\n            nodeCount++;\r\n            let node = new (nodeConstructors[kind] || (nodeConstructors[kind] = objectAllocator.getNodeConstructor(kind)))();\r\n            if (!(pos >= 0)) {\r\n                pos = scanner.getStartPos();\r\n            }\r\n\r\n            node.pos = pos;\r\n            node.end = pos;\r\n            return node;\r\n        }\r\n\r\n        function finishNode<T extends Node>(node: T, end?: number): T {\r\n            node.end = end === undefined ? scanner.getStartPos() : end;\r\n\r\n            if (contextFlags) {\r\n                node.parserContextFlags = contextFlags;\r\n            }\r\n\r\n            // Keep track on the node if we encountered an error while parsing it.  If we did, then\r\n            // we cannot reuse the node incrementally.  Once we've marked this node, clear out the\r\n            // flag so that we don't mark any subsequent nodes.\r\n            if (parseErrorBeforeNextFinishedNode) {\r\n                parseErrorBeforeNextFinishedNode = false;\r\n                node.parserContextFlags |= ParserContextFlags.ThisNodeHasError;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        function createMissingNode(kind: SyntaxKind, reportAtCurrentPosition: boolean, diagnosticMessage: DiagnosticMessage, arg0?: any): Node {\r\n            if (reportAtCurrentPosition) {\r\n                parseErrorAtPosition(scanner.getStartPos(), 0, diagnosticMessage, arg0);\r\n            }\r\n            else {\r\n                parseErrorAtCurrentToken(diagnosticMessage, arg0);\r\n            }\r\n\r\n            let result = createNode(kind, scanner.getStartPos());\r\n            (<Identifier>result).text = \"\";\r\n            return finishNode(result);\r\n        }\r\n\r\n        function internIdentifier(text: string): string {\r\n            text = escapeIdentifier(text);\r\n            return hasProperty(identifiers, text) ? identifiers[text] : (identifiers[text] = text);\r\n        }\r\n\r\n        // An identifier that starts with two underscores has an extra underscore character prepended to it to avoid issues\r\n        // with magic property names like '__proto__'. The 'identifiers' object is used to share a single string instance for\r\n        // each identifier in order to reduce memory consumption.\r\n        function createIdentifier(isIdentifier: boolean, diagnosticMessage?: DiagnosticMessage): Identifier {\r\n            identifierCount++;\r\n            if (isIdentifier) {\r\n                let node = <Identifier>createNode(SyntaxKind.Identifier);\r\n\r\n                // Store original token kind if it is not just an Identifier so we can report appropriate error later in type checker\r\n                if (token !== SyntaxKind.Identifier) {\r\n                    node.originalKeywordKind = token;\r\n                }\r\n                node.text = internIdentifier(scanner.getTokenValue());\r\n                nextToken();\r\n                return finishNode(node);\r\n            }\r\n\r\n            return <Identifier>createMissingNode(SyntaxKind.Identifier, /*reportAtCurrentPosition*/ false, diagnosticMessage || Diagnostics.Identifier_expected);\r\n        }\r\n\r\n        function parseIdentifier(diagnosticMessage?: DiagnosticMessage): Identifier {\r\n            return createIdentifier(isIdentifier(), diagnosticMessage);\r\n        }\r\n\r\n        function parseIdentifierName(): Identifier {\r\n            return createIdentifier(isIdentifierOrKeyword());\r\n        }\r\n\r\n        function isLiteralPropertyName(): boolean {\r\n            return isIdentifierOrKeyword() ||\r\n                token === SyntaxKind.StringLiteral ||\r\n                token === SyntaxKind.NumericLiteral;\r\n        }\r\n\r\n        function parsePropertyNameWorker(allowComputedPropertyNames: boolean): DeclarationName {\r\n            if (token === SyntaxKind.StringLiteral || token === SyntaxKind.NumericLiteral) {\r\n                return parseLiteralNode(/*internName*/ true);\r\n            }\r\n            if (allowComputedPropertyNames && token === SyntaxKind.OpenBracketToken) {\r\n                return parseComputedPropertyName();\r\n            }\r\n            return parseIdentifierName();\r\n        }\r\n\r\n        function parsePropertyName(): DeclarationName {\r\n            return parsePropertyNameWorker(/*allowComputedPropertyNames:*/ true);\r\n        }\r\n\r\n        function parseSimplePropertyName(): Identifier | LiteralExpression {\r\n            return <Identifier | LiteralExpression>parsePropertyNameWorker(/*allowComputedPropertyNames:*/ false);\r\n        }\r\n\r\n        function isSimplePropertyName() {\r\n            return token === SyntaxKind.StringLiteral || token === SyntaxKind.NumericLiteral || isIdentifierOrKeyword();\r\n        }\r\n\r\n        function parseComputedPropertyName(): ComputedPropertyName {\r\n            // PropertyName[Yield,GeneratorParameter] :\r\n            //     LiteralPropertyName\r\n            //     [+GeneratorParameter] ComputedPropertyName\r\n            //     [~GeneratorParameter] ComputedPropertyName[?Yield]\r\n            //\r\n            // ComputedPropertyName[Yield] :\r\n            //     [ AssignmentExpression[In, ?Yield] ]\r\n            //\r\n            let node = <ComputedPropertyName>createNode(SyntaxKind.ComputedPropertyName);\r\n            parseExpected(SyntaxKind.OpenBracketToken);\r\n\r\n            // We parse any expression (including a comma expression). But the grammar\r\n            // says that only an assignment expression is allowed, so the grammar checker\r\n            // will error if it sees a comma expression.\r\n            let yieldContext = inYieldContext();\r\n            if (inGeneratorParameterContext()) {\r\n                setYieldContext(false);\r\n            }\r\n\r\n            node.expression = allowInAnd(parseExpression);\r\n            if (inGeneratorParameterContext()) {\r\n                setYieldContext(yieldContext);\r\n            }\r\n\r\n            parseExpected(SyntaxKind.CloseBracketToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseContextualModifier(t: SyntaxKind): boolean {\r\n            return token === t && tryParse(nextTokenCanFollowModifier);\r\n        }\r\n\r\n        function nextTokenCanFollowModifier() {\r\n            if (token === SyntaxKind.ConstKeyword) {\r\n                // 'const' is only a modifier if followed by 'enum'.\r\n                return nextToken() === SyntaxKind.EnumKeyword;\r\n            }\r\n            if (token === SyntaxKind.ExportKeyword) {\r\n                nextToken();\r\n                if (token === SyntaxKind.DefaultKeyword) {\r\n                    return lookAhead(nextTokenIsClassOrFunction);\r\n                }\r\n                return token !== SyntaxKind.AsteriskToken && token !== SyntaxKind.OpenBraceToken && canFollowModifier();\r\n            }\r\n            if (token === SyntaxKind.DefaultKeyword) {\r\n                return nextTokenIsClassOrFunction();\r\n            }\r\n            nextToken();\r\n            return canFollowModifier();\r\n        }\r\n\r\n        function parseAnyContextualModifier(): boolean {\r\n            return isModifier(token) && tryParse(nextTokenCanFollowModifier);\r\n        }\r\n\r\n        function canFollowModifier(): boolean {\r\n            return token === SyntaxKind.OpenBracketToken\r\n                || token === SyntaxKind.OpenBraceToken\r\n                || token === SyntaxKind.AsteriskToken\r\n                || isLiteralPropertyName();\r\n        }\r\n\r\n        function nextTokenIsClassOrFunction(): boolean {\r\n            nextToken();\r\n            return token === SyntaxKind.ClassKeyword || token === SyntaxKind.FunctionKeyword;\r\n        }\r\n\r\n        // True if positioned at the start of a list element\r\n        function isListElement(parsingContext: ParsingContext, inErrorRecovery: boolean): boolean {\r\n            let node = currentNode(parsingContext);\r\n            if (node) {\r\n                return true;\r\n            }\r\n\r\n            switch (parsingContext) {\r\n                case ParsingContext.SourceElements:\r\n                case ParsingContext.ModuleElements:\r\n                    // If we're in error recovery, then we don't want to treat ';' as an empty statement.\r\n                    // The problem is that ';' can show up in far too many contexts, and if we see one\r\n                    // and assume it's a statement, then we may bail out inappropriately from whatever\r\n                    // we're parsing.  For example, if we have a semicolon in the middle of a class, then\r\n                    // we really don't want to assume the class is over and we're on a statement in the\r\n                    // outer module.  We just want to consume and move on.\r\n                    return !(token === SyntaxKind.SemicolonToken && inErrorRecovery) && isStartOfModuleElement();\r\n                case ParsingContext.BlockStatements:\r\n                case ParsingContext.SwitchClauseStatements:\r\n                    // During error recovery we don't treat empty statements as statements\r\n                    return !(token === SyntaxKind.SemicolonToken && inErrorRecovery) && isStartOfStatement();\r\n                case ParsingContext.SwitchClauses:\r\n                    return token === SyntaxKind.CaseKeyword || token === SyntaxKind.DefaultKeyword;\r\n                case ParsingContext.TypeMembers:\r\n                    return isStartOfTypeMember();\r\n                case ParsingContext.ClassMembers:\r\n                    // We allow semicolons as class elements (as specified by ES6) as long as we're\r\n                    // not in error recovery.  If we're in error recovery, we don't want an errant\r\n                    // semicolon to be treated as a class member (since they're almost always used\r\n                    // for statements.\r\n                    return lookAhead(isClassMemberStart) || (token === SyntaxKind.SemicolonToken && !inErrorRecovery);\r\n                case ParsingContext.EnumMembers:\r\n                    // Include open bracket computed properties. This technically also lets in indexers,\r\n                    // which would be a candidate for improved error reporting.\r\n                    return token === SyntaxKind.OpenBracketToken || isLiteralPropertyName();\r\n                case ParsingContext.ObjectLiteralMembers:\r\n                    return token === SyntaxKind.OpenBracketToken || token === SyntaxKind.AsteriskToken || isLiteralPropertyName();\r\n                case ParsingContext.ObjectBindingElements:\r\n                    return isLiteralPropertyName();\r\n                case ParsingContext.HeritageClauseElement:\r\n                    // If we see { } then only consume it as an expression if it is followed by , or {\r\n                    // That way we won't consume the body of a class in its heritage clause.\r\n                    if (token === SyntaxKind.OpenBraceToken) {\r\n                        return lookAhead(isValidHeritageClauseObjectLiteral);\r\n                    }\r\n\r\n                    if (!inErrorRecovery) {\r\n                        return isStartOfLeftHandSideExpression() && !isHeritageClauseExtendsOrImplementsKeyword();\r\n                    }\r\n                    else {\r\n                        // If we're in error recovery we tighten up what we're willing to match.\r\n                        // That way we don't treat something like \"this\" as a valid heritage clause\r\n                        // element during recovery.\r\n                        return isIdentifier() && !isHeritageClauseExtendsOrImplementsKeyword();\r\n                    }\r\n                case ParsingContext.VariableDeclarations:\r\n                    return isIdentifierOrPattern();\r\n                case ParsingContext.ArrayBindingElements:\r\n                    return token === SyntaxKind.CommaToken || token === SyntaxKind.DotDotDotToken || isIdentifierOrPattern();\r\n                case ParsingContext.TypeParameters:\r\n                    return isIdentifier();\r\n                case ParsingContext.ArgumentExpressions:\r\n                case ParsingContext.ArrayLiteralMembers:\r\n                    return token === SyntaxKind.CommaToken || token === SyntaxKind.DotDotDotToken || isStartOfExpression();\r\n                case ParsingContext.Parameters:\r\n                    return isStartOfParameter();\r\n                case ParsingContext.TypeArguments:\r\n                case ParsingContext.TupleElementTypes:\r\n                    return token === SyntaxKind.CommaToken || isStartOfType();\r\n                case ParsingContext.HeritageClauses:\r\n                    return isHeritageClause();\r\n                case ParsingContext.ImportOrExportSpecifiers:\r\n                    return isIdentifierOrKeyword();\r\n                case ParsingContext.JSDocFunctionParameters:\r\n                case ParsingContext.JSDocTypeArguments:\r\n                case ParsingContext.JSDocTupleTypes:\r\n                    return JSDocParser.isJSDocType();\r\n                case ParsingContext.JSDocRecordMembers:\r\n                    return isSimplePropertyName();\r\n            }\r\n\r\n            Debug.fail(\"Non-exhaustive case in 'isListElement'.\");\r\n        }\r\n\r\n        function isValidHeritageClauseObjectLiteral() {\r\n            Debug.assert(token === SyntaxKind.OpenBraceToken);\r\n            if (nextToken() === SyntaxKind.CloseBraceToken) {\r\n                // if we see  \"extends {}\" then only treat the {} as what we're extending (and not\r\n                // the class body) if we have:\r\n                //\r\n                //      extends {} { \r\n                //      extends {},\r\n                //      extends {} extends\r\n                //      extends {} implements\r\n\r\n                let next = nextToken();\r\n                return next === SyntaxKind.CommaToken || next === SyntaxKind.OpenBraceToken || next === SyntaxKind.ExtendsKeyword || next === SyntaxKind.ImplementsKeyword;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function nextTokenIsIdentifier() {\r\n            nextToken();\r\n            return isIdentifier();\r\n        }\r\n\r\n        function isHeritageClauseExtendsOrImplementsKeyword(): boolean {\r\n            if (token === SyntaxKind.ImplementsKeyword ||\r\n                token === SyntaxKind.ExtendsKeyword) {\r\n\r\n                return lookAhead(nextTokenIsStartOfExpression);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function nextTokenIsStartOfExpression() {\r\n            nextToken();\r\n            return isStartOfExpression();\r\n        }\r\n\r\n        // True if positioned at a list terminator\r\n        function isListTerminator(kind: ParsingContext): boolean {\r\n            if (token === SyntaxKind.EndOfFileToken) {\r\n                // Being at the end of the file ends all lists.\r\n                return true;\r\n            }\r\n\r\n            switch (kind) {\r\n                case ParsingContext.ModuleElements:\r\n                case ParsingContext.BlockStatements:\r\n                case ParsingContext.SwitchClauses:\r\n                case ParsingContext.TypeMembers:\r\n                case ParsingContext.ClassMembers:\r\n                case ParsingContext.EnumMembers:\r\n                case ParsingContext.ObjectLiteralMembers:\r\n                case ParsingContext.ObjectBindingElements:\r\n                case ParsingContext.ImportOrExportSpecifiers:\r\n                    return token === SyntaxKind.CloseBraceToken;\r\n                case ParsingContext.SwitchClauseStatements:\r\n                    return token === SyntaxKind.CloseBraceToken || token === SyntaxKind.CaseKeyword || token === SyntaxKind.DefaultKeyword;\r\n                case ParsingContext.HeritageClauseElement:\r\n                    return token === SyntaxKind.OpenBraceToken || token === SyntaxKind.ExtendsKeyword || token === SyntaxKind.ImplementsKeyword;\r\n                case ParsingContext.VariableDeclarations:\r\n                    return isVariableDeclaratorListTerminator();\r\n                case ParsingContext.TypeParameters:\r\n                    // Tokens other than '>' are here for better error recovery\r\n                    return token === SyntaxKind.GreaterThanToken || token === SyntaxKind.OpenParenToken || token === SyntaxKind.OpenBraceToken || token === SyntaxKind.ExtendsKeyword || token === SyntaxKind.ImplementsKeyword;\r\n                case ParsingContext.ArgumentExpressions:\r\n                    // Tokens other than ')' are here for better error recovery\r\n                    return token === SyntaxKind.CloseParenToken || token === SyntaxKind.SemicolonToken;\r\n                case ParsingContext.ArrayLiteralMembers:\r\n                case ParsingContext.TupleElementTypes:\r\n                case ParsingContext.ArrayBindingElements:\r\n                    return token === SyntaxKind.CloseBracketToken;\r\n                case ParsingContext.Parameters:\r\n                    // Tokens other than ')' and ']' (the latter for index signatures) are here for better error recovery\r\n                    return token === SyntaxKind.CloseParenToken || token === SyntaxKind.CloseBracketToken /*|| token === SyntaxKind.OpenBraceToken*/;\r\n                case ParsingContext.TypeArguments:\r\n                    // Tokens other than '>' are here for better error recovery\r\n                    return token === SyntaxKind.GreaterThanToken || token === SyntaxKind.OpenParenToken;\r\n                case ParsingContext.HeritageClauses:\r\n                    return token === SyntaxKind.OpenBraceToken || token === SyntaxKind.CloseBraceToken;\r\n                case ParsingContext.JSDocFunctionParameters:\r\n                    return token === SyntaxKind.CloseParenToken || token === SyntaxKind.ColonToken || token === SyntaxKind.CloseBraceToken;\r\n                case ParsingContext.JSDocTypeArguments:\r\n                    return token === SyntaxKind.GreaterThanToken || token === SyntaxKind.CloseBraceToken;\r\n                case ParsingContext.JSDocTupleTypes:\r\n                    return token === SyntaxKind.CloseBracketToken || token === SyntaxKind.CloseBraceToken;\r\n                case ParsingContext.JSDocRecordMembers:\r\n                    return token === SyntaxKind.CloseBraceToken;\r\n            }\r\n        }\r\n\r\n        function isVariableDeclaratorListTerminator(): boolean {\r\n            // If we can consume a semicolon (either explicitly, or with ASI), then consider us done\r\n            // with parsing the list of  variable declarators.\r\n            if (canParseSemicolon()) {\r\n                return true;\r\n            }\r\n\r\n            // in the case where we're parsing the variable declarator of a 'for-in' statement, we\r\n            // are done if we see an 'in' keyword in front of us. Same with for-of\r\n            if (isInOrOfKeyword(token)) {\r\n                return true;\r\n            }\r\n\r\n            // ERROR RECOVERY TWEAK:\r\n            // For better error recovery, if we see an '=>' then we just stop immediately.  We've got an\r\n            // arrow function here and it's going to be very unlikely that we'll resynchronize and get\r\n            // another variable declaration.\r\n            if (token === SyntaxKind.EqualsGreaterThanToken) {\r\n                return true;\r\n            }\r\n\r\n            // Keep trying to parse out variable declarators.\r\n            return false;\r\n        }\r\n\r\n        // True if positioned at element or terminator of the current list or any enclosing list\r\n        function isInSomeParsingContext(): boolean {\r\n            for (let kind = 0; kind < ParsingContext.Count; kind++) {\r\n                if (parsingContext & (1 << kind)) {\r\n                    if (isListElement(kind, /* inErrorRecovery */ true) || isListTerminator(kind)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        // Parses a list of elements\r\n        function parseList<T extends Node>(kind: ParsingContext, checkForStrictMode: boolean, parseElement: () => T): NodeArray<T> {\r\n            let saveParsingContext = parsingContext;\r\n            parsingContext |= 1 << kind;\r\n            let result = <NodeArray<T>>[];\r\n            result.pos = getNodePos();\r\n            let savedStrictModeContext = inStrictModeContext();\r\n\r\n            while (!isListTerminator(kind)) {\r\n                if (isListElement(kind, /* inErrorRecovery */ false)) {\r\n                    let element = parseListElement(kind, parseElement);\r\n                    result.push(element);\r\n\r\n                    // test elements only if we are not already in strict mode\r\n                    if (checkForStrictMode && !inStrictModeContext()) {\r\n                        if (isPrologueDirective(element)) {\r\n                            if (isUseStrictPrologueDirective(element)) {\r\n                                setStrictModeContext(true);\r\n                                checkForStrictMode = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            checkForStrictMode = false;\r\n                        }\r\n                    }\r\n\r\n                    continue;\r\n                }\r\n\r\n                if (abortParsingListOrMoveToNextToken(kind)) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setStrictModeContext(savedStrictModeContext);\r\n            result.end = getNodeEnd();\r\n            parsingContext = saveParsingContext;\r\n            return result;\r\n        }\r\n\r\n        /// Should be called only on prologue directives (isPrologueDirective(node) should be true)\r\n        function isUseStrictPrologueDirective(node: Node): boolean {\r\n            Debug.assert(isPrologueDirective(node));\r\n            let nodeText = getTextOfNodeFromSourceText(sourceText, (<ExpressionStatement>node).expression);\r\n\r\n            // Note: the node text must be exactly \"use strict\" or 'use strict'.  It is not ok for the\r\n            // string to contain unicode escapes (as per ES5).\r\n            return nodeText === '\"use strict\"' || nodeText === \"'use strict'\";\r\n        }\r\n\r\n        function parseListElement<T extends Node>(parsingContext: ParsingContext, parseElement: () => T): T {\r\n            let node = currentNode(parsingContext);\r\n            if (node) {\r\n                return <T>consumeNode(node);\r\n            }\r\n\r\n            return parseElement();\r\n        }\r\n\r\n        function currentNode(parsingContext: ParsingContext): Node {\r\n            // If there is an outstanding parse error that we've encountered, but not attached to\r\n            // some node, then we cannot get a node from the old source tree.  This is because we\r\n            // want to mark the next node we encounter as being unusable.\r\n            //\r\n            // Note: This may be too conservative.  Perhaps we could reuse the node and set the bit\r\n            // on it (or its leftmost child) as having the error.  For now though, being conservative\r\n            // is nice and likely won't ever affect perf.\r\n            if (parseErrorBeforeNextFinishedNode) {\r\n                return undefined;\r\n            }\r\n\r\n            if (!syntaxCursor) {\r\n                // if we don't have a cursor, we could never return a node from the old tree.\r\n                return undefined;\r\n            }\r\n\r\n            let node = syntaxCursor.currentNode(scanner.getStartPos());\r\n\r\n            // Can't reuse a missing node.\r\n            if (nodeIsMissing(node)) {\r\n                return undefined;\r\n            }\r\n\r\n            // Can't reuse a node that intersected the change range.\r\n            if (node.intersectsChange) {\r\n                return undefined;\r\n            }\r\n\r\n            // Can't reuse a node that contains a parse error.  This is necessary so that we\r\n            // produce the same set of errors again.\r\n            if (containsParseError(node)) {\r\n                return undefined;\r\n            }\r\n\r\n            // We can only reuse a node if it was parsed under the same strict mode that we're\r\n            // currently in.  i.e. if we originally parsed a node in non-strict mode, but then\r\n            // the user added 'using strict' at the top of the file, then we can't use that node\r\n            // again as the presense of strict mode may cause us to parse the tokens in the file\r\n            // differetly.\r\n            //\r\n            // Note: we *can* reuse tokens when the strict mode changes.  That's because tokens\r\n            // are unaffected by strict mode.  It's just the parser will decide what to do with it\r\n            // differently depending on what mode it is in.\r\n            //\r\n            // This also applies to all our other context flags as well.\r\n            let nodeContextFlags = node.parserContextFlags & ParserContextFlags.ParserGeneratedFlags;\r\n            if (nodeContextFlags !== contextFlags) {\r\n                return undefined;\r\n            }\r\n\r\n            // Ok, we have a node that looks like it could be reused.  Now verify that it is valid\r\n            // in the currest list parsing context that we're currently at.\r\n            if (!canReuseNode(node, parsingContext)) {\r\n                return undefined;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        function consumeNode(node: Node) {\r\n            // Move the scanner so it is after the node we just consumed.\r\n            scanner.setTextPos(node.end);\r\n            nextToken();\r\n            return node;\r\n        }\r\n\r\n        function canReuseNode(node: Node, parsingContext: ParsingContext): boolean {\r\n            switch (parsingContext) {\r\n                case ParsingContext.ModuleElements:\r\n                    return isReusableModuleElement(node);\r\n\r\n                case ParsingContext.ClassMembers:\r\n                    return isReusableClassMember(node);\r\n\r\n                case ParsingContext.SwitchClauses:\r\n                    return isReusableSwitchClause(node);\r\n\r\n                case ParsingContext.BlockStatements:\r\n                case ParsingContext.SwitchClauseStatements:\r\n                    return isReusableStatement(node);\r\n\r\n                case ParsingContext.EnumMembers:\r\n                    return isReusableEnumMember(node);\r\n\r\n                case ParsingContext.TypeMembers:\r\n                    return isReusableTypeMember(node);\r\n\r\n                case ParsingContext.VariableDeclarations:\r\n                    return isReusableVariableDeclaration(node);\r\n\r\n                case ParsingContext.Parameters:\r\n                    return isReusableParameter(node);\r\n\r\n                // Any other lists we do not care about reusing nodes in.  But feel free to add if\r\n                // you can do so safely.  Danger areas involve nodes that may involve speculative\r\n                // parsing.  If speculative parsing is involved with the node, then the range the\r\n                // parser reached while looking ahead might be in the edited range (see the example\r\n                // in canReuseVariableDeclaratorNode for a good case of this).\r\n                case ParsingContext.HeritageClauses:\r\n                // This would probably be safe to reuse.  There is no speculative parsing with\r\n                // heritage clauses.\r\n\r\n                case ParsingContext.TypeParameters:\r\n                // This would probably be safe to reuse.  There is no speculative parsing with\r\n                // type parameters.  Note that that's because type *parameters* only occur in\r\n                // unambiguous *type* contexts.  While type *arguments* occur in very ambiguous\r\n                // *expression* contexts.\r\n\r\n                case ParsingContext.TupleElementTypes:\r\n                // This would probably be safe to reuse.  There is no speculative parsing with\r\n                // tuple types.\r\n\r\n                // Technically, type argument list types are probably safe to reuse.  While\r\n                // speculative parsing is involved with them (since type argument lists are only\r\n                // produced from speculative parsing a < as a type argument list), we only have\r\n                // the types because speculative parsing succeeded.  Thus, the lookahead never\r\n                // went past the end of the list and rewound.\r\n                case ParsingContext.TypeArguments:\r\n\r\n                // Note: these are almost certainly not safe to ever reuse.  Expressions commonly\r\n                // need a large amount of lookahead, and we should not reuse them as they may\r\n                // have actually intersected the edit.\r\n                case ParsingContext.ArgumentExpressions:\r\n\r\n                // This is not safe to reuse for the same reason as the 'AssignmentExpression'\r\n                // cases.  i.e. a property assignment may end with an expression, and thus might\r\n                // have lookahead far beyond it's old node.\r\n                case ParsingContext.ObjectLiteralMembers:\r\n\r\n                // This is probably not safe to reuse.  There can be speculative parsing with\r\n                // type names in a heritage clause.  There can be generic names in the type\r\n                // name list, and there can be left hand side expressions (which can have type\r\n                // arguments.)\r\n                case ParsingContext.HeritageClauseElement:\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableModuleElement(node: Node) {\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.ImportDeclaration:\r\n                    case SyntaxKind.ImportEqualsDeclaration:\r\n                    case SyntaxKind.ExportDeclaration:\r\n                    case SyntaxKind.ExportAssignment:\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        return true;\r\n                }\r\n\r\n                return isReusableStatement(node);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableClassMember(node: Node) {\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.MethodDeclaration:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.SemicolonClassElement:\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableSwitchClause(node: Node) {\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.CaseClause:\r\n                    case SyntaxKind.DefaultClause:\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableStatement(node: Node) {\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.VariableStatement:\r\n                    case SyntaxKind.Block:\r\n                    case SyntaxKind.IfStatement:\r\n                    case SyntaxKind.ExpressionStatement:\r\n                    case SyntaxKind.ThrowStatement:\r\n                    case SyntaxKind.ReturnStatement:\r\n                    case SyntaxKind.SwitchStatement:\r\n                    case SyntaxKind.BreakStatement:\r\n                    case SyntaxKind.ContinueStatement:\r\n                    case SyntaxKind.ForInStatement:\r\n                    case SyntaxKind.ForOfStatement:\r\n                    case SyntaxKind.ForStatement:\r\n                    case SyntaxKind.WhileStatement:\r\n                    case SyntaxKind.WithStatement:\r\n                    case SyntaxKind.EmptyStatement:\r\n                    case SyntaxKind.TryStatement:\r\n                    case SyntaxKind.LabeledStatement:\r\n                    case SyntaxKind.DoStatement:\r\n                    case SyntaxKind.DebuggerStatement:\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableEnumMember(node: Node) {\r\n            return node.kind === SyntaxKind.EnumMember;\r\n        }\r\n\r\n        function isReusableTypeMember(node: Node) {\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.MethodSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.PropertySignature:\r\n                    case SyntaxKind.CallSignature:\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isReusableVariableDeclaration(node: Node) {\r\n            if (node.kind !== SyntaxKind.VariableDeclaration) {\r\n                return false;\r\n            }\r\n\r\n            // Very subtle incremental parsing bug.  Consider the following code:\r\n            //\r\n            //      let v = new List < A, B\r\n            //\r\n            // This is actually legal code.  It's a list of variable declarators \"v = new List<A\"\r\n            // on one side and \"B\" on the other. If you then change that to:\r\n            //\r\n            //      let v = new List < A, B >()\r\n            //\r\n            // then we have a problem.  \"v = new List<A\" doesn't intersect the change range, so we\r\n            // start reparsing at \"B\" and we completely fail to handle this properly.\r\n            //\r\n            // In order to prevent this, we do not allow a variable declarator to be reused if it\r\n            // has an initializer.\r\n            let variableDeclarator = <VariableDeclaration>node;\r\n            return variableDeclarator.initializer === undefined;\r\n        }\r\n\r\n        function isReusableParameter(node: Node) {\r\n            if (node.kind !== SyntaxKind.Parameter) {\r\n                return false;\r\n            }\r\n\r\n            // See the comment in isReusableVariableDeclaration for why we do this.\r\n            let parameter = <ParameterDeclaration>node;\r\n            return parameter.initializer === undefined;\r\n        }\r\n\r\n        // Returns true if we should abort parsing.\r\n        function abortParsingListOrMoveToNextToken(kind: ParsingContext) {\r\n            parseErrorAtCurrentToken(parsingContextErrors(kind));\r\n            if (isInSomeParsingContext()) {\r\n                return true;\r\n            }\r\n\r\n            nextToken();\r\n            return false;\r\n        }\r\n\r\n        function parsingContextErrors(context: ParsingContext): DiagnosticMessage {\r\n            switch (context) {\r\n                case ParsingContext.SourceElements: return Diagnostics.Declaration_or_statement_expected;\r\n                case ParsingContext.ModuleElements: return Diagnostics.Declaration_or_statement_expected;\r\n                case ParsingContext.BlockStatements: return Diagnostics.Statement_expected;\r\n                case ParsingContext.SwitchClauses: return Diagnostics.case_or_default_expected;\r\n                case ParsingContext.SwitchClauseStatements: return Diagnostics.Statement_expected;\r\n                case ParsingContext.TypeMembers: return Diagnostics.Property_or_signature_expected;\r\n                case ParsingContext.ClassMembers: return Diagnostics.Unexpected_token_A_constructor_method_accessor_or_property_was_expected;\r\n                case ParsingContext.EnumMembers: return Diagnostics.Enum_member_expected;\r\n                case ParsingContext.HeritageClauseElement: return Diagnostics.Expression_expected;\r\n                case ParsingContext.VariableDeclarations: return Diagnostics.Variable_declaration_expected;\r\n                case ParsingContext.ObjectBindingElements: return Diagnostics.Property_destructuring_pattern_expected;\r\n                case ParsingContext.ArrayBindingElements: return Diagnostics.Array_element_destructuring_pattern_expected;\r\n                case ParsingContext.ArgumentExpressions: return Diagnostics.Argument_expression_expected;\r\n                case ParsingContext.ObjectLiteralMembers: return Diagnostics.Property_assignment_expected;\r\n                case ParsingContext.ArrayLiteralMembers: return Diagnostics.Expression_or_comma_expected;\r\n                case ParsingContext.Parameters: return Diagnostics.Parameter_declaration_expected;\r\n                case ParsingContext.TypeParameters: return Diagnostics.Type_parameter_declaration_expected;\r\n                case ParsingContext.TypeArguments: return Diagnostics.Type_argument_expected;\r\n                case ParsingContext.TupleElementTypes: return Diagnostics.Type_expected;\r\n                case ParsingContext.HeritageClauses: return Diagnostics.Unexpected_token_expected;\r\n                case ParsingContext.ImportOrExportSpecifiers: return Diagnostics.Identifier_expected;\r\n                case ParsingContext.JSDocFunctionParameters: return Diagnostics.Parameter_declaration_expected;\r\n                case ParsingContext.JSDocTypeArguments: return Diagnostics.Type_argument_expected;\r\n                case ParsingContext.JSDocTupleTypes: return Diagnostics.Type_expected;\r\n                case ParsingContext.JSDocRecordMembers: return Diagnostics.Property_assignment_expected;\r\n            }\r\n        };\r\n\r\n        // Parses a comma-delimited list of elements\r\n        function parseDelimitedList<T extends Node>(kind: ParsingContext, parseElement: () => T, considerSemicolonAsDelimeter?: boolean): NodeArray<T> {\r\n            let saveParsingContext = parsingContext;\r\n            parsingContext |= 1 << kind;\r\n            let result = <NodeArray<T>>[];\r\n            result.pos = getNodePos();\r\n\r\n            let commaStart = -1; // Meaning the previous token was not a comma\r\n            while (true) {\r\n                if (isListElement(kind, /* inErrorRecovery */ false)) {\r\n                    result.push(parseListElement(kind, parseElement));\r\n                    commaStart = scanner.getTokenPos();\r\n                    if (parseOptional(SyntaxKind.CommaToken)) {\r\n                        continue;\r\n                    }\r\n\r\n                    commaStart = -1; // Back to the state where the last token was not a comma\r\n                    if (isListTerminator(kind)) {\r\n                        break;\r\n                    }\r\n\r\n                    // We didn't get a comma, and the list wasn't terminated, explicitly parse\r\n                    // out a comma so we give a good error message.\r\n                    parseExpected(SyntaxKind.CommaToken);\r\n\r\n                    // If the token was a semicolon, and the caller allows that, then skip it and\r\n                    // continue.  This ensures we get back on track and don't result in tons of\r\n                    // parse errors.  For example, this can happen when people do things like use\r\n                    // a semicolon to delimit object literal members.   Note: we'll have already\r\n                    // reported an error when we called parseExpected above.\r\n                    if (considerSemicolonAsDelimeter && token === SyntaxKind.SemicolonToken && !scanner.hasPrecedingLineBreak()) {\r\n                        nextToken();\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (isListTerminator(kind)) {\r\n                    break;\r\n                }\r\n\r\n                if (abortParsingListOrMoveToNextToken(kind)) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Recording the trailing comma is deliberately done after the previous\r\n            // loop, and not just if we see a list terminator. This is because the list\r\n            // may have ended incorrectly, but it is still important to know if there\r\n            // was a trailing comma.\r\n            // Check if the last token was a comma.\r\n            if (commaStart >= 0) {\r\n                // Always preserve a trailing comma by marking it on the NodeArray\r\n                result.hasTrailingComma = true;\r\n            }\r\n\r\n            result.end = getNodeEnd();\r\n            parsingContext = saveParsingContext;\r\n            return result;\r\n        }\r\n\r\n        function createMissingList<T>(): NodeArray<T> {\r\n            let pos = getNodePos();\r\n            let result = <NodeArray<T>>[];\r\n            result.pos = pos;\r\n            result.end = pos;\r\n            return result;\r\n        }\r\n\r\n        function parseBracketedList<T extends Node>(kind: ParsingContext, parseElement: () => T, open: SyntaxKind, close: SyntaxKind): NodeArray<T> {\r\n            if (parseExpected(open)) {\r\n                let result = parseDelimitedList(kind, parseElement);\r\n                parseExpected(close);\r\n                return result;\r\n            }\r\n\r\n            return createMissingList<T>();\r\n        }\r\n\r\n        // The allowReservedWords parameter controls whether reserved words are permitted after the first dot\r\n        function parseEntityName(allowReservedWords: boolean, diagnosticMessage?: DiagnosticMessage): EntityName {\r\n            let entity: EntityName = parseIdentifier(diagnosticMessage);\r\n            while (parseOptional(SyntaxKind.DotToken)) {\r\n                let node = <QualifiedName>createNode(SyntaxKind.QualifiedName, entity.pos);\r\n                node.left = entity;\r\n                node.right = parseRightSideOfDot(allowReservedWords);\r\n                entity = finishNode(node);\r\n            }\r\n            return entity;\r\n        }\r\n\r\n        function parseRightSideOfDot(allowIdentifierNames: boolean): Identifier {\r\n            // Technically a keyword is valid here as all keywords are identifier names.\r\n            // However, often we'll encounter this in error situations when the keyword\r\n            // is actually starting another valid construct.\r\n            //\r\n            // So, we check for the following specific case:\r\n            //\r\n            //      name.\r\n            //      keyword identifierNameOrKeyword\r\n            //\r\n            // Note: the newlines are important here.  For example, if that above code\r\n            // were rewritten into:\r\n            //\r\n            //      name.keyword\r\n            //      identifierNameOrKeyword\r\n            //\r\n            // Then we would consider it valid.  That's because ASI would take effect and\r\n            // the code would be implicitly: \"name.keyword; identifierNameOrKeyword\".\r\n            // In the first case though, ASI will not take effect because there is not a\r\n            // line terminator after the keyword.\r\n            if (scanner.hasPrecedingLineBreak() && scanner.isReservedWord()) {\r\n                let matchesPattern = lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);\r\n\r\n                if (matchesPattern) {\r\n                    // Report that we need an identifier.  However, report it right after the dot,\r\n                    // and not on the next token.  This is because the next token might actually\r\n                    // be an identifier and the error would be quite confusing.\r\n                    return <Identifier>createMissingNode(SyntaxKind.Identifier, /*reportAtCurrentToken*/ true, Diagnostics.Identifier_expected);\r\n                }\r\n            }\r\n\r\n            return allowIdentifierNames ? parseIdentifierName() : parseIdentifier();\r\n        }\r\n\r\n        function parseTemplateExpression(): TemplateExpression {\r\n            let template = <TemplateExpression>createNode(SyntaxKind.TemplateExpression);\r\n\r\n            template.head = parseLiteralNode();\r\n            Debug.assert(template.head.kind === SyntaxKind.TemplateHead, \"Template head has wrong token kind\");\r\n\r\n            let templateSpans = <NodeArray<TemplateSpan>>[];\r\n            templateSpans.pos = getNodePos();\r\n\r\n            do {\r\n                templateSpans.push(parseTemplateSpan());\r\n            }\r\n            while (lastOrUndefined(templateSpans).literal.kind === SyntaxKind.TemplateMiddle)\r\n\r\n            templateSpans.end = getNodeEnd();\r\n            template.templateSpans = templateSpans;\r\n\r\n            return finishNode(template);\r\n        }\r\n\r\n        function parseTemplateSpan(): TemplateSpan {\r\n            let span = <TemplateSpan>createNode(SyntaxKind.TemplateSpan);\r\n            span.expression = allowInAnd(parseExpression);\r\n\r\n            let literal: LiteralExpression;\r\n\r\n            if (token === SyntaxKind.CloseBraceToken) {\r\n                reScanTemplateToken()\r\n                literal = parseLiteralNode();\r\n            }\r\n            else {\r\n                literal = <LiteralExpression>parseExpectedToken(SyntaxKind.TemplateTail, /*reportAtCurrentPosition*/ false, Diagnostics._0_expected, tokenToString(SyntaxKind.CloseBraceToken));\r\n            }\r\n\r\n            span.literal = literal;\r\n            return finishNode(span);\r\n        }\r\n\r\n        function parseLiteralNode(internName?: boolean): LiteralExpression {\r\n            let node = <LiteralExpression>createNode(token);\r\n            let text = scanner.getTokenValue();\r\n            node.text = internName ? internIdentifier(text) : text;\r\n\r\n            if (scanner.hasExtendedUnicodeEscape()) {\r\n                node.hasExtendedUnicodeEscape = true;\r\n            }\r\n\r\n            if (scanner.isUnterminated()) {\r\n                node.isUnterminated = true;\r\n            }\r\n\r\n            let tokenPos = scanner.getTokenPos();\r\n            nextToken();\r\n            finishNode(node);\r\n\r\n            // Octal literals are not allowed in strict mode or ES5\r\n            // Note that theoretically the following condition would hold true literals like 009,\r\n            // which is not octal.But because of how the scanner separates the tokens, we would\r\n            // never get a token like this. Instead, we would get 00 and 9 as two separate tokens.\r\n            // We also do not need to check for negatives because any prefix operator would be part of a\r\n            // parent unary expression.\r\n            if (node.kind === SyntaxKind.NumericLiteral\r\n                && sourceText.charCodeAt(tokenPos) === CharacterCodes._0\r\n                && isOctalDigit(sourceText.charCodeAt(tokenPos + 1))) {\r\n\r\n                node.flags |= NodeFlags.OctalLiteral;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        // TYPES\r\n\r\n        function parseTypeReferenceOrTypePredicate(): TypeReferenceNode | TypePredicateNode {\r\n            let typeName = parseEntityName(/*allowReservedWords*/ false, Diagnostics.Type_expected);\r\n            if (typeName.kind === SyntaxKind.Identifier && token === SyntaxKind.IsKeyword && !scanner.hasPrecedingLineBreak()) {\r\n                nextToken();\r\n                let node = <TypePredicateNode>createNode(SyntaxKind.TypePredicate, typeName.pos);\r\n                node.parameterName = <Identifier>typeName;\r\n                node.type = parseType();\r\n                return finishNode(node);\r\n            }\r\n            let node = <TypeReferenceNode>createNode(SyntaxKind.TypeReference, typeName.pos);\r\n            node.typeName = typeName;\r\n            if (!scanner.hasPrecedingLineBreak() && token === SyntaxKind.LessThanToken) {\r\n                node.typeArguments = parseBracketedList(ParsingContext.TypeArguments, parseType, SyntaxKind.LessThanToken, SyntaxKind.GreaterThanToken);\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeQuery(): TypeQueryNode {\r\n            let node = <TypeQueryNode>createNode(SyntaxKind.TypeQuery);\r\n            parseExpected(SyntaxKind.TypeOfKeyword);\r\n            node.exprName = parseEntityName(/*allowReservedWords*/ true);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeParameter(): TypeParameterDeclaration {\r\n            let node = <TypeParameterDeclaration>createNode(SyntaxKind.TypeParameter);\r\n            node.name = parseIdentifier();\r\n            if (parseOptional(SyntaxKind.ExtendsKeyword)) {\r\n                // It's not uncommon for people to write improper constraints to a generic.  If the\r\n                // user writes a constraint that is an expression and not an actual type, then parse\r\n                // it out as an expression (so we can recover well), but report that a type is needed\r\n                // instead.\r\n                if (isStartOfType() || !isStartOfExpression()) {\r\n                    node.constraint = parseType();\r\n                }\r\n                else {\r\n                    // It was not a type, and it looked like an expression.  Parse out an expression\r\n                    // here so we recover well.  Note: it is important that we call parseUnaryExpression\r\n                    // and not parseExpression here.  If the user has:\r\n                    //\r\n                    //      <T extends \"\">\r\n                    //\r\n                    // We do *not* want to consume the  >  as we're consuming the expression for \"\".\r\n                    node.expression = parseUnaryExpressionOrHigher();\r\n                }\r\n            }\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeParameters(): NodeArray<TypeParameterDeclaration> {\r\n            if (token === SyntaxKind.LessThanToken) {\r\n                return parseBracketedList(ParsingContext.TypeParameters, parseTypeParameter, SyntaxKind.LessThanToken, SyntaxKind.GreaterThanToken);\r\n            }\r\n        }\r\n\r\n        function parseParameterType(): TypeNode {\r\n            if (parseOptional(SyntaxKind.ColonToken)) {\r\n                return token === SyntaxKind.StringLiteral\r\n                    ? <StringLiteral>parseLiteralNode(/*internName*/ true)\r\n                    : parseType();\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function isStartOfParameter(): boolean {\r\n            return token === SyntaxKind.DotDotDotToken || isIdentifierOrPattern() || isModifier(token) || token === SyntaxKind.AtToken;\r\n        }\r\n\r\n        function setModifiers(node: Node, modifiers: ModifiersArray) {\r\n            if (modifiers) {\r\n                node.flags |= modifiers.flags;\r\n                node.modifiers = modifiers;\r\n            }\r\n        }\r\n\r\n        function parseParameter(): ParameterDeclaration {\r\n            let node = <ParameterDeclaration>createNode(SyntaxKind.Parameter);\r\n            node.decorators = parseDecorators();\r\n            setModifiers(node, parseModifiers());\r\n            node.dotDotDotToken = parseOptionalToken(SyntaxKind.DotDotDotToken);\r\n\r\n            // SingleNameBinding[Yield,GeneratorParameter] : See 13.2.3\r\n            //      [+GeneratorParameter]BindingIdentifier[Yield]Initializer[In]opt\r\n            //      [~GeneratorParameter]BindingIdentifier[?Yield]Initializer[In, ?Yield]opt\r\n\r\n            node.name = inGeneratorParameterContext() ? doInYieldContext(parseIdentifierOrPattern) : parseIdentifierOrPattern();\r\n\r\n            if (getFullWidth(node.name) === 0 && node.flags === 0 && isModifier(token)) {\r\n                // in cases like\r\n                // 'use strict'\r\n                // function foo(static)\r\n                // isParameter('static') === true, because of isModifier('static')\r\n                // however 'static' is not a legal identifier in a strict mode.\r\n                // so result of this function will be ParameterDeclaration (flags = 0, name = missing, type = undefined, initializer = undefined)\r\n                // and current token will not change => parsing of the enclosing parameter list will last till the end of time (or OOM)\r\n                // to avoid this we'll advance cursor to the next token.\r\n                nextToken();\r\n            }\r\n\r\n            node.questionToken = parseOptionalToken(SyntaxKind.QuestionToken);\r\n            node.type = parseParameterType();\r\n            node.initializer = inGeneratorParameterContext() ? doOutsideOfYieldContext(parseParameterInitializer) : parseParameterInitializer();\r\n\r\n            // Do not check for initializers in an ambient context for parameters. This is not\r\n            // a grammar error because the grammar allows arbitrary call signatures in\r\n            // an ambient context.\r\n            // It is actually not necessary for this to be an error at all. The reason is that\r\n            // function/constructor implementations are syntactically disallowed in ambient\r\n            // contexts. In addition, parameter initializers are semantically disallowed in\r\n            // overload signatures. So parameter initializers are transitively disallowed in\r\n            // ambient contexts.\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseParameterInitializer() {\r\n            return parseInitializer(/*inParameter*/ true);\r\n        }\r\n\r\n        function fillSignature(\r\n            returnToken: SyntaxKind,\r\n            yieldAndGeneratorParameterContext: boolean,\r\n            requireCompleteParameterList: boolean,\r\n            signature: SignatureDeclaration): void {\r\n            let returnTokenRequired = returnToken === SyntaxKind.EqualsGreaterThanToken;\r\n            signature.typeParameters = parseTypeParameters();\r\n            signature.parameters = parseParameterList(yieldAndGeneratorParameterContext, requireCompleteParameterList);\r\n\r\n            if (returnTokenRequired) {\r\n                parseExpected(returnToken);\r\n                signature.type = parseType();\r\n            }\r\n            else if (parseOptional(returnToken)) {\r\n                signature.type = parseType();\r\n            }\r\n        }\r\n\r\n        // Note: after careful analysis of the grammar, it does not appear to be possible to\r\n        // have 'Yield' And 'GeneratorParameter' not in sync.  i.e. any production calling\r\n        // this FormalParameters production either always sets both to true, or always sets\r\n        // both to false.  As such we only have a single parameter to represent both.\r\n        function parseParameterList(yieldAndGeneratorParameterContext: boolean, requireCompleteParameterList: boolean) {\r\n            // FormalParameters[Yield,GeneratorParameter] :\r\n            //      ...\r\n            //\r\n            // FormalParameter[Yield,GeneratorParameter] :\r\n            //      BindingElement[?Yield, ?GeneratorParameter]\r\n            //\r\n            // BindingElement[Yield, GeneratorParameter ] : See 13.2.3\r\n            //      SingleNameBinding[?Yield, ?GeneratorParameter]\r\n            //      [+GeneratorParameter]BindingPattern[?Yield, GeneratorParameter]Initializer[In]opt\r\n            //      [~GeneratorParameter]BindingPattern[?Yield]Initializer[In, ?Yield]opt\r\n            //\r\n            // SingleNameBinding[Yield, GeneratorParameter] : See 13.2.3\r\n            //      [+GeneratorParameter]BindingIdentifier[Yield]Initializer[In]opt\r\n            //      [~GeneratorParameter]BindingIdentifier[?Yield]Initializer[In, ?Yield]opt\r\n            if (parseExpected(SyntaxKind.OpenParenToken)) {\r\n                let savedYieldContext = inYieldContext();\r\n                let savedGeneratorParameterContext = inGeneratorParameterContext();\r\n\r\n                setYieldContext(yieldAndGeneratorParameterContext);\r\n                setGeneratorParameterContext(yieldAndGeneratorParameterContext);\r\n\r\n                let result = parseDelimitedList(ParsingContext.Parameters, parseParameter);\r\n\r\n                setYieldContext(savedYieldContext);\r\n                setGeneratorParameterContext(savedGeneratorParameterContext);\r\n\r\n                if (!parseExpected(SyntaxKind.CloseParenToken) && requireCompleteParameterList) {\r\n                    // Caller insisted that we had to end with a )   We didn't.  So just return\r\n                    // undefined here.\r\n                    return undefined;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            // We didn't even have an open paren.  If the caller requires a complete parameter list,\r\n            // we definitely can't provide that.  However, if they're ok with an incomplete one,\r\n            // then just return an empty set of parameters.\r\n            return requireCompleteParameterList ? undefined : createMissingList<ParameterDeclaration>();\r\n        }\r\n\r\n        function parseTypeMemberSemicolon() {\r\n            // We allow type members to be separated by commas or (possibly ASI) semicolons.\r\n            // First check if it was a comma.  If so, we're done with the member.\r\n            if (parseOptional(SyntaxKind.CommaToken)) {\r\n                return;\r\n            }\r\n\r\n            // Didn't have a comma.  We must have a (possible ASI) semicolon.\r\n            parseSemicolon();\r\n        }\r\n\r\n        function parseSignatureMember(kind: SyntaxKind): SignatureDeclaration {\r\n            let node = <SignatureDeclaration>createNode(kind);\r\n            if (kind === SyntaxKind.ConstructSignature) {\r\n                parseExpected(SyntaxKind.NewKeyword);\r\n            }\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ false, node);\r\n            parseTypeMemberSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function isIndexSignature(): boolean {\r\n            if (token !== SyntaxKind.OpenBracketToken) {\r\n                return false;\r\n            }\r\n\r\n            return lookAhead(isUnambiguouslyIndexSignature);\r\n        }\r\n\r\n        function isUnambiguouslyIndexSignature() {\r\n            // The only allowed sequence is:\r\n            //\r\n            //   [id:\r\n            //\r\n            // However, for error recovery, we also check the following cases:\r\n            //\r\n            //   [...\r\n            //   [id,\r\n            //   [id?,\r\n            //   [id?:\r\n            //   [id?]\r\n            //   [public id\r\n            //   [private id\r\n            //   [protected id\r\n            //   []\r\n            //\r\n            nextToken();\r\n            if (token === SyntaxKind.DotDotDotToken || token === SyntaxKind.CloseBracketToken) {\r\n                return true;\r\n            }\r\n\r\n            if (isModifier(token)) {\r\n                nextToken();\r\n                if (isIdentifier()) {\r\n                    return true;\r\n                }\r\n            }\r\n            else if (!isIdentifier()) {\r\n                return false;\r\n            }\r\n            else {\r\n                // Skip the identifier\r\n                nextToken();\r\n            }\r\n\r\n            // A colon signifies a well formed indexer\r\n            // A comma should be a badly formed indexer because comma expressions are not allowed\r\n            // in computed properties.\r\n            if (token === SyntaxKind.ColonToken || token === SyntaxKind.CommaToken) {\r\n                return true;\r\n            }\r\n\r\n            // Question mark could be an indexer with an optional property,\r\n            // or it could be a conditional expression in a computed property.\r\n            if (token !== SyntaxKind.QuestionToken) {\r\n                return false;\r\n            }\r\n\r\n            // If any of the following tokens are after the question mark, it cannot\r\n            // be a conditional expression, so treat it as an indexer.\r\n            nextToken();\r\n            return token === SyntaxKind.ColonToken || token === SyntaxKind.CommaToken || token === SyntaxKind.CloseBracketToken;\r\n        }\r\n\r\n        function parseIndexSignatureDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): IndexSignatureDeclaration {\r\n            let node = <IndexSignatureDeclaration>createNode(SyntaxKind.IndexSignature, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            node.parameters = parseBracketedList(ParsingContext.Parameters, parseParameter, SyntaxKind.OpenBracketToken, SyntaxKind.CloseBracketToken);\r\n            node.type = parseTypeAnnotation();\r\n            parseTypeMemberSemicolon();\r\n            return finishNode(node)\r\n        }\r\n\r\n        function parsePropertyOrMethodSignature(): Declaration {\r\n            let fullStart = scanner.getStartPos();\r\n            let name = parsePropertyName();\r\n            let questionToken = parseOptionalToken(SyntaxKind.QuestionToken);\r\n\r\n            if (token === SyntaxKind.OpenParenToken || token === SyntaxKind.LessThanToken) {\r\n                let method = <MethodDeclaration>createNode(SyntaxKind.MethodSignature, fullStart);\r\n                method.name = name;\r\n                method.questionToken = questionToken;\r\n\r\n                // Method signatues don't exist in expression contexts.  So they have neither\r\n                // [Yield] nor [GeneratorParameter]\r\n                fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ false, method);\r\n                parseTypeMemberSemicolon();\r\n                return finishNode(method);\r\n            }\r\n            else {\r\n                let property = <PropertyDeclaration>createNode(SyntaxKind.PropertySignature, fullStart);\r\n                property.name = name;\r\n                property.questionToken = questionToken;\r\n                property.type = parseTypeAnnotation();\r\n                parseTypeMemberSemicolon();\r\n                return finishNode(property);\r\n            }\r\n        }\r\n\r\n        function isStartOfTypeMember(): boolean {\r\n            switch (token) {\r\n                case SyntaxKind.OpenParenToken:\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.OpenBracketToken: // Both for indexers and computed properties\r\n                    return true;\r\n                default:\r\n                    if (isModifier(token)) {\r\n                        let result = lookAhead(isStartOfIndexSignatureDeclaration);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    }\r\n\r\n                    return isLiteralPropertyName() && lookAhead(isTypeMemberWithLiteralPropertyName);\r\n            }\r\n        }\r\n\r\n        function isStartOfIndexSignatureDeclaration() {\r\n            while (isModifier(token)) {\r\n                nextToken();\r\n            }\r\n\r\n            return isIndexSignature();\r\n        }\r\n\r\n        function isTypeMemberWithLiteralPropertyName() {\r\n            nextToken();\r\n            return token === SyntaxKind.OpenParenToken ||\r\n                token === SyntaxKind.LessThanToken ||\r\n                token === SyntaxKind.QuestionToken ||\r\n                token === SyntaxKind.ColonToken ||\r\n                canParseSemicolon();\r\n        }\r\n\r\n        function parseTypeMember(): Declaration {\r\n            switch (token) {\r\n                case SyntaxKind.OpenParenToken:\r\n                case SyntaxKind.LessThanToken:\r\n                    return parseSignatureMember(SyntaxKind.CallSignature);\r\n                case SyntaxKind.OpenBracketToken:\r\n                    // Indexer or computed property\r\n                    return isIndexSignature()\r\n                        ? parseIndexSignatureDeclaration(scanner.getStartPos(), /*decorators*/ undefined, /*modifiers*/ undefined)\r\n                        : parsePropertyOrMethodSignature();\r\n                case SyntaxKind.NewKeyword:\r\n                    if (lookAhead(isStartOfConstructSignature)) {\r\n                        return parseSignatureMember(SyntaxKind.ConstructSignature);\r\n                    }\r\n                // fall through.\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NumericLiteral:\r\n                    return parsePropertyOrMethodSignature();\r\n                default:\r\n                    // Index declaration as allowed as a type member.  But as per the grammar,\r\n                    // they also allow modifiers. So we have to check for an index declaration\r\n                    // that might be following modifiers. This ensures that things work properly\r\n                    // when incrementally parsing as the parser will produce the Index declaration\r\n                    // if it has the same text regardless of whether it is inside a class or an\r\n                    // object type.\r\n                    if (isModifier(token)) {\r\n                        let result = tryParse(parseIndexSignatureWithModifiers);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    }\r\n\r\n                    if (isIdentifierOrKeyword()) {\r\n                        return parsePropertyOrMethodSignature();\r\n                    }\r\n            }\r\n        }\r\n\r\n        function parseIndexSignatureWithModifiers() {\r\n            let fullStart = scanner.getStartPos();\r\n            let decorators = parseDecorators();\r\n            let modifiers = parseModifiers();\r\n            return isIndexSignature()\r\n                ? parseIndexSignatureDeclaration(fullStart, decorators, modifiers)\r\n                : undefined;\r\n        }\r\n\r\n        function isStartOfConstructSignature() {\r\n            nextToken();\r\n            return token === SyntaxKind.OpenParenToken || token === SyntaxKind.LessThanToken;\r\n        }\r\n\r\n        function parseTypeLiteral(): TypeLiteralNode {\r\n            let node = <TypeLiteralNode>createNode(SyntaxKind.TypeLiteral);\r\n            node.members = parseObjectTypeMembers();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseObjectTypeMembers(): NodeArray<Declaration> {\r\n            let members: NodeArray<Declaration>;\r\n            if (parseExpected(SyntaxKind.OpenBraceToken)) {\r\n                members = parseList(ParsingContext.TypeMembers, /*checkForStrictMode*/ false, parseTypeMember);\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n            }\r\n            else {\r\n                members = createMissingList<Declaration>();\r\n            }\r\n\r\n            return members;\r\n        }\r\n\r\n        function parseTupleType(): TupleTypeNode {\r\n            let node = <TupleTypeNode>createNode(SyntaxKind.TupleType);\r\n            node.elementTypes = parseBracketedList(ParsingContext.TupleElementTypes, parseType, SyntaxKind.OpenBracketToken, SyntaxKind.CloseBracketToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseParenthesizedType(): ParenthesizedTypeNode {\r\n            let node = <ParenthesizedTypeNode>createNode(SyntaxKind.ParenthesizedType);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.type = parseType();\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseFunctionOrConstructorType(kind: SyntaxKind): FunctionOrConstructorTypeNode {\r\n            let node = <FunctionOrConstructorTypeNode>createNode(kind);\r\n            if (kind === SyntaxKind.ConstructorType) {\r\n                parseExpected(SyntaxKind.NewKeyword);\r\n            }\r\n            fillSignature(SyntaxKind.EqualsGreaterThanToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ false, node);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseKeywordAndNoDot(): TypeNode {\r\n            let node = parseTokenNode<TypeNode>();\r\n            return token === SyntaxKind.DotToken ? undefined : node;\r\n        }\r\n\r\n        function parseNonArrayType(): TypeNode {\r\n            switch (token) {\r\n                case SyntaxKind.AnyKeyword:\r\n                case SyntaxKind.StringKeyword:\r\n                case SyntaxKind.NumberKeyword:\r\n                case SyntaxKind.BooleanKeyword:\r\n                case SyntaxKind.SymbolKeyword:\r\n                    // If these are followed by a dot, then parse these out as a dotted type reference instead.\r\n                    let node = tryParse(parseKeywordAndNoDot);\r\n                    return node || parseTypeReferenceOrTypePredicate();\r\n                case SyntaxKind.VoidKeyword:\r\n                    return parseTokenNode<TypeNode>();\r\n                case SyntaxKind.TypeOfKeyword:\r\n                    return parseTypeQuery();\r\n                case SyntaxKind.OpenBraceToken:\r\n                    return parseTypeLiteral();\r\n                case SyntaxKind.OpenBracketToken:\r\n                    return parseTupleType();\r\n                case SyntaxKind.OpenParenToken:\r\n                    return parseParenthesizedType();\r\n                default:\r\n                    return parseTypeReferenceOrTypePredicate();\r\n            }\r\n        }\r\n\r\n        function isStartOfType(): boolean {\r\n            switch (token) {\r\n                case SyntaxKind.AnyKeyword:\r\n                case SyntaxKind.StringKeyword:\r\n                case SyntaxKind.NumberKeyword:\r\n                case SyntaxKind.BooleanKeyword:\r\n                case SyntaxKind.SymbolKeyword:\r\n                case SyntaxKind.VoidKeyword:\r\n                case SyntaxKind.TypeOfKeyword:\r\n                case SyntaxKind.OpenBraceToken:\r\n                case SyntaxKind.OpenBracketToken:\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.NewKeyword:\r\n                    return true;\r\n                case SyntaxKind.OpenParenToken:\r\n                    // Only consider '(' the start of a type if followed by ')', '...', an identifier, a modifier,\r\n                    // or something that starts a type. We don't want to consider things like '(1)' a type.\r\n                    return lookAhead(isStartOfParenthesizedOrFunctionType);\r\n                default:\r\n                    return isIdentifier();\r\n            }\r\n        }\r\n\r\n        function isStartOfParenthesizedOrFunctionType() {\r\n            nextToken();\r\n            return token === SyntaxKind.CloseParenToken || isStartOfParameter() || isStartOfType();\r\n        }\r\n\r\n        function parseArrayTypeOrHigher(): TypeNode {\r\n            let type = parseNonArrayType();\r\n            while (!scanner.hasPrecedingLineBreak() && parseOptional(SyntaxKind.OpenBracketToken)) {\r\n                parseExpected(SyntaxKind.CloseBracketToken);\r\n                let node = <ArrayTypeNode>createNode(SyntaxKind.ArrayType, type.pos);\r\n                node.elementType = type;\r\n                type = finishNode(node);\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function parseUnionTypeOrHigher(): TypeNode {\r\n            let type = parseArrayTypeOrHigher();\r\n            if (token === SyntaxKind.BarToken) {\r\n                let types = <NodeArray<TypeNode>>[type];\r\n                types.pos = type.pos;\r\n                while (parseOptional(SyntaxKind.BarToken)) {\r\n                    types.push(parseArrayTypeOrHigher());\r\n                }\r\n                types.end = getNodeEnd();\r\n                let node = <UnionTypeNode>createNode(SyntaxKind.UnionType, type.pos);\r\n                node.types = types;\r\n                type = finishNode(node);\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function isStartOfFunctionType(): boolean {\r\n            if (token === SyntaxKind.LessThanToken) {\r\n                return true;\r\n            }\r\n\r\n            return token === SyntaxKind.OpenParenToken && lookAhead(isUnambiguouslyStartOfFunctionType);\r\n        }\r\n\r\n        function isUnambiguouslyStartOfFunctionType() {\r\n            nextToken();\r\n            if (token === SyntaxKind.CloseParenToken || token === SyntaxKind.DotDotDotToken) {\r\n                // ( )\r\n                // ( ...\r\n                return true;\r\n            }\r\n            if (isIdentifier() || isModifier(token)) {\r\n                nextToken();\r\n                if (token === SyntaxKind.ColonToken || token === SyntaxKind.CommaToken ||\r\n                    token === SyntaxKind.QuestionToken || token === SyntaxKind.EqualsToken ||\r\n                    isIdentifier() || isModifier(token)) {\r\n                    // ( id :\r\n                    // ( id ,\r\n                    // ( id ?\r\n                    // ( id =\r\n                    // ( modifier id\r\n                    return true;\r\n                }\r\n                if (token === SyntaxKind.CloseParenToken) {\r\n                    nextToken();\r\n                    if (token === SyntaxKind.EqualsGreaterThanToken) {\r\n                        // ( id ) =>\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function parseType(): TypeNode {\r\n            // The rules about 'yield' only apply to actual code/expression contexts.  They don't\r\n            // apply to 'type' contexts.  So we disable these parameters here before moving on.\r\n            let savedYieldContext = inYieldContext();\r\n            let savedGeneratorParameterContext = inGeneratorParameterContext();\r\n\r\n            setYieldContext(false);\r\n            setGeneratorParameterContext(false);\r\n\r\n            let result = parseTypeWorker();\r\n\r\n            setYieldContext(savedYieldContext);\r\n            setGeneratorParameterContext(savedGeneratorParameterContext);\r\n\r\n            return result;\r\n        }\r\n\r\n        function parseTypeWorker(): TypeNode {\r\n            if (isStartOfFunctionType()) {\r\n                return parseFunctionOrConstructorType(SyntaxKind.FunctionType);\r\n            }\r\n            if (token === SyntaxKind.NewKeyword) {\r\n                return parseFunctionOrConstructorType(SyntaxKind.ConstructorType);\r\n            }\r\n            return parseUnionTypeOrHigher();\r\n        }\r\n\r\n        function parseTypeAnnotation(): TypeNode {\r\n            return parseOptional(SyntaxKind.ColonToken) ? parseType() : undefined;\r\n        }\r\n\r\n        // EXPRESSIONS\r\n        function isStartOfLeftHandSideExpression(): boolean {\r\n            switch (token) {\r\n                case SyntaxKind.ThisKeyword:\r\n                case SyntaxKind.SuperKeyword:\r\n                case SyntaxKind.NullKeyword:\r\n                case SyntaxKind.TrueKeyword:\r\n                case SyntaxKind.FalseKeyword:\r\n                case SyntaxKind.NumericLiteral:\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NoSubstitutionTemplateLiteral:\r\n                case SyntaxKind.TemplateHead:\r\n                case SyntaxKind.OpenParenToken:\r\n                case SyntaxKind.OpenBracketToken:\r\n                case SyntaxKind.OpenBraceToken:\r\n                case SyntaxKind.FunctionKeyword:\r\n                case SyntaxKind.ClassKeyword:\r\n                case SyntaxKind.NewKeyword:\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.SlashEqualsToken:\r\n                case SyntaxKind.Identifier:\r\n                    return true;\r\n                default:\r\n                    return isIdentifier();\r\n            }\r\n        }\r\n\r\n        function isStartOfExpression(): boolean {\r\n            if (isStartOfLeftHandSideExpression()) {\r\n                return true;\r\n            }\r\n\r\n            switch (token) {\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.TildeToken:\r\n                case SyntaxKind.ExclamationToken:\r\n                case SyntaxKind.DeleteKeyword:\r\n                case SyntaxKind.TypeOfKeyword:\r\n                case SyntaxKind.VoidKeyword:\r\n                case SyntaxKind.PlusPlusToken:\r\n                case SyntaxKind.MinusMinusToken:\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.YieldKeyword:\r\n                    // Yield always starts an expression.  Either it is an identifier (in which case\r\n                    // it is definitely an expression).  Or it's a keyword (either because we're in\r\n                    // a generator, or in strict mode (or both)) and it started a yield expression.\r\n                    return true;\r\n                default:\r\n                    // Error tolerance.  If we see the start of some binary operator, we consider\r\n                    // that the start of an expression.  That way we'll parse out a missing identifier,\r\n                    // give a good message about an identifier being missing, and then consume the\r\n                    // rest of the binary expression.\r\n                    if (isBinaryOperator()) {\r\n                        return true;\r\n                    }\r\n\r\n                    return isIdentifier();\r\n            }\r\n        }\r\n\r\n        function isStartOfExpressionStatement(): boolean {\r\n            // As per the grammar, none of '{' or 'function' or 'class' can start an expression statement.\r\n            return token !== SyntaxKind.OpenBraceToken &&\r\n                token !== SyntaxKind.FunctionKeyword &&\r\n                token !== SyntaxKind.ClassKeyword &&\r\n                token !== SyntaxKind.AtToken &&\r\n                isStartOfExpression();\r\n        }\r\n\r\n        function parseExpression(): Expression {\r\n            // Expression[in]:\r\n            //      AssignmentExpression[in]\r\n            //      Expression[in] , AssignmentExpression[in]\r\n\r\n            // clear the decorator context when parsing Expression, as it should be unambiguous when parsing a decorator\r\n            let saveDecoratorContext = inDecoratorContext();\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(false);\r\n            }\r\n\r\n            let expr = parseAssignmentExpressionOrHigher();\r\n            let operatorToken: Node;\r\n            while ((operatorToken = parseOptionalToken(SyntaxKind.CommaToken))) {\r\n                expr = makeBinaryExpression(expr, operatorToken, parseAssignmentExpressionOrHigher());\r\n            }\r\n\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(true);\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        function parseInitializer(inParameter: boolean): Expression {\r\n            if (token !== SyntaxKind.EqualsToken) {\r\n                // It's not uncommon during typing for the user to miss writing the '=' token.  Check if\r\n                // there is no newline after the last token and if we're on an expression.  If so, parse\r\n                // this as an equals-value clause with a missing equals.\r\n                // NOTE: There are two places where we allow equals-value clauses.  The first is in a\r\n                // variable declarator.  The second is with a parameter.  For variable declarators\r\n                // it's more likely that a { would be a allowed (as an object literal).  While this\r\n                // is also allowed for parameters, the risk is that we consume the { as an object\r\n                // literal when it really will be for the block following the parameter.\r\n                if (scanner.hasPrecedingLineBreak() || (inParameter && token === SyntaxKind.OpenBraceToken) || !isStartOfExpression()) {\r\n                    // preceding line break, open brace in a parameter (likely a function body) or current token is not an expression -\r\n                    // do not try to parse initializer\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            // Initializer[In, Yield] :\r\n            //     = AssignmentExpression[?In, ?Yield]\r\n\r\n            parseExpected(SyntaxKind.EqualsToken);\r\n            return parseAssignmentExpressionOrHigher();\r\n        }\r\n\r\n        function parseAssignmentExpressionOrHigher(): Expression {\r\n            //  AssignmentExpression[in,yield]:\r\n            //      1) ConditionalExpression[?in,?yield]\r\n            //      2) LeftHandSideExpression = AssignmentExpression[?in,?yield]\r\n            //      3) LeftHandSideExpression AssignmentOperator AssignmentExpression[?in,?yield]\r\n            //      4) ArrowFunctionExpression[?in,?yield]\r\n            //      5) [+Yield] YieldExpression[?In]\r\n            //\r\n            // Note: for ease of implementation we treat productions '2' and '3' as the same thing.\r\n            // (i.e. they're both BinaryExpressions with an assignment operator in it).\r\n\r\n            // First, do the simple check if we have a YieldExpression (production '5').\r\n            if (isYieldExpression()) {\r\n                return parseYieldExpression();\r\n            }\r\n\r\n            // Then, check if we have an arrow function (production '4') that starts with a parenthesized\r\n            // parameter list. If we do, we must *not* recurse for productions 1, 2 or 3. An ArrowFunction is\r\n            // not a  LeftHandSideExpression, nor does it start a ConditionalExpression.  So we are done\r\n            // with AssignmentExpression if we see one.\r\n            let arrowExpression = tryParseParenthesizedArrowFunctionExpression();\r\n            if (arrowExpression) {\r\n                return arrowExpression;\r\n            }\r\n\r\n            // Now try to see if we're in production '1', '2' or '3'.  A conditional expression can\r\n            // start with a LogicalOrExpression, while the assignment productions can only start with\r\n            // LeftHandSideExpressions.\r\n            //\r\n            // So, first, we try to just parse out a BinaryExpression.  If we get something that is a\r\n            // LeftHandSide or higher, then we can try to parse out the assignment expression part.\r\n            // Otherwise, we try to parse out the conditional expression bit.  We want to allow any\r\n            // binary expression here, so we pass in the 'lowest' precedence here so that it matches\r\n            // and consumes anything.\r\n            let expr = parseBinaryExpressionOrHigher(/*precedence*/ 0);\r\n\r\n            // To avoid a look-ahead, we did not handle the case of an arrow function with a single un-parenthesized\r\n            // parameter ('x => ...') above. We handle it here by checking if the parsed expression was a single\r\n            // identifier and the current token is an arrow.\r\n            if (expr.kind === SyntaxKind.Identifier && token === SyntaxKind.EqualsGreaterThanToken) {\r\n                return parseSimpleArrowFunctionExpression(<Identifier>expr);\r\n            }\r\n\r\n            // Now see if we might be in cases '2' or '3'.\r\n            // If the expression was a LHS expression, and we have an assignment operator, then\r\n            // we're in '2' or '3'. Consume the assignment and return.\r\n            //\r\n            // Note: we call reScanGreaterToken so that we get an appropriately merged token\r\n            // for cases like > > =  becoming >>=\r\n            if (isLeftHandSideExpression(expr) && isAssignmentOperator(reScanGreaterToken())) {\r\n                return makeBinaryExpression(expr, parseTokenNode(), parseAssignmentExpressionOrHigher());\r\n            }\r\n\r\n            // It wasn't an assignment or a lambda.  This is a conditional expression:\r\n            return parseConditionalExpressionRest(expr);\r\n        }\r\n\r\n        function isYieldExpression(): boolean {\r\n            if (token === SyntaxKind.YieldKeyword) {\r\n                // If we have a 'yield' keyword, and htis is a context where yield expressions are\r\n                // allowed, then definitely parse out a yield expression.\r\n                if (inYieldContext()) {\r\n                    return true;\r\n                }\r\n\r\n                if (inStrictModeContext()) {\r\n                    // If we're in strict mode, then 'yield' is a keyword, could only ever start\r\n                    // a yield expression.\r\n                    return true;\r\n                }\r\n\r\n                // We're in a context where 'yield expr' is not allowed.  However, if we can\r\n                // definitely tell that the user was trying to parse a 'yield expr' and not\r\n                // just a normal expr that start with a 'yield' identifier, then parse out\r\n                // a 'yield expr'.  We can then report an error later that they are only\r\n                // allowed in generator expressions.\r\n                //\r\n                // for example, if we see 'yield(foo)', then we'll have to treat that as an\r\n                // invocation expression of something called 'yield'.  However, if we have\r\n                // 'yield foo' then that is not legal as a normal expression, so we can\r\n                // definitely recognize this as a yield expression.\r\n                //\r\n                // for now we just check if the next token is an identifier.  More heuristics\r\n                // can be added here later as necessary.  We just need to make sure that we\r\n                // don't accidently consume something legal.\r\n                return lookAhead(nextTokenIsIdentifierOnSameLine);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function nextTokenIsIdentifierOnSameLine() {\r\n            nextToken();\r\n            return !scanner.hasPrecedingLineBreak() && isIdentifier();\r\n        }\r\n\r\n        function parseYieldExpression(): YieldExpression {\r\n            let node = <YieldExpression>createNode(SyntaxKind.YieldExpression);\r\n\r\n            // YieldExpression[In] :\r\n            //      yield\r\n            //      yield [no LineTerminator here] [Lexical goal InputElementRegExp]AssignmentExpression[?In, Yield]\r\n            //      yield [no LineTerminator here] * [Lexical goal InputElementRegExp]AssignmentExpression[?In, Yield]\r\n            nextToken();\r\n\r\n            if (!scanner.hasPrecedingLineBreak() &&\r\n                (token === SyntaxKind.AsteriskToken || isStartOfExpression())) {\r\n                node.asteriskToken = parseOptionalToken(SyntaxKind.AsteriskToken);\r\n                node.expression = parseAssignmentExpressionOrHigher();\r\n                return finishNode(node);\r\n            }\r\n            else {\r\n                // if the next token is not on the same line as yield.  or we don't have an '*' or\r\n                // the start of an expressin, then this is just a simple \"yield\" expression.\r\n                return finishNode(node);\r\n            }\r\n        }\r\n\r\n        function parseSimpleArrowFunctionExpression(identifier: Identifier): Expression {\r\n            Debug.assert(token === SyntaxKind.EqualsGreaterThanToken, \"parseSimpleArrowFunctionExpression should only have been called if we had a =>\");\r\n\r\n            let node = <ArrowFunction>createNode(SyntaxKind.ArrowFunction, identifier.pos);\r\n\r\n            let parameter = <ParameterDeclaration>createNode(SyntaxKind.Parameter, identifier.pos);\r\n            parameter.name = identifier;\r\n            finishNode(parameter);\r\n\r\n            node.parameters = <NodeArray<ParameterDeclaration>>[parameter];\r\n            node.parameters.pos = parameter.pos;\r\n            node.parameters.end = parameter.end;\r\n\r\n            node.equalsGreaterThanToken = parseExpectedToken(SyntaxKind.EqualsGreaterThanToken, false, Diagnostics._0_expected, \"=>\");\r\n            node.body = parseArrowFunctionExpressionBody();\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        function tryParseParenthesizedArrowFunctionExpression(): Expression {\r\n            let triState = isParenthesizedArrowFunctionExpression();\r\n\r\n            if (triState === Tristate.False) {\r\n                // It's definitely not a parenthesized arrow function expression.\r\n                return undefined;\r\n            }\r\n\r\n            // If we definitely have an arrow function, then we can just parse one, not requiring a\r\n            // following => or { token. Otherwise, we *might* have an arrow function.  Try to parse\r\n            // it out, but don't allow any ambiguity, and return 'undefined' if this could be an\r\n            // expression instead.\r\n            let arrowFunction = triState === Tristate.True\r\n                ? parseParenthesizedArrowFunctionExpressionHead(/*allowAmbiguity*/ true)\r\n                : tryParse(parsePossibleParenthesizedArrowFunctionExpressionHead);\r\n\r\n            if (!arrowFunction) {\r\n                // Didn't appear to actually be a parenthesized arrow function.  Just bail out.\r\n                return undefined;\r\n            }\r\n\r\n            // If we have an arrow, then try to parse the body. Even if not, try to parse if we\r\n            // have an opening brace, just in case we're in an error state.\r\n            var lastToken = token;\r\n            arrowFunction.equalsGreaterThanToken = parseExpectedToken(SyntaxKind.EqualsGreaterThanToken, /*reportAtCurrentPosition*/false, Diagnostics._0_expected, \"=>\");\r\n            arrowFunction.body = (lastToken === SyntaxKind.EqualsGreaterThanToken || lastToken === SyntaxKind.OpenBraceToken)\r\n                ? parseArrowFunctionExpressionBody()\r\n                : parseIdentifier();\r\n\r\n            return finishNode(arrowFunction);\r\n        }\r\n\r\n        //  True        -> We definitely expect a parenthesized arrow function here.\r\n        //  False       -> There *cannot* be a parenthesized arrow function here.\r\n        //  Unknown     -> There *might* be a parenthesized arrow function here.\r\n        //                 Speculatively look ahead to be sure, and rollback if not.\r\n        function isParenthesizedArrowFunctionExpression(): Tristate {\r\n            if (token === SyntaxKind.OpenParenToken || token === SyntaxKind.LessThanToken) {\r\n                return lookAhead(isParenthesizedArrowFunctionExpressionWorker);\r\n            }\r\n\r\n            if (token === SyntaxKind.EqualsGreaterThanToken) {\r\n                // ERROR RECOVERY TWEAK:\r\n                // If we see a standalone => try to parse it as an arrow function expression as that's\r\n                // likely what the user intended to write.\r\n                return Tristate.True;\r\n            }\r\n            // Definitely not a parenthesized arrow function.\r\n            return Tristate.False;\r\n        }\r\n\r\n        function isParenthesizedArrowFunctionExpressionWorker() {\r\n            let first = token;\r\n            let second = nextToken();\r\n\r\n            if (first === SyntaxKind.OpenParenToken) {\r\n                if (second === SyntaxKind.CloseParenToken) {\r\n                    // Simple cases: \"() =>\", \"(): \", and  \"() {\".\r\n                    // This is an arrow function with no parameters.\r\n                    // The last one is not actually an arrow function,\r\n                    // but this is probably what the user intended.\r\n                    let third = nextToken();\r\n                    switch (third) {\r\n                        case SyntaxKind.EqualsGreaterThanToken:\r\n                        case SyntaxKind.ColonToken:\r\n                        case SyntaxKind.OpenBraceToken:\r\n                            return Tristate.True;\r\n                        default:\r\n                            return Tristate.False;\r\n                    }\r\n                }\r\n\r\n                // If encounter \"([\" or \"({\", this could be the start of a binding pattern.\r\n                // Examples:\r\n                //      ([ x ]) => { }\r\n                //      ({ x }) => { }\r\n                //      ([ x ])\r\n                //      ({ x })\r\n                if (second === SyntaxKind.OpenBracketToken || second === SyntaxKind.OpenBraceToken) {\r\n                    return Tristate.Unknown;\r\n                }\r\n\r\n                // Simple case: \"(...\"\r\n                // This is an arrow function with a rest parameter.\r\n                if (second === SyntaxKind.DotDotDotToken) {\r\n                    return Tristate.True;\r\n                }\r\n\r\n                // If we had \"(\" followed by something that's not an identifier,\r\n                // then this definitely doesn't look like a lambda.\r\n                // Note: we could be a little more lenient and allow\r\n                // \"(public\" or \"(private\". These would not ever actually be allowed,\r\n                // but we could provide a good error message instead of bailing out.\r\n                if (!isIdentifier()) {\r\n                    return Tristate.False;\r\n                }\r\n\r\n                // If we have something like \"(a:\", then we must have a\r\n                // type-annotated parameter in an arrow function expression.\r\n                if (nextToken() === SyntaxKind.ColonToken) {\r\n                    return Tristate.True;\r\n                }\r\n\r\n                // This *could* be a parenthesized arrow function.\r\n                // Return Unknown to let the caller know.\r\n                return Tristate.Unknown;\r\n            }\r\n            else {\r\n                Debug.assert(first === SyntaxKind.LessThanToken);\r\n\r\n                // If we have \"<\" not followed by an identifier,\r\n                // then this definitely is not an arrow function.\r\n                if (!isIdentifier()) {\r\n                    return Tristate.False;\r\n                }\r\n\r\n                // This *could* be a parenthesized arrow function.\r\n                return Tristate.Unknown;\r\n            }\r\n        }\r\n\r\n        function parsePossibleParenthesizedArrowFunctionExpressionHead(): ArrowFunction {\r\n            return parseParenthesizedArrowFunctionExpressionHead(/*allowAmbiguity*/ false);\r\n        }\r\n\r\n        function parseParenthesizedArrowFunctionExpressionHead(allowAmbiguity: boolean): ArrowFunction {\r\n            let node = <ArrowFunction>createNode(SyntaxKind.ArrowFunction);\r\n            // Arrow functions are never generators.\r\n            //\r\n            // If we're speculatively parsing a signature for a parenthesized arrow function, then\r\n            // we have to have a complete parameter list.  Otherwise we might see something like\r\n            // a => (b => c)\r\n            // And think that \"(b =>\" was actually a parenthesized arrow function with a missing\r\n            // close paren.\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ !allowAmbiguity, node);\r\n\r\n            // If we couldn't get parameters, we definitely could not parse out an arrow function.\r\n            if (!node.parameters) {\r\n                return undefined;\r\n            }\r\n\r\n            // Parsing a signature isn't enough.\r\n            // Parenthesized arrow signatures often look like other valid expressions.\r\n            // For instance:\r\n            //  - \"(x = 10)\" is an assignment expression parsed as a signature with a default parameter value.\r\n            //  - \"(x,y)\" is a comma expression parsed as a signature with two parameters.\r\n            //  - \"a ? (b): c\" will have \"(b):\" parsed as a signature with a return type annotation.\r\n            //\r\n            // So we need just a bit of lookahead to ensure that it can only be a signature.\r\n            if (!allowAmbiguity && token !== SyntaxKind.EqualsGreaterThanToken && token !== SyntaxKind.OpenBraceToken) {\r\n                // Returning undefined here will cause our caller to rewind to where we started from.\r\n                return undefined;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        function parseArrowFunctionExpressionBody(): Block | Expression {\r\n            if (token === SyntaxKind.OpenBraceToken) {\r\n                return parseFunctionBlock(/*allowYield*/ false, /*ignoreMissingOpenBrace*/ false);\r\n            }\r\n\r\n            if (token !== SyntaxKind.SemicolonToken &&\r\n                token !== SyntaxKind.FunctionKeyword &&\r\n                token !== SyntaxKind.ClassKeyword &&\r\n                isStartOfStatement() &&\r\n                !isStartOfExpressionStatement()) {\r\n                // Check if we got a plain statement (i.e. no expression-statements, no function/class expressions/declarations)\r\n                //\r\n                // Here we try to recover from a potential error situation in the case where the\r\n                // user meant to supply a block. For example, if the user wrote:\r\n                //\r\n                //  a =>\r\n                //      let v = 0;\r\n                //  }\r\n                //\r\n                // they may be missing an open brace.  Check to see if that's the case so we can\r\n                // try to recover better.  If we don't do this, then the next close curly we see may end\r\n                // up preemptively closing the containing construct.\r\n                //\r\n                // Note: even when 'ignoreMissingOpenBrace' is passed as true, parseBody will still error.\r\n                return parseFunctionBlock(/*allowYield*/ false, /*ignoreMissingOpenBrace*/ true);\r\n            }\r\n\r\n            return parseAssignmentExpressionOrHigher();\r\n        }\r\n\r\n        function parseConditionalExpressionRest(leftOperand: Expression): Expression {\r\n            // Note: we are passed in an expression which was produced from parseBinaryExpressionOrHigher.\r\n            let questionToken = parseOptionalToken(SyntaxKind.QuestionToken);\r\n            if (!questionToken) {\r\n                return leftOperand;\r\n            }\r\n\r\n            // Note: we explicitly 'allowIn' in the whenTrue part of the condition expression, and\r\n            // we do not that for the 'whenFalse' part.\r\n            let node = <ConditionalExpression>createNode(SyntaxKind.ConditionalExpression, leftOperand.pos);\r\n            node.condition = leftOperand;\r\n            node.questionToken = questionToken;\r\n            node.whenTrue = doOutsideOfContext(disallowInAndDecoratorContext, parseAssignmentExpressionOrHigher);\r\n            node.colonToken = parseExpectedToken(SyntaxKind.ColonToken, /*reportAtCurrentPosition*/ false,\r\n                Diagnostics._0_expected, tokenToString(SyntaxKind.ColonToken));\r\n            node.whenFalse = parseAssignmentExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseBinaryExpressionOrHigher(precedence: number): Expression {\r\n            let leftOperand = parseUnaryExpressionOrHigher();\r\n            return parseBinaryExpressionRest(precedence, leftOperand);\r\n        }\r\n\r\n        function isInOrOfKeyword(t: SyntaxKind) {\r\n            return t === SyntaxKind.InKeyword || t === SyntaxKind.OfKeyword;\r\n        }\r\n\r\n        function parseBinaryExpressionRest(precedence: number, leftOperand: Expression): Expression {\r\n            while (true) {\r\n                // We either have a binary operator here, or we're finished.  We call\r\n                // reScanGreaterToken so that we merge token sequences like > and = into >=\r\n\r\n                reScanGreaterToken();\r\n                let newPrecedence = getBinaryOperatorPrecedence();\r\n\r\n                // Check the precedence to see if we should \"take\" this operator\r\n                if (newPrecedence <= precedence) {\r\n                    break;\r\n                }\r\n\r\n                if (token === SyntaxKind.InKeyword && inDisallowInContext()) {\r\n                    break;\r\n                }\r\n\r\n                leftOperand = makeBinaryExpression(leftOperand, parseTokenNode(), parseBinaryExpressionOrHigher(newPrecedence));\r\n            }\r\n\r\n            return leftOperand;\r\n        }\r\n\r\n        function isBinaryOperator() {\r\n            if (inDisallowInContext() && token === SyntaxKind.InKeyword) {\r\n                return false;\r\n            }\r\n\r\n            return getBinaryOperatorPrecedence() > 0;\r\n        }\r\n\r\n        function getBinaryOperatorPrecedence(): number {\r\n            switch (token) {\r\n                case SyntaxKind.BarBarToken:\r\n                    return 1;\r\n                case SyntaxKind.AmpersandAmpersandToken:\r\n                    return 2;\r\n                case SyntaxKind.BarToken:\r\n                    return 3;\r\n                case SyntaxKind.CaretToken:\r\n                    return 4;\r\n                case SyntaxKind.AmpersandToken:\r\n                    return 5;\r\n                case SyntaxKind.EqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsToken:\r\n                case SyntaxKind.EqualsEqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsEqualsToken:\r\n                    return 6;\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.GreaterThanToken:\r\n                case SyntaxKind.LessThanEqualsToken:\r\n                case SyntaxKind.GreaterThanEqualsToken:\r\n                case SyntaxKind.InstanceOfKeyword:\r\n                case SyntaxKind.InKeyword:\r\n                    return 7;\r\n                case SyntaxKind.LessThanLessThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\r\n                    return 8;\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.MinusToken:\r\n                    return 9;\r\n                case SyntaxKind.AsteriskToken:\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.PercentToken:\r\n                    return 10;\r\n            }\r\n\r\n            // -1 is lower than all other precedences.  Returning it will cause binary expression\r\n            // parsing to stop.\r\n            return -1;\r\n        }\r\n\r\n        function makeBinaryExpression(left: Expression, operatorToken: Node, right: Expression): BinaryExpression {\r\n            let node = <BinaryExpression>createNode(SyntaxKind.BinaryExpression, left.pos);\r\n            node.left = left;\r\n            node.operatorToken = operatorToken;\r\n            node.right = right;\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parsePrefixUnaryExpression() {\r\n            let node = <PrefixUnaryExpression>createNode(SyntaxKind.PrefixUnaryExpression);\r\n            node.operator = token;\r\n            nextToken();\r\n            node.operand = parseUnaryExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseDeleteExpression() {\r\n            let node = <DeleteExpression>createNode(SyntaxKind.DeleteExpression);\r\n            nextToken();\r\n            node.expression = parseUnaryExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeOfExpression() {\r\n            let node = <TypeOfExpression>createNode(SyntaxKind.TypeOfExpression);\r\n            nextToken();\r\n            node.expression = parseUnaryExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseVoidExpression() {\r\n            let node = <VoidExpression>createNode(SyntaxKind.VoidExpression);\r\n            nextToken();\r\n            node.expression = parseUnaryExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseUnaryExpressionOrHigher(): UnaryExpression {\r\n            switch (token) {\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.TildeToken:\r\n                case SyntaxKind.ExclamationToken:\r\n                case SyntaxKind.PlusPlusToken:\r\n                case SyntaxKind.MinusMinusToken:\r\n                    return parsePrefixUnaryExpression();\r\n                case SyntaxKind.DeleteKeyword:\r\n                    return parseDeleteExpression();\r\n                case SyntaxKind.TypeOfKeyword:\r\n                    return parseTypeOfExpression();\r\n                case SyntaxKind.VoidKeyword:\r\n                    return parseVoidExpression();\r\n                case SyntaxKind.LessThanToken:\r\n                    return parseTypeAssertion();\r\n                default:\r\n                    return parsePostfixExpressionOrHigher();\r\n            }\r\n        }\r\n\r\n        function parsePostfixExpressionOrHigher(): PostfixExpression {\r\n            let expression = parseLeftHandSideExpressionOrHigher();\r\n\r\n            Debug.assert(isLeftHandSideExpression(expression));\r\n            if ((token === SyntaxKind.PlusPlusToken || token === SyntaxKind.MinusMinusToken) && !scanner.hasPrecedingLineBreak()) {\r\n                let node = <PostfixUnaryExpression>createNode(SyntaxKind.PostfixUnaryExpression, expression.pos);\r\n                node.operand = expression;\r\n                node.operator = token;\r\n                nextToken();\r\n                return finishNode(node);\r\n            }\r\n\r\n            return expression;\r\n        }\r\n\r\n        function parseLeftHandSideExpressionOrHigher(): LeftHandSideExpression {\r\n            // Original Ecma:\r\n            // LeftHandSideExpression: See 11.2\r\n            //      NewExpression\r\n            //      CallExpression\r\n            //\r\n            // Our simplification:\r\n            //\r\n            // LeftHandSideExpression: See 11.2\r\n            //      MemberExpression\r\n            //      CallExpression\r\n            //\r\n            // See comment in parseMemberExpressionOrHigher on how we replaced NewExpression with\r\n            // MemberExpression to make our lives easier.\r\n            //\r\n            // to best understand the below code, it's important to see how CallExpression expands\r\n            // out into its own productions:\r\n            //\r\n            // CallExpression:\r\n            //      MemberExpression Arguments\r\n            //      CallExpression Arguments\r\n            //      CallExpression[Expression]\r\n            //      CallExpression.IdentifierName\r\n            //      super   (   ArgumentListopt   )\r\n            //      super.IdentifierName\r\n            //\r\n            // Because of the recursion in these calls, we need to bottom out first.  There are two\r\n            // bottom out states we can run into.  Either we see 'super' which must start either of\r\n            // the last two CallExpression productions.  Or we have a MemberExpression which either\r\n            // completes the LeftHandSideExpression, or starts the beginning of the first four\r\n            // CallExpression productions.\r\n            let expression = token === SyntaxKind.SuperKeyword\r\n                ? parseSuperExpression()\r\n                : parseMemberExpressionOrHigher();\r\n\r\n            // Now, we *may* be complete.  However, we might have consumed the start of a\r\n            // CallExpression.  As such, we need to consume the rest of it here to be complete.\r\n            return parseCallExpressionRest(expression);\r\n        }\r\n\r\n        function parseMemberExpressionOrHigher(): MemberExpression {\r\n            // Note: to make our lives simpler, we decompose the the NewExpression productions and\r\n            // place ObjectCreationExpression and FunctionExpression into PrimaryExpression.\r\n            // like so:\r\n            //\r\n            //   PrimaryExpression : See 11.1\r\n            //      this\r\n            //      Identifier\r\n            //      Literal\r\n            //      ArrayLiteral\r\n            //      ObjectLiteral\r\n            //      (Expression)\r\n            //      FunctionExpression\r\n            //      new MemberExpression Arguments?\r\n            //\r\n            //   MemberExpression : See 11.2\r\n            //      PrimaryExpression\r\n            //      MemberExpression[Expression]\r\n            //      MemberExpression.IdentifierName\r\n            //\r\n            //   CallExpression : See 11.2\r\n            //      MemberExpression\r\n            //      CallExpression Arguments\r\n            //      CallExpression[Expression]\r\n            //      CallExpression.IdentifierName\r\n            //\r\n            // Technically this is ambiguous.  i.e. CallExpression defines:\r\n            //\r\n            //   CallExpression:\r\n            //      CallExpression Arguments\r\n            //\r\n            // If you see: \"new Foo()\"\r\n            //\r\n            // Then that could be treated as a single ObjectCreationExpression, or it could be\r\n            // treated as the invocation of \"new Foo\".  We disambiguate that in code (to match\r\n            // the original grammar) by making sure that if we see an ObjectCreationExpression\r\n            // we always consume arguments if they are there. So we treat \"new Foo()\" as an\r\n            // object creation only, and not at all as an invocation)  Another way to think\r\n            // about this is that for every \"new\" that we see, we will consume an argument list if\r\n            // it is there as part of the *associated* object creation node.  Any additional\r\n            // argument lists we see, will become invocation expressions.\r\n            //\r\n            // Because there are no other places in the grammar now that refer to FunctionExpression\r\n            // or ObjectCreationExpression, it is safe to push down into the PrimaryExpression\r\n            // production.\r\n            //\r\n            // Because CallExpression and MemberExpression are left recursive, we need to bottom out\r\n            // of the recursion immediately.  So we parse out a primary expression to start with.\r\n            let expression = parsePrimaryExpression();\r\n            return parseMemberExpressionRest(expression);\r\n        }\r\n\r\n        function parseSuperExpression(): MemberExpression {\r\n            let expression = parseTokenNode<PrimaryExpression>();\r\n            if (token === SyntaxKind.OpenParenToken || token === SyntaxKind.DotToken) {\r\n                return expression;\r\n            }\r\n\r\n            // If we have seen \"super\" it must be followed by '(' or '.'.\r\n            // If it wasn't then just try to parse out a '.' and report an error.\r\n            let node = <PropertyAccessExpression>createNode(SyntaxKind.PropertyAccessExpression, expression.pos);\r\n            node.expression = expression;\r\n            node.dotToken = parseExpectedToken(SyntaxKind.DotToken, /*reportAtCurrentPosition*/ false, Diagnostics.super_must_be_followed_by_an_argument_list_or_member_access);\r\n            node.name = parseRightSideOfDot(/*allowIdentifierNames*/ true);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeAssertion(): TypeAssertion {\r\n            let node = <TypeAssertion>createNode(SyntaxKind.TypeAssertionExpression);\r\n            parseExpected(SyntaxKind.LessThanToken);\r\n            node.type = parseType();\r\n            parseExpected(SyntaxKind.GreaterThanToken);\r\n            node.expression = parseUnaryExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseMemberExpressionRest(expression: LeftHandSideExpression): MemberExpression {\r\n            while (true) {\r\n                let dotToken = parseOptionalToken(SyntaxKind.DotToken);\r\n                if (dotToken) {\r\n                    let propertyAccess = <PropertyAccessExpression>createNode(SyntaxKind.PropertyAccessExpression, expression.pos);\r\n                    propertyAccess.expression = expression;\r\n                    propertyAccess.dotToken = dotToken;\r\n                    propertyAccess.name = parseRightSideOfDot(/*allowIdentifierNames*/ true);\r\n                    expression = finishNode(propertyAccess);\r\n                    continue;\r\n                }\r\n\r\n                // when in the [Decorator] context, we do not parse ElementAccess as it could be part of a ComputedPropertyName                \r\n                if (!inDecoratorContext() && parseOptional(SyntaxKind.OpenBracketToken)) {\r\n                    let indexedAccess = <ElementAccessExpression>createNode(SyntaxKind.ElementAccessExpression, expression.pos);\r\n                    indexedAccess.expression = expression;\r\n\r\n                    // It's not uncommon for a user to write: \"new Type[]\".\r\n                    // Check for that common pattern and report a better error message.\r\n                    if (token !== SyntaxKind.CloseBracketToken) {\r\n                        indexedAccess.argumentExpression = allowInAnd(parseExpression);\r\n                        if (indexedAccess.argumentExpression.kind === SyntaxKind.StringLiteral || indexedAccess.argumentExpression.kind === SyntaxKind.NumericLiteral) {\r\n                            let literal = <LiteralExpression>indexedAccess.argumentExpression;\r\n                            literal.text = internIdentifier(literal.text);\r\n                        }\r\n                    }\r\n\r\n                    parseExpected(SyntaxKind.CloseBracketToken);\r\n                    expression = finishNode(indexedAccess);\r\n                    continue;\r\n                }\r\n\r\n                if (token === SyntaxKind.NoSubstitutionTemplateLiteral || token === SyntaxKind.TemplateHead) {\r\n                    let tagExpression = <TaggedTemplateExpression>createNode(SyntaxKind.TaggedTemplateExpression, expression.pos);\r\n                    tagExpression.tag = expression;\r\n                    tagExpression.template = token === SyntaxKind.NoSubstitutionTemplateLiteral\r\n                        ? parseLiteralNode()\r\n                        : parseTemplateExpression();\r\n                    expression = finishNode(tagExpression);\r\n                    continue;\r\n                }\r\n\r\n                return <MemberExpression>expression;\r\n            }\r\n        }\r\n\r\n        function parseCallExpressionRest(expression: LeftHandSideExpression): LeftHandSideExpression {\r\n            while (true) {\r\n                expression = parseMemberExpressionRest(expression);\r\n                if (token === SyntaxKind.LessThanToken) {\r\n                    // See if this is the start of a generic invocation.  If so, consume it and\r\n                    // keep checking for postfix expressions.  Otherwise, it's just a '<' that's\r\n                    // part of an arithmetic expression.  Break out so we consume it higher in the\r\n                    // stack.\r\n                    let typeArguments = tryParse(parseTypeArgumentsInExpression);\r\n                    if (!typeArguments) {\r\n                        return expression;\r\n                    }\r\n\r\n                    let callExpr = <CallExpression>createNode(SyntaxKind.CallExpression, expression.pos);\r\n                    callExpr.expression = expression;\r\n                    callExpr.typeArguments = typeArguments;\r\n                    callExpr.arguments = parseArgumentList();\r\n                    expression = finishNode(callExpr);\r\n                    continue;\r\n                }\r\n                else if (token === SyntaxKind.OpenParenToken) {\r\n                    let callExpr = <CallExpression>createNode(SyntaxKind.CallExpression, expression.pos);\r\n                    callExpr.expression = expression;\r\n                    callExpr.arguments = parseArgumentList();\r\n                    expression = finishNode(callExpr);\r\n                    continue;\r\n                }\r\n\r\n                return expression;\r\n            }\r\n        }\r\n\r\n        function parseArgumentList() {\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            let result = parseDelimitedList(ParsingContext.ArgumentExpressions, parseArgumentExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            return result;\r\n        }\r\n\r\n        function parseTypeArgumentsInExpression() {\r\n            if (!parseOptional(SyntaxKind.LessThanToken)) {\r\n                return undefined;\r\n            }\r\n\r\n            let typeArguments = parseDelimitedList(ParsingContext.TypeArguments, parseType);\r\n            if (!parseExpected(SyntaxKind.GreaterThanToken)) {\r\n                // If it doesn't have the closing >  then it's definitely not an type argument list.\r\n                return undefined;\r\n            }\r\n\r\n            // If we have a '<', then only parse this as a arugment list if the type arguments\r\n            // are complete and we have an open paren.  if we don't, rewind and return nothing.\r\n            return typeArguments && canFollowTypeArgumentsInExpression()\r\n                ? typeArguments\r\n                : undefined;\r\n        }\r\n\r\n        function canFollowTypeArgumentsInExpression(): boolean {\r\n            switch (token) {\r\n                case SyntaxKind.OpenParenToken:                 // foo<x>(\r\n                // this case are the only case where this token can legally follow a type argument\r\n                // list.  So we definitely want to treat this as a type arg list.\r\n\r\n                case SyntaxKind.DotToken:                       // foo<x>.\r\n                case SyntaxKind.CloseParenToken:                // foo<x>)\r\n                case SyntaxKind.CloseBracketToken:              // foo<x>]\r\n                case SyntaxKind.ColonToken:                     // foo<x>:\r\n                case SyntaxKind.SemicolonToken:                 // foo<x>;\r\n                case SyntaxKind.QuestionToken:                  // foo<x>?\r\n                case SyntaxKind.EqualsEqualsToken:              // foo<x> ==\r\n                case SyntaxKind.EqualsEqualsEqualsToken:        // foo<x> ===\r\n                case SyntaxKind.ExclamationEqualsToken:         // foo<x> !=\r\n                case SyntaxKind.ExclamationEqualsEqualsToken:   // foo<x> !==\r\n                case SyntaxKind.AmpersandAmpersandToken:        // foo<x> &&\r\n                case SyntaxKind.BarBarToken:                    // foo<x> ||\r\n                case SyntaxKind.CaretToken:                     // foo<x> ^\r\n                case SyntaxKind.AmpersandToken:                 // foo<x> &\r\n                case SyntaxKind.BarToken:                       // foo<x> |\r\n                case SyntaxKind.CloseBraceToken:                // foo<x> }\r\n                case SyntaxKind.EndOfFileToken:                 // foo<x>\r\n                    // these cases can't legally follow a type arg list.  However, they're not legal\r\n                    // expressions either.  The user is probably in the middle of a generic type. So\r\n                    // treat it as such.\r\n                    return true;\r\n\r\n                case SyntaxKind.CommaToken:                     // foo<x>,\r\n                case SyntaxKind.OpenBraceToken:                 // foo<x> {\r\n                // We don't want to treat these as type arguments.  Otherwise we'll parse this\r\n                // as an invocation expression.  Instead, we want to parse out the expression \r\n                // in isolation from the type arguments.\r\n\r\n                default:\r\n                    // Anything else treat as an expression.\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        function parsePrimaryExpression(): PrimaryExpression {\r\n            switch (token) {\r\n                case SyntaxKind.NumericLiteral:\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NoSubstitutionTemplateLiteral:\r\n                    return parseLiteralNode();\r\n                case SyntaxKind.ThisKeyword:\r\n                case SyntaxKind.SuperKeyword:\r\n                case SyntaxKind.NullKeyword:\r\n                case SyntaxKind.TrueKeyword:\r\n                case SyntaxKind.FalseKeyword:\r\n                    return parseTokenNode<PrimaryExpression>();\r\n                case SyntaxKind.OpenParenToken:\r\n                    return parseParenthesizedExpression();\r\n                case SyntaxKind.OpenBracketToken:\r\n                    return parseArrayLiteralExpression();\r\n                case SyntaxKind.OpenBraceToken:\r\n                    return parseObjectLiteralExpression();\r\n                case SyntaxKind.ClassKeyword:\r\n                    return parseClassExpression();\r\n                case SyntaxKind.FunctionKeyword:\r\n                    return parseFunctionExpression();\r\n                case SyntaxKind.NewKeyword:\r\n                    return parseNewExpression();\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.SlashEqualsToken:\r\n                    if (reScanSlashToken() === SyntaxKind.RegularExpressionLiteral) {\r\n                        return parseLiteralNode();\r\n                    }\r\n                    break;\r\n                case SyntaxKind.TemplateHead:\r\n                    return parseTemplateExpression();\r\n            }\r\n\r\n            return parseIdentifier(Diagnostics.Expression_expected);\r\n        }\r\n\r\n        function parseParenthesizedExpression(): ParenthesizedExpression {\r\n            let node = <ParenthesizedExpression>createNode(SyntaxKind.ParenthesizedExpression);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseSpreadElement(): Expression {\r\n            let node = <SpreadElementExpression>createNode(SyntaxKind.SpreadElementExpression);\r\n            parseExpected(SyntaxKind.DotDotDotToken);\r\n            node.expression = parseAssignmentExpressionOrHigher();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseArgumentOrArrayLiteralElement(): Expression {\r\n            return token === SyntaxKind.DotDotDotToken ? parseSpreadElement() :\r\n                token === SyntaxKind.CommaToken ? <Expression>createNode(SyntaxKind.OmittedExpression) :\r\n                    parseAssignmentExpressionOrHigher();\r\n        }\r\n\r\n        function parseArgumentExpression(): Expression {\r\n            return doOutsideOfContext(disallowInAndDecoratorContext, parseArgumentOrArrayLiteralElement);\r\n        }\r\n\r\n        function parseArrayLiteralExpression(): ArrayLiteralExpression {\r\n            let node = <ArrayLiteralExpression>createNode(SyntaxKind.ArrayLiteralExpression);\r\n            parseExpected(SyntaxKind.OpenBracketToken);\r\n            if (scanner.hasPrecedingLineBreak()) node.flags |= NodeFlags.MultiLine;\r\n            node.elements = parseDelimitedList(ParsingContext.ArrayLiteralMembers, parseArgumentOrArrayLiteralElement);\r\n            parseExpected(SyntaxKind.CloseBracketToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function tryParseAccessorDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): AccessorDeclaration {\r\n            if (parseContextualModifier(SyntaxKind.GetKeyword)) {\r\n                return parseAccessorDeclaration(SyntaxKind.GetAccessor, fullStart, decorators, modifiers);\r\n            }\r\n            else if (parseContextualModifier(SyntaxKind.SetKeyword)) {\r\n                return parseAccessorDeclaration(SyntaxKind.SetAccessor, fullStart, decorators, modifiers);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function parseObjectLiteralElement(): ObjectLiteralElement {\r\n            let fullStart = scanner.getStartPos();\r\n            let decorators = parseDecorators();\r\n            let modifiers = parseModifiers();\r\n\r\n            let accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);\r\n            if (accessor) {\r\n                return accessor;\r\n            }\r\n\r\n            let asteriskToken = parseOptionalToken(SyntaxKind.AsteriskToken);\r\n            let tokenIsIdentifier = isIdentifier();\r\n            let nameToken = token;\r\n            let propertyName = parsePropertyName();\r\n\r\n            // Disallowing of optional property assignments happens in the grammar checker.\r\n            let questionToken = parseOptionalToken(SyntaxKind.QuestionToken);\r\n            if (asteriskToken || token === SyntaxKind.OpenParenToken || token === SyntaxKind.LessThanToken) {\r\n                return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, propertyName, questionToken);\r\n            }\r\n\r\n            // Parse to check if it is short-hand property assignment or normal property assignment\r\n            if ((token === SyntaxKind.CommaToken || token === SyntaxKind.CloseBraceToken) && tokenIsIdentifier) {\r\n                let shorthandDeclaration = <ShorthandPropertyAssignment>createNode(SyntaxKind.ShorthandPropertyAssignment, fullStart);\r\n                shorthandDeclaration.name = <Identifier>propertyName;\r\n                shorthandDeclaration.questionToken = questionToken;\r\n                return finishNode(shorthandDeclaration);\r\n            }\r\n            else {\r\n                let propertyAssignment = <PropertyAssignment>createNode(SyntaxKind.PropertyAssignment, fullStart);\r\n                propertyAssignment.name = propertyName;\r\n                propertyAssignment.questionToken = questionToken;\r\n                parseExpected(SyntaxKind.ColonToken);\r\n                propertyAssignment.initializer = allowInAnd(parseAssignmentExpressionOrHigher);\r\n                return finishNode(propertyAssignment);\r\n            }\r\n        }\r\n\r\n        function parseObjectLiteralExpression(): ObjectLiteralExpression {\r\n            let node = <ObjectLiteralExpression>createNode(SyntaxKind.ObjectLiteralExpression);\r\n            parseExpected(SyntaxKind.OpenBraceToken);\r\n            if (scanner.hasPrecedingLineBreak()) {\r\n                node.flags |= NodeFlags.MultiLine;\r\n            }\r\n\r\n            node.properties = parseDelimitedList(ParsingContext.ObjectLiteralMembers, parseObjectLiteralElement, /*considerSemicolonAsDelimeter*/ true);\r\n            parseExpected(SyntaxKind.CloseBraceToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseFunctionExpression(): FunctionExpression {\r\n            // GeneratorExpression :\r\n            //      function * BindingIdentifier[Yield]opt (FormalParameters[Yield, GeneratorParameter]) { GeneratorBody[Yield] }\r\n            // FunctionExpression:\r\n            //      function BindingIdentifieropt(FormalParameters) { FunctionBody }\r\n            let saveDecoratorContext = inDecoratorContext();\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(false);\r\n            }\r\n            let node = <FunctionExpression>createNode(SyntaxKind.FunctionExpression);\r\n            parseExpected(SyntaxKind.FunctionKeyword);\r\n            node.asteriskToken = parseOptionalToken(SyntaxKind.AsteriskToken);\r\n            node.name = node.asteriskToken ? doInYieldContext(parseOptionalIdentifier) : parseOptionalIdentifier();\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ !!node.asteriskToken, /*requireCompleteParameterList*/ false, node);\r\n            node.body = parseFunctionBlock(/*allowYield*/ !!node.asteriskToken, /* ignoreMissingOpenBrace */ false);\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(true);\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseOptionalIdentifier() {\r\n            return isIdentifier() ? parseIdentifier() : undefined;\r\n        }\r\n\r\n        function parseNewExpression(): NewExpression {\r\n            let node = <NewExpression>createNode(SyntaxKind.NewExpression);\r\n            parseExpected(SyntaxKind.NewKeyword);\r\n            node.expression = parseMemberExpressionOrHigher();\r\n            node.typeArguments = tryParse(parseTypeArgumentsInExpression);\r\n            if (node.typeArguments || token === SyntaxKind.OpenParenToken) {\r\n                node.arguments = parseArgumentList();\r\n            }\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        // STATEMENTS\r\n        function parseBlock(ignoreMissingOpenBrace: boolean, checkForStrictMode: boolean, diagnosticMessage?: DiagnosticMessage): Block {\r\n            let node = <Block>createNode(SyntaxKind.Block);\r\n            if (parseExpected(SyntaxKind.OpenBraceToken, diagnosticMessage) || ignoreMissingOpenBrace) {\r\n                node.statements = parseList(ParsingContext.BlockStatements, checkForStrictMode, parseStatement);\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n            }\r\n            else {\r\n                node.statements = createMissingList<Statement>();\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseFunctionBlock(allowYield: boolean, ignoreMissingOpenBrace: boolean, diagnosticMessage?: DiagnosticMessage): Block {\r\n            let savedYieldContext = inYieldContext();\r\n            setYieldContext(allowYield);\r\n\r\n            // We may be in a [Decorator] context when parsing a function expression or \r\n            // arrow function. The body of the function is not in [Decorator] context.\r\n            let saveDecoratorContext = inDecoratorContext();\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(false);\r\n            }\r\n\r\n            let block = parseBlock(ignoreMissingOpenBrace, /*checkForStrictMode*/ true, diagnosticMessage);\r\n\r\n            if (saveDecoratorContext) {\r\n                setDecoratorContext(true);\r\n            }\r\n\r\n            setYieldContext(savedYieldContext);\r\n\r\n            return block;\r\n        }\r\n\r\n        function parseEmptyStatement(): Statement {\r\n            let node = <Statement>createNode(SyntaxKind.EmptyStatement);\r\n            parseExpected(SyntaxKind.SemicolonToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseIfStatement(): IfStatement {\r\n            let node = <IfStatement>createNode(SyntaxKind.IfStatement);\r\n            parseExpected(SyntaxKind.IfKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            node.thenStatement = parseStatement();\r\n            node.elseStatement = parseOptional(SyntaxKind.ElseKeyword) ? parseStatement() : undefined;\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseDoStatement(): DoStatement {\r\n            let node = <DoStatement>createNode(SyntaxKind.DoStatement);\r\n            parseExpected(SyntaxKind.DoKeyword);\r\n            node.statement = parseStatement();\r\n            parseExpected(SyntaxKind.WhileKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n\r\n            // From: https://mail.mozilla.org/pipermail/es-discuss/2011-August/016188.html\r\n            // 157 min --- All allen at wirfs-brock.com CONF --- \"do{;}while(false)false\" prohibited in\r\n            // spec but allowed in consensus reality. Approved -- this is the de-facto standard whereby\r\n            //  do;while(0)x will have a semicolon inserted before x.\r\n            parseOptional(SyntaxKind.SemicolonToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseWhileStatement(): WhileStatement {\r\n            let node = <WhileStatement>createNode(SyntaxKind.WhileStatement);\r\n            parseExpected(SyntaxKind.WhileKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            node.statement = parseStatement();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseForOrForInOrForOfStatement(): Statement {\r\n            let pos = getNodePos();\r\n            parseExpected(SyntaxKind.ForKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n\r\n            let initializer: VariableDeclarationList | Expression = undefined;\r\n            if (token !== SyntaxKind.SemicolonToken) {\r\n                if (token === SyntaxKind.VarKeyword || token === SyntaxKind.LetKeyword || token === SyntaxKind.ConstKeyword) {\r\n                    initializer = parseVariableDeclarationList(/*inForStatementInitializer*/ true);\r\n                }\r\n                else {\r\n                    initializer = disallowInAnd(parseExpression);\r\n                }\r\n            }\r\n            let forOrForInOrForOfStatement: IterationStatement;\r\n            if (parseOptional(SyntaxKind.InKeyword)) {\r\n                let forInStatement = <ForInStatement>createNode(SyntaxKind.ForInStatement, pos);\r\n                forInStatement.initializer = initializer;\r\n                forInStatement.expression = allowInAnd(parseExpression);\r\n                parseExpected(SyntaxKind.CloseParenToken);\r\n                forOrForInOrForOfStatement = forInStatement;\r\n            }\r\n            else if (parseOptional(SyntaxKind.OfKeyword)) {\r\n                let forOfStatement = <ForOfStatement>createNode(SyntaxKind.ForOfStatement, pos);\r\n                forOfStatement.initializer = initializer;\r\n                forOfStatement.expression = allowInAnd(parseAssignmentExpressionOrHigher);\r\n                parseExpected(SyntaxKind.CloseParenToken);\r\n                forOrForInOrForOfStatement = forOfStatement;\r\n            } else {\r\n                let forStatement = <ForStatement>createNode(SyntaxKind.ForStatement, pos);\r\n                forStatement.initializer = initializer;\r\n                parseExpected(SyntaxKind.SemicolonToken);\r\n                if (token !== SyntaxKind.SemicolonToken && token !== SyntaxKind.CloseParenToken) {\r\n                    forStatement.condition = allowInAnd(parseExpression);\r\n                }\r\n                parseExpected(SyntaxKind.SemicolonToken);\r\n                if (token !== SyntaxKind.CloseParenToken) {\r\n                    forStatement.incrementor = allowInAnd(parseExpression);\r\n                }\r\n                parseExpected(SyntaxKind.CloseParenToken);\r\n                forOrForInOrForOfStatement = forStatement;\r\n            }\r\n\r\n            forOrForInOrForOfStatement.statement = parseStatement();\r\n\r\n            return finishNode(forOrForInOrForOfStatement);\r\n        }\r\n\r\n        function parseBreakOrContinueStatement(kind: SyntaxKind): BreakOrContinueStatement {\r\n            let node = <BreakOrContinueStatement>createNode(kind);\r\n\r\n            parseExpected(kind === SyntaxKind.BreakStatement ? SyntaxKind.BreakKeyword : SyntaxKind.ContinueKeyword);\r\n            if (!canParseSemicolon()) {\r\n                node.label = parseIdentifier();\r\n            }\r\n\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseReturnStatement(): ReturnStatement {\r\n            let node = <ReturnStatement>createNode(SyntaxKind.ReturnStatement);\r\n\r\n            parseExpected(SyntaxKind.ReturnKeyword);\r\n            if (!canParseSemicolon()) {\r\n                node.expression = allowInAnd(parseExpression);\r\n            }\r\n\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseWithStatement(): WithStatement {\r\n            let node = <WithStatement>createNode(SyntaxKind.WithStatement);\r\n            parseExpected(SyntaxKind.WithKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            node.statement = parseStatement();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseCaseClause(): CaseClause {\r\n            let node = <CaseClause>createNode(SyntaxKind.CaseClause);\r\n            parseExpected(SyntaxKind.CaseKeyword);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.ColonToken);\r\n            node.statements = parseList(ParsingContext.SwitchClauseStatements, /*checkForStrictMode*/ false, parseStatement);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseDefaultClause(): DefaultClause {\r\n            let node = <DefaultClause>createNode(SyntaxKind.DefaultClause);\r\n            parseExpected(SyntaxKind.DefaultKeyword);\r\n            parseExpected(SyntaxKind.ColonToken);\r\n            node.statements = parseList(ParsingContext.SwitchClauseStatements, /*checkForStrictMode*/ false, parseStatement);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseCaseOrDefaultClause(): CaseOrDefaultClause {\r\n            return token === SyntaxKind.CaseKeyword ? parseCaseClause() : parseDefaultClause();\r\n        }\r\n\r\n        function parseSwitchStatement(): SwitchStatement {\r\n            let node = <SwitchStatement>createNode(SyntaxKind.SwitchStatement);\r\n            parseExpected(SyntaxKind.SwitchKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = allowInAnd(parseExpression);\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            let caseBlock = <CaseBlock>createNode(SyntaxKind.CaseBlock, scanner.getStartPos());\r\n            parseExpected(SyntaxKind.OpenBraceToken);\r\n            caseBlock.clauses = parseList(ParsingContext.SwitchClauses, /*checkForStrictMode*/ false, parseCaseOrDefaultClause);\r\n            parseExpected(SyntaxKind.CloseBraceToken);\r\n            node.caseBlock = finishNode(caseBlock);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseThrowStatement(): ThrowStatement {\r\n            // ThrowStatement[Yield] :\r\n            //      throw [no LineTerminator here]Expression[In, ?Yield];\r\n\r\n            // Because of automatic semicolon insertion, we need to report error if this\r\n            // throw could be terminated with a semicolon.  Note: we can't call 'parseExpression'\r\n            // directly as that might consume an expression on the following line.\r\n            // We just return 'undefined' in that case.  The actual error will be reported in the\r\n            // grammar walker.\r\n            let node = <ThrowStatement>createNode(SyntaxKind.ThrowStatement);\r\n            parseExpected(SyntaxKind.ThrowKeyword);\r\n            node.expression = scanner.hasPrecedingLineBreak() ? undefined : allowInAnd(parseExpression);\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        // TODO: Review for error recovery\r\n        function parseTryStatement(): TryStatement {\r\n            let node = <TryStatement>createNode(SyntaxKind.TryStatement);\r\n\r\n            parseExpected(SyntaxKind.TryKeyword);\r\n            node.tryBlock = parseBlock(/*ignoreMissingOpenBrace*/ false, /*checkForStrictMode*/ false);\r\n            node.catchClause = token === SyntaxKind.CatchKeyword ? parseCatchClause() : undefined;\r\n\r\n            // If we don't have a catch clause, then we must have a finally clause.  Try to parse\r\n            // one out no matter what.\r\n            if (!node.catchClause || token === SyntaxKind.FinallyKeyword) {\r\n                parseExpected(SyntaxKind.FinallyKeyword);\r\n                node.finallyBlock = parseBlock(/*ignoreMissingOpenBrace*/ false, /*checkForStrictMode*/ false);\r\n            }\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseCatchClause(): CatchClause {\r\n            let result = <CatchClause>createNode(SyntaxKind.CatchClause);\r\n            parseExpected(SyntaxKind.CatchKeyword);\r\n            if (parseExpected(SyntaxKind.OpenParenToken)) {\r\n                result.variableDeclaration = parseVariableDeclaration();\r\n            }\r\n\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            result.block = parseBlock(/*ignoreMissingOpenBrace*/ false, /*checkForStrictMode*/ false);\r\n            return finishNode(result);\r\n        }\r\n\r\n        function parseDebuggerStatement(): Statement {\r\n            let node = <Statement>createNode(SyntaxKind.DebuggerStatement);\r\n            parseExpected(SyntaxKind.DebuggerKeyword);\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseExpressionOrLabeledStatement(): ExpressionStatement | LabeledStatement {\r\n            // Avoiding having to do the lookahead for a labeled statement by just trying to parse\r\n            // out an expression, seeing if it is identifier and then seeing if it is followed by\r\n            // a colon.\r\n            let fullStart = scanner.getStartPos();\r\n            let expression = allowInAnd(parseExpression);\r\n\r\n            if (expression.kind === SyntaxKind.Identifier && parseOptional(SyntaxKind.ColonToken)) {\r\n                let labeledStatement = <LabeledStatement>createNode(SyntaxKind.LabeledStatement, fullStart);\r\n                labeledStatement.label = <Identifier>expression;\r\n                labeledStatement.statement = parseStatement();\r\n                return finishNode(labeledStatement);\r\n            }\r\n            else {\r\n                let expressionStatement = <ExpressionStatement>createNode(SyntaxKind.ExpressionStatement, fullStart);\r\n                expressionStatement.expression = expression;\r\n                parseSemicolon();\r\n                return finishNode(expressionStatement);\r\n            }\r\n        }\r\n\r\n        function isIdentifierOrKeyword() {\r\n            return token >= SyntaxKind.Identifier;\r\n        }\r\n\r\n        function nextTokenIsIdentifierOrKeywordOnSameLine() {\r\n            nextToken();\r\n            return isIdentifierOrKeyword() && !scanner.hasPrecedingLineBreak();\r\n        }\r\n\r\n        function parseDeclarationFlags(): StatementFlags {\r\n            while (true) {\r\n                switch (token) {\r\n                    case SyntaxKind.VarKeyword:\r\n                    case SyntaxKind.LetKeyword:\r\n                    case SyntaxKind.ConstKeyword:\r\n                    case SyntaxKind.FunctionKeyword:\r\n                    case SyntaxKind.ClassKeyword:\r\n                    case SyntaxKind.EnumKeyword:\r\n                        return StatementFlags.Statement;\r\n\r\n                    // 'declare', 'module', 'namespace', 'interface'* and 'type' are all legal JavaScript identifiers;\r\n                    // however, an identifier cannot be followed by another identifier on the same line. This is what we\r\n                    // count on to parse out the respective declarations. For instance, we exploit this to say that\r\n                    //\r\n                    //    namespace n\r\n                    //\r\n                    // can be none other than the beginning of a namespace declaration, but need to respect that JavaScript sees\r\n                    //\r\n                    //    namespace\r\n                    //    n\r\n                    //\r\n                    // as the identifier 'namespace' on one line followed by the identifier 'n' on another.\r\n                    // We need to look one token ahead to see if it permissible to try parsing a declaration.\r\n                    //\r\n                    // *Note*: 'interface' is actually a strict mode reserved word. So while\r\n                    //\r\n                    //   \"use strict\"\r\n                    //   interface\r\n                    //   I {}\r\n                    //\r\n                    // could be legal, it would add complexity for very little gain.\r\n                    case SyntaxKind.InterfaceKeyword:\r\n                    case SyntaxKind.TypeKeyword:\r\n                        return nextTokenIsIdentifierOnSameLine() ? StatementFlags.Statement : StatementFlags.None;\r\n                    case SyntaxKind.ModuleKeyword:\r\n                    case SyntaxKind.NamespaceKeyword:\r\n                        return nextTokenIsIdentifierOrStringLiteralOnSameLine() ? StatementFlags.ModuleElement : StatementFlags.None;\r\n                    case SyntaxKind.DeclareKeyword:\r\n                        nextToken();\r\n                        // ASI takes effect for this modifier.\r\n                        if (scanner.hasPrecedingLineBreak()) {\r\n                            return StatementFlags.None;\r\n                        }\r\n                        continue;\r\n\r\n                    case SyntaxKind.ImportKeyword:\r\n                        nextToken();\r\n                        return token === SyntaxKind.StringLiteral || token === SyntaxKind.AsteriskToken ||\r\n                            token === SyntaxKind.OpenBraceToken || isIdentifierOrKeyword() ?\r\n                            StatementFlags.ModuleElement : StatementFlags.None;\r\n                    case SyntaxKind.ExportKeyword:\r\n                        nextToken();\r\n                        if (token === SyntaxKind.EqualsToken || token === SyntaxKind.AsteriskToken ||\r\n                            token === SyntaxKind.OpenBraceToken || token === SyntaxKind.DefaultKeyword) {\r\n                            return StatementFlags.ModuleElement;\r\n                        }\r\n                        continue;\r\n                    case SyntaxKind.PublicKeyword:\r\n                    case SyntaxKind.PrivateKeyword:\r\n                    case SyntaxKind.ProtectedKeyword:\r\n                    case SyntaxKind.StaticKeyword:\r\n                        nextToken();\r\n                        continue;\r\n                    default:\r\n                        return StatementFlags.None;\r\n                }\r\n            }\r\n        }\r\n\r\n        function getDeclarationFlags(): StatementFlags {\r\n            return lookAhead(parseDeclarationFlags);\r\n        }\r\n\r\n        function getStatementFlags(): StatementFlags {\r\n            switch (token) {\r\n                case SyntaxKind.AtToken:\r\n                case SyntaxKind.SemicolonToken:\r\n                case SyntaxKind.OpenBraceToken:\r\n                case SyntaxKind.VarKeyword:\r\n                case SyntaxKind.LetKeyword:\r\n                case SyntaxKind.FunctionKeyword:\r\n                case SyntaxKind.ClassKeyword:\r\n                case SyntaxKind.EnumKeyword:\r\n                case SyntaxKind.IfKeyword:\r\n                case SyntaxKind.DoKeyword:\r\n                case SyntaxKind.WhileKeyword:\r\n                case SyntaxKind.ForKeyword:\r\n                case SyntaxKind.ContinueKeyword:\r\n                case SyntaxKind.BreakKeyword:\r\n                case SyntaxKind.ReturnKeyword:\r\n                case SyntaxKind.WithKeyword:\r\n                case SyntaxKind.SwitchKeyword:\r\n                case SyntaxKind.ThrowKeyword:\r\n                case SyntaxKind.TryKeyword:\r\n                case SyntaxKind.DebuggerKeyword:\r\n                // 'catch' and 'finally' do not actually indicate that the code is part of a statement,\r\n                // however, we say they are here so that we may gracefully parse them and error later.\r\n                case SyntaxKind.CatchKeyword:\r\n                case SyntaxKind.FinallyKeyword:\r\n                    return StatementFlags.Statement;\r\n\r\n                case SyntaxKind.ConstKeyword:\r\n                case SyntaxKind.ExportKeyword:\r\n                case SyntaxKind.ImportKeyword:\r\n                    return getDeclarationFlags();\r\n\r\n                case SyntaxKind.DeclareKeyword:\r\n                case SyntaxKind.InterfaceKeyword:\r\n                case SyntaxKind.ModuleKeyword:\r\n                case SyntaxKind.NamespaceKeyword:\r\n                case SyntaxKind.TypeKeyword:\r\n                    // When these don't start a declaration, they're an identifier in an expression statement\r\n                    return getDeclarationFlags() || StatementFlags.Statement;\r\n\r\n                case SyntaxKind.PublicKeyword:\r\n                case SyntaxKind.PrivateKeyword:\r\n                case SyntaxKind.ProtectedKeyword:\r\n                case SyntaxKind.StaticKeyword:\r\n                    // When these don't start a declaration, they may be the start of a class member if an identifier\r\n                    // immediately follows. Otherwise they're an identifier in an expression statement.\r\n                    return getDeclarationFlags() ||\r\n                        (lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine) ? StatementFlags.None : StatementFlags.Statement);\r\n\r\n                default:\r\n                    return isStartOfExpression() ? StatementFlags.Statement : StatementFlags.None;\r\n            }\r\n        }\r\n\r\n        function isStartOfStatement(): boolean {\r\n            return (getStatementFlags() & StatementFlags.Statement) !== 0;\r\n        }\r\n\r\n        function isStartOfModuleElement(): boolean {\r\n            return (getStatementFlags() & StatementFlags.StatementOrModuleElement) !== 0;\r\n        }\r\n\r\n        function nextTokenIsIdentifierOrStartOfDestructuringOnTheSameLine() {\r\n            nextToken();\r\n            return !scanner.hasPrecedingLineBreak() &&\r\n                (isIdentifier() || token === SyntaxKind.OpenBraceToken || token === SyntaxKind.OpenBracketToken);\r\n        }\r\n\r\n        function isLetDeclaration() {\r\n            // It is let declaration if in strict mode or next token is identifier\\open bracket\\open curly on same line.\r\n            // otherwise it needs to be treated like identifier\r\n            return inStrictModeContext() || lookAhead(nextTokenIsIdentifierOrStartOfDestructuringOnTheSameLine);\r\n        }\r\n\r\n        function parseStatement(): Statement {\r\n            return <Statement>parseModuleElementOfKind(StatementFlags.Statement);\r\n        }\r\n\r\n        function parseModuleElement(): ModuleElement {\r\n            return parseModuleElementOfKind(StatementFlags.StatementOrModuleElement);\r\n        }\r\n\r\n        function parseSourceElement(): ModuleElement {\r\n            return parseModuleElementOfKind(StatementFlags.StatementOrModuleElement);\r\n        }\r\n\r\n        function parseModuleElementOfKind(flags: StatementFlags): ModuleElement {\r\n            switch (token) {\r\n                case SyntaxKind.SemicolonToken:\r\n                    return parseEmptyStatement();\r\n                case SyntaxKind.OpenBraceToken:\r\n                    return parseBlock(/*ignoreMissingOpenBrace*/ false, /*checkForStrictMode*/ false);\r\n                case SyntaxKind.VarKeyword:\r\n                    return parseVariableStatement(scanner.getStartPos(), /*decorators*/ undefined, /*modifiers*/ undefined);\r\n                case SyntaxKind.LetKeyword:\r\n                    if (isLetDeclaration()) {\r\n                        return parseVariableStatement(scanner.getStartPos(), /*decorators*/ undefined, /*modifiers*/ undefined);\r\n                    }\r\n                    break;\r\n                case SyntaxKind.FunctionKeyword:\r\n                    return parseFunctionDeclaration(scanner.getStartPos(), /*decorators*/ undefined, /*modifiers*/ undefined);\r\n                case SyntaxKind.ClassKeyword:\r\n                    return parseClassDeclaration(scanner.getStartPos(), /*decorators*/ undefined, /*modifiers*/ undefined);\r\n                case SyntaxKind.IfKeyword:\r\n                    return parseIfStatement();\r\n                case SyntaxKind.DoKeyword:\r\n                    return parseDoStatement();\r\n                case SyntaxKind.WhileKeyword:\r\n                    return parseWhileStatement();\r\n                case SyntaxKind.ForKeyword:\r\n                    return parseForOrForInOrForOfStatement();\r\n                case SyntaxKind.ContinueKeyword:\r\n                    return parseBreakOrContinueStatement(SyntaxKind.ContinueStatement);\r\n                case SyntaxKind.BreakKeyword:\r\n                    return parseBreakOrContinueStatement(SyntaxKind.BreakStatement);\r\n                case SyntaxKind.ReturnKeyword:\r\n                    return parseReturnStatement();\r\n                case SyntaxKind.WithKeyword:\r\n                    return parseWithStatement();\r\n                case SyntaxKind.SwitchKeyword:\r\n                    return parseSwitchStatement();\r\n                case SyntaxKind.ThrowKeyword:\r\n                    return parseThrowStatement();\r\n                case SyntaxKind.TryKeyword:\r\n                // Include 'catch' and 'finally' for error recovery.\r\n                case SyntaxKind.CatchKeyword:\r\n                case SyntaxKind.FinallyKeyword:\r\n                    return parseTryStatement();\r\n                case SyntaxKind.DebuggerKeyword:\r\n                    return parseDebuggerStatement();\r\n                case SyntaxKind.AtToken:\r\n                    return parseDeclaration();\r\n\r\n                case SyntaxKind.InterfaceKeyword:\r\n                case SyntaxKind.TypeKeyword:\r\n                case SyntaxKind.ModuleKeyword:\r\n                case SyntaxKind.NamespaceKeyword:\r\n                case SyntaxKind.DeclareKeyword:\r\n                case SyntaxKind.ConstKeyword:\r\n                case SyntaxKind.EnumKeyword:\r\n                case SyntaxKind.ExportKeyword:\r\n                case SyntaxKind.ImportKeyword:\r\n                case SyntaxKind.PrivateKeyword:\r\n                case SyntaxKind.ProtectedKeyword:\r\n                case SyntaxKind.PublicKeyword:\r\n                case SyntaxKind.StaticKeyword:\r\n                    if (getDeclarationFlags() & flags) {\r\n                        return parseDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n            return parseExpressionOrLabeledStatement();\r\n        }\r\n\r\n        function parseDeclaration(): ModuleElement {\r\n            let fullStart = getNodePos();\r\n            let decorators = parseDecorators();\r\n            let modifiers = parseModifiers();\r\n            switch (token) {\r\n                case SyntaxKind.VarKeyword:\r\n                case SyntaxKind.LetKeyword:\r\n                case SyntaxKind.ConstKeyword:\r\n                    return parseVariableStatement(fullStart, decorators, modifiers);\r\n                case SyntaxKind.FunctionKeyword:\r\n                    return parseFunctionDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.ClassKeyword:\r\n                    return parseClassDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.InterfaceKeyword:\r\n                    return parseInterfaceDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.TypeKeyword:\r\n                    return parseTypeAliasDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.EnumKeyword:\r\n                    return parseEnumDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.ModuleKeyword:\r\n                case SyntaxKind.NamespaceKeyword:\r\n                    return parseModuleDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.ImportKeyword:\r\n                    return parseImportDeclarationOrImportEqualsDeclaration(fullStart, decorators, modifiers);\r\n                case SyntaxKind.ExportKeyword:\r\n                    nextToken();\r\n                    return token === SyntaxKind.DefaultKeyword || token === SyntaxKind.EqualsToken ?\r\n                        parseExportAssignment(fullStart, decorators, modifiers) :\r\n                        parseExportDeclaration(fullStart, decorators, modifiers);\r\n                default:\r\n                    if (decorators) {\r\n                        // We reached this point because we encountered decorators and/or modifiers and assumed a declaration\r\n                        // would follow. For recovery and error reporting purposes, return an incomplete declaration.                        \r\n                        let node = <ModuleElement>createMissingNode(SyntaxKind.MissingDeclaration, /*reportAtCurrentPosition*/ true, Diagnostics.Declaration_expected);\r\n                        node.pos = fullStart;\r\n                        node.decorators = decorators;\r\n                        setModifiers(node, modifiers);\r\n                        return finishNode(node);\r\n                    }\r\n            }\r\n        }\r\n\r\n        function nextTokenIsIdentifierOrStringLiteralOnSameLine() {\r\n            nextToken();\r\n            return !scanner.hasPrecedingLineBreak() && (isIdentifier() || token === SyntaxKind.StringLiteral);\r\n        }\r\n\r\n        function parseFunctionBlockOrSemicolon(isGenerator: boolean, diagnosticMessage?: DiagnosticMessage): Block {\r\n            if (token !== SyntaxKind.OpenBraceToken && canParseSemicolon()) {\r\n                parseSemicolon();\r\n                return;\r\n            }\r\n\r\n            return parseFunctionBlock(isGenerator, /*ignoreMissingOpenBrace*/ false, diagnosticMessage);\r\n        }\r\n\r\n        // DECLARATIONS\r\n\r\n        function parseArrayBindingElement(): BindingElement {\r\n            if (token === SyntaxKind.CommaToken) {\r\n                return <BindingElement>createNode(SyntaxKind.OmittedExpression);\r\n            }\r\n            let node = <BindingElement>createNode(SyntaxKind.BindingElement);\r\n            node.dotDotDotToken = parseOptionalToken(SyntaxKind.DotDotDotToken);\r\n            node.name = parseIdentifierOrPattern();\r\n            node.initializer = parseInitializer(/*inParameter*/ false);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseObjectBindingElement(): BindingElement {\r\n            let node = <BindingElement>createNode(SyntaxKind.BindingElement);\r\n            // TODO(andersh): Handle computed properties\r\n            let tokenIsIdentifier = isIdentifier();\r\n            let propertyName = parsePropertyName();\r\n            if (tokenIsIdentifier && token !== SyntaxKind.ColonToken) {\r\n                node.name = <Identifier>propertyName;\r\n            }\r\n            else {\r\n                parseExpected(SyntaxKind.ColonToken);\r\n                node.propertyName = <Identifier>propertyName;\r\n                node.name = parseIdentifierOrPattern();\r\n            }\r\n            node.initializer = parseInitializer(/*inParameter*/ false);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseObjectBindingPattern(): BindingPattern {\r\n            let node = <BindingPattern>createNode(SyntaxKind.ObjectBindingPattern);\r\n            parseExpected(SyntaxKind.OpenBraceToken);\r\n            node.elements = parseDelimitedList(ParsingContext.ObjectBindingElements, parseObjectBindingElement);\r\n            parseExpected(SyntaxKind.CloseBraceToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseArrayBindingPattern(): BindingPattern {\r\n            let node = <BindingPattern>createNode(SyntaxKind.ArrayBindingPattern);\r\n            parseExpected(SyntaxKind.OpenBracketToken);\r\n            node.elements = parseDelimitedList(ParsingContext.ArrayBindingElements, parseArrayBindingElement);\r\n            parseExpected(SyntaxKind.CloseBracketToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function isIdentifierOrPattern() {\r\n            return token === SyntaxKind.OpenBraceToken || token === SyntaxKind.OpenBracketToken || isIdentifier();\r\n        }\r\n\r\n        function parseIdentifierOrPattern(): Identifier | BindingPattern {\r\n            if (token === SyntaxKind.OpenBracketToken) {\r\n                return parseArrayBindingPattern();\r\n            }\r\n            if (token === SyntaxKind.OpenBraceToken) {\r\n                return parseObjectBindingPattern();\r\n            }\r\n            return parseIdentifier();\r\n        }\r\n\r\n        function parseVariableDeclaration(): VariableDeclaration {\r\n            let node = <VariableDeclaration>createNode(SyntaxKind.VariableDeclaration);\r\n            node.name = parseIdentifierOrPattern();\r\n            node.type = parseTypeAnnotation();\r\n            if (!isInOrOfKeyword(token)) {\r\n                node.initializer = parseInitializer(/*inParameter*/ false);\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseVariableDeclarationList(inForStatementInitializer: boolean): VariableDeclarationList {\r\n            let node = <VariableDeclarationList>createNode(SyntaxKind.VariableDeclarationList);\r\n\r\n            switch (token) {\r\n                case SyntaxKind.VarKeyword:\r\n                    break;\r\n                case SyntaxKind.LetKeyword:\r\n                    node.flags |= NodeFlags.Let;\r\n                    break;\r\n                case SyntaxKind.ConstKeyword:\r\n                    node.flags |= NodeFlags.Const;\r\n                    break;\r\n                default:\r\n                    Debug.fail();\r\n            }\r\n\r\n            nextToken();\r\n\r\n            // The user may have written the following:\r\n            //\r\n            //    for (let of X) { }\r\n            //\r\n            // In this case, we want to parse an empty declaration list, and then parse 'of'\r\n            // as a keyword. The reason this is not automatic is that 'of' is a valid identifier.\r\n            // So we need to look ahead to determine if 'of' should be treated as a keyword in\r\n            // this context.\r\n            // The checker will then give an error that there is an empty declaration list.\r\n            if (token === SyntaxKind.OfKeyword && lookAhead(canFollowContextualOfKeyword)) {\r\n                node.declarations = createMissingList<VariableDeclaration>();\r\n            }\r\n            else {\r\n                let savedDisallowIn = inDisallowInContext();\r\n                setDisallowInContext(inForStatementInitializer);\r\n\r\n                node.declarations = parseDelimitedList(ParsingContext.VariableDeclarations, parseVariableDeclaration);\r\n\r\n                setDisallowInContext(savedDisallowIn);\r\n            }\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        function canFollowContextualOfKeyword(): boolean {\r\n            return nextTokenIsIdentifier() && nextToken() === SyntaxKind.CloseParenToken;\r\n        }\r\n\r\n        function parseVariableStatement(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): VariableStatement {\r\n            let node = <VariableStatement>createNode(SyntaxKind.VariableStatement, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            node.declarationList = parseVariableDeclarationList(/*inForStatementInitializer*/ false);\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseFunctionDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): FunctionDeclaration {\r\n            let node = <FunctionDeclaration>createNode(SyntaxKind.FunctionDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.FunctionKeyword);\r\n            node.asteriskToken = parseOptionalToken(SyntaxKind.AsteriskToken);\r\n            node.name = node.flags & NodeFlags.Default ? parseOptionalIdentifier() : parseIdentifier();\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ !!node.asteriskToken, /*requireCompleteParameterList*/ false, node);\r\n            node.body = parseFunctionBlockOrSemicolon(!!node.asteriskToken, Diagnostics.or_expected);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseConstructorDeclaration(pos: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ConstructorDeclaration {\r\n            let node = <ConstructorDeclaration>createNode(SyntaxKind.Constructor, pos);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.ConstructorKeyword);\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ false, node);\r\n            node.body = parseFunctionBlockOrSemicolon(/*isGenerator*/ false, Diagnostics.or_expected);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseMethodDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray, asteriskToken: Node, name: DeclarationName, questionToken: Node, diagnosticMessage?: DiagnosticMessage): MethodDeclaration {\r\n            let method = <MethodDeclaration>createNode(SyntaxKind.MethodDeclaration, fullStart);\r\n            method.decorators = decorators;\r\n            setModifiers(method, modifiers);\r\n            method.asteriskToken = asteriskToken;\r\n            method.name = name;\r\n            method.questionToken = questionToken;\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ !!asteriskToken, /*requireCompleteParameterList*/ false, method);\r\n            method.body = parseFunctionBlockOrSemicolon(!!asteriskToken, diagnosticMessage);\r\n            return finishNode(method);\r\n        }\r\n\r\n        function parsePropertyDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray, name: DeclarationName, questionToken: Node): ClassElement {\r\n            let property = <PropertyDeclaration>createNode(SyntaxKind.PropertyDeclaration, fullStart);\r\n            property.decorators = decorators;\r\n            setModifiers(property, modifiers);\r\n            property.name = name;\r\n            property.questionToken = questionToken;\r\n            property.type = parseTypeAnnotation();\r\n\r\n            // For instance properties specifically, since they are evaluated inside the constructor,\r\n            // we do *not * want to parse yield expressions, so we specifically turn the yield context\r\n            // off. The grammar would look something like this:\r\n            //\r\n            //    MemberVariableDeclaration[Yield]:\r\n            //        AccessibilityModifier_opt   PropertyName   TypeAnnotation_opt   Initialiser_opt[In];\r\n            //        AccessibilityModifier_opt  static_opt  PropertyName   TypeAnnotation_opt   Initialiser_opt[In, ?Yield];\r\n            //\r\n            // The checker may still error in the static case to explicitly disallow the yield expression.\r\n            property.initializer = modifiers && modifiers.flags & NodeFlags.Static\r\n                ? allowInAnd(parseNonParameterInitializer)\r\n                : doOutsideOfContext(ParserContextFlags.Yield | ParserContextFlags.DisallowIn, parseNonParameterInitializer);\r\n\r\n            parseSemicolon();\r\n            return finishNode(property);\r\n        }\r\n\r\n        function parsePropertyOrMethodDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ClassElement {\r\n            let asteriskToken = parseOptionalToken(SyntaxKind.AsteriskToken);\r\n            let name = parsePropertyName();\r\n            \r\n            // Note: this is not legal as per the grammar.  But we allow it in the parser and\r\n            // report an error in the grammar checker.\r\n            let questionToken = parseOptionalToken(SyntaxKind.QuestionToken);\r\n            if (asteriskToken || token === SyntaxKind.OpenParenToken || token === SyntaxKind.LessThanToken) {\r\n                return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, name, questionToken, Diagnostics.or_expected);\r\n            }\r\n            else {\r\n                return parsePropertyDeclaration(fullStart, decorators, modifiers, name, questionToken);\r\n            }\r\n        }\r\n\r\n        function parseNonParameterInitializer() {\r\n            return parseInitializer(/*inParameter*/ false);\r\n        }\r\n\r\n        function parseAccessorDeclaration(kind: SyntaxKind, fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): AccessorDeclaration {\r\n            let node = <AccessorDeclaration>createNode(kind, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            node.name = parsePropertyName();\r\n            fillSignature(SyntaxKind.ColonToken, /*yieldAndGeneratorParameterContext*/ false, /*requireCompleteParameterList*/ false, node);\r\n            node.body = parseFunctionBlockOrSemicolon(/*isGenerator*/ false);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function isClassMemberModifier(idToken: SyntaxKind) {\r\n            switch (idToken) {\r\n                case SyntaxKind.PublicKeyword:\r\n                case SyntaxKind.PrivateKeyword:\r\n                case SyntaxKind.ProtectedKeyword:\r\n                case SyntaxKind.StaticKeyword:\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        function isClassMemberStart(): boolean {\r\n            let idToken: SyntaxKind;\r\n\r\n            if (token === SyntaxKind.AtToken) {\r\n                return true;\r\n            }\r\n\r\n            // Eat up all modifiers, but hold on to the last one in case it is actually an identifier.\r\n            while (isModifier(token)) {\r\n                idToken = token;\r\n                // If the idToken is a class modifier (protected, private, public, and static), it is\r\n                // certain that we are starting to parse class member. This allows better error recovery\r\n                // Example:\r\n                //      public foo() ...     // true\r\n                //      public @dec blah ... // true; we will then report an error later\r\n                //      export public ...    // true; we will then report an error later\r\n                if (isClassMemberModifier(idToken)) {\r\n                    return true;\r\n                }\r\n\r\n                nextToken();\r\n            }\r\n\r\n            if (token === SyntaxKind.AsteriskToken) {\r\n                return true;\r\n            }\r\n\r\n            // Try to get the first property-like token following all modifiers.\r\n            // This can either be an identifier or the 'get' or 'set' keywords.\r\n            if (isLiteralPropertyName()) {\r\n                idToken = token;\r\n                nextToken();\r\n            }\r\n\r\n            // Index signatures and computed properties are class members; we can parse.\r\n            if (token === SyntaxKind.OpenBracketToken) {\r\n                return true;\r\n            }\r\n\r\n            // If we were able to get any potential identifier...\r\n            if (idToken !== undefined) {\r\n                // If we have a non-keyword identifier, or if we have an accessor, then it's safe to parse.\r\n                if (!isKeyword(idToken) || idToken === SyntaxKind.SetKeyword || idToken === SyntaxKind.GetKeyword) {\r\n                    return true;\r\n                }\r\n\r\n                // If it *is* a keyword, but not an accessor, check a little farther along\r\n                // to see if it should actually be parsed as a class member.\r\n                switch (token) {\r\n                    case SyntaxKind.OpenParenToken:     // Method declaration\r\n                    case SyntaxKind.LessThanToken:      // Generic Method declaration\r\n                    case SyntaxKind.ColonToken:         // Type Annotation for declaration\r\n                    case SyntaxKind.EqualsToken:        // Initializer for declaration\r\n                    case SyntaxKind.QuestionToken:      // Not valid, but permitted so that it gets caught later on.\r\n                        return true;\r\n                    default:\r\n                        // Covers\r\n                        //  - Semicolons     (declaration termination)\r\n                        //  - Closing braces (end-of-class, must be declaration)\r\n                        //  - End-of-files   (not valid, but permitted so that it gets caught later on)\r\n                        //  - Line-breaks    (enabling *automatic semicolon insertion*)\r\n                        return canParseSemicolon();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function parseDecorators(): NodeArray<Decorator> {\r\n            let decorators: NodeArray<Decorator>;\r\n            while (true) {\r\n                let decoratorStart = getNodePos();\r\n                if (!parseOptional(SyntaxKind.AtToken)) {\r\n                    break;\r\n                }\r\n\r\n                if (!decorators) {\r\n                    decorators = <NodeArray<Decorator>>[];\r\n                    decorators.pos = scanner.getStartPos();\r\n                }\r\n\r\n                let decorator = <Decorator>createNode(SyntaxKind.Decorator, decoratorStart);\r\n                decorator.expression = doInDecoratorContext(parseLeftHandSideExpressionOrHigher);\r\n                decorators.push(finishNode(decorator));\r\n            }\r\n            if (decorators) {\r\n                decorators.end = getNodeEnd();\r\n            }\r\n            return decorators;\r\n        }\r\n\r\n        function parseModifiers(): ModifiersArray {\r\n            let flags = 0;\r\n            let modifiers: ModifiersArray;\r\n            while (true) {\r\n                let modifierStart = scanner.getStartPos();\r\n                let modifierKind = token;\r\n\r\n                if (!parseAnyContextualModifier()) {\r\n                    break;\r\n                }\r\n\r\n                if (!modifiers) {\r\n                    modifiers = <ModifiersArray>[];\r\n                    modifiers.pos = modifierStart;\r\n                }\r\n                flags |= modifierToFlag(modifierKind);\r\n                modifiers.push(finishNode(createNode(modifierKind, modifierStart)));\r\n            }\r\n            if (modifiers) {\r\n                modifiers.flags = flags;\r\n                modifiers.end = scanner.getStartPos();\r\n            }\r\n            return modifiers;\r\n        }\r\n\r\n        function parseClassElement(): ClassElement {\r\n            if (token === SyntaxKind.SemicolonToken) {\r\n                let result = <SemicolonClassElement>createNode(SyntaxKind.SemicolonClassElement);\r\n                nextToken();\r\n                return finishNode(result);\r\n            }\r\n\r\n            let fullStart = getNodePos();\r\n            let decorators = parseDecorators();\r\n            let modifiers = parseModifiers();\r\n\r\n            let accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);\r\n            if (accessor) {\r\n                return accessor;\r\n            }\r\n\r\n            if (token === SyntaxKind.ConstructorKeyword) {\r\n                return parseConstructorDeclaration(fullStart, decorators, modifiers);\r\n            }\r\n\r\n            if (isIndexSignature()) {\r\n                return parseIndexSignatureDeclaration(fullStart, decorators, modifiers);\r\n            }\r\n\r\n            // It is very important that we check this *after* checking indexers because\r\n            // the [ token can start an index signature or a computed property name\r\n            if (isIdentifierOrKeyword() ||\r\n                token === SyntaxKind.StringLiteral ||\r\n                token === SyntaxKind.NumericLiteral ||\r\n                token === SyntaxKind.AsteriskToken ||\r\n                token === SyntaxKind.OpenBracketToken) {\r\n\r\n                return parsePropertyOrMethodDeclaration(fullStart, decorators, modifiers);\r\n            }\r\n\r\n            if (decorators) {\r\n                // treat this as a property declaration with a missing name.\r\n                let name = <Identifier>createMissingNode(SyntaxKind.Identifier, /*reportAtCurrentPosition*/ true, Diagnostics.Declaration_expected);\r\n                return parsePropertyDeclaration(fullStart, decorators, modifiers, name, /*questionToken*/ undefined);\r\n            }\r\n\r\n            // 'isClassMemberStart' should have hinted not to attempt parsing.\r\n            Debug.fail(\"Should not have attempted to parse class member declaration.\");\r\n        }\r\n\r\n        function parseClassExpression(): ClassExpression {\r\n            return <ClassExpression>parseClassDeclarationOrExpression(\r\n                /*fullStart*/ scanner.getStartPos(),\r\n                /*decorators*/ undefined,\r\n                /*modifiers*/ undefined,\r\n                SyntaxKind.ClassExpression);\r\n        }\r\n\r\n        function parseClassDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ClassDeclaration {\r\n            return <ClassDeclaration>parseClassDeclarationOrExpression(fullStart, decorators, modifiers, SyntaxKind.ClassDeclaration);\r\n        }\r\n\r\n        function parseClassDeclarationOrExpression(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray, kind: SyntaxKind): ClassLikeDeclaration {\r\n            // In ES6 specification, All parts of a ClassDeclaration or a ClassExpression are strict mode code\r\n            let savedStrictModeContext = inStrictModeContext();\r\n            setStrictModeContext(true);\r\n\r\n            var node = <ClassLikeDeclaration>createNode(kind, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.ClassKeyword);\r\n            node.name = parseOptionalIdentifier();\r\n            node.typeParameters = parseTypeParameters();\r\n            node.heritageClauses = parseHeritageClauses(/*isClassHeritageClause*/ true);\r\n\r\n            if (parseExpected(SyntaxKind.OpenBraceToken)) {\r\n                // ClassTail[Yield,GeneratorParameter] : See 14.5\r\n                //      [~GeneratorParameter]ClassHeritage[?Yield]opt { ClassBody[?Yield]opt }\r\n                //      [+GeneratorParameter] ClassHeritageopt { ClassBodyopt }\r\n\r\n                node.members = inGeneratorParameterContext()\r\n                    ? doOutsideOfYieldContext(parseClassMembers)\r\n                    : parseClassMembers();\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n            }\r\n            else {\r\n                node.members = createMissingList<ClassElement>();\r\n            }\r\n\r\n            var finishedNode = finishNode(node);\r\n            setStrictModeContext(savedStrictModeContext);\r\n            return finishedNode;\r\n        }\r\n\r\n        function parseHeritageClauses(isClassHeritageClause: boolean): NodeArray<HeritageClause> {\r\n            // ClassTail[Yield,GeneratorParameter] : See 14.5\r\n            //      [~GeneratorParameter]ClassHeritage[?Yield]opt { ClassBody[?Yield]opt }\r\n            //      [+GeneratorParameter] ClassHeritageopt { ClassBodyopt }\r\n\r\n            if (isHeritageClause()) {\r\n                return isClassHeritageClause && inGeneratorParameterContext()\r\n                    ? doOutsideOfYieldContext(parseHeritageClausesWorker)\r\n                    : parseHeritageClausesWorker();\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function parseHeritageClausesWorker() {\r\n            return parseList(ParsingContext.HeritageClauses, /*checkForStrictMode*/ false, parseHeritageClause);\r\n        }\r\n\r\n        function parseHeritageClause() {\r\n            if (token === SyntaxKind.ExtendsKeyword || token === SyntaxKind.ImplementsKeyword) {\r\n                let node = <HeritageClause>createNode(SyntaxKind.HeritageClause);\r\n                node.token = token;\r\n                nextToken();\r\n                node.types = parseDelimitedList(ParsingContext.HeritageClauseElement, parseExpressionWithTypeArguments);\r\n                return finishNode(node);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function parseExpressionWithTypeArguments(): ExpressionWithTypeArguments {\r\n            let node = <ExpressionWithTypeArguments>createNode(SyntaxKind.ExpressionWithTypeArguments);\r\n            node.expression = parseLeftHandSideExpressionOrHigher();\r\n            if (token === SyntaxKind.LessThanToken) {\r\n                node.typeArguments = parseBracketedList(ParsingContext.TypeArguments, parseType, SyntaxKind.LessThanToken, SyntaxKind.GreaterThanToken);\r\n            }\r\n\r\n            return finishNode(node);\r\n        }\r\n\r\n        function isHeritageClause(): boolean {\r\n            return token === SyntaxKind.ExtendsKeyword || token === SyntaxKind.ImplementsKeyword;\r\n        }\r\n\r\n        function parseClassMembers() {\r\n            return parseList(ParsingContext.ClassMembers, /*checkForStrictMode*/ false, parseClassElement);\r\n        }\r\n\r\n        function parseInterfaceDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): InterfaceDeclaration {\r\n            let node = <InterfaceDeclaration>createNode(SyntaxKind.InterfaceDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.InterfaceKeyword);\r\n            node.name = parseIdentifier();\r\n            node.typeParameters = parseTypeParameters();\r\n            node.heritageClauses = parseHeritageClauses(/*isClassHeritageClause*/ false);\r\n            node.members = parseObjectTypeMembers();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseTypeAliasDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): TypeAliasDeclaration {\r\n            let node = <TypeAliasDeclaration>createNode(SyntaxKind.TypeAliasDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.TypeKeyword);\r\n            node.name = parseIdentifier();\r\n            node.typeParameters = parseTypeParameters();\r\n            parseExpected(SyntaxKind.EqualsToken);\r\n            node.type = parseType();\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        // In an ambient declaration, the grammar only allows integer literals as initializers.\r\n        // In a non-ambient declaration, the grammar allows uninitialized members only in a\r\n        // ConstantEnumMemberSection, which starts at the beginning of an enum declaration\r\n        // or any time an integer literal initializer is encountered.\r\n        function parseEnumMember(): EnumMember {\r\n            let node = <EnumMember>createNode(SyntaxKind.EnumMember, scanner.getStartPos());\r\n            node.name = parsePropertyName();\r\n            node.initializer = allowInAnd(parseNonParameterInitializer);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseEnumDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): EnumDeclaration {\r\n            let node = <EnumDeclaration>createNode(SyntaxKind.EnumDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            parseExpected(SyntaxKind.EnumKeyword);\r\n            node.name = parseIdentifier();\r\n            if (parseExpected(SyntaxKind.OpenBraceToken)) {\r\n                node.members = parseDelimitedList(ParsingContext.EnumMembers, parseEnumMember);\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n            }\r\n            else {\r\n                node.members = createMissingList<EnumMember>();\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseModuleBlock(): ModuleBlock {\r\n            let node = <ModuleBlock>createNode(SyntaxKind.ModuleBlock, scanner.getStartPos());\r\n            if (parseExpected(SyntaxKind.OpenBraceToken)) {\r\n                node.statements = parseList(ParsingContext.ModuleElements, /*checkForStrictMode*/ false, parseModuleElement);\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n            }\r\n            else {\r\n                node.statements = createMissingList<Statement>();\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseModuleOrNamespaceDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray, flags: NodeFlags): ModuleDeclaration {\r\n            let node = <ModuleDeclaration>createNode(SyntaxKind.ModuleDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            node.flags |= flags;\r\n            node.name = parseIdentifier();\r\n            node.body = parseOptional(SyntaxKind.DotToken)\r\n                ? parseModuleOrNamespaceDeclaration(getNodePos(), /*decorators*/ undefined, /*modifiers*/ undefined, NodeFlags.Export)\r\n                : parseModuleBlock();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseAmbientExternalModuleDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ModuleDeclaration {\r\n            let node = <ModuleDeclaration>createNode(SyntaxKind.ModuleDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            node.name = parseLiteralNode(/*internName*/ true);\r\n            node.body = parseModuleBlock();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseModuleDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ModuleDeclaration {\r\n            let flags = modifiers ? modifiers.flags : 0;\r\n            if (parseOptional(SyntaxKind.NamespaceKeyword)) {\r\n                flags |= NodeFlags.Namespace;\r\n            }\r\n            else {\r\n                parseExpected(SyntaxKind.ModuleKeyword);\r\n                if (token === SyntaxKind.StringLiteral) {\r\n                    return parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers);\r\n                }\r\n            }\r\n            return parseModuleOrNamespaceDeclaration(fullStart, decorators, modifiers, flags);\r\n        }\r\n\r\n        function isExternalModuleReference() {\r\n            return token === SyntaxKind.RequireKeyword &&\r\n                lookAhead(nextTokenIsOpenParen);\r\n        }\r\n\r\n        function nextTokenIsOpenParen() {\r\n            return nextToken() === SyntaxKind.OpenParenToken;\r\n        }\r\n\r\n        function nextTokenIsCommaOrFromKeyword() {\r\n            nextToken();\r\n            return token === SyntaxKind.CommaToken ||\r\n                token === SyntaxKind.FromKeyword;\r\n        }\r\n\r\n        function parseImportDeclarationOrImportEqualsDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ImportEqualsDeclaration | ImportDeclaration {\r\n            parseExpected(SyntaxKind.ImportKeyword);\r\n            let afterImportPos = scanner.getStartPos();\r\n\r\n            let identifier: Identifier;\r\n            if (isIdentifier()) {\r\n                identifier = parseIdentifier();\r\n                if (token !== SyntaxKind.CommaToken && token !== SyntaxKind.FromKeyword) {\r\n                    // ImportEquals declaration of type:\r\n                    // import x = require(\"mod\"); or\r\n                    // import x = M.x;\r\n                    let importEqualsDeclaration = <ImportEqualsDeclaration>createNode(SyntaxKind.ImportEqualsDeclaration, fullStart);\r\n                    importEqualsDeclaration.decorators = decorators;\r\n                    setModifiers(importEqualsDeclaration, modifiers);\r\n                    importEqualsDeclaration.name = identifier;\r\n                    parseExpected(SyntaxKind.EqualsToken);\r\n                    importEqualsDeclaration.moduleReference = parseModuleReference();\r\n                    parseSemicolon();\r\n                    return finishNode(importEqualsDeclaration);\r\n                }\r\n            }\r\n\r\n            // Import statement\r\n            let importDeclaration = <ImportDeclaration>createNode(SyntaxKind.ImportDeclaration, fullStart);\r\n            importDeclaration.decorators = decorators;\r\n            setModifiers(importDeclaration, modifiers);\r\n\r\n            // ImportDeclaration:\r\n            //  import ImportClause from ModuleSpecifier ;\r\n            //  import ModuleSpecifier;\r\n            if (identifier || // import id\r\n                token === SyntaxKind.AsteriskToken || // import *\r\n                token === SyntaxKind.OpenBraceToken) { // import {\r\n                importDeclaration.importClause = parseImportClause(identifier, afterImportPos);\r\n                parseExpected(SyntaxKind.FromKeyword);\r\n            }\r\n\r\n            importDeclaration.moduleSpecifier = parseModuleSpecifier();\r\n            parseSemicolon();\r\n            return finishNode(importDeclaration);\r\n        }\r\n\r\n        function parseImportClause(identifier: Identifier, fullStart: number) {\r\n            //ImportClause:\r\n            //  ImportedDefaultBinding\r\n            //  NameSpaceImport\r\n            //  NamedImports\r\n            //  ImportedDefaultBinding, NameSpaceImport\r\n            //  ImportedDefaultBinding, NamedImports\r\n\r\n            let importClause = <ImportClause>createNode(SyntaxKind.ImportClause, fullStart);\r\n            if (identifier) {\r\n                // ImportedDefaultBinding:\r\n                //  ImportedBinding\r\n                importClause.name = identifier;\r\n            }\r\n\r\n            // If there was no default import or if there is comma token after default import\r\n            // parse namespace or named imports\r\n            if (!importClause.name ||\r\n                parseOptional(SyntaxKind.CommaToken)) {\r\n                importClause.namedBindings = token === SyntaxKind.AsteriskToken ? parseNamespaceImport() : parseNamedImportsOrExports(SyntaxKind.NamedImports);\r\n            }\r\n\r\n            return finishNode(importClause);\r\n        }\r\n\r\n        function parseModuleReference() {\r\n            return isExternalModuleReference()\r\n                ? parseExternalModuleReference()\r\n                : parseEntityName(/*allowReservedWords*/ false);\r\n        }\r\n\r\n        function parseExternalModuleReference() {\r\n            let node = <ExternalModuleReference>createNode(SyntaxKind.ExternalModuleReference);\r\n            parseExpected(SyntaxKind.RequireKeyword);\r\n            parseExpected(SyntaxKind.OpenParenToken);\r\n            node.expression = parseModuleSpecifier();\r\n            parseExpected(SyntaxKind.CloseParenToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseModuleSpecifier(): Expression {\r\n            // We allow arbitrary expressions here, even though the grammar only allows string\r\n            // literals.  We check to ensure that it is only a string literal later in the grammar\r\n            // walker.\r\n            let result = parseExpression();\r\n            // Ensure the string being required is in our 'identifier' table.  This will ensure\r\n            // that features like 'find refs' will look inside this file when search for its name.\r\n            if (result.kind === SyntaxKind.StringLiteral) {\r\n                internIdentifier((<LiteralExpression>result).text);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function parseNamespaceImport(): NamespaceImport {\r\n            // NameSpaceImport:\r\n            //  * as ImportedBinding\r\n            let namespaceImport = <NamespaceImport>createNode(SyntaxKind.NamespaceImport);\r\n            parseExpected(SyntaxKind.AsteriskToken);\r\n            parseExpected(SyntaxKind.AsKeyword);\r\n            namespaceImport.name = parseIdentifier();\r\n            return finishNode(namespaceImport);\r\n        }\r\n\r\n        function parseNamedImportsOrExports(kind: SyntaxKind): NamedImportsOrExports {\r\n            let node = <NamedImports>createNode(kind);\r\n\r\n            // NamedImports:\r\n            //  { }\r\n            //  { ImportsList }\r\n            //  { ImportsList, }\r\n\r\n            // ImportsList:\r\n            //  ImportSpecifier\r\n            //  ImportsList, ImportSpecifier\r\n            node.elements = parseBracketedList(ParsingContext.ImportOrExportSpecifiers,\r\n                kind === SyntaxKind.NamedImports ? parseImportSpecifier : parseExportSpecifier,\r\n                SyntaxKind.OpenBraceToken, SyntaxKind.CloseBraceToken);\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseExportSpecifier() {\r\n            return parseImportOrExportSpecifier(SyntaxKind.ExportSpecifier);\r\n        }\r\n\r\n        function parseImportSpecifier() {\r\n            return parseImportOrExportSpecifier(SyntaxKind.ImportSpecifier);\r\n        }\r\n\r\n        function parseImportOrExportSpecifier(kind: SyntaxKind): ImportOrExportSpecifier {\r\n            let node = <ImportSpecifier>createNode(kind);\r\n            // ImportSpecifier:\r\n            //   BindingIdentifier\r\n            //   IdentifierName as BindingIdentifier\r\n            // ExportSpecififer:\r\n            //   IdentifierName\r\n            //   IdentifierName as IdentifierName\r\n            let checkIdentifierIsKeyword = isKeyword(token) && !isIdentifier();\r\n            let checkIdentifierStart = scanner.getTokenPos();\r\n            let checkIdentifierEnd = scanner.getTextPos();\r\n            let identifierName = parseIdentifierName();\r\n            if (token === SyntaxKind.AsKeyword) {\r\n                node.propertyName = identifierName;\r\n                parseExpected(SyntaxKind.AsKeyword);\r\n                checkIdentifierIsKeyword = isKeyword(token) && !isIdentifier();\r\n                checkIdentifierStart = scanner.getTokenPos();\r\n                checkIdentifierEnd = scanner.getTextPos();\r\n                node.name = parseIdentifierName();\r\n            }\r\n            else {\r\n                node.name = identifierName;\r\n            }\r\n            if (kind === SyntaxKind.ImportSpecifier && checkIdentifierIsKeyword) {\r\n                // Report error identifier expected\r\n                parseErrorAtPosition(checkIdentifierStart, checkIdentifierEnd - checkIdentifierStart, Diagnostics.Identifier_expected);\r\n            }\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseExportDeclaration(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ExportDeclaration {\r\n            let node = <ExportDeclaration>createNode(SyntaxKind.ExportDeclaration, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            if (parseOptional(SyntaxKind.AsteriskToken)) {\r\n                parseExpected(SyntaxKind.FromKeyword);\r\n                node.moduleSpecifier = parseModuleSpecifier();\r\n            }\r\n            else {\r\n                node.exportClause = parseNamedImportsOrExports(SyntaxKind.NamedExports);\r\n                if (parseOptional(SyntaxKind.FromKeyword)) {\r\n                    node.moduleSpecifier = parseModuleSpecifier();\r\n                }\r\n            }\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function parseExportAssignment(fullStart: number, decorators: NodeArray<Decorator>, modifiers: ModifiersArray): ExportAssignment {\r\n            let node = <ExportAssignment>createNode(SyntaxKind.ExportAssignment, fullStart);\r\n            node.decorators = decorators;\r\n            setModifiers(node, modifiers);\r\n            if (parseOptional(SyntaxKind.EqualsToken)) {\r\n                node.isExportEquals = true;\r\n            }\r\n            else {\r\n                parseExpected(SyntaxKind.DefaultKeyword);\r\n            }\r\n            node.expression = parseAssignmentExpressionOrHigher();\r\n            parseSemicolon();\r\n            return finishNode(node);\r\n        }\r\n\r\n        function processReferenceComments(sourceFile: SourceFile): void {\r\n            let triviaScanner = createScanner(sourceFile.languageVersion, /*skipTrivia*/false, sourceText);\r\n            let referencedFiles: FileReference[] = [];\r\n            let amdDependencies: { path: string; name: string }[] = [];\r\n            let amdModuleName: string;\r\n\r\n            // Keep scanning all the leading trivia in the file until we get to something that\r\n            // isn't trivia.  Any single line comment will be analyzed to see if it is a\r\n            // reference comment.\r\n            while (true) {\r\n                let kind = triviaScanner.scan();\r\n                if (kind === SyntaxKind.WhitespaceTrivia || kind === SyntaxKind.NewLineTrivia || kind === SyntaxKind.MultiLineCommentTrivia) {\r\n                    continue;\r\n                }\r\n                if (kind !== SyntaxKind.SingleLineCommentTrivia) {\r\n                    break;\r\n                }\r\n\r\n                let range = { pos: triviaScanner.getTokenPos(), end: triviaScanner.getTextPos(), kind: triviaScanner.getToken() };\r\n\r\n                let comment = sourceText.substring(range.pos, range.end);\r\n                let referencePathMatchResult = getFileReferenceFromReferencePath(comment, range);\r\n                if (referencePathMatchResult) {\r\n                    let fileReference = referencePathMatchResult.fileReference;\r\n                    sourceFile.hasNoDefaultLib = referencePathMatchResult.isNoDefaultLib;\r\n                    let diagnosticMessage = referencePathMatchResult.diagnosticMessage;\r\n                    if (fileReference) {\r\n                        referencedFiles.push(fileReference);\r\n                    }\r\n                    if (diagnosticMessage) {\r\n                        parseDiagnostics.push(createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, diagnosticMessage));\r\n                    }\r\n                }\r\n                else {\r\n                    let amdModuleNameRegEx = /^\\/\\/\\/\\s*<amd-module\\s+name\\s*=\\s*('|\")(.+?)\\1/gim;\r\n                    let amdModuleNameMatchResult = amdModuleNameRegEx.exec(comment);\r\n                    if (amdModuleNameMatchResult) {\r\n                        if (amdModuleName) {\r\n                            parseDiagnostics.push(createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, Diagnostics.An_AMD_module_cannot_have_multiple_name_assignments));\r\n                        }\r\n                        amdModuleName = amdModuleNameMatchResult[2];\r\n                    }\r\n\r\n                    let amdDependencyRegEx = /^\\/\\/\\/\\s*<amd-dependency\\s/gim;\r\n                    let pathRegex = /\\spath\\s*=\\s*('|\")(.+?)\\1/gim;\r\n                    let nameRegex = /\\sname\\s*=\\s*('|\")(.+?)\\1/gim;\r\n                    let amdDependencyMatchResult = amdDependencyRegEx.exec(comment);\r\n                    if (amdDependencyMatchResult) {\r\n                        let pathMatchResult = pathRegex.exec(comment);\r\n                        let nameMatchResult = nameRegex.exec(comment);\r\n                        if (pathMatchResult) {\r\n                            let amdDependency = { path: pathMatchResult[2], name: nameMatchResult ? nameMatchResult[2] : undefined };\r\n                            amdDependencies.push(amdDependency);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            sourceFile.referencedFiles = referencedFiles;\r\n            sourceFile.amdDependencies = amdDependencies;\r\n            sourceFile.moduleName = amdModuleName;\r\n        }\r\n\r\n        function setExternalModuleIndicator(sourceFile: SourceFile) {\r\n            sourceFile.externalModuleIndicator = forEach(sourceFile.statements, node =>\r\n                node.flags & NodeFlags.Export\r\n                    || node.kind === SyntaxKind.ImportEqualsDeclaration && (<ImportEqualsDeclaration>node).moduleReference.kind === SyntaxKind.ExternalModuleReference\r\n                    || node.kind === SyntaxKind.ImportDeclaration\r\n                    || node.kind === SyntaxKind.ExportAssignment\r\n                    || node.kind === SyntaxKind.ExportDeclaration\r\n                    ? node\r\n                    : undefined);\r\n        }\r\n\r\n        const enum ParsingContext {\r\n            SourceElements,            // Elements in source file\r\n            ModuleElements,            // Elements in module declaration\r\n            BlockStatements,           // Statements in block\r\n            SwitchClauses,             // Clauses in switch statement\r\n            SwitchClauseStatements,    // Statements in switch clause\r\n            TypeMembers,               // Members in interface or type literal\r\n            ClassMembers,              // Members in class declaration\r\n            EnumMembers,               // Members in enum declaration\r\n            HeritageClauseElement,     // Elements in a heritage clause\r\n            VariableDeclarations,      // Variable declarations in variable statement\r\n            ObjectBindingElements,     // Binding elements in object binding list\r\n            ArrayBindingElements,      // Binding elements in array binding list\r\n            ArgumentExpressions,       // Expressions in argument list\r\n            ObjectLiteralMembers,      // Members in object literal\r\n            ArrayLiteralMembers,       // Members in array literal\r\n            Parameters,                // Parameters in parameter list\r\n            TypeParameters,            // Type parameters in type parameter list\r\n            TypeArguments,             // Type arguments in type argument list\r\n            TupleElementTypes,         // Element types in tuple element type list\r\n            HeritageClauses,           // Heritage clauses for a class or interface declaration.\r\n            ImportOrExportSpecifiers,  // Named import clause's import specifier list\r\n            JSDocFunctionParameters,\r\n            JSDocTypeArguments,\r\n            JSDocRecordMembers,\r\n            JSDocTupleTypes,\r\n            Count                      // Number of parsing contexts\r\n        }\r\n\r\n        const enum Tristate {\r\n            False,\r\n            True,\r\n            Unknown\r\n        }\r\n\r\n        export module JSDocParser {\r\n            export function isJSDocType() {\r\n                switch (token) {\r\n                    case SyntaxKind.AsteriskToken:\r\n                    case SyntaxKind.QuestionToken:\r\n                    case SyntaxKind.OpenParenToken:\r\n                    case SyntaxKind.OpenBracketToken:\r\n                    case SyntaxKind.ExclamationToken:\r\n                    case SyntaxKind.OpenBraceToken:\r\n                    case SyntaxKind.FunctionKeyword:\r\n                    case SyntaxKind.DotDotDotToken:\r\n                    case SyntaxKind.NewKeyword:\r\n                    case SyntaxKind.ThisKeyword:\r\n                        return true;\r\n                }\r\n\r\n                return isIdentifierOrKeyword();\r\n            }\r\n\r\n            export function parseJSDocTypeExpressionForTests(content: string, start: number, length: number) {\r\n                initializeState(\"file.js\", content, ScriptTarget.Latest, /*_syntaxCursor:*/ undefined);\r\n                let jsDocTypeExpression = parseJSDocTypeExpression(start, length);\r\n                let diagnostics = parseDiagnostics;\r\n                clearState();\r\n\r\n                return jsDocTypeExpression ? { jsDocTypeExpression, diagnostics } : undefined;\r\n            }\r\n\r\n            // Parses out a JSDoc type expression.  The starting position should be right at the open\r\n            // curly in the type expression.  Returns 'undefined' if it encounters any errors while parsing.\r\n            /* @internal */\r\n            export function parseJSDocTypeExpression(start: number, length: number): JSDocTypeExpression {\r\n                scanner.setText(sourceText, start, length);\r\n        \r\n                // Prime the first token for us to start processing.\r\n                token = nextToken();\r\n\r\n                let result = <JSDocTypeExpression>createNode(SyntaxKind.JSDocTypeExpression);\r\n\r\n                parseExpected(SyntaxKind.OpenBraceToken);\r\n                result.type = parseJSDocTopLevelType();\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n\r\n                fixupParentReferences(result);\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocTopLevelType(): JSDocType {\r\n                var type = parseJSDocType();\r\n                if (token === SyntaxKind.BarToken) {\r\n                    var unionType = <JSDocUnionType>createNode(SyntaxKind.JSDocUnionType, type.pos);\r\n                    unionType.types = parseJSDocTypeList(type);\r\n                    type = finishNode(unionType);\r\n                }\r\n\r\n                if (token === SyntaxKind.EqualsToken) {\r\n                    var optionalType = <JSDocOptionalType>createNode(SyntaxKind.JSDocOptionalType, type.pos);\r\n                    nextToken();\r\n                    optionalType.type = type;\r\n                    type = finishNode(optionalType);\r\n                }\r\n\r\n                return type;\r\n            }\r\n\r\n            function parseJSDocType(): JSDocType {\r\n                let type = parseBasicTypeExpression();\r\n\r\n                while (true) {\r\n                    if (token === SyntaxKind.OpenBracketToken) {\r\n                        let arrayType = <JSDocArrayType>createNode(SyntaxKind.JSDocArrayType, type.pos);\r\n                        arrayType.elementType = type;\r\n\r\n                        nextToken();\r\n                        parseExpected(SyntaxKind.CloseBracketToken);\r\n\r\n                        type = finishNode(arrayType);\r\n                    }\r\n                    else if (token === SyntaxKind.QuestionToken) {\r\n                        let nullableType = <JSDocNullableType>createNode(SyntaxKind.JSDocNullableType, type.pos);\r\n                        nullableType.type = type;\r\n\r\n                        nextToken();\r\n                        type = finishNode(nullableType);\r\n                    }\r\n                    else if (token === SyntaxKind.ExclamationToken) {\r\n                        let nonNullableType = <JSDocNonNullableType>createNode(SyntaxKind.JSDocNonNullableType, type.pos);\r\n                        nonNullableType.type = type;\r\n\r\n                        nextToken();\r\n                        type = finishNode(nonNullableType);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                return type;\r\n            }\r\n\r\n            function parseBasicTypeExpression(): JSDocType {\r\n                switch (token) {\r\n                    case SyntaxKind.AsteriskToken:\r\n                        return parseJSDocAllType();\r\n                    case SyntaxKind.QuestionToken:\r\n                        return parseJSDocUnknownOrNullableType();\r\n                    case SyntaxKind.OpenParenToken:\r\n                        return parseJSDocUnionType();\r\n                    case SyntaxKind.OpenBracketToken:\r\n                        return parseJSDocTupleType();\r\n                    case SyntaxKind.ExclamationToken:\r\n                        return parseJSDocNonNullableType();\r\n                    case SyntaxKind.OpenBraceToken:\r\n                        return parseJSDocRecordType();\r\n                    case SyntaxKind.FunctionKeyword:\r\n                        return parseJSDocFunctionType();\r\n                    case SyntaxKind.DotDotDotToken:\r\n                        return parseJSDocVariadicType();\r\n                    case SyntaxKind.NewKeyword:\r\n                        return parseJSDocConstructorType();\r\n                    case SyntaxKind.ThisKeyword:\r\n                        return parseJSDocThisType();\r\n                    case SyntaxKind.AnyKeyword:\r\n                    case SyntaxKind.StringKeyword:\r\n                    case SyntaxKind.NumberKeyword:\r\n                    case SyntaxKind.BooleanKeyword:\r\n                    case SyntaxKind.SymbolKeyword:\r\n                    case SyntaxKind.VoidKeyword:\r\n                        return parseTokenNode<JSDocType>();\r\n                }\r\n\r\n                return parseJSDocTypeReference();\r\n            }\r\n\r\n            function parseJSDocThisType(): JSDocThisType {\r\n                let result = <JSDocThisType>createNode(SyntaxKind.JSDocThisType);\r\n                nextToken();\r\n                parseExpected(SyntaxKind.ColonToken);\r\n                result.type = parseJSDocType();\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocConstructorType(): JSDocConstructorType {\r\n                let result = <JSDocConstructorType>createNode(SyntaxKind.JSDocConstructorType);\r\n                nextToken();\r\n                parseExpected(SyntaxKind.ColonToken);\r\n                result.type = parseJSDocType();\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocVariadicType(): JSDocVariadicType {\r\n                let result = <JSDocVariadicType>createNode(SyntaxKind.JSDocVariadicType);\r\n                nextToken();\r\n                result.type = parseJSDocType();\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocFunctionType(): JSDocFunctionType {\r\n                let result = <JSDocFunctionType>createNode(SyntaxKind.JSDocFunctionType);\r\n                nextToken();\r\n\r\n                parseExpected(SyntaxKind.OpenParenToken);\r\n                result.parameters = parseDelimitedList(ParsingContext.JSDocFunctionParameters, parseJSDocParameter);\r\n                checkForTrailingComma(result.parameters);\r\n                parseExpected(SyntaxKind.CloseParenToken);\r\n\r\n                if (token === SyntaxKind.ColonToken) {\r\n                    nextToken();\r\n                    result.type = parseJSDocType();\r\n                }\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocParameter(): ParameterDeclaration {\r\n                let parameter = <ParameterDeclaration>createNode(SyntaxKind.Parameter);\r\n                parameter.type = parseJSDocType();\r\n                return finishNode(parameter);\r\n            }\r\n\r\n            function parseJSDocOptionalType(type: JSDocType): JSDocOptionalType {\r\n                let result = <JSDocOptionalType>createNode(SyntaxKind.JSDocOptionalType, type.pos);\r\n                nextToken();\r\n                result.type = type;\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocTypeReference(): JSDocTypeReference {\r\n                let result = <JSDocTypeReference>createNode(SyntaxKind.JSDocTypeReference);\r\n                result.name = parseSimplePropertyName();\r\n\r\n                while (parseOptional(SyntaxKind.DotToken)) {\r\n                    if (token === SyntaxKind.LessThanToken) {\r\n                        result.typeArguments = parseTypeArguments();\r\n                        break;\r\n                    }\r\n                    else {\r\n                        result.name = parseQualifiedName(result.name);\r\n                    }\r\n                }\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseTypeArguments() {\r\n                // Move past the <\r\n                nextToken();\r\n                let typeArguments = parseDelimitedList(ParsingContext.JSDocTypeArguments, parseJSDocType);\r\n                checkForTrailingComma(typeArguments);\r\n                checkForEmptyTypeArgumentList(typeArguments);\r\n                parseExpected(SyntaxKind.GreaterThanToken);\r\n\r\n                return typeArguments;\r\n            }\r\n\r\n            function checkForEmptyTypeArgumentList(typeArguments: NodeArray<Node>) {\r\n                if (parseDiagnostics.length === 0 &&  typeArguments && typeArguments.length === 0) {\r\n                    let start = typeArguments.pos - \"<\".length;\r\n                    let end = skipTrivia(sourceText, typeArguments.end) + \">\".length;\r\n                    return parseErrorAtPosition(start, end - start, Diagnostics.Type_argument_list_cannot_be_empty);\r\n                }\r\n            }\r\n\r\n            function parseQualifiedName(left: EntityName): QualifiedName {\r\n                let result = <QualifiedName>createNode(SyntaxKind.QualifiedName, left.pos);\r\n                result.left = left;\r\n                result.right = parseIdentifierName();\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocRecordType(): JSDocRecordType {\r\n                let result = <JSDocRecordType>createNode(SyntaxKind.JSDocRecordType);\r\n                nextToken();\r\n                result.members = parseDelimitedList(ParsingContext.JSDocRecordMembers, parseJSDocRecordMember);\r\n                checkForTrailingComma(result.members);\r\n                parseExpected(SyntaxKind.CloseBraceToken);\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocRecordMember(): JSDocRecordMember {\r\n                let result = <JSDocRecordMember>createNode(SyntaxKind.JSDocRecordMember);\r\n                result.name = parseSimplePropertyName();\r\n\r\n                if (token === SyntaxKind.ColonToken) {\r\n                    nextToken();\r\n                    result.type = parseJSDocType();\r\n                }\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocNonNullableType(): JSDocNonNullableType {\r\n                let result = <JSDocNonNullableType>createNode(SyntaxKind.JSDocNonNullableType);\r\n                nextToken();\r\n                result.type = parseJSDocType();\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocTupleType(): JSDocTupleType {\r\n                let result = <JSDocTupleType>createNode(SyntaxKind.JSDocTupleType);\r\n                nextToken();\r\n                result.types = parseDelimitedList(ParsingContext.JSDocTupleTypes, parseJSDocType);\r\n                checkForTrailingComma(result.types);\r\n                parseExpected(SyntaxKind.CloseBracketToken);\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function checkForTrailingComma(list: NodeArray<Node>) {\r\n                if (parseDiagnostics.length === 0 && list.hasTrailingComma) {\r\n                    let start = list.end - \",\".length;\r\n                    parseErrorAtPosition(start, \",\".length, Diagnostics.Trailing_comma_not_allowed);\r\n                }\r\n            }\r\n\r\n            function parseJSDocUnionType(): JSDocUnionType {\r\n                let result = <JSDocUnionType>createNode(SyntaxKind.JSDocUnionType);\r\n                nextToken();\r\n                result.types = parseJSDocTypeList(parseJSDocType());\r\n\r\n                parseExpected(SyntaxKind.CloseParenToken);\r\n\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocTypeList(firstType: JSDocType) {\r\n                Debug.assert(!!firstType);\r\n\r\n                let types = <NodeArray<JSDocType>>[];\r\n                types.pos = firstType.pos;\r\n\r\n                types.push(firstType);\r\n                while (parseOptional(SyntaxKind.BarToken)) {\r\n                    types.push(parseJSDocType());\r\n                }\r\n\r\n                types.end = scanner.getStartPos();\r\n                return types;\r\n            }\r\n\r\n            function parseJSDocAllType(): JSDocAllType {\r\n                let result = <JSDocAllType>createNode(SyntaxKind.JSDocAllType);\r\n                nextToken();\r\n                return finishNode(result);\r\n            }\r\n\r\n            function parseJSDocUnknownOrNullableType(): JSDocUnknownType | JSDocNullableType {\r\n                let pos = scanner.getStartPos();\r\n                // skip the ?\r\n                nextToken();\r\n\r\n                // Need to lookahead to decide if this is a nullable or unknown type.\r\n\r\n                // Here are cases where we'll pick the unknown type:\r\n                //\r\n                //      Foo(?,\r\n                //      { a: ? }\r\n                //      Foo(?)\r\n                //      Foo<?>\r\n                //      Foo(?=\r\n                //      (?|\r\n                if (token === SyntaxKind.CommaToken ||\r\n                    token === SyntaxKind.CloseBraceToken ||\r\n                    token === SyntaxKind.CloseParenToken ||\r\n                    token === SyntaxKind.GreaterThanToken ||\r\n                    token === SyntaxKind.EqualsToken ||\r\n                    token === SyntaxKind.BarToken) {\r\n\r\n                    let result = <JSDocUnknownType>createNode(SyntaxKind.JSDocUnknownType, pos);\r\n                    return finishNode(result);\r\n                }\r\n                else {\r\n                    let result = <JSDocNullableType>createNode(SyntaxKind.JSDocNullableType, pos);\r\n                    result.type = parseJSDocType();\r\n                    return finishNode(result);\r\n                }\r\n            }\r\n\r\n            export function parseIsolatedJSDocComment(content: string, start: number, length: number) {\r\n                initializeState(\"file.js\", content, ScriptTarget.Latest, /*_syntaxCursor:*/ undefined);\r\n                let jsDocComment = parseJSDocComment(/*parent:*/ undefined, start, length);\r\n                let diagnostics = parseDiagnostics;\r\n                clearState();\r\n\r\n                return jsDocComment ? { jsDocComment, diagnostics } : undefined;\r\n            }\r\n\r\n            export function parseJSDocComment(parent: Node, start: number, length: number): JSDocComment {\r\n                let comment = parseJSDocCommentWorker(start, length);\r\n                if (comment) {\r\n                    fixupParentReferences(comment);\r\n                    comment.parent = parent;\r\n                }\r\n\r\n                return comment;\r\n            }\r\n\r\n            export function parseJSDocCommentWorker(start: number, length: number): JSDocComment {\r\n                let content = sourceText;\r\n                start = start || 0;\r\n                let end = length === undefined ? content.length : start + length;\r\n                length = end - start;\r\n\r\n                Debug.assert(start >= 0);\r\n                Debug.assert(start <= end);\r\n                Debug.assert(end <= content.length);\r\n\r\n                let tags: NodeArray<JSDocTag>;\r\n                let pos: number;\r\n                \r\n                // NOTE(cyrusn): This is essentially a handwritten scanner for JSDocComments. I \r\n                // considered using an actual Scanner, but this would complicate things.  The \r\n                // scanner would need to know it was in a Doc Comment.  Otherwise, it would then\r\n                // produce comments *inside* the doc comment.  In the end it was just easier to\r\n                // write a simple scanner rather than go that route.\r\n                if (length >= \"/** */\".length) {\r\n                    if (content.charCodeAt(start) === CharacterCodes.slash &&\r\n                        content.charCodeAt(start + 1) === CharacterCodes.asterisk &&\r\n                        content.charCodeAt(start + 2) === CharacterCodes.asterisk &&\r\n                        content.charCodeAt(start + 3) !== CharacterCodes.asterisk) {\r\n\r\n                        // Initially we can parse out a tag.  We also have seen a starting asterisk.\r\n                        // This is so that /** * @type */ doesn't parse.\r\n                        let canParseTag = true;\r\n                        let seenAsterisk = true;\r\n\r\n                        for (pos = start + \"/**\".length; pos < end;) {\r\n                            let ch = content.charCodeAt(pos);\r\n                            pos++;\r\n\r\n                            if (ch === CharacterCodes.at && canParseTag) {\r\n                                parseTag();\r\n                        \r\n                                // Once we parse out a tag, we cannot keep parsing out tags on this line.\r\n                                canParseTag = false;\r\n                                continue;\r\n                            }\r\n\r\n                            if (isLineBreak(ch)) {\r\n                                // After a line break, we can parse a tag, and we haven't seen as asterisk\r\n                                // on the next line yet.\r\n                                canParseTag = true;\r\n                                seenAsterisk = false;\r\n                                continue;\r\n                            }\r\n\r\n                            if (isWhiteSpace(ch)) {\r\n                                // Whitespace doesn't affect any of our parsing.\r\n                                continue;\r\n                            }\r\n\r\n                            // Ignore the first asterisk on a line.\r\n                            if (ch === CharacterCodes.asterisk) {\r\n                                if (seenAsterisk) {\r\n                                    // If we've already seen an asterisk, then we can no longer parse a tag\r\n                                    // on this line.\r\n                                    canParseTag = false;\r\n                                }\r\n                                seenAsterisk = true;\r\n                                continue;\r\n                            }\r\n\r\n                            // Anything else is doc comment text.  We can't do anything with it.  Because it\r\n                            // wasn't a tag, we can no longer parse a tag on this line until we hit the next\r\n                            // line break.\r\n                            canParseTag = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return createJSDocComment();\r\n\r\n                function createJSDocComment(): JSDocComment {\r\n                    if (!tags) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let result = <JSDocComment>createNode(SyntaxKind.JSDocComment, start);\r\n                    result.tags = tags;\r\n                    return finishNode(result, end);\r\n                }\r\n\r\n                function skipWhitespace(): void {\r\n                    while (pos < end && isWhiteSpace(content.charCodeAt(pos))) {\r\n                        pos++;\r\n                    }\r\n                }\r\n\r\n                function parseTag(): void {\r\n                    Debug.assert(content.charCodeAt(pos - 1) === CharacterCodes.at);\r\n                    let atToken = createNode(SyntaxKind.AtToken, pos - 1);\r\n                    atToken.end = pos;\r\n\r\n                    let startPos = pos;\r\n                    let tagName = scanIdentifier();\r\n                    if (!tagName) {\r\n                        return;\r\n                    }\r\n\r\n                    let tag = handleTag(atToken, tagName) || handleUnknownTag(atToken, tagName);\r\n                    addTag(tag);\r\n                }\r\n\r\n                function handleTag(atToken: Node, tagName: Identifier): JSDocTag {\r\n                    if (tagName) {\r\n                        switch (tagName.text) {\r\n                            case \"param\":\r\n                                return handleParamTag(atToken, tagName);\r\n                            case \"return\":\r\n                            case \"returns\":\r\n                                return handleReturnTag(atToken, tagName);\r\n                            case \"template\":\r\n                                return handleTemplateTag(atToken, tagName);\r\n                            case \"type\":\r\n                                return handleTypeTag(atToken, tagName);\r\n                        }\r\n                    }\r\n\r\n                    return undefined;\r\n                }\r\n\r\n                function handleUnknownTag(atToken: Node, tagName: Identifier) {\r\n                    let result = <JSDocTag>createNode(SyntaxKind.JSDocTag, atToken.pos);\r\n                    result.atToken = atToken;\r\n                    result.tagName = tagName;\r\n                    return finishNode(result, pos);\r\n                }\r\n\r\n                function addTag(tag: JSDocTag): void {\r\n                    if (tag) {\r\n                        if (!tags) {\r\n                            tags = <NodeArray<JSDocTag>>[];\r\n                            tags.pos = tag.pos;\r\n                        }\r\n\r\n                        tags.push(tag);\r\n                        tags.end = tag.end;\r\n                    }\r\n                }\r\n\r\n                function tryParseTypeExpression(): JSDocTypeExpression {\r\n                    skipWhitespace();\r\n\r\n                    if (content.charCodeAt(pos) !== CharacterCodes.openBrace) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let typeExpression = parseJSDocTypeExpression(pos, end - pos);\r\n                    pos = typeExpression.end;\r\n                    return typeExpression;\r\n                }\r\n\r\n                function handleParamTag(atToken: Node, tagName: Identifier) {\r\n                    let typeExpression = tryParseTypeExpression();\r\n\r\n                    skipWhitespace();\r\n                    let name: Identifier;\r\n                    let isBracketed: boolean;\r\n                    if (content.charCodeAt(pos) === CharacterCodes.openBracket) {\r\n                        pos++;\r\n                        skipWhitespace();\r\n                        name = scanIdentifier();\r\n                        isBracketed = true;\r\n                    }\r\n                    else {\r\n                        name = scanIdentifier();\r\n                    }\r\n\r\n                    if (!name) {\r\n                        parseErrorAtPosition(pos, 0, Diagnostics.Identifier_expected);\r\n                        return undefined;\r\n                    }\r\n\r\n                    let preName: Identifier, postName: Identifier;\r\n                    if (typeExpression) {\r\n                        postName = name;\r\n                    }\r\n                    else {\r\n                        preName = name;\r\n                    }\r\n\r\n                    if (!typeExpression) {\r\n                        typeExpression = tryParseTypeExpression();\r\n                    }\r\n\r\n                    let result = <JSDocParameterTag>createNode(SyntaxKind.JSDocParameterTag, atToken.pos);\r\n                    result.atToken = atToken;\r\n                    result.tagName = tagName;\r\n                    result.preParameterName = preName;\r\n                    result.typeExpression = typeExpression;\r\n                    result.postParameterName = postName;\r\n                    result.isBracketed = isBracketed;\r\n                    return finishNode(result, pos);\r\n                }\r\n\r\n                function handleReturnTag(atToken: Node, tagName: Identifier): JSDocReturnTag {\r\n                    if (forEach(tags, t => t.kind === SyntaxKind.JSDocReturnTag)) {\r\n                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, Diagnostics._0_tag_already_specified, tagName.text);\r\n                    }\r\n\r\n                    let result = <JSDocReturnTag>createNode(SyntaxKind.JSDocReturnTag, atToken.pos);\r\n                    result.atToken = atToken;\r\n                    result.tagName = tagName;\r\n                    result.typeExpression = tryParseTypeExpression();\r\n                    return finishNode(result, pos);\r\n                }\r\n\r\n                function handleTypeTag(atToken: Node, tagName: Identifier): JSDocTypeTag {\r\n                    if (forEach(tags, t => t.kind === SyntaxKind.JSDocTypeTag)) {\r\n                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, Diagnostics._0_tag_already_specified, tagName.text);\r\n                    }\r\n\r\n                    let result = <JSDocTypeTag>createNode(SyntaxKind.JSDocTypeTag, atToken.pos);\r\n                    result.atToken = atToken;\r\n                    result.tagName = tagName;\r\n                    result.typeExpression = tryParseTypeExpression();\r\n                    return finishNode(result, pos);\r\n                }\r\n\r\n                function handleTemplateTag(atToken: Node, tagName: Identifier): JSDocTemplateTag {\r\n                    if (forEach(tags, t => t.kind === SyntaxKind.JSDocTemplateTag)) {\r\n                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, Diagnostics._0_tag_already_specified, tagName.text);\r\n                    }\r\n\r\n                    let typeParameters = <NodeArray<TypeParameterDeclaration>>[];\r\n                    typeParameters.pos = pos;\r\n\r\n                    while (true) {\r\n                        skipWhitespace();\r\n\r\n                        let startPos = pos;\r\n                        let name = scanIdentifier();\r\n                        if (!name) {\r\n                            parseErrorAtPosition(startPos, 0, Diagnostics.Identifier_expected);\r\n                            return undefined;\r\n                        }\r\n\r\n                        let typeParameter = <TypeParameterDeclaration>createNode(SyntaxKind.TypeParameter, name.pos);\r\n                        typeParameter.name = name;\r\n                        finishNode(typeParameter, pos);\r\n\r\n                        typeParameters.push(typeParameter);\r\n\r\n                        skipWhitespace();\r\n                        if (content.charCodeAt(pos) !== CharacterCodes.comma) {\r\n                            break;\r\n                        }\r\n\r\n                        pos++;\r\n                    }\r\n\r\n                    typeParameters.end = pos;\r\n\r\n                    let result = <JSDocTemplateTag>createNode(SyntaxKind.JSDocTemplateTag, atToken.pos);\r\n                    result.atToken = atToken;\r\n                    result.tagName = tagName;\r\n                    result.typeParameters = typeParameters;\r\n                    return finishNode(result, pos);\r\n                }\r\n\r\n                function scanIdentifier(): Identifier {\r\n                    let startPos = pos;\r\n                    for (; pos < end; pos++) {\r\n                        let ch = content.charCodeAt(pos);\r\n                        if (pos === startPos && isIdentifierStart(ch, ScriptTarget.Latest)) {\r\n                            continue;\r\n                        }\r\n                        else if (pos > startPos && isIdentifierPart(ch, ScriptTarget.Latest)) {\r\n                            continue;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    if (startPos === pos) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let result = <Identifier>createNode(SyntaxKind.Identifier, startPos);\r\n                    result.text = content.substring(startPos, pos);\r\n                    return finishNode(result, pos);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    module IncrementalParser {\r\n        export function updateSourceFile(sourceFile: SourceFile, newText: string, textChangeRange: TextChangeRange, aggressiveChecks: boolean): SourceFile {\r\n            aggressiveChecks = aggressiveChecks || Debug.shouldAssert(AssertionLevel.Aggressive);\r\n\r\n            checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks);\r\n            if (textChangeRangeIsUnchanged(textChangeRange)) {\r\n                // if the text didn't change, then we can just return our current source file as-is.\r\n                return sourceFile;\r\n            }\r\n\r\n            if (sourceFile.statements.length === 0) {\r\n                // If we don't have any statements in the current source file, then there's no real\r\n                // way to incrementally parse.  So just do a full parse instead.\r\n                return Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion, /*syntaxCursor*/ undefined, /*setNodeParents*/ true)\r\n            }\r\n\r\n            // Make sure we're not trying to incrementally update a source file more than once.  Once\r\n            // we do an update the original source file is considered unusbale from that point onwards.\r\n            //\r\n            // This is because we do incremental parsing in-place.  i.e. we take nodes from the old\r\n            // tree and give them new positions and parents.  From that point on, trusting the old\r\n            // tree at all is not possible as far too much of it may violate invariants.\r\n            let incrementalSourceFile = <IncrementalNode><Node>sourceFile;\r\n            Debug.assert(!incrementalSourceFile.hasBeenIncrementallyParsed);\r\n            incrementalSourceFile.hasBeenIncrementallyParsed = true;\r\n\r\n            let oldText = sourceFile.text;\r\n            let syntaxCursor = createSyntaxCursor(sourceFile);\r\n\r\n            // Make the actual change larger so that we know to reparse anything whose lookahead\r\n            // might have intersected the change.\r\n            let changeRange = extendToAffectedRange(sourceFile, textChangeRange);\r\n            checkChangeRange(sourceFile, newText, changeRange, aggressiveChecks);\r\n\r\n            // Ensure that extending the affected range only moved the start of the change range\r\n            // earlier in the file.\r\n            Debug.assert(changeRange.span.start <= textChangeRange.span.start);\r\n            Debug.assert(textSpanEnd(changeRange.span) === textSpanEnd(textChangeRange.span));\r\n            Debug.assert(textSpanEnd(textChangeRangeNewSpan(changeRange)) === textSpanEnd(textChangeRangeNewSpan(textChangeRange)));\r\n\r\n            // The is the amount the nodes after the edit range need to be adjusted.  It can be\r\n            // positive (if the edit added characters), negative (if the edit deleted characters)\r\n            // or zero (if this was a pure overwrite with nothing added/removed).\r\n            let delta = textChangeRangeNewSpan(changeRange).length - changeRange.span.length;\r\n\r\n            // If we added or removed characters during the edit, then we need to go and adjust all\r\n            // the nodes after the edit.  Those nodes may move forward (if we inserted chars) or they\r\n            // may move backward (if we deleted chars).\r\n            //\r\n            // Doing this helps us out in two ways.  First, it means that any nodes/tokens we want\r\n            // to reuse are already at the appropriate position in the new text.  That way when we\r\n            // reuse them, we don't have to figure out if they need to be adjusted.  Second, it makes\r\n            // it very easy to determine if we can reuse a node.  If the node's position is at where\r\n            // we are in the text, then we can reuse it.  Otherwise we can't.  If the node's position\r\n            // is ahead of us, then we'll need to rescan tokens.  If the node's position is behind\r\n            // us, then we'll need to skip it or crumble it as appropriate\r\n            //\r\n            // We will also adjust the positions of nodes that intersect the change range as well.\r\n            // By doing this, we ensure that all the positions in the old tree are consistent, not\r\n            // just the positions of nodes entirely before/after the change range.  By being\r\n            // consistent, we can then easily map from positions to nodes in the old tree easily.\r\n            //\r\n            // Also, mark any syntax elements that intersect the changed span.  We know, up front,\r\n            // that we cannot reuse these elements.\r\n            updateTokenPositionsAndMarkElements(incrementalSourceFile,\r\n                changeRange.span.start, textSpanEnd(changeRange.span), textSpanEnd(textChangeRangeNewSpan(changeRange)), delta, oldText, newText, aggressiveChecks);\r\n\r\n            // Now that we've set up our internal incremental state just proceed and parse the\r\n            // source file in the normal fashion.  When possible the parser will retrieve and\r\n            // reuse nodes from the old tree.\r\n            //\r\n            // Note: passing in 'true' for setNodeParents is very important.  When incrementally\r\n            // parsing, we will be reusing nodes from the old tree, and placing it into new\r\n            // parents.  If we don't set the parents now, we'll end up with an observably\r\n            // inconsistent tree.  Setting the parents on the new tree should be very fast.  We\r\n            // will immediately bail out of walking any subtrees when we can see that their parents\r\n            // are already correct.\r\n            let result = Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion, syntaxCursor, /* setParentNode */ true)\r\n\r\n            return result;\r\n        }\r\n\r\n        function moveElementEntirelyPastChangeRange(element: IncrementalElement, isArray: boolean, delta: number, oldText: string, newText: string, aggressiveChecks: boolean) {\r\n            if (isArray) {\r\n                visitArray(<IncrementalNodeArray>element);\r\n            }\r\n            else {\r\n                visitNode(<IncrementalNode>element);\r\n            }\r\n            return;\r\n\r\n            function visitNode(node: IncrementalNode) {\r\n                if (aggressiveChecks && shouldCheckNode(node)) {\r\n                    var text = oldText.substring(node.pos, node.end);\r\n                }\r\n\r\n                // Ditch any existing LS children we may have created.  This way we can avoid\r\n                // moving them forward.\r\n                if (node._children) {\r\n                    node._children = undefined;\r\n                }\r\n\r\n                if (node.jsDocComment) {\r\n                    node.jsDocComment = undefined;\r\n                }\r\n\r\n                node.pos += delta;\r\n                node.end += delta;\r\n\r\n                if (aggressiveChecks && shouldCheckNode(node)) {\r\n                    Debug.assert(text === newText.substring(node.pos, node.end));\r\n                }\r\n\r\n                forEachChild(node, visitNode, visitArray);\r\n                checkNodePositions(node, aggressiveChecks);\r\n            }\r\n\r\n            function visitArray(array: IncrementalNodeArray) {\r\n                array._children = undefined;\r\n                array.pos += delta;\r\n                array.end += delta;\r\n\r\n                for (let node of array) {\r\n                    visitNode(node);\r\n                }\r\n            }\r\n        }\r\n\r\n        function shouldCheckNode(node: Node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NumericLiteral:\r\n                case SyntaxKind.Identifier:\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function adjustIntersectingElement(element: IncrementalElement, changeStart: number, changeRangeOldEnd: number, changeRangeNewEnd: number, delta: number) {\r\n            Debug.assert(element.end >= changeStart, \"Adjusting an element that was entirely before the change range\");\r\n            Debug.assert(element.pos <= changeRangeOldEnd, \"Adjusting an element that was entirely after the change range\");\r\n            Debug.assert(element.pos <= element.end);\r\n\r\n            // We have an element that intersects the change range in some way.  It may have its\r\n            // start, or its end (or both) in the changed range.  We want to adjust any part\r\n            // that intersects such that the final tree is in a consistent state.  i.e. all\r\n            // chlidren have spans within the span of their parent, and all siblings are ordered\r\n            // properly.\r\n\r\n            // We may need to update both the 'pos' and the 'end' of the element.\r\n\r\n            // If the 'pos' is before the start of the change, then we don't need to touch it.\r\n            // If it isn't, then the 'pos' must be inside the change.  How we update it will\r\n            // depend if delta is  positive or negative.  If delta is positive then we have\r\n            // something like:\r\n            //\r\n            //  -------------------AAA-----------------\r\n            //  -------------------BBBCCCCCCC-----------------\r\n            //\r\n            // In this case, we consider any node that started in the change range to still be\r\n            // starting at the same position.\r\n            //\r\n            // however, if the delta is negative, then we instead have something like this:\r\n            //\r\n            //  -------------------XXXYYYYYYY-----------------\r\n            //  -------------------ZZZ-----------------\r\n            //\r\n            // In this case, any element that started in the 'X' range will keep its position.\r\n            // However any element htat started after that will have their pos adjusted to be\r\n            // at the end of the new range.  i.e. any node that started in the 'Y' range will\r\n            // be adjusted to have their start at the end of the 'Z' range.\r\n            //\r\n            // The element will keep its position if possible.  Or Move backward to the new-end\r\n            // if it's in the 'Y' range.\r\n            element.pos = Math.min(element.pos, changeRangeNewEnd);\r\n\r\n            // If the 'end' is after the change range, then we always adjust it by the delta\r\n            // amount.  However, if the end is in the change range, then how we adjust it\r\n            // will depend on if delta is  positive or negative.  If delta is positive then we\r\n            // have something like:\r\n            //\r\n            //  -------------------AAA-----------------\r\n            //  -------------------BBBCCCCCCC-----------------\r\n            //\r\n            // In this case, we consider any node that ended inside the change range to keep its\r\n            // end position.\r\n            //\r\n            // however, if the delta is negative, then we instead have something like this:\r\n            //\r\n            //  -------------------XXXYYYYYYY-----------------\r\n            //  -------------------ZZZ-----------------\r\n            //\r\n            // In this case, any element that ended in the 'X' range will keep its position.\r\n            // However any element htat ended after that will have their pos adjusted to be\r\n            // at the end of the new range.  i.e. any node that ended in the 'Y' range will\r\n            // be adjusted to have their end at the end of the 'Z' range.\r\n            if (element.end >= changeRangeOldEnd) {\r\n                // Element ends after the change range.  Always adjust the end pos.\r\n                element.end += delta;\r\n            }\r\n            else {\r\n                // Element ends in the change range.  The element will keep its position if\r\n                // possible. Or Move backward to the new-end if it's in the 'Y' range.\r\n                element.end = Math.min(element.end, changeRangeNewEnd);\r\n            }\r\n\r\n            Debug.assert(element.pos <= element.end);\r\n            if (element.parent) {\r\n                Debug.assert(element.pos >= element.parent.pos);\r\n                Debug.assert(element.end <= element.parent.end);\r\n            }\r\n        }\r\n\r\n        function checkNodePositions(node: Node, aggressiveChecks: boolean) {\r\n            if (aggressiveChecks) {\r\n                let pos = node.pos;\r\n                forEachChild(node, child => {\r\n                    Debug.assert(child.pos >= pos);\r\n                    pos = child.end;\r\n                });\r\n                Debug.assert(pos <= node.end);\r\n            }\r\n        }\r\n\r\n        function updateTokenPositionsAndMarkElements(\r\n            sourceFile: IncrementalNode,\r\n            changeStart: number,\r\n            changeRangeOldEnd: number,\r\n            changeRangeNewEnd: number,\r\n            delta: number,\r\n            oldText: string,\r\n            newText: string,\r\n            aggressiveChecks: boolean): void {\r\n\r\n            visitNode(sourceFile);\r\n            return;\r\n\r\n            function visitNode(child: IncrementalNode) {\r\n                Debug.assert(child.pos <= child.end);\r\n                if (child.pos > changeRangeOldEnd) {\r\n                    // Node is entirely past the change range.  We need to move both its pos and\r\n                    // end, forward or backward appropriately.\r\n                    moveElementEntirelyPastChangeRange(child, /*isArray*/ false, delta, oldText, newText, aggressiveChecks);\r\n                    return;\r\n                }\r\n\r\n                // Check if the element intersects the change range.  If it does, then it is not\r\n                // reusable.  Also, we'll need to recurse to see what constituent portions we may\r\n                // be able to use.\r\n                let fullEnd = child.end;\r\n                if (fullEnd >= changeStart) {\r\n                    child.intersectsChange = true;\r\n                    child._children = undefined;\r\n\r\n                    // Adjust the pos or end (or both) of the intersecting element accordingly.\r\n                    adjustIntersectingElement(child, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);\r\n                    forEachChild(child, visitNode, visitArray);\r\n\r\n                    checkNodePositions(child, aggressiveChecks);\r\n                    return;\r\n                }\r\n\r\n                // Otherwise, the node is entirely before the change range.  No need to do anything with it.\r\n                Debug.assert(fullEnd < changeStart);\r\n            }\r\n\r\n            function visitArray(array: IncrementalNodeArray) {\r\n                Debug.assert(array.pos <= array.end);\r\n                if (array.pos > changeRangeOldEnd) {\r\n                    // Array is entirely after the change range.  We need to move it, and move any of\r\n                    // its children.\r\n                    moveElementEntirelyPastChangeRange(array, /*isArray*/ true, delta, oldText, newText, aggressiveChecks);\r\n                    return;\r\n                }\r\n\r\n                // Check if the element intersects the change range.  If it does, then it is not\r\n                // reusable.  Also, we'll need to recurse to see what constituent portions we may\r\n                // be able to use.\r\n                let fullEnd = array.end;\r\n                if (fullEnd >= changeStart) {\r\n                    array.intersectsChange = true;\r\n                    array._children = undefined;\r\n\r\n                    // Adjust the pos or end (or both) of the intersecting array accordingly.\r\n                    adjustIntersectingElement(array, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);\r\n                    for (let node of array) {\r\n                        visitNode(node);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // Otherwise, the array is entirely before the change range.  No need to do anything with it.\r\n                Debug.assert(fullEnd < changeStart);\r\n            }\r\n        }\r\n\r\n        function extendToAffectedRange(sourceFile: SourceFile, changeRange: TextChangeRange): TextChangeRange {\r\n            // Consider the following code:\r\n            //      void foo() { /; }\r\n            //\r\n            // If the text changes with an insertion of / just before the semicolon then we end up with:\r\n            //      void foo() { //; }\r\n            //\r\n            // If we were to just use the changeRange a is, then we would not rescan the { token\r\n            // (as it does not intersect the actual original change range).  Because an edit may\r\n            // change the token touching it, we actually need to look back *at least* one token so\r\n            // that the prior token sees that change.\r\n            let maxLookahead = 1;\r\n\r\n            let start = changeRange.span.start;\r\n\r\n            // the first iteration aligns us with the change start. subsequent iteration move us to\r\n            // the left by maxLookahead tokens.  We only need to do this as long as we're not at the\r\n            // start of the tree.\r\n            for (let i = 0; start > 0 && i <= maxLookahead; i++) {\r\n                let nearestNode = findNearestNodeStartingBeforeOrAtPosition(sourceFile, start);\r\n                Debug.assert(nearestNode.pos <= start);\r\n                let position = nearestNode.pos;\r\n\r\n                start = Math.max(0, position - 1);\r\n            }\r\n\r\n            let finalSpan = createTextSpanFromBounds(start, textSpanEnd(changeRange.span));\r\n            let finalLength = changeRange.newLength + (changeRange.span.start - start);\r\n\r\n            return createTextChangeRange(finalSpan, finalLength);\r\n        }\r\n\r\n        function findNearestNodeStartingBeforeOrAtPosition(sourceFile: SourceFile, position: number): Node {\r\n            let bestResult: Node = sourceFile;\r\n            let lastNodeEntirelyBeforePosition: Node;\r\n\r\n            forEachChild(sourceFile, visit);\r\n\r\n            if (lastNodeEntirelyBeforePosition) {\r\n                let lastChildOfLastEntireNodeBeforePosition = getLastChild(lastNodeEntirelyBeforePosition);\r\n                if (lastChildOfLastEntireNodeBeforePosition.pos > bestResult.pos) {\r\n                    bestResult = lastChildOfLastEntireNodeBeforePosition;\r\n                }\r\n            }\r\n\r\n            return bestResult;\r\n\r\n            function getLastChild(node: Node): Node {\r\n                while (true) {\r\n                    let lastChild = getLastChildWorker(node);\r\n                    if (lastChild) {\r\n                        node = lastChild;\r\n                    }\r\n                    else {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getLastChildWorker(node: Node): Node {\r\n                let last: Node = undefined;\r\n                forEachChild(node, child => {\r\n                    if (nodeIsPresent(child)) {\r\n                        last = child;\r\n                    }\r\n                });\r\n                return last;\r\n            }\r\n\r\n            function visit(child: Node) {\r\n                if (nodeIsMissing(child)) {\r\n                    // Missing nodes are effectively invisible to us.  We never even consider them\r\n                    // When trying to find the nearest node before us.\r\n                    return;\r\n                }\r\n\r\n                // If the child intersects this position, then this node is currently the nearest\r\n                // node that starts before the position.\r\n                if (child.pos <= position) {\r\n                    if (child.pos >= bestResult.pos) {\r\n                        // This node starts before the position, and is closer to the position than\r\n                        // the previous best node we found.  It is now the new best node.\r\n                        bestResult = child;\r\n                    }\r\n\r\n                    // Now, the node may overlap the position, or it may end entirely before the\r\n                    // position.  If it overlaps with the position, then either it, or one of its\r\n                    // children must be the nearest node before the position.  So we can just\r\n                    // recurse into this child to see if we can find something better.\r\n                    if (position < child.end) {\r\n                        // The nearest node is either this child, or one of the children inside\r\n                        // of it.  We've already marked this child as the best so far.  Recurse\r\n                        // in case one of the children is better.\r\n                        forEachChild(child, visit);\r\n\r\n                        // Once we look at the children of this node, then there's no need to\r\n                        // continue any further.\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        Debug.assert(child.end <= position);\r\n                        // The child ends entirely before this position.  Say you have the following\r\n                        // (where $ is the position)\r\n                        //\r\n                        //      <complex expr 1> ? <complex expr 2> $ : <...> <...>\r\n                        //\r\n                        // We would want to find the nearest preceding node in \"complex expr 2\".\r\n                        // To support that, we keep track of this node, and once we're done searching\r\n                        // for a best node, we recurse down this node to see if we can find a good\r\n                        // result in it.\r\n                        //\r\n                        // This approach allows us to quickly skip over nodes that are entirely\r\n                        // before the position, while still allowing us to find any nodes in the\r\n                        // last one that might be what we want.\r\n                        lastNodeEntirelyBeforePosition = child;\r\n                    }\r\n                }\r\n                else {\r\n                    Debug.assert(child.pos > position);\r\n                    // We're now at a node that is entirely past the position we're searching for.\r\n                    // This node (and all following nodes) could never contribute to the result,\r\n                    // so just skip them by returning 'true' here.\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkChangeRange(sourceFile: SourceFile, newText: string, textChangeRange: TextChangeRange, aggressiveChecks: boolean) {\r\n            let oldText = sourceFile.text;\r\n            if (textChangeRange) {\r\n                Debug.assert((oldText.length - textChangeRange.span.length + textChangeRange.newLength) === newText.length);\r\n\r\n                if (aggressiveChecks || Debug.shouldAssert(AssertionLevel.VeryAggressive)) {\r\n                    let oldTextPrefix = oldText.substr(0, textChangeRange.span.start);\r\n                    let newTextPrefix = newText.substr(0, textChangeRange.span.start);\r\n                    Debug.assert(oldTextPrefix === newTextPrefix);\r\n\r\n                    let oldTextSuffix = oldText.substring(textSpanEnd(textChangeRange.span), oldText.length);\r\n                    let newTextSuffix = newText.substring(textSpanEnd(textChangeRangeNewSpan(textChangeRange)), newText.length);\r\n                    Debug.assert(oldTextSuffix === newTextSuffix);\r\n                }\r\n            }\r\n        }\r\n\r\n        interface IncrementalElement extends TextRange {\r\n            parent?: Node;\r\n            intersectsChange: boolean\r\n            length?: number;\r\n            _children: Node[];\r\n        }\r\n\r\n        export interface IncrementalNode extends Node, IncrementalElement {\r\n            hasBeenIncrementallyParsed: boolean\r\n        }\r\n\r\n        interface IncrementalNodeArray extends NodeArray<IncrementalNode>, IncrementalElement {\r\n            length: number\r\n        }\r\n\r\n        // Allows finding nodes in the source file at a certain position in an efficient manner.\r\n        // The implementation takes advantage of the calling pattern it knows the parser will\r\n        // make in order to optimize finding nodes as quickly as possible.\r\n        export interface SyntaxCursor {\r\n            currentNode(position: number): IncrementalNode;\r\n        }\r\n\r\n        function createSyntaxCursor(sourceFile: SourceFile): SyntaxCursor {\r\n            let currentArray: NodeArray<Node> = sourceFile.statements;\r\n            let currentArrayIndex = 0;\r\n\r\n            Debug.assert(currentArrayIndex < currentArray.length);\r\n            let current = currentArray[currentArrayIndex];\r\n            let lastQueriedPosition = InvalidPosition.Value;\r\n\r\n            return {\r\n                currentNode(position: number) {\r\n                    // Only compute the current node if the position is different than the last time\r\n                    // we were asked.  The parser commonly asks for the node at the same position\r\n                    // twice.  Once to know if can read an appropriate list element at a certain point,\r\n                    // and then to actually read and consume the node.\r\n                    if (position !== lastQueriedPosition) {\r\n                        // Much of the time the parser will need the very next node in the array that\r\n                        // we just returned a node from.So just simply check for that case and move\r\n                        // forward in the array instead of searching for the node again.\r\n                        if (current && current.end === position && currentArrayIndex < (currentArray.length - 1)) {\r\n                            currentArrayIndex++;\r\n                            current = currentArray[currentArrayIndex];\r\n                        }\r\n\r\n                        // If we don't have a node, or the node we have isn't in the right position,\r\n                        // then try to find a viable node at the position requested.\r\n                        if (!current || current.pos !== position) {\r\n                            findHighestListElementThatStartsAtPosition(position);\r\n                        }\r\n                    }\r\n\r\n                    // Cache this query so that we don't do any extra work if the parser calls back\r\n                    // into us.  Note: this is very common as the parser will make pairs of calls like\r\n                    // 'isListElement -> parseListElement'.  If we were unable to find a node when\r\n                    // called with 'isListElement', we don't want to redo the work when parseListElement\r\n                    // is called immediately after.\r\n                    lastQueriedPosition = position;\r\n\r\n                    // Either we don'd have a node, or we have a node at the position being asked for.\r\n                    Debug.assert(!current || current.pos === position);\r\n                    return <IncrementalNode>current;\r\n                }\r\n            };\r\n\r\n            // Finds the highest element in the tree we can find that starts at the provided position.\r\n            // The element must be a direct child of some node list in the tree.  This way after we\r\n            // return it, we can easily return its next sibling in the list.\r\n            function findHighestListElementThatStartsAtPosition(position: number) {\r\n                // Clear out any cached state about the last node we found.\r\n                currentArray = undefined;\r\n                currentArrayIndex = InvalidPosition.Value;\r\n                current = undefined;\r\n\r\n                // Recurse into the source file to find the highest node at this position.\r\n                forEachChild(sourceFile, visitNode, visitArray);\r\n                return;\r\n\r\n                function visitNode(node: Node) {\r\n                    if (position >= node.pos && position < node.end) {\r\n                        // Position was within this node.  Keep searching deeper to find the node.\r\n                        forEachChild(node, visitNode, visitArray);\r\n\r\n                        // don't procede any futher in the search.\r\n                        return true;\r\n                    }\r\n\r\n                    // position wasn't in this node, have to keep searching.\r\n                    return false;\r\n                }\r\n\r\n                function visitArray(array: NodeArray<Node>) {\r\n                    if (position >= array.pos && position < array.end) {\r\n                        // position was in this array.  Search through this array to see if we find a\r\n                        // viable element.\r\n                        for (let i = 0, n = array.length; i < n; i++) {\r\n                            let child = array[i];\r\n                            if (child) {\r\n                                if (child.pos === position) {\r\n                                    // Found the right node.  We're done.\r\n                                    currentArray = array;\r\n                                    currentArrayIndex = i;\r\n                                    current = child;\r\n                                    return true;\r\n                                }\r\n                                else {\r\n                                    if (child.pos < position && position < child.end) {\r\n                                        // Position in somewhere within this child.  Search in it and\r\n                                        // stop searching in this array.\r\n                                        forEachChild(child, visitNode, visitArray);\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // position wasn't in this array, have to keep searching.\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        const enum InvalidPosition {\r\n            Value = -1\r\n        }\r\n    }\r\n}\r\n"},{"name":"binder.ts","text":"/// <reference path=\"parser.ts\"/>\r\n\r\n/* @internal */\r\nmodule ts {\r\n    export let bindTime = 0;\r\n\r\n    export const enum ModuleInstanceState {\r\n        NonInstantiated = 0,\r\n        Instantiated    = 1,\r\n        ConstEnumOnly   = 2\r\n    }\r\n\r\n    export function getModuleInstanceState(node: Node): ModuleInstanceState {\r\n        // A module is uninstantiated if it contains only \r\n        // 1. interface declarations, type alias declarations\r\n        if (node.kind === SyntaxKind.InterfaceDeclaration || node.kind === SyntaxKind.TypeAliasDeclaration) {\r\n            return ModuleInstanceState.NonInstantiated;\r\n        }\r\n        // 2. const enum declarations\r\n        else if (isConstEnumDeclaration(node)) {\r\n            return ModuleInstanceState.ConstEnumOnly;\r\n        }\r\n        // 3. non-exported import declarations\r\n        else if ((node.kind === SyntaxKind.ImportDeclaration || node.kind === SyntaxKind.ImportEqualsDeclaration) && !(node.flags & NodeFlags.Export)) {\r\n            return ModuleInstanceState.NonInstantiated;\r\n        }\r\n        // 4. other uninstantiated module declarations.\r\n        else if (node.kind === SyntaxKind.ModuleBlock) {\r\n            let state = ModuleInstanceState.NonInstantiated;\r\n            forEachChild(node, n => {\r\n                switch (getModuleInstanceState(n)) {\r\n                    case ModuleInstanceState.NonInstantiated:\r\n                        // child is non-instantiated - continue searching\r\n                        return false;\r\n                    case ModuleInstanceState.ConstEnumOnly:\r\n                        // child is const enum only - record state and continue searching\r\n                        state = ModuleInstanceState.ConstEnumOnly;\r\n                        return false;\r\n                    case ModuleInstanceState.Instantiated:\r\n                        // child is instantiated - record state and stop\r\n                        state = ModuleInstanceState.Instantiated;\r\n                        return true;\r\n                }\r\n            });\r\n            return state;\r\n        }\r\n        else if (node.kind === SyntaxKind.ModuleDeclaration) {\r\n            return getModuleInstanceState((<ModuleDeclaration>node).body);\r\n        }\r\n        else {\r\n            return ModuleInstanceState.Instantiated;\r\n        }\r\n    }\r\n\r\n    const enum ContainerFlags {\r\n        // The current node is not a container, and no container manipulation should happen before \r\n        // recursing into it.\r\n        None = 0,\r\n\r\n        // The current node is a container.  It should be set as the current container (and block-\r\n        // container) before recursing into it.  The current node does not have locals.  Examples:\r\n        //\r\n        //      Classes, ObjectLiterals, TypeLiterals, Interfaces...\r\n        IsContainer = 1 << 0,\r\n\r\n        // The current node is a block-scoped-container.  It should be set as the current block-\r\n        // container before recursing into it.  Examples:\r\n        //\r\n        //      Blocks (when not parented by functions), Catch clauses, For/For-in/For-of statements...\r\n        IsBlockScopedContainer = 1 << 1,\r\n\r\n        HasLocals = 1 << 2,\r\n\r\n        // If the current node is a container that also container that also contains locals.  Examples:\r\n        //\r\n        //      Functions, Methods, Modules, Source-files.\r\n        IsContainerWithLocals   = IsContainer | HasLocals\r\n    }\r\n\r\n    export function bindSourceFile(file: SourceFile) {\r\n        let start = new Date().getTime();\r\n        bindSourceFileWorker(file);\r\n        bindTime += new Date().getTime() - start;\r\n    }\r\n\r\n    function bindSourceFileWorker(file: SourceFile) {\r\n        let parent: Node;\r\n        let container: Node;\r\n        let blockScopeContainer: Node;\r\n        let lastContainer: Node;\r\n        let symbolCount = 0;\r\n        let Symbol = objectAllocator.getSymbolConstructor();\r\n\r\n        if (!file.locals) {\r\n            bind(file);\r\n            file.symbolCount = symbolCount;\r\n        }\r\n\r\n        return;\r\n\r\n        function createSymbol(flags: SymbolFlags, name: string): Symbol {\r\n            symbolCount++;\r\n            return new Symbol(flags, name);\r\n        }\r\n\r\n        function addDeclarationToSymbol(symbol: Symbol, node: Declaration, symbolFlags: SymbolFlags) {\r\n            symbol.flags |= symbolFlags;\r\n\r\n            node.symbol = symbol;\r\n\r\n            if (!symbol.declarations) {\r\n                symbol.declarations = [];\r\n            }\r\n            symbol.declarations.push(node);\r\n\r\n            if (symbolFlags & SymbolFlags.HasExports && !symbol.exports) {\r\n                symbol.exports = {};\r\n            }\r\n\r\n            if (symbolFlags & SymbolFlags.HasMembers && !symbol.members) {\r\n                symbol.members = {};\r\n            }\r\n\r\n            if (symbolFlags & SymbolFlags.Value && !symbol.valueDeclaration) {\r\n                symbol.valueDeclaration = node;\r\n            }\r\n        }\r\n\r\n        // Should not be called on a declaration with a computed property name,\r\n        // unless it is a well known Symbol.\r\n        function getDeclarationName(node: Declaration): string {\r\n            if (node.name) {\r\n                if (node.kind === SyntaxKind.ModuleDeclaration && node.name.kind === SyntaxKind.StringLiteral) {\r\n                    return '\"' + (<LiteralExpression>node.name).text + '\"';\r\n                }\r\n                if (node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                    let nameExpression = (<ComputedPropertyName>node.name).expression;\r\n                    Debug.assert(isWellKnownSymbolSyntactically(nameExpression));\r\n                    return getPropertyNameForKnownSymbolName((<PropertyAccessExpression>nameExpression).name.text);\r\n                }\r\n                return (<Identifier | LiteralExpression>node.name).text;\r\n            }\r\n            switch (node.kind) {\r\n                case SyntaxKind.Constructor:\r\n                    return \"__constructor\";\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.CallSignature:\r\n                    return \"__call\";\r\n                case SyntaxKind.ConstructorType:\r\n                case SyntaxKind.ConstructSignature:\r\n                    return \"__new\";\r\n                case SyntaxKind.IndexSignature:\r\n                    return \"__index\";\r\n                case SyntaxKind.ExportDeclaration:\r\n                    return \"__export\";\r\n                case SyntaxKind.ExportAssignment:\r\n                    return (<ExportAssignment>node).isExportEquals ? \"export=\" : \"default\";\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.ClassDeclaration:\r\n                    return node.flags & NodeFlags.Default ? \"default\" : undefined;\r\n            }\r\n        }\r\n\r\n        function getDisplayName(node: Declaration): string {\r\n            return node.name ? declarationNameToString(node.name) : getDeclarationName(node);\r\n        }\r\n\r\n        function declareSymbol(symbolTable: SymbolTable, parent: Symbol, node: Declaration, includes: SymbolFlags, excludes: SymbolFlags): Symbol {\r\n            Debug.assert(!hasDynamicName(node));\r\n\r\n            // The exported symbol for an export default function/class node is always named \"default\"\r\n            let name = node.flags & NodeFlags.Default && parent ? \"default\" : getDeclarationName(node);\r\n\r\n            let symbol: Symbol;\r\n            if (name !== undefined) {\r\n                // Check and see if the symbol table already has a symbol with this name.  If not,\r\n                // create a new symbol with this name and add it to the table.  Note that we don't\r\n                // give the new symbol any flags *yet*.  This ensures that it will not conflict \r\n                // witht he 'excludes' flags we pass in.\r\n                //\r\n                // If we do get an existing symbol, see if it conflicts with the new symbol we're\r\n                // creating.  For example, a 'var' symbol and a 'class' symbol will conflict within\r\n                // the same symbol table.  If we have a conflict, report the issue on each \r\n                // declaration we have for this symbol, and then create a new symbol for this \r\n                // declaration.\r\n                //\r\n                // If we created a new symbol, either because we didn't have a symbol with this name\r\n                // in the symbol table, or we conflicted with an existing symbol, then just add this\r\n                // node as the sole declaration of the new symbol.\r\n                //\r\n                // Otherwise, we'll be merging into a compatible existing symbol (for example when\r\n                // you have multiple 'vars' with the same name in the same container).  In this case\r\n                // just add this node into the declarations list of the symbol.\r\n                symbol = hasProperty(symbolTable, name)\r\n                    ? symbolTable[name]\r\n                    : (symbolTable[name] = createSymbol(SymbolFlags.None, name));\r\n                if (symbol.flags & excludes) {\r\n                    if (node.name) {\r\n                        node.name.parent = node;\r\n                    }\r\n\r\n                    // Report errors every position with duplicate declaration\r\n                    // Report errors on previous encountered declarations\r\n                    let message = symbol.flags & SymbolFlags.BlockScopedVariable\r\n                        ? Diagnostics.Cannot_redeclare_block_scoped_variable_0\r\n                        : Diagnostics.Duplicate_identifier_0;\r\n                    forEach(symbol.declarations, declaration => {\r\n                        file.bindDiagnostics.push(createDiagnosticForNode(declaration.name || declaration, message, getDisplayName(declaration)));\r\n                    });\r\n                    file.bindDiagnostics.push(createDiagnosticForNode(node.name || node, message, getDisplayName(node)));\r\n\r\n                    symbol = createSymbol(SymbolFlags.None, name);\r\n                }\r\n            }\r\n            else {\r\n                symbol = createSymbol(SymbolFlags.None, \"__missing\");\r\n            }\r\n\r\n            addDeclarationToSymbol(symbol, node, includes);\r\n            symbol.parent = parent;\r\n\r\n            return symbol;\r\n        }\r\n\r\n        function declareModuleMember(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags): Symbol {\r\n            let hasExportModifier = getCombinedNodeFlags(node) & NodeFlags.Export;\r\n            if (symbolFlags & SymbolFlags.Alias) {\r\n                if (node.kind === SyntaxKind.ExportSpecifier || (node.kind === SyntaxKind.ImportEqualsDeclaration && hasExportModifier)) {\r\n                    return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\r\n                }\r\n                else {\r\n                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\r\n                }\r\n            }\r\n            else {\r\n                // Exported module members are given 2 symbols: A local symbol that is classified with an ExportValue,\r\n                // ExportType, or ExportContainer flag, and an associated export symbol with all the correct flags set\r\n                // on it. There are 2 main reasons:\r\n                //\r\n                //   1. We treat locals and exports of the same name as mutually exclusive within a container. \r\n                //      That means the binder will issue a Duplicate Identifier error if you mix locals and exports\r\n                //      with the same name in the same container.\r\n                //      TODO: Make this a more specific error and decouple it from the exclusion logic.\r\n                //   2. When we checkIdentifier in the checker, we set its resolved symbol to the local symbol,\r\n                //      but return the export symbol (by calling getExportSymbolOfValueSymbolIfExported). That way\r\n                //      when the emitter comes back to it, it knows not to qualify the name if it was found in a containing scope.\r\n                if (hasExportModifier || container.flags & NodeFlags.ExportContext) {\r\n                    let exportKind =\r\n                        (symbolFlags & SymbolFlags.Value ? SymbolFlags.ExportValue : 0) |\r\n                        (symbolFlags & SymbolFlags.Type ? SymbolFlags.ExportType : 0) |\r\n                        (symbolFlags & SymbolFlags.Namespace ? SymbolFlags.ExportNamespace : 0);\r\n                    let local = declareSymbol(container.locals, undefined, node, exportKind, symbolExcludes);\r\n                    local.exportSymbol = declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\r\n                    node.localSymbol = local;\r\n                    return local;\r\n                }\r\n                else {\r\n                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\r\n                }\r\n            }\r\n        }\r\n\r\n        // All container nodes are kept on a linked list in declaration order. This list is used by \r\n        // the getLocalNameOfContainer function in the type checker to validate that the local name \r\n        // used for a container is unique.\r\n        function bindChildren(node: Node) {\r\n            // Before we recurse into a node's chilren, we first save the existing parent, container \r\n            // and block-container.  Then after we pop out of processing the children, we restore\r\n            // these saved values.\r\n            let saveParent = parent;\r\n            let saveContainer = container;\r\n            let savedBlockScopeContainer = blockScopeContainer;\r\n\r\n            // This node will now be set as the parent of all of its children as we recurse into them.\r\n            parent = node;\r\n            \r\n            // Depending on what kind of node this is, we may have to adjust the current container\r\n            // and block-container.   If the current node is a container, then it is automatically\r\n            // considered the current block-container as well.  Also, for containers that we know\r\n            // may contain locals, we proactively initialize the .locals field. We do this because\r\n            // it's highly likely that the .locals will be needed to place some child in (for example,\r\n            // a parameter, or variable declaration).\r\n            // \r\n            // However, we do not proactively create the .locals for block-containers because it's\r\n            // totally normal and common for block-containers to never actually have a block-scoped \r\n            // variable in them.  We don't want to end up allocating an object for every 'block' we\r\n            // run into when most of them won't be necessary.\r\n            //\r\n            // Finally, if this is a block-container, then we clear out any existing .locals object\r\n            // it may contain within it.  This happens in incremental scenarios.  Because we can be\r\n            // reusing a node from a previous compilation, that node may have had 'locals' created\r\n            // for it.  We must clear this so we don't accidently move any stale data forward from\r\n            // a previous compilation.\r\n            let containerFlags = getContainerFlags(node);\r\n            if (containerFlags & ContainerFlags.IsContainer) {\r\n                container = blockScopeContainer = node;\r\n\r\n                if (containerFlags & ContainerFlags.HasLocals) {\r\n                    container.locals = {};\r\n                }\r\n\r\n                addToContainerChain(container);\r\n            }\r\n            else if (containerFlags & ContainerFlags.IsBlockScopedContainer) {\r\n                blockScopeContainer = node;\r\n                blockScopeContainer.locals = undefined;\r\n            }\r\n\r\n            forEachChild(node, bind);\r\n\r\n            container = saveContainer;\r\n            parent = saveParent;\r\n            blockScopeContainer = savedBlockScopeContainer;\r\n        }\r\n\r\n        function getContainerFlags(node: Node): ContainerFlags {\r\n            switch (node.kind) {\r\n                case SyntaxKind.ClassExpression:\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                case SyntaxKind.EnumDeclaration:\r\n                case SyntaxKind.TypeLiteral:\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                    return ContainerFlags.IsContainer;\r\n                    \r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.ModuleDeclaration:\r\n                case SyntaxKind.SourceFile:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    return ContainerFlags.IsContainerWithLocals;\r\n\r\n                case SyntaxKind.CatchClause:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                case SyntaxKind.CaseBlock:\r\n                    return ContainerFlags.IsBlockScopedContainer;\r\n\r\n                case SyntaxKind.Block:\r\n                    // do not treat blocks directly inside a function as a block-scoped-container.\r\n                    // Locals that reside in this block should go to the function locals. Othewise 'x' \r\n                    // would not appear to be a redeclaration of a block scoped local in the following\r\n                    // example:\r\n                    //\r\n                    //      function foo() {\r\n                    //          var x;\r\n                    //          let x;\r\n                    //      }\r\n                    //\r\n                    // If we placed 'var x' into the function locals and 'let x' into the locals of\r\n                    // the block, then there would be no collision.\r\n                    //\r\n                    // By not creating a new block-scoped-container here, we ensure that both 'var x'\r\n                    // and 'let x' go into the Function-container's locals, and we do get a collision \r\n                    // conflict.\r\n                    return isFunctionLike(node.parent) ? ContainerFlags.None : ContainerFlags.IsBlockScopedContainer;\r\n            }\r\n\r\n            return ContainerFlags.None;\r\n        }\r\n\r\n        function addToContainerChain(next: Node) {\r\n            if (lastContainer) {\r\n                lastContainer.nextContainer = next;\r\n            }\r\n\r\n            lastContainer = next;\r\n        }\r\n\r\n        function declareSymbolAndAddToSymbolTable(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags): void {\r\n            // Just call this directly so that the return type of this function stays \"void\".\r\n            declareSymbolAndAddToSymbolTableWorker(node, symbolFlags, symbolExcludes);\r\n        }\r\n\r\n        function declareSymbolAndAddToSymbolTableWorker(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags): Symbol {\r\n            switch (container.kind) {\r\n                // Modules, source files, and classes need specialized handling for how their\r\n                // members are declared (for example, a member of a class will go into a specific\r\n                // symbol table depending on if it is static or not). We defer to specialized\r\n                // handlers to take care of declaring these child members.\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    return declareModuleMember(node, symbolFlags, symbolExcludes);\r\n\r\n                case SyntaxKind.SourceFile:\r\n                    return declareSourceFileMember(node, symbolFlags, symbolExcludes);\r\n\r\n                case SyntaxKind.ClassExpression:\r\n                case SyntaxKind.ClassDeclaration:\r\n                    return declareClassMember(node, symbolFlags, symbolExcludes);\r\n\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\r\n\r\n                case SyntaxKind.TypeLiteral:\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                    // Interface/Object-types always have their children added to the 'members' of\r\n                    // their container. They are only accessible through an instance of their\r\n                    // container, and are never in scope otherwise (even inside the body of the\r\n                    // object / type / interface declaring them). An exception is type parameters,\r\n                    // which are in scope without qualification (similar to 'locals').\r\n                    return declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);\r\n\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    // All the children of these container types are never visible through another\r\n                    // symbol (i.e. through another symbol's 'exports' or 'members').  Instead,\r\n                    // they're only accessed 'lexically' (i.e. from code that exists underneath\r\n                    // their container in the tree.  To accomplish this, we simply add their declared\r\n                    // symbol to the 'locals' of the container.  These symbols can then be found as\r\n                    // the type checker walks up the containers, checking them for matching names.\r\n                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\r\n            }\r\n        }\r\n\r\n        function declareClassMember(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags) {\r\n            return node.flags & NodeFlags.Static\r\n                ? declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes)\r\n                : declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);\r\n        }\r\n\r\n        function declareSourceFileMember(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags) {\r\n            return isExternalModule(file)\r\n                ? declareModuleMember(node, symbolFlags, symbolExcludes)\r\n                : declareSymbol(file.locals, undefined, node, symbolFlags, symbolExcludes);\r\n        }\r\n\r\n        function isAmbientContext(node: Node): boolean {\r\n            while (node) {\r\n                if (node.flags & NodeFlags.Ambient) {\r\n                    return true;\r\n                }\r\n\r\n                node = node.parent;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function hasExportDeclarations(node: ModuleDeclaration | SourceFile): boolean {\r\n            var body = node.kind === SyntaxKind.SourceFile ? node : (<ModuleDeclaration>node).body;\r\n            if (body.kind === SyntaxKind.SourceFile || body.kind === SyntaxKind.ModuleBlock) {\r\n                for (let stat of (<Block>body).statements) {\r\n                    if (stat.kind === SyntaxKind.ExportDeclaration || stat.kind === SyntaxKind.ExportAssignment) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function setExportContextFlag(node: ModuleDeclaration | SourceFile) {\r\n            // A declaration source file or ambient module declaration that contains no export declarations (but possibly regular\r\n            // declarations with export modifiers) is an export context in which declarations are implicitly exported.\r\n            if (isAmbientContext(node) && !hasExportDeclarations(node)) {\r\n                node.flags |= NodeFlags.ExportContext;\r\n            }\r\n            else {\r\n                node.flags &= ~NodeFlags.ExportContext;\r\n            }\r\n        }\r\n\r\n        function bindModuleDeclaration(node: ModuleDeclaration) {\r\n            setExportContextFlag(node);\r\n            if (node.name.kind === SyntaxKind.StringLiteral) {\r\n                declareSymbolAndAddToSymbolTable(node, SymbolFlags.ValueModule, SymbolFlags.ValueModuleExcludes);\r\n            }\r\n            else {\r\n                let state = getModuleInstanceState(node);\r\n                if (state === ModuleInstanceState.NonInstantiated) {\r\n                    declareSymbolAndAddToSymbolTable(node, SymbolFlags.NamespaceModule, SymbolFlags.NamespaceModuleExcludes);\r\n                }\r\n                else {\r\n                    declareSymbolAndAddToSymbolTable(node, SymbolFlags.ValueModule, SymbolFlags.ValueModuleExcludes);\r\n\r\n                    let currentModuleIsConstEnumOnly = state === ModuleInstanceState.ConstEnumOnly;\r\n                    if (node.symbol.constEnumOnlyModule === undefined) {\r\n                        // non-merged case - use the current state\r\n                        node.symbol.constEnumOnlyModule = currentModuleIsConstEnumOnly;\r\n                    }\r\n                    else {\r\n                        // merged case: module is const enum only if all its pieces are non-instantiated or const enum\r\n                        node.symbol.constEnumOnlyModule = node.symbol.constEnumOnlyModule && currentModuleIsConstEnumOnly;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function bindFunctionOrConstructorType(node: SignatureDeclaration) {\r\n            // For a given function symbol \"<...>(...) => T\" we want to generate a symbol identical\r\n            // to the one we would get for: { <...>(...): T }\r\n            //\r\n            // We do that by making an anonymous type literal symbol, and then setting the function \r\n            // symbol as its sole member. To the rest of the system, this symbol will be  indistinguishable \r\n            // from an actual type literal symbol you would have gotten had you used the long form.\r\n            let symbol = createSymbol(SymbolFlags.Signature, getDeclarationName(node));\r\n            addDeclarationToSymbol(symbol, node, SymbolFlags.Signature);\r\n\r\n            let typeLiteralSymbol = createSymbol(SymbolFlags.TypeLiteral, \"__type\");\r\n            addDeclarationToSymbol(typeLiteralSymbol, node, SymbolFlags.TypeLiteral);\r\n            typeLiteralSymbol.members = { [symbol.name]: symbol };\r\n        }\r\n\r\n        function bindAnonymousDeclaration(node: Declaration, symbolFlags: SymbolFlags, name: string) {\r\n            let symbol = createSymbol(symbolFlags, name);\r\n            addDeclarationToSymbol(symbol, node, symbolFlags);\r\n        }\r\n\r\n        function bindBlockScopedDeclaration(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags) {\r\n            switch (blockScopeContainer.kind) {\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    declareModuleMember(node, symbolFlags, symbolExcludes);\r\n                    break;\r\n                case SyntaxKind.SourceFile:\r\n                    if (isExternalModule(<SourceFile>container)) {\r\n                        declareModuleMember(node, symbolFlags, symbolExcludes);\r\n                        break;\r\n                    }\r\n                    // fall through.\r\n                default:\r\n                    if (!blockScopeContainer.locals) {\r\n                        blockScopeContainer.locals = {};\r\n                        addToContainerChain(blockScopeContainer);\r\n                    }\r\n                    declareSymbol(blockScopeContainer.locals, undefined, node, symbolFlags, symbolExcludes);\r\n            }\r\n        }\r\n\r\n        function bindBlockScopedVariableDeclaration(node: Declaration) {\r\n            bindBlockScopedDeclaration(node, SymbolFlags.BlockScopedVariable, SymbolFlags.BlockScopedVariableExcludes);\r\n        }\r\n\r\n        function getDestructuringParameterName(node: Declaration) {\r\n            return \"__\" + indexOf((<SignatureDeclaration>node.parent).parameters, node);\r\n        }\r\n\r\n        function bind(node: Node) {\r\n            node.parent = parent;\r\n\r\n            // First we bind declaration nodes to a symbol if possible.  We'll both create a symbol\r\n            // and then potentially add the symbol to an appropriate symbol table. Possible \r\n            // destination symbol tables are:\r\n            // \r\n            //  1) The 'exports' table of the current container's symbol.\r\n            //  2) The 'members' table of the current container's symbol.\r\n            //  3) The 'locals' table of the current container.\r\n            //\r\n            // However, not all symbols will end up in any of these tables.  'Anonymous' symbols \r\n            // (like TypeLiterals for example) will not be put in any table.\r\n            bindWorker(node);\r\n\r\n            // Then we recurse into the children of the node to bind them as well.  For certain \r\n            // symbols we do specialized work when we recurse.  For example, we'll keep track of\r\n            // the current 'container' node when it changes.  This helps us know which symbol table\r\n            // a local should go into for example.\r\n            bindChildren(node);\r\n        }\r\n        \r\n        function bindWorker(node: Node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.TypeParameter:\r\n                    return declareSymbolAndAddToSymbolTable(<Declaration>node, SymbolFlags.TypeParameter, SymbolFlags.TypeParameterExcludes);\r\n                case SyntaxKind.Parameter:\r\n                    return bindParameter(<ParameterDeclaration>node);\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.BindingElement:\r\n                    return bindVariableDeclarationOrBindingElement(<VariableDeclaration | BindingElement>node);\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.Property | ((<PropertyDeclaration>node).questionToken ? SymbolFlags.Optional : SymbolFlags.None), SymbolFlags.PropertyExcludes);\r\n                case SyntaxKind.PropertyAssignment:\r\n                case SyntaxKind.ShorthandPropertyAssignment:\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.Property, SymbolFlags.PropertyExcludes);\r\n                case SyntaxKind.EnumMember:\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.EnumMember, SymbolFlags.EnumMemberExcludes);\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                    return declareSymbolAndAddToSymbolTable(<Declaration>node, SymbolFlags.Signature, SymbolFlags.None);\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    // If this is an ObjectLiteralExpression method, then it sits in the same space\r\n                    // as other properties in the object literal.  So we use SymbolFlags.PropertyExcludes\r\n                    // so that it will conflict with any other object literal members with the same\r\n                    // name.\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.Method | ((<MethodDeclaration>node).questionToken ? SymbolFlags.Optional : SymbolFlags.None),\r\n                        isObjectLiteralMethod(node) ? SymbolFlags.PropertyExcludes : SymbolFlags.MethodExcludes);\r\n                case SyntaxKind.FunctionDeclaration:\r\n                    return declareSymbolAndAddToSymbolTable(<Declaration>node, SymbolFlags.Function, SymbolFlags.FunctionExcludes);\r\n                case SyntaxKind.Constructor:\r\n                    return declareSymbolAndAddToSymbolTable(<Declaration>node, SymbolFlags.Constructor, /*symbolExcludes:*/ SymbolFlags.None);\r\n                case SyntaxKind.GetAccessor:\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.GetAccessor, SymbolFlags.GetAccessorExcludes);\r\n                case SyntaxKind.SetAccessor:\r\n                    return bindPropertyOrMethodOrAccessor(<Declaration>node, SymbolFlags.SetAccessor, SymbolFlags.SetAccessorExcludes);\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                    return bindFunctionOrConstructorType(<SignatureDeclaration>node);\r\n                case SyntaxKind.TypeLiteral:\r\n                    return bindAnonymousDeclaration(<TypeLiteralNode>node, SymbolFlags.TypeLiteral, \"__type\");\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                    return bindAnonymousDeclaration(<ObjectLiteralExpression>node, SymbolFlags.ObjectLiteral, \"__object\");\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    return bindAnonymousDeclaration(<FunctionExpression>node, SymbolFlags.Function, \"__function\");\r\n                case SyntaxKind.ClassExpression:\r\n                case SyntaxKind.ClassDeclaration:\r\n                    return bindClassLikeDeclaration(<ClassLikeDeclaration>node);\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                    return bindBlockScopedDeclaration(<Declaration>node, SymbolFlags.Interface, SymbolFlags.InterfaceExcludes);\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    return bindBlockScopedDeclaration(<Declaration>node, SymbolFlags.TypeAlias, SymbolFlags.TypeAliasExcludes);\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return bindEnumDeclaration(<EnumDeclaration>node);\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    return bindModuleDeclaration(<ModuleDeclaration>node);\r\n                case SyntaxKind.ImportEqualsDeclaration:\r\n                case SyntaxKind.NamespaceImport:\r\n                case SyntaxKind.ImportSpecifier:\r\n                case SyntaxKind.ExportSpecifier:\r\n                    return declareSymbolAndAddToSymbolTable(<Declaration>node, SymbolFlags.Alias, SymbolFlags.AliasExcludes);\r\n                case SyntaxKind.ImportClause:\r\n                    return bindImportClause(<ImportClause>node);\r\n                case SyntaxKind.ExportDeclaration:\r\n                    return bindExportDeclaration(<ExportDeclaration>node);\r\n                case SyntaxKind.ExportAssignment:\r\n                    return bindExportAssignment(<ExportAssignment>node);\r\n                case SyntaxKind.SourceFile:\r\n                    return bindSourceFileIfExternalModule();\r\n            }\r\n        }\r\n\r\n        function bindSourceFileIfExternalModule() {\r\n            setExportContextFlag(file);\r\n            if (isExternalModule(file)) {\r\n                bindAnonymousDeclaration(file, SymbolFlags.ValueModule, '\"' + removeFileExtension(file.fileName) + '\"');\r\n            }\r\n        }\r\n\r\n        function bindExportAssignment(node: ExportAssignment) {\r\n            if (node.expression.kind === SyntaxKind.Identifier) {\r\n                // An export default clause with an identifier exports all meanings of that identifier\r\n                declareSymbol(container.symbol.exports, container.symbol, node, SymbolFlags.Alias, SymbolFlags.PropertyExcludes | SymbolFlags.AliasExcludes);\r\n            }\r\n            else {\r\n                // An export default clause with an expression exports a value\r\n                declareSymbol(container.symbol.exports, container.symbol, node, SymbolFlags.Property, SymbolFlags.PropertyExcludes | SymbolFlags.AliasExcludes);\r\n            }\r\n        }\r\n\r\n        function bindExportDeclaration(node: ExportDeclaration) {\r\n            if (!node.exportClause) {\r\n                // All export * declarations are collected in an __export symbol\r\n                declareSymbol(container.symbol.exports, container.symbol, node, SymbolFlags.ExportStar, SymbolFlags.None);\r\n            }\r\n        }\r\n\r\n        function bindImportClause(node: ImportClause) {\r\n            if (node.name) {\r\n                declareSymbolAndAddToSymbolTable(node, SymbolFlags.Alias, SymbolFlags.AliasExcludes);\r\n            }\r\n        }\r\n\r\n        function bindClassLikeDeclaration(node: ClassLikeDeclaration) {\r\n            if (node.kind === SyntaxKind.ClassDeclaration) {\r\n                bindBlockScopedDeclaration(node, SymbolFlags.Class, SymbolFlags.ClassExcludes);\r\n            }\r\n            else {\r\n                bindAnonymousDeclaration(node, SymbolFlags.Class, \"__class\");\r\n            }\r\n\r\n            let symbol = node.symbol;\r\n\r\n            // TypeScript 1.0 spec (April 2014): 8.4\r\n            // Every class automatically contains a static property member named 'prototype', the \r\n            // type of which is an instantiation of the class type with type Any supplied as a type\r\n            // argument for each type parameter. It is an error to explicitly declare a static \r\n            // property member with the name 'prototype'.\r\n            //\r\n            // Note: we check for this here because this class may be merging into a module.  The\r\n            // module might have an exported variable called 'prototype'.  We can't allow that as\r\n            // that would clash with the built-in 'prototype' for the class.\r\n            let prototypeSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Prototype, \"prototype\");\r\n            if (hasProperty(symbol.exports, prototypeSymbol.name)) {\r\n                if (node.name) {\r\n                    node.name.parent = node;\r\n                }\r\n                file.bindDiagnostics.push(createDiagnosticForNode(symbol.exports[prototypeSymbol.name].declarations[0],\r\n                    Diagnostics.Duplicate_identifier_0, prototypeSymbol.name));\r\n            }\r\n            symbol.exports[prototypeSymbol.name] = prototypeSymbol;\r\n            prototypeSymbol.parent = symbol;\r\n        }\r\n\r\n        function bindEnumDeclaration(node: EnumDeclaration) {\r\n            return isConst(node)\r\n                ? bindBlockScopedDeclaration(node, SymbolFlags.ConstEnum, SymbolFlags.ConstEnumExcludes)\r\n                : bindBlockScopedDeclaration(node, SymbolFlags.RegularEnum, SymbolFlags.RegularEnumExcludes);\r\n        }\r\n\r\n        function bindVariableDeclarationOrBindingElement(node: VariableDeclaration | BindingElement) {\r\n            if (!isBindingPattern(node.name)) {\r\n                if (isBlockOrCatchScoped(node)) {\r\n                    bindBlockScopedVariableDeclaration(node);\r\n                }\r\n                else if (isParameterDeclaration(node)) {\r\n                    // It is safe to walk up parent chain to find whether the node is a destructing parameter declaration\r\n                    // because its parent chain has already been set up, since parents are set before descending into children.\r\n                    //\r\n                    // If node is a binding element in parameter declaration, we need to use ParameterExcludes.\r\n                    // Using ParameterExcludes flag allows the compiler to report an error on duplicate identifiers in Parameter Declaration\r\n                    // For example:\r\n                    //      function foo([a,a]) {} // Duplicate Identifier error\r\n                    //      function bar(a,a) {}   // Duplicate Identifier error, parameter declaration in this case is handled in bindParameter\r\n                    //                             // which correctly set excluded symbols\r\n                    declareSymbolAndAddToSymbolTable(node, SymbolFlags.FunctionScopedVariable, SymbolFlags.ParameterExcludes);\r\n                }\r\n                else {\r\n                    declareSymbolAndAddToSymbolTable(node, SymbolFlags.FunctionScopedVariable, SymbolFlags.FunctionScopedVariableExcludes);\r\n                }\r\n            }\r\n        }\r\n\r\n        function bindParameter(node: ParameterDeclaration) {\r\n            if (isBindingPattern(node.name)) {\r\n                bindAnonymousDeclaration(node, SymbolFlags.FunctionScopedVariable, getDestructuringParameterName(node));\r\n            }\r\n            else {\r\n                declareSymbolAndAddToSymbolTable(node, SymbolFlags.FunctionScopedVariable, SymbolFlags.ParameterExcludes);\r\n            }\r\n\r\n            // If this is a property-parameter, then also declare the property symbol into the \r\n            // containing class.\r\n            if (node.flags & NodeFlags.AccessibilityModifier &&\r\n                node.parent.kind === SyntaxKind.Constructor &&\r\n                (node.parent.parent.kind === SyntaxKind.ClassDeclaration || node.parent.parent.kind === SyntaxKind.ClassExpression)) {\r\n\r\n                let classDeclaration = <ClassLikeDeclaration>node.parent.parent;\r\n                declareSymbol(classDeclaration.symbol.members, classDeclaration.symbol, node, SymbolFlags.Property, SymbolFlags.PropertyExcludes);\r\n            }\r\n        }\r\n\r\n        function bindPropertyOrMethodOrAccessor(node: Declaration, symbolFlags: SymbolFlags, symbolExcludes: SymbolFlags) {\r\n            return hasDynamicName(node)\r\n                ? bindAnonymousDeclaration(node, symbolFlags, \"__computed\")\r\n                : declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes);\r\n        }\r\n    }\r\n}\r\n"},{"name":"checker.ts","text":"/// <reference path=\"binder.ts\"/>\r\n\r\n/* @internal */\r\nmodule ts {\r\n    let nextSymbolId = 1;\r\n    let nextNodeId = 1;\r\n    let nextMergeId = 1;\r\n\r\n    export function getNodeId(node: Node): number {\r\n        if (!node.id) node.id = nextNodeId++;\r\n        return node.id;\r\n    }\r\n\r\n    export let checkTime = 0;\r\n\r\n    export function getSymbolId(symbol: Symbol): number {\r\n        if (!symbol.id) {\r\n            symbol.id = nextSymbolId++;\r\n        }\r\n\r\n        return symbol.id;\r\n    }\r\n\r\n    export function createTypeChecker(host: TypeCheckerHost, produceDiagnostics: boolean): TypeChecker {\r\n        let Symbol = objectAllocator.getSymbolConstructor();\r\n        let Type = objectAllocator.getTypeConstructor();\r\n        let Signature = objectAllocator.getSignatureConstructor();\r\n\r\n        let typeCount = 0;\r\n\r\n        let emptyArray: any[] = [];\r\n        let emptySymbols: SymbolTable = {};\r\n\r\n        let compilerOptions = host.getCompilerOptions();\r\n        let languageVersion = compilerOptions.target || ScriptTarget.ES3;\r\n\r\n        let emitResolver = createResolver();\r\n\r\n        let undefinedSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"undefined\");\r\n        let argumentsSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"arguments\");\r\n\r\n        let checker: TypeChecker = {\r\n            getNodeCount: () => sum(host.getSourceFiles(), \"nodeCount\"),\r\n            getIdentifierCount: () => sum(host.getSourceFiles(), \"identifierCount\"),\r\n            getSymbolCount: () => sum(host.getSourceFiles(), \"symbolCount\"),\r\n            getTypeCount: () => typeCount,\r\n            isUndefinedSymbol: symbol => symbol === undefinedSymbol,\r\n            isArgumentsSymbol: symbol => symbol === argumentsSymbol,\r\n            getDiagnostics,\r\n            getGlobalDiagnostics,\r\n            getTypeOfSymbolAtLocation,\r\n            getDeclaredTypeOfSymbol,\r\n            getPropertiesOfType,\r\n            getPropertyOfType,\r\n            getSignaturesOfType,\r\n            getIndexTypeOfType,\r\n            getReturnTypeOfSignature,\r\n            getSymbolsInScope,\r\n            getSymbolAtLocation,\r\n            getShorthandAssignmentValueSymbol,\r\n            getTypeAtLocation,\r\n            typeToString,\r\n            getSymbolDisplayBuilder,\r\n            symbolToString,\r\n            getAugmentedPropertiesOfType,\r\n            getRootSymbols,\r\n            getContextualType,\r\n            getFullyQualifiedName,\r\n            getResolvedSignature,\r\n            getConstantValue,\r\n            isValidPropertyAccess,\r\n            getSignatureFromDeclaration,\r\n            isImplementationOfOverload,\r\n            getAliasedSymbol: resolveAlias,\r\n            getEmitResolver,\r\n            getExportsOfModule: getExportsOfModuleAsArray,\r\n        };\r\n\r\n        let unknownSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"unknown\");\r\n        let resolvingSymbol = createSymbol(SymbolFlags.Transient, \"__resolving__\");\r\n\r\n        let anyType = createIntrinsicType(TypeFlags.Any, \"any\");\r\n        let stringType = createIntrinsicType(TypeFlags.String, \"string\");\r\n        let numberType = createIntrinsicType(TypeFlags.Number, \"number\");\r\n        let booleanType = createIntrinsicType(TypeFlags.Boolean, \"boolean\");\r\n        let esSymbolType = createIntrinsicType(TypeFlags.ESSymbol, \"symbol\");\r\n        let voidType = createIntrinsicType(TypeFlags.Void, \"void\");\r\n        let undefinedType = createIntrinsicType(TypeFlags.Undefined | TypeFlags.ContainsUndefinedOrNull, \"undefined\");\r\n        let nullType = createIntrinsicType(TypeFlags.Null | TypeFlags.ContainsUndefinedOrNull, \"null\");\r\n        let unknownType = createIntrinsicType(TypeFlags.Any, \"unknown\");\r\n        let circularType = createIntrinsicType(TypeFlags.Any, \"__circular__\");\r\n\r\n        let emptyObjectType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        let emptyGenericType = <GenericType><ObjectType>createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        emptyGenericType.instantiations = {};\r\n\r\n        let anyFunctionType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        let noConstraintType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n\r\n        let anySignature = createSignature(undefined, undefined, emptyArray, anyType, undefined, 0, false, false);\r\n        let unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType, undefined, 0, false, false);\r\n\r\n        let globals: SymbolTable = {};\r\n\r\n        let globalESSymbolConstructorSymbol: Symbol;\r\n\r\n        let globalObjectType: ObjectType;\r\n        let globalFunctionType: ObjectType;\r\n        let globalArrayType: GenericType;\r\n        let globalStringType: ObjectType;\r\n        let globalNumberType: ObjectType;\r\n        let globalBooleanType: ObjectType;\r\n        let globalRegExpType: ObjectType;\r\n        let globalTemplateStringsArrayType: ObjectType;\r\n        let globalESSymbolType: ObjectType;\r\n        let globalIterableType: GenericType;\r\n        let globalIteratorType: GenericType;\r\n        let globalIterableIteratorType: GenericType;\r\n\r\n        let anyArrayType: Type;\r\n        let getGlobalClassDecoratorType: () => ObjectType;\r\n        let getGlobalParameterDecoratorType: () => ObjectType;\r\n        let getGlobalPropertyDecoratorType: () => ObjectType;\r\n        let getGlobalMethodDecoratorType: () => ObjectType;\r\n\r\n        let tupleTypes: Map<TupleType> = {};\r\n        let unionTypes: Map<UnionType> = {};\r\n        let stringLiteralTypes: Map<StringLiteralType> = {};\r\n        let emitExtends = false;\r\n        let emitDecorate = false;\r\n        let emitParam = false;\r\n\r\n        let resolutionTargets: Object[] = [];\r\n        let resolutionResults: boolean[] = [];\r\n\r\n        let mergedSymbols: Symbol[] = [];\r\n        let symbolLinks: SymbolLinks[] = [];\r\n        let nodeLinks: NodeLinks[] = [];\r\n        let potentialThisCollisions: Node[] = [];\r\n\r\n        let diagnostics = createDiagnosticCollection();\r\n\r\n        let primitiveTypeInfo: Map<{ type: Type; flags: TypeFlags }> = {\r\n            \"string\": {\r\n                type: stringType,\r\n                flags: TypeFlags.StringLike\r\n            },\r\n            \"number\": {\r\n                type: numberType,\r\n                flags: TypeFlags.NumberLike\r\n            },\r\n            \"boolean\": {\r\n                type: booleanType,\r\n                flags: TypeFlags.Boolean\r\n            },\r\n            \"symbol\": {\r\n                type: esSymbolType,\r\n                flags: TypeFlags.ESSymbol\r\n            }\r\n        };\r\n\r\n        function getEmitResolver(sourceFile?: SourceFile) {\r\n            // Ensure we have all the type information in place for this file so that all the\r\n            // emitter questions of this resolver will return the right information.\r\n            getDiagnostics(sourceFile);\r\n            return emitResolver;\r\n        }\r\n\r\n        function error(location: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): void {\r\n            let diagnostic = location\r\n                ? createDiagnosticForNode(location, message, arg0, arg1, arg2)\r\n                : createCompilerDiagnostic(message, arg0, arg1, arg2);\r\n            diagnostics.add(diagnostic);\r\n        }\r\n\r\n        function createSymbol(flags: SymbolFlags, name: string): Symbol {\r\n            return new Symbol(flags, name);\r\n        }\r\n\r\n        function getExcludedSymbolFlags(flags: SymbolFlags): SymbolFlags {\r\n            let result: SymbolFlags = 0;\r\n            if (flags & SymbolFlags.BlockScopedVariable) result |= SymbolFlags.BlockScopedVariableExcludes;\r\n            if (flags & SymbolFlags.FunctionScopedVariable) result |= SymbolFlags.FunctionScopedVariableExcludes;\r\n            if (flags & SymbolFlags.Property) result |= SymbolFlags.PropertyExcludes;\r\n            if (flags & SymbolFlags.EnumMember) result |= SymbolFlags.EnumMemberExcludes;\r\n            if (flags & SymbolFlags.Function) result |= SymbolFlags.FunctionExcludes;\r\n            if (flags & SymbolFlags.Class) result |= SymbolFlags.ClassExcludes;\r\n            if (flags & SymbolFlags.Interface) result |= SymbolFlags.InterfaceExcludes;\r\n            if (flags & SymbolFlags.RegularEnum) result |= SymbolFlags.RegularEnumExcludes;\r\n            if (flags & SymbolFlags.ConstEnum) result |= SymbolFlags.ConstEnumExcludes;\r\n            if (flags & SymbolFlags.ValueModule) result |= SymbolFlags.ValueModuleExcludes;\r\n            if (flags & SymbolFlags.Method) result |= SymbolFlags.MethodExcludes;\r\n            if (flags & SymbolFlags.GetAccessor) result |= SymbolFlags.GetAccessorExcludes;\r\n            if (flags & SymbolFlags.SetAccessor) result |= SymbolFlags.SetAccessorExcludes;\r\n            if (flags & SymbolFlags.TypeParameter) result |= SymbolFlags.TypeParameterExcludes;\r\n            if (flags & SymbolFlags.TypeAlias) result |= SymbolFlags.TypeAliasExcludes;\r\n            if (flags & SymbolFlags.Alias) result |= SymbolFlags.AliasExcludes;\r\n            return result;\r\n        }\r\n\r\n        function recordMergedSymbol(target: Symbol, source: Symbol) {\r\n            if (!source.mergeId) source.mergeId = nextMergeId++;\r\n            mergedSymbols[source.mergeId] = target;\r\n        }\r\n\r\n        function cloneSymbol(symbol: Symbol): Symbol {\r\n            let result = createSymbol(symbol.flags | SymbolFlags.Merged, symbol.name);\r\n            result.declarations = symbol.declarations.slice(0);\r\n            result.parent = symbol.parent;\r\n            if (symbol.valueDeclaration) result.valueDeclaration = symbol.valueDeclaration;\r\n            if (symbol.constEnumOnlyModule) result.constEnumOnlyModule = true;\r\n            if (symbol.members) result.members = cloneSymbolTable(symbol.members);\r\n            if (symbol.exports) result.exports = cloneSymbolTable(symbol.exports);\r\n            recordMergedSymbol(result, symbol);\r\n            return result;\r\n        }\r\n\r\n        function mergeSymbol(target: Symbol, source: Symbol) {\r\n            if (!(target.flags & getExcludedSymbolFlags(source.flags))) {\r\n                if (source.flags & SymbolFlags.ValueModule && target.flags & SymbolFlags.ValueModule && target.constEnumOnlyModule && !source.constEnumOnlyModule) {\r\n                    // reset flag when merging instantiated module into value module that has only const enums\r\n                    target.constEnumOnlyModule = false;\r\n                }\r\n                target.flags |= source.flags;\r\n                if (!target.valueDeclaration && source.valueDeclaration) target.valueDeclaration = source.valueDeclaration;\r\n                forEach(source.declarations, node => {\r\n                    target.declarations.push(node);\r\n                });\r\n                if (source.members) {\r\n                    if (!target.members) target.members = {};\r\n                    mergeSymbolTable(target.members, source.members);\r\n                }\r\n                if (source.exports) {\r\n                    if (!target.exports) target.exports = {};\r\n                    mergeSymbolTable(target.exports, source.exports);\r\n                }\r\n                recordMergedSymbol(target, source);\r\n            }\r\n            else {\r\n                let message = target.flags & SymbolFlags.BlockScopedVariable || source.flags & SymbolFlags.BlockScopedVariable\r\n                    ? Diagnostics.Cannot_redeclare_block_scoped_variable_0 : Diagnostics.Duplicate_identifier_0;\r\n                forEach(source.declarations, node => {\r\n                    error(node.name ? node.name : node, message, symbolToString(source));\r\n                });\r\n                forEach(target.declarations, node => {\r\n                    error(node.name ? node.name : node, message, symbolToString(source));\r\n                });\r\n            }\r\n        }\r\n\r\n        function cloneSymbolTable(symbolTable: SymbolTable): SymbolTable {\r\n            let result: SymbolTable = {};\r\n            for (let id in symbolTable) {\r\n                if (hasProperty(symbolTable, id)) {\r\n                    result[id] = symbolTable[id];\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function mergeSymbolTable(target: SymbolTable, source: SymbolTable) {\r\n            for (let id in source) {\r\n                if (hasProperty(source, id)) {\r\n                    if (!hasProperty(target, id)) {\r\n                        target[id] = source[id];\r\n                    }\r\n                    else {\r\n                        let symbol = target[id];\r\n                        if (!(symbol.flags & SymbolFlags.Merged)) {\r\n                            target[id] = symbol = cloneSymbol(symbol);\r\n                        }\r\n                        mergeSymbol(symbol, source[id]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getSymbolLinks(symbol: Symbol): SymbolLinks {\r\n            if (symbol.flags & SymbolFlags.Transient) return <TransientSymbol>symbol;\r\n            var id = getSymbolId(symbol);\r\n            return symbolLinks[id] || (symbolLinks[id] = {});\r\n        }\r\n\r\n        function getNodeLinks(node: Node): NodeLinks {\r\n            let nodeId = getNodeId(node);\r\n            return nodeLinks[nodeId] || (nodeLinks[nodeId] = {});\r\n        }\r\n\r\n        function getSourceFile(node: Node): SourceFile {\r\n            return <SourceFile>getAncestor(node, SyntaxKind.SourceFile);\r\n        }\r\n\r\n        function isGlobalSourceFile(node: Node) {\r\n            return node.kind === SyntaxKind.SourceFile && !isExternalModule(<SourceFile>node);\r\n        }\r\n\r\n        function getSymbol(symbols: SymbolTable, name: string, meaning: SymbolFlags): Symbol {\r\n            if (meaning && hasProperty(symbols, name)) {\r\n                let symbol = symbols[name];\r\n                Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0, \"Should never get an instantiated symbol here.\");\r\n                if (symbol.flags & meaning) {\r\n                    return symbol;\r\n                }\r\n                if (symbol.flags & SymbolFlags.Alias) {\r\n                    let target = resolveAlias(symbol);\r\n                    // Unknown symbol means an error occurred in alias resolution, treat it as positive answer to avoid cascading errors\r\n                    if (target === unknownSymbol || target.flags & meaning) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n            }\r\n            // return undefined if we can't find a symbol.\r\n        }\r\n\r\n        /** Returns true if node1 is defined before node 2**/\r\n        function isDefinedBefore(node1: Node, node2: Node): boolean {\r\n            let file1 = getSourceFileOfNode(node1);\r\n            let file2 = getSourceFileOfNode(node2);\r\n            if (file1 === file2) {\r\n                return node1.pos <= node2.pos;\r\n            }\r\n\r\n            if (!compilerOptions.out) {\r\n                return true;\r\n            }\r\n\r\n            let sourceFiles = host.getSourceFiles();\r\n            return sourceFiles.indexOf(file1) <= sourceFiles.indexOf(file2);\r\n        }\r\n\r\n        // Resolve a given name for a given meaning at a given location. An error is reported if the name was not found and\r\n        // the nameNotFoundMessage argument is not undefined. Returns the resolved symbol, or undefined if no symbol with\r\n        // the given name can be found.\r\n        function resolveName(location: Node, name: string, meaning: SymbolFlags, nameNotFoundMessage: DiagnosticMessage, nameArg: string | Identifier): Symbol {\r\n            let result: Symbol;\r\n            let lastLocation: Node;\r\n            let propertyWithInvalidInitializer: Node;\r\n            let errorLocation = location;\r\n            let grandparent: Node;\r\n\r\n            loop: while (location) {\r\n                // Locals of a source file are not in scope (because they get merged into the global symbol table)\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    if (result = getSymbol(location.locals, name, meaning)) {\r\n                        // Type parameters of a function are in scope in the entire function declaration, including the parameter\r\n                        // list and return type. However, local types are only in scope in the function body.\r\n                        if (!(meaning & SymbolFlags.Type) ||\r\n                            !(result.flags & (SymbolFlags.Type & ~SymbolFlags.TypeParameter)) ||\r\n                            !isFunctionLike(location) ||\r\n                            lastLocation === (<FunctionLikeDeclaration>location).body) {\r\n                            break loop;\r\n                        }\r\n                        result = undefined;\r\n                    }\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) break;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & SymbolFlags.ModuleMember)) {\r\n                            if (result.flags & meaning || !(result.flags & SymbolFlags.Alias && getDeclarationOfAliasSymbol(result).kind === SyntaxKind.ExportSpecifier)) {\r\n                                break loop;\r\n                            }\r\n                            result = undefined;\r\n                        }\r\n                        else if (location.kind === SyntaxKind.SourceFile ||\r\n                            (location.kind === SyntaxKind.ModuleDeclaration && (<ModuleDeclaration>location).name.kind === SyntaxKind.StringLiteral)) {\r\n                            result = getSymbolOfNode(location).exports[\"default\"];\r\n                            let localSymbol = getLocalSymbolForExportDefault(result);\r\n                            if (result && localSymbol && (result.flags & meaning) && localSymbol.name === name) {\r\n                                break loop;\r\n                            }\r\n                            result = undefined;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & SymbolFlags.EnumMember)) {\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.PropertySignature:\r\n                        // TypeScript 1.0 spec (April 2014): 8.4.1\r\n                        // Initializer expressions for instance member variables are evaluated in the scope\r\n                        // of the class constructor body but are not permitted to reference parameters or\r\n                        // local variables of the constructor. This effectively means that entities from outer scopes\r\n                        // by the same name as a constructor parameter or local variable are inaccessible\r\n                        // in initializer expressions for instance member variables.\r\n                        if (location.parent.kind === SyntaxKind.ClassDeclaration && !(location.flags & NodeFlags.Static)) {\r\n                            let ctor = findConstructorDeclaration(<ClassDeclaration>location.parent);\r\n                            if (ctor && ctor.locals) {\r\n                                if (getSymbol(ctor.locals, name, meaning & SymbolFlags.Value)) {\r\n                                    // Remember the property node, it will be used later to report appropriate error\r\n                                    propertyWithInvalidInitializer = location;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).members, name, meaning & SymbolFlags.Type)) {\r\n                            if (lastLocation && lastLocation.flags & NodeFlags.Static) {\r\n                                // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                                // The scope of a type parameter extends over the entire declaration with which the type\r\n                                // parameter list is associated, with the exception of static member declarations in classes.\r\n                                error(errorLocation, Diagnostics.Static_members_cannot_reference_class_type_parameters);\r\n                                return undefined;\r\n                            }\r\n                            break loop;\r\n                        }\r\n                        break;\r\n\r\n                    // It is not legal to reference a class's own type parameters from a computed property name that\r\n                    // belongs to the class. For example:\r\n                    //\r\n                    //   function foo<T>() { return '' }\r\n                    //   class C<T> { // <-- Class's own type parameter T\r\n                    //       [foo<T>()]() { } // <-- Reference to T from class's own computed property\r\n                    //   }\r\n                    //\r\n                    case SyntaxKind.ComputedPropertyName:\r\n                        grandparent = location.parent.parent;\r\n                        if (grandparent.kind === SyntaxKind.ClassDeclaration || grandparent.kind === SyntaxKind.InterfaceDeclaration) {\r\n                            // A reference to this grandparent's type parameters would be an error\r\n                            if (result = getSymbol(getSymbolOfNode(grandparent).members, name, meaning & SymbolFlags.Type)) {\r\n                                error(errorLocation, Diagnostics.A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type);\r\n                                return undefined;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.MethodDeclaration:\r\n                    case SyntaxKind.MethodSignature:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.ArrowFunction:\r\n                        if (meaning & SymbolFlags.Variable && name === \"arguments\") {\r\n                            result = argumentsSymbol;\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.FunctionExpression:\r\n                        if (meaning & SymbolFlags.Variable && name === \"arguments\") {\r\n                            result = argumentsSymbol;\r\n                            break loop;\r\n                        }\r\n\r\n                        if (meaning & SymbolFlags.Function) {\r\n                            let functionName = (<FunctionExpression>location).name;\r\n                            if (functionName && name === functionName.text) {\r\n                                result = location.symbol;\r\n                                break loop;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.ClassExpression:\r\n                        if (meaning & SymbolFlags.Class) {\r\n                            let className = (<ClassExpression>location).name;\r\n                            if (className && name === className.text) {\r\n                                result = location.symbol;\r\n                                break loop;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.Decorator:\r\n                        // Decorators are resolved at the class declaration. Resolving at the parameter \r\n                        // or member would result in looking up locals in the method.\r\n                        //\r\n                        //   function y() {}\r\n                        //   class C {\r\n                        //       method(@y x, y) {} // <-- decorator y should be resolved at the class declaration, not the parameter.\r\n                        //   }\r\n                        //\r\n                        if (location.parent && location.parent.kind === SyntaxKind.Parameter) {\r\n                            location = location.parent;\r\n                        }\r\n                        //\r\n                        //   function y() {}\r\n                        //   class C {\r\n                        //       @y method(x, y) {} // <-- decorator y should be resolved at the class declaration, not the method.\r\n                        //   }\r\n                        //\r\n                        if (location.parent && isClassElement(location.parent)) {\r\n                            location = location.parent;\r\n                        }\r\n                        break;\r\n                }\r\n                lastLocation = location;\r\n                location = location.parent;\r\n            }\r\n\r\n            if (!result) {\r\n                result = getSymbol(globals, name, meaning);\r\n            }\r\n\r\n            if (!result) {\r\n                if (nameNotFoundMessage) {\r\n                    error(errorLocation, nameNotFoundMessage, typeof nameArg === \"string\" ? nameArg : declarationNameToString(nameArg));\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            // Perform extra checks only if error reporting was requested\r\n            if (nameNotFoundMessage) {\r\n                if (propertyWithInvalidInitializer) {\r\n                    // We have a match, but the reference occurred within a property initializer and the identifier also binds\r\n                    // to a local variable in the constructor where the code will be emitted.\r\n                    let propertyName = (<PropertyDeclaration>propertyWithInvalidInitializer).name;\r\n                    error(errorLocation, Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor,\r\n                        declarationNameToString(propertyName), typeof nameArg === \"string\" ? nameArg : declarationNameToString(nameArg));\r\n                    return undefined;\r\n                }\r\n                if (result.flags & SymbolFlags.BlockScopedVariable) {\r\n                    checkResolvedBlockScopedVariable(result, errorLocation);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function checkResolvedBlockScopedVariable(result: Symbol, errorLocation: Node): void {\r\n            Debug.assert((result.flags & SymbolFlags.BlockScopedVariable) !== 0)\r\n            // Block-scoped variables cannot be used before their definition\r\n            let declaration = forEach(result.declarations, d => isBlockOrCatchScoped(d) ? d : undefined);\r\n\r\n            Debug.assert(declaration !== undefined, \"Block-scoped variable declaration is undefined\");\r\n\r\n            // first check if usage is lexically located after the declaration\r\n            let isUsedBeforeDeclaration = !isDefinedBefore(declaration, errorLocation);\r\n            if (!isUsedBeforeDeclaration) {\r\n                // lexical check succeeded however code still can be illegal.\r\n                // - block scoped variables cannot be used in its initializers\r\n                //   let x = x; // illegal but usage is lexically after definition\r\n                // - in ForIn/ForOf statements variable cannot be contained in expression part\r\n                //   for (let x in x)\r\n                //   for (let x of x)\r\n\r\n                // climb up to the variable declaration skipping binding patterns\r\n                let variableDeclaration = <VariableDeclaration>getAncestor(declaration, SyntaxKind.VariableDeclaration);\r\n                let container = getEnclosingBlockScopeContainer(variableDeclaration);\r\n\r\n                if (variableDeclaration.parent.parent.kind === SyntaxKind.VariableStatement ||\r\n                    variableDeclaration.parent.parent.kind === SyntaxKind.ForStatement) {\r\n                    // variable statement/for statement case,\r\n                    // use site should not be inside variable declaration (initializer of declaration or binding element)\r\n                    isUsedBeforeDeclaration = isSameScopeDescendentOf(errorLocation, variableDeclaration, container);\r\n                }\r\n                else if (variableDeclaration.parent.parent.kind === SyntaxKind.ForOfStatement ||\r\n                    variableDeclaration.parent.parent.kind === SyntaxKind.ForInStatement) {\r\n                    // ForIn/ForOf case - use site should not be used in expression part\r\n                    let expression = (<ForInStatement | ForOfStatement>variableDeclaration.parent.parent).expression;\r\n                    isUsedBeforeDeclaration = isSameScopeDescendentOf(errorLocation, expression, container);\r\n                }\r\n            }\r\n            if (isUsedBeforeDeclaration) {\r\n                error(errorLocation, Diagnostics.Block_scoped_variable_0_used_before_its_declaration, declarationNameToString(declaration.name));\r\n            }\r\n        }\r\n\r\n        /* Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.\r\n         * If at any point current node is equal to 'parent' node - return true.\r\n         * Return false if 'stopAt' node is reached or isFunctionLike(current) === true.\r\n         */\r\n        function isSameScopeDescendentOf(initial: Node, parent: Node, stopAt: Node): boolean {\r\n            if (!parent) {\r\n                return false;\r\n            }\r\n            for (let current = initial; current && current !== stopAt && !isFunctionLike(current); current = current.parent) {\r\n                if (current === parent) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getAnyImportSyntax(node: Node): AnyImportSyntax {\r\n            if (isAliasSymbolDeclaration(node)) {\r\n                if (node.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n                    return <ImportEqualsDeclaration>node;\r\n                }\r\n\r\n                while (node && node.kind !== SyntaxKind.ImportDeclaration) {\r\n                    node = node.parent;\r\n                }\r\n                return <ImportDeclaration>node;\r\n            }\r\n        }\r\n\r\n        function getDeclarationOfAliasSymbol(symbol: Symbol): Declaration {\r\n            return forEach(symbol.declarations, d => isAliasSymbolDeclaration(d) ? d : undefined);\r\n        }\r\n\r\n        function getTargetOfImportEqualsDeclaration(node: ImportEqualsDeclaration): Symbol {\r\n            if (node.moduleReference.kind === SyntaxKind.ExternalModuleReference) {\r\n                return resolveExternalModuleSymbol(resolveExternalModuleName(node, getExternalModuleImportEqualsDeclarationExpression(node)));\r\n            }\r\n            return getSymbolOfPartOfRightHandSideOfImportEquals(<EntityName>node.moduleReference, node);\r\n        }\r\n\r\n        function getTargetOfImportClause(node: ImportClause): Symbol {\r\n            let moduleSymbol = resolveExternalModuleName(node, (<ImportDeclaration>node.parent).moduleSpecifier);\r\n            if (moduleSymbol) {\r\n                let exportDefaultSymbol = resolveSymbol(moduleSymbol.exports[\"default\"]);\r\n                if (!exportDefaultSymbol) {\r\n                    error(node.name, Diagnostics.Module_0_has_no_default_export, symbolToString(moduleSymbol));\r\n                }\r\n                return exportDefaultSymbol;\r\n            }\r\n        }\r\n\r\n        function getTargetOfNamespaceImport(node: NamespaceImport): Symbol {\r\n            var moduleSpecifier = (<ImportDeclaration>node.parent.parent).moduleSpecifier;\r\n            return resolveESModuleSymbol(resolveExternalModuleName(node, moduleSpecifier), moduleSpecifier);\r\n        }\r\n\r\n        function getMemberOfModuleVariable(moduleSymbol: Symbol, name: string): Symbol {\r\n            if (moduleSymbol.flags & SymbolFlags.Variable) {\r\n                let typeAnnotation = (<VariableDeclaration>moduleSymbol.valueDeclaration).type;\r\n                if (typeAnnotation) {\r\n                    return getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // This function creates a synthetic symbol that combines the value side of one symbol with the\r\n        // type/namespace side of another symbol. Consider this example:\r\n        //\r\n        //   declare module graphics {\r\n        //       interface Point {\r\n        //           x: number;\r\n        //           y: number;\r\n        //       }\r\n        //   }\r\n        //   declare var graphics: {\r\n        //       Point: new (x: number, y: number) => graphics.Point;\r\n        //   }\r\n        //   declare module \"graphics\" {\r\n        //       export = graphics;\r\n        //   }\r\n        //\r\n        // An 'import { Point } from \"graphics\"' needs to create a symbol that combines the value side 'Point'\r\n        // property with the type/namespace side interface 'Point'.\r\n        function combineValueAndTypeSymbols(valueSymbol: Symbol, typeSymbol: Symbol): Symbol {\r\n            if (valueSymbol.flags & (SymbolFlags.Type | SymbolFlags.Namespace)) {\r\n                return valueSymbol;\r\n            }\r\n            let result = createSymbol(valueSymbol.flags | typeSymbol.flags, valueSymbol.name);\r\n            result.declarations = concatenate(valueSymbol.declarations, typeSymbol.declarations);\r\n            result.parent = valueSymbol.parent || typeSymbol.parent;\r\n            if (valueSymbol.valueDeclaration) result.valueDeclaration = valueSymbol.valueDeclaration;\r\n            if (typeSymbol.members) result.members = typeSymbol.members;\r\n            if (valueSymbol.exports) result.exports = valueSymbol.exports;\r\n            return result;\r\n        }\r\n\r\n        function getExportOfModule(symbol: Symbol, name: string): Symbol {\r\n            if (symbol.flags & SymbolFlags.Module) {\r\n                let exports = getExportsOfSymbol(symbol);\r\n                if (hasProperty(exports, name)) {\r\n                    return resolveSymbol(exports[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getPropertyOfVariable(symbol: Symbol, name: string): Symbol {\r\n            if (symbol.flags & SymbolFlags.Variable) {\r\n                var typeAnnotation = (<VariableDeclaration>symbol.valueDeclaration).type;\r\n                if (typeAnnotation) {\r\n                    return resolveSymbol(getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name));\r\n                }\r\n            }\r\n        }\r\n\r\n        function getExternalModuleMember(node: ImportDeclaration | ExportDeclaration, specifier: ImportOrExportSpecifier): Symbol {\r\n            let moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);\r\n            let targetSymbol = resolveESModuleSymbol(moduleSymbol, node.moduleSpecifier);\r\n            if (targetSymbol) {\r\n                let name = specifier.propertyName || specifier.name;\r\n                if (name.text) {\r\n                    let symbolFromModule = getExportOfModule(targetSymbol, name.text);\r\n                    let symbolFromVariable = getPropertyOfVariable(targetSymbol, name.text);\r\n                    let symbol = symbolFromModule && symbolFromVariable ?\r\n                        combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule) :\r\n                        symbolFromModule || symbolFromVariable;\r\n                    if (!symbol) {\r\n                        error(name, Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(moduleSymbol), declarationNameToString(name));\r\n                    }\r\n                    return symbol;\r\n                }\r\n            }\r\n        }\r\n\r\n        function getTargetOfImportSpecifier(node: ImportSpecifier): Symbol {\r\n            return getExternalModuleMember(<ImportDeclaration>node.parent.parent.parent, node);\r\n        }\r\n\r\n        function getTargetOfExportSpecifier(node: ExportSpecifier): Symbol {\r\n            return (<ExportDeclaration>node.parent.parent).moduleSpecifier ?\r\n                getExternalModuleMember(<ExportDeclaration>node.parent.parent, node) :\r\n                resolveEntityName(node.propertyName || node.name, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace);\r\n        }\r\n\r\n        function getTargetOfExportAssignment(node: ExportAssignment): Symbol {\r\n            return resolveEntityName(<Identifier>node.expression, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace);\r\n        }\r\n\r\n        function getTargetOfAliasDeclaration(node: Declaration): Symbol {\r\n            switch (node.kind) {\r\n                case SyntaxKind.ImportEqualsDeclaration:\r\n                    return getTargetOfImportEqualsDeclaration(<ImportEqualsDeclaration>node);\r\n                case SyntaxKind.ImportClause:\r\n                    return getTargetOfImportClause(<ImportClause>node);\r\n                case SyntaxKind.NamespaceImport:\r\n                    return getTargetOfNamespaceImport(<NamespaceImport>node);\r\n                case SyntaxKind.ImportSpecifier:\r\n                    return getTargetOfImportSpecifier(<ImportSpecifier>node);\r\n                case SyntaxKind.ExportSpecifier:\r\n                    return getTargetOfExportSpecifier(<ExportSpecifier>node);\r\n                case SyntaxKind.ExportAssignment:\r\n                    return getTargetOfExportAssignment(<ExportAssignment>node);\r\n            }\r\n        }\r\n\r\n        function resolveSymbol(symbol: Symbol): Symbol {\r\n            return symbol && symbol.flags & SymbolFlags.Alias && !(symbol.flags & (SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace)) ? resolveAlias(symbol) : symbol;\r\n        }\r\n\r\n        function resolveAlias(symbol: Symbol): Symbol {\r\n            Debug.assert((symbol.flags & SymbolFlags.Alias) !== 0, \"Should only get Alias here.\");\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.target) {\r\n                links.target = resolvingSymbol;\r\n                let node = getDeclarationOfAliasSymbol(symbol);\r\n                let target = getTargetOfAliasDeclaration(node);\r\n                if (links.target === resolvingSymbol) {\r\n                    links.target = target || unknownSymbol;\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));\r\n                }\r\n            }\r\n            else if (links.target === resolvingSymbol) {\r\n                links.target = unknownSymbol;\r\n            }\r\n            return links.target;\r\n        }\r\n\r\n        function markExportAsReferenced(node: ImportEqualsDeclaration | ExportAssignment | ExportSpecifier) {\r\n            let symbol = getSymbolOfNode(node);\r\n            let target = resolveAlias(symbol);\r\n            if (target) {\r\n                let markAlias =\r\n                    (target === unknownSymbol && compilerOptions.isolatedModules) ||\r\n                    (target !== unknownSymbol && (target.flags & SymbolFlags.Value) && !isConstEnumOrConstEnumOnlyModule(target));\r\n\r\n                if (markAlias) {\r\n                    markAliasSymbolAsReferenced(symbol);\r\n                }\r\n            }\r\n        }\r\n\r\n        // When an alias symbol is referenced, we need to mark the entity it references as referenced and in turn repeat that until\r\n        // we reach a non-alias or an exported entity (which is always considered referenced). We do this by checking the target of\r\n        // the alias as an expression (which recursively takes us back here if the target references another alias).\r\n        function markAliasSymbolAsReferenced(symbol: Symbol) {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.referenced) {\r\n                links.referenced = true;\r\n                let node = getDeclarationOfAliasSymbol(symbol);\r\n                if (node.kind === SyntaxKind.ExportAssignment) {\r\n                    // export default <symbol>\r\n                    checkExpressionCached((<ExportAssignment>node).expression);\r\n                }\r\n                else if (node.kind === SyntaxKind.ExportSpecifier) {\r\n                    // export { <symbol> } or export { <symbol> as foo }\r\n                    checkExpressionCached((<ExportSpecifier>node).propertyName || (<ExportSpecifier>node).name);\r\n                }\r\n                else if (isInternalModuleImportEqualsDeclaration(node)) {\r\n                    // import foo = <symbol>\r\n                    checkExpressionCached(<Expression>(<ImportEqualsDeclaration>node).moduleReference);\r\n                }\r\n            }\r\n        }\r\n\r\n        // This function is only for imports with entity names\r\n        function getSymbolOfPartOfRightHandSideOfImportEquals(entityName: EntityName, importDeclaration?: ImportEqualsDeclaration): Symbol {\r\n            if (!importDeclaration) {\r\n                importDeclaration = <ImportEqualsDeclaration>getAncestor(entityName, SyntaxKind.ImportEqualsDeclaration);\r\n                Debug.assert(importDeclaration !== undefined);\r\n            }\r\n            // There are three things we might try to look for. In the following examples,\r\n            // the search term is enclosed in |...|:\r\n            //\r\n            //     import a = |b|; // Namespace\r\n            //     import a = |b.c|; // Value, type, namespace\r\n            //     import a = |b.c|.d; // Namespace\r\n            if (entityName.kind === SyntaxKind.Identifier && isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\r\n                entityName = <QualifiedName>entityName.parent;\r\n            }\r\n            // Check for case 1 and 3 in the above example\r\n            if (entityName.kind === SyntaxKind.Identifier || entityName.parent.kind === SyntaxKind.QualifiedName) {\r\n                return resolveEntityName(entityName, SymbolFlags.Namespace);\r\n            }\r\n            else {\r\n                // Case 2 in above example\r\n                // entityName.kind could be a QualifiedName or a Missing identifier\r\n                Debug.assert(entityName.parent.kind === SyntaxKind.ImportEqualsDeclaration);\r\n                return resolveEntityName(entityName, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace);\r\n            }\r\n        }\r\n\r\n        function getFullyQualifiedName(symbol: Symbol): string {\r\n            return symbol.parent ? getFullyQualifiedName(symbol.parent) + \".\" + symbolToString(symbol) : symbolToString(symbol);\r\n        }\r\n\r\n        // Resolves a qualified name and any involved aliases\r\n        function resolveEntityName(name: EntityName | Expression, meaning: SymbolFlags): Symbol {\r\n            if (nodeIsMissing(name)) {\r\n                return undefined;\r\n            }\r\n\r\n            let symbol: Symbol;\r\n            if (name.kind === SyntaxKind.Identifier) {\r\n                let message = meaning === SymbolFlags.Namespace ? Diagnostics.Cannot_find_namespace_0 : Diagnostics.Cannot_find_name_0;\r\n\r\n                symbol = resolveName(name, (<Identifier>name).text, meaning, message, <Identifier>name);\r\n                if (!symbol) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            else if (name.kind === SyntaxKind.QualifiedName || name.kind === SyntaxKind.PropertyAccessExpression) {\r\n                let left = name.kind === SyntaxKind.QualifiedName ? (<QualifiedName>name).left : (<PropertyAccessExpression>name).expression;\r\n                let right = name.kind === SyntaxKind.QualifiedName ? (<QualifiedName>name).right : (<PropertyAccessExpression>name).name;\r\n\r\n                let namespace = resolveEntityName(left, SymbolFlags.Namespace);\r\n                if (!namespace || namespace === unknownSymbol || nodeIsMissing(right)) {\r\n                    return undefined;\r\n                }\r\n                symbol = getSymbol(getExportsOfSymbol(namespace), right.text, meaning);\r\n                if (!symbol) {\r\n                    error(right, Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace), declarationNameToString(right));\r\n                    return undefined;\r\n                }\r\n            }\r\n            else {\r\n                Debug.fail(\"Unknown entity name kind.\");\r\n            }\r\n            Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0, \"Should never get an instantiated symbol here.\");\r\n            return symbol.flags & meaning ? symbol : resolveAlias(symbol);\r\n        }\r\n\r\n        function isExternalModuleNameRelative(moduleName: string): boolean {\r\n            // TypeScript 1.0 spec (April 2014): 11.2.1\r\n            // An external module name is \"relative\" if the first term is \".\" or \"..\".\r\n            return moduleName.substr(0, 2) === \"./\" || moduleName.substr(0, 3) === \"../\" || moduleName.substr(0, 2) === \".\\\\\" || moduleName.substr(0, 3) === \"..\\\\\";\r\n        }\r\n\r\n        function resolveExternalModuleName(location: Node, moduleReferenceExpression: Expression): Symbol {\r\n            if (moduleReferenceExpression.kind !== SyntaxKind.StringLiteral) {\r\n                return;\r\n            }\r\n\r\n            let moduleReferenceLiteral = <LiteralExpression>moduleReferenceExpression;\r\n            let searchPath = getDirectoryPath(getSourceFile(location).fileName);\r\n\r\n            // Module names are escaped in our symbol table.  However, string literal values aren't.\r\n            // Escape the name in the \"require(...)\" clause to ensure we find the right symbol.\r\n            let moduleName = escapeIdentifier(moduleReferenceLiteral.text);\r\n\r\n            if (!moduleName) return;\r\n            let isRelative = isExternalModuleNameRelative(moduleName);\r\n            if (!isRelative) {\r\n                let symbol = getSymbol(globals, '\"' + moduleName + '\"', SymbolFlags.ValueModule);\r\n                if (symbol) {\r\n                    return symbol;\r\n                }\r\n            }\r\n            let fileName: string;\r\n            let sourceFile: SourceFile;\r\n            while (true) {\r\n                fileName = normalizePath(combinePaths(searchPath, moduleName));\r\n                sourceFile = forEach(supportedExtensions, extension => host.getSourceFile(fileName + extension));\r\n                if (sourceFile || isRelative) {\r\n                    break;\r\n                }\r\n                let parentPath = getDirectoryPath(searchPath);\r\n                if (parentPath === searchPath) {\r\n                    break;\r\n                }\r\n                searchPath = parentPath;\r\n            }\r\n            if (sourceFile) {\r\n                if (sourceFile.symbol) {\r\n                    return sourceFile.symbol;\r\n                }\r\n                error(moduleReferenceLiteral, Diagnostics.File_0_is_not_a_module, sourceFile.fileName);\r\n                return;\r\n            }\r\n            error(moduleReferenceLiteral, Diagnostics.Cannot_find_module_0, moduleName);\r\n        }\r\n\r\n        // An external module with an 'export =' declaration resolves to the target of the 'export =' declaration,\r\n        // and an external module with no 'export =' declaration resolves to the module itself.\r\n        function resolveExternalModuleSymbol(moduleSymbol: Symbol): Symbol {\r\n            return moduleSymbol && resolveSymbol(moduleSymbol.exports[\"export=\"]) || moduleSymbol;\r\n        }\r\n\r\n        // An external module with an 'export =' declaration may be referenced as an ES6 module provided the 'export ='\r\n        // references a symbol that is at least declared as a module or a variable. The target of the 'export =' may\r\n        // combine other declarations with the module or variable (e.g. a class/module, function/module, interface/variable).\r\n        function resolveESModuleSymbol(moduleSymbol: Symbol, moduleReferenceExpression: Expression): Symbol {\r\n            let symbol = resolveExternalModuleSymbol(moduleSymbol);\r\n            if (symbol && !(symbol.flags & (SymbolFlags.Module | SymbolFlags.Variable))) {\r\n                error(moduleReferenceExpression, Diagnostics.Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct, symbolToString(moduleSymbol));\r\n                symbol = undefined;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function getExportAssignmentSymbol(moduleSymbol: Symbol): Symbol {\r\n            return moduleSymbol.exports[\"export=\"];\r\n        }\r\n\r\n        function getExportsOfModuleAsArray(moduleSymbol: Symbol): Symbol[] {\r\n            return symbolsToArray(getExportsOfModule(moduleSymbol));\r\n        }\r\n\r\n        function getExportsOfSymbol(symbol: Symbol): SymbolTable {\r\n            return symbol.flags & SymbolFlags.Module ? getExportsOfModule(symbol) : symbol.exports || emptySymbols;\r\n        }\r\n\r\n        function getExportsOfModule(moduleSymbol: Symbol): SymbolTable {\r\n            let links = getSymbolLinks(moduleSymbol);\r\n            return links.resolvedExports || (links.resolvedExports = getExportsForModule(moduleSymbol));\r\n        }\r\n\r\n        function extendExportSymbols(target: SymbolTable, source: SymbolTable) {\r\n            for (let id in source) {\r\n                if (id !== \"default\" && !hasProperty(target, id)) {\r\n                    target[id] = source[id];\r\n                }\r\n            }\r\n        }\r\n\r\n        function getExportsForModule(moduleSymbol: Symbol): SymbolTable {\r\n            let result: SymbolTable;\r\n            let visitedSymbols: Symbol[] = [];\r\n            visit(moduleSymbol);\r\n            return result || moduleSymbol.exports;\r\n\r\n            // The ES6 spec permits export * declarations in a module to circularly reference the module itself. For example,\r\n            // module 'a' can 'export * from \"b\"' and 'b' can 'export * from \"a\"' without error.\r\n            function visit(symbol: Symbol) {\r\n                if (symbol && symbol.flags & SymbolFlags.HasExports && !contains(visitedSymbols, symbol)) {\r\n                    visitedSymbols.push(symbol);\r\n                    if (symbol !== moduleSymbol) {\r\n                        if (!result) {\r\n                            result = cloneSymbolTable(moduleSymbol.exports);\r\n                        }\r\n                        extendExportSymbols(result, symbol.exports);\r\n                    }\r\n                    // All export * declarations are collected in an __export symbol by the binder\r\n                    let exportStars = symbol.exports[\"__export\"];\r\n                    if (exportStars) {\r\n                        for (let node of exportStars.declarations) {\r\n                            visit(resolveExternalModuleName(node, (<ExportDeclaration>node).moduleSpecifier));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getMergedSymbol(symbol: Symbol): Symbol {\r\n            let merged: Symbol;\r\n            return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;\r\n        }\r\n\r\n        function getSymbolOfNode(node: Node): Symbol {\r\n            return getMergedSymbol(node.symbol);\r\n        }\r\n\r\n        function getParentOfSymbol(symbol: Symbol): Symbol {\r\n            return getMergedSymbol(symbol.parent);\r\n        }\r\n\r\n        function getExportSymbolOfValueSymbolIfExported(symbol: Symbol): Symbol {\r\n            return symbol && (symbol.flags & SymbolFlags.ExportValue) !== 0\r\n                ? getMergedSymbol(symbol.exportSymbol)\r\n                : symbol;\r\n        }\r\n\r\n        function symbolIsValue(symbol: Symbol): boolean {\r\n            // If it is an instantiated symbol, then it is a value if the symbol it is an\r\n            // instantiation of is a value.\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                return symbolIsValue(getSymbolLinks(symbol).target);\r\n            }\r\n\r\n            // If the symbol has the value flag, it is trivially a value.\r\n            if (symbol.flags & SymbolFlags.Value) {\r\n                return true;\r\n            }\r\n\r\n            // If it is an alias, then it is a value if the symbol it resolves to is a value.\r\n            if (symbol.flags & SymbolFlags.Alias) {\r\n                return (resolveAlias(symbol).flags & SymbolFlags.Value) !== 0;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function findConstructorDeclaration(node: ClassDeclaration): ConstructorDeclaration {\r\n            let members = node.members;\r\n            for (let member of members) {\r\n                if (member.kind === SyntaxKind.Constructor && nodeIsPresent((<ConstructorDeclaration>member).body)) {\r\n                    return <ConstructorDeclaration>member;\r\n                }\r\n            }\r\n        }\r\n\r\n        function createType(flags: TypeFlags): Type {\r\n            let result = new Type(checker, flags);\r\n            result.id = typeCount++;\r\n            return result;\r\n        }\r\n\r\n        function createIntrinsicType(kind: TypeFlags, intrinsicName: string): IntrinsicType {\r\n            let type = <IntrinsicType>createType(kind);\r\n            type.intrinsicName = intrinsicName;\r\n            return type;\r\n        }\r\n\r\n        function createObjectType(kind: TypeFlags, symbol?: Symbol): ObjectType {\r\n            let type = <ObjectType>createType(kind);\r\n            type.symbol = symbol;\r\n            return type;\r\n        }\r\n\r\n        // A reserved member name starts with two underscores, but the third character cannot be an underscore\r\n        // or the @ symbol. A third underscore indicates an escaped form of an identifer that started\r\n        // with at least two underscores. The @ character indicates that the name is denoted by a well known ES\r\n        // Symbol instance.\r\n        function isReservedMemberName(name: string) {\r\n            return name.charCodeAt(0) === CharacterCodes._ &&\r\n                name.charCodeAt(1) === CharacterCodes._ &&\r\n                name.charCodeAt(2) !== CharacterCodes._ &&\r\n                name.charCodeAt(2) !== CharacterCodes.at;\r\n        }\r\n\r\n        function getNamedMembers(members: SymbolTable): Symbol[] {\r\n            let result: Symbol[];\r\n            for (let id in members) {\r\n                if (hasProperty(members, id)) {\r\n                    if (!isReservedMemberName(id)) {\r\n                        if (!result) result = [];\r\n                        let symbol = members[id];\r\n                        if (symbolIsValue(symbol)) {\r\n                            result.push(symbol);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result || emptyArray;\r\n        }\r\n\r\n        function setObjectTypeMembers(type: ObjectType, members: SymbolTable, callSignatures: Signature[], constructSignatures: Signature[], stringIndexType: Type, numberIndexType: Type): ResolvedType {\r\n            (<ResolvedType>type).members = members;\r\n            (<ResolvedType>type).properties = getNamedMembers(members);\r\n            (<ResolvedType>type).callSignatures = callSignatures;\r\n            (<ResolvedType>type).constructSignatures = constructSignatures;\r\n            if (stringIndexType) (<ResolvedType>type).stringIndexType = stringIndexType;\r\n            if (numberIndexType) (<ResolvedType>type).numberIndexType = numberIndexType;\r\n            return <ResolvedType>type;\r\n        }\r\n\r\n        function createAnonymousType(symbol: Symbol, members: SymbolTable, callSignatures: Signature[], constructSignatures: Signature[], stringIndexType: Type, numberIndexType: Type): ResolvedType {\r\n            return setObjectTypeMembers(createObjectType(TypeFlags.Anonymous, symbol),\r\n                members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function forEachSymbolTableInScope<T>(enclosingDeclaration: Node, callback: (symbolTable: SymbolTable) => T): T {\r\n            let result: T;\r\n            for (let location = enclosingDeclaration; location; location = location.parent) {\r\n                // Locals of a source file are not in scope (because they get merged into the global symbol table)\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    if (result = callback(location.locals)) {\r\n                        return result;\r\n                    }\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) {\r\n                            break;\r\n                        }\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        if (result = callback(getSymbolOfNode(location).exports)) {\r\n                            return result;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (result = callback(getSymbolOfNode(location).members)) {\r\n                            return result;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return callback(globals);\r\n        }\r\n\r\n        function getQualifiedLeftMeaning(rightMeaning: SymbolFlags) {\r\n            // If we are looking in value space, the parent meaning is value, other wise it is namespace\r\n            return rightMeaning === SymbolFlags.Value ? SymbolFlags.Value : SymbolFlags.Namespace;\r\n        }\r\n\r\n        function getAccessibleSymbolChain(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags, useOnlyExternalAliasing: boolean): Symbol[] {\r\n            function getAccessibleSymbolChainFromSymbolTable(symbols: SymbolTable): Symbol[] {\r\n                function canQualifySymbol(symbolFromSymbolTable: Symbol, meaning: SymbolFlags) {\r\n                    // If the symbol is equivalent and doesn't need further qualification, this symbol is accessible\r\n                    if (!needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning)) {\r\n                        return true;\r\n                    }\r\n\r\n                    // If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too\r\n                    let accessibleParent = getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing);\r\n                    return !!accessibleParent;\r\n                }\r\n\r\n                function isAccessible(symbolFromSymbolTable: Symbol, resolvedAliasSymbol?: Symbol) {\r\n                    if (symbol === (resolvedAliasSymbol || symbolFromSymbolTable)) {\r\n                        // if the symbolFromSymbolTable is not external module (it could be if it was determined as ambient external module and would be in globals table)\r\n                        // and if symbolfrom symbolTable or alias resolution matches the symbol,\r\n                        // check the symbol can be qualified, it is only then this symbol is accessible\r\n                        return !forEach(symbolFromSymbolTable.declarations, hasExternalModuleSymbol) &&\r\n                            canQualifySymbol(symbolFromSymbolTable, meaning);\r\n                    }\r\n                }\r\n\r\n                // If symbol is directly available by its name in the symbol table\r\n                if (isAccessible(lookUp(symbols, symbol.name))) {\r\n                    return [symbol];\r\n                }\r\n\r\n                // Check if symbol is any of the alias\r\n                return forEachValue(symbols, symbolFromSymbolTable => {\r\n                    if (symbolFromSymbolTable.flags & SymbolFlags.Alias && symbolFromSymbolTable.name !== \"export=\") {\r\n                        if (!useOnlyExternalAliasing || // We can use any type of alias to get the name\r\n                            // Is this external alias, then use it to name\r\n                            ts.forEach(symbolFromSymbolTable.declarations, isExternalModuleImportEqualsDeclaration)) {\r\n\r\n                            let resolvedImportedSymbol = resolveAlias(symbolFromSymbolTable);\r\n                            if (isAccessible(symbolFromSymbolTable, resolveAlias(symbolFromSymbolTable))) {\r\n                                return [symbolFromSymbolTable];\r\n                            }\r\n\r\n                            // Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain\r\n                            // but only if the symbolFromSymbolTable can be qualified\r\n                            let accessibleSymbolsFromExports = resolvedImportedSymbol.exports ? getAccessibleSymbolChainFromSymbolTable(resolvedImportedSymbol.exports) : undefined;\r\n                            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {\r\n                                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (symbol) {\r\n                return forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);\r\n            }\r\n        }\r\n\r\n        function needsQualification(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags) {\r\n            let qualify = false;\r\n            forEachSymbolTableInScope(enclosingDeclaration, symbolTable => {\r\n                // If symbol of this name is not available in the symbol table we are ok\r\n                if (!hasProperty(symbolTable, symbol.name)) {\r\n                    // Continue to the next symbol table\r\n                    return false;\r\n                }\r\n                // If the symbol with this name is present it should refer to the symbol\r\n                let symbolFromSymbolTable = symbolTable[symbol.name];\r\n                if (symbolFromSymbolTable === symbol) {\r\n                    // No need to qualify\r\n                    return true;\r\n                }\r\n\r\n                // Qualify if the symbol from symbol table has same meaning as expected\r\n                symbolFromSymbolTable = (symbolFromSymbolTable.flags & SymbolFlags.Alias) ? resolveAlias(symbolFromSymbolTable) : symbolFromSymbolTable;\r\n                if (symbolFromSymbolTable.flags & meaning) {\r\n                    qualify = true;\r\n                    return true;\r\n                }\r\n\r\n                // Continue to the next symbol table\r\n                return false;\r\n            });\r\n\r\n            return qualify;\r\n        }\r\n\r\n        function isSymbolAccessible(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags): SymbolAccessiblityResult {\r\n            if (symbol && enclosingDeclaration && !(symbol.flags & SymbolFlags.TypeParameter)) {\r\n                let initialSymbol = symbol;\r\n                let meaningToLook = meaning;\r\n                while (symbol) {\r\n                    // Symbol is accessible if it by itself is accessible\r\n                    let accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook, /*useOnlyExternalAliasing*/ false);\r\n                    if (accessibleSymbolChain) {\r\n                        let hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0]);\r\n                        if (!hasAccessibleDeclarations) {\r\n                            return <SymbolAccessiblityResult>{\r\n                                accessibility: SymbolAccessibility.NotAccessible,\r\n                                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                                errorModuleName: symbol !== initialSymbol ? symbolToString(symbol, enclosingDeclaration, SymbolFlags.Namespace) : undefined,\r\n                            };\r\n                        }\r\n                        return hasAccessibleDeclarations;\r\n                    }\r\n\r\n                    // If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.\r\n                    // It could be a qualified symbol and hence verify the path\r\n                    // e.g.:\r\n                    // module m {\r\n                    //     export class c {\r\n                    //     }\r\n                    // }\r\n                    // let x: typeof m.c\r\n                    // In the above example when we start with checking if typeof m.c symbol is accessible,\r\n                    // we are going to see if c can be accessed in scope directly.\r\n                    // But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible\r\n                    // It is accessible if the parent m is accessible because then m.c can be accessed through qualification\r\n                    meaningToLook = getQualifiedLeftMeaning(meaning);\r\n                    symbol = getParentOfSymbol(symbol);\r\n                }\r\n\r\n                // This could be a symbol that is not exported in the external module\r\n                // or it could be a symbol from different external module that is not aliased and hence cannot be named\r\n                let symbolExternalModule = forEach(initialSymbol.declarations, getExternalModuleContainer);\r\n                if (symbolExternalModule) {\r\n                    let enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);\r\n                    if (symbolExternalModule !== enclosingExternalModule) {\r\n                        // name from different external module that is not visible\r\n                        return {\r\n                            accessibility: SymbolAccessibility.CannotBeNamed,\r\n                            errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                            errorModuleName: symbolToString(symbolExternalModule)\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // Just a local name that is not accessible\r\n                return {\r\n                    accessibility: SymbolAccessibility.NotAccessible,\r\n                    errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                };\r\n            }\r\n\r\n            return { accessibility: SymbolAccessibility.Accessible };\r\n\r\n            function getExternalModuleContainer(declaration: Node) {\r\n                for (; declaration; declaration = declaration.parent) {\r\n                    if (hasExternalModuleSymbol(declaration)) {\r\n                        return getSymbolOfNode(declaration);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function hasExternalModuleSymbol(declaration: Node) {\r\n            return (declaration.kind === SyntaxKind.ModuleDeclaration && (<ModuleDeclaration>declaration).name.kind === SyntaxKind.StringLiteral) ||\r\n                (declaration.kind === SyntaxKind.SourceFile && isExternalModule(<SourceFile>declaration));\r\n        }\r\n\r\n        function hasVisibleDeclarations(symbol: Symbol): SymbolVisibilityResult {\r\n            let aliasesToMakeVisible: AnyImportSyntax[];\r\n            if (forEach(symbol.declarations, declaration => !getIsDeclarationVisible(declaration))) {\r\n                return undefined;\r\n            }\r\n            return { accessibility: SymbolAccessibility.Accessible, aliasesToMakeVisible };\r\n\r\n            function getIsDeclarationVisible(declaration: Declaration) {\r\n                if (!isDeclarationVisible(declaration)) {\r\n                    // Mark the unexported alias as visible if its parent is visible\r\n                    // because these kind of aliases can be used to name types in declaration file\r\n\r\n                    var anyImportSyntax = getAnyImportSyntax(declaration);\r\n                    if (anyImportSyntax &&\r\n                        !(anyImportSyntax.flags & NodeFlags.Export) && // import clause without export\r\n                        isDeclarationVisible(<Declaration>anyImportSyntax.parent)) {\r\n                        getNodeLinks(declaration).isVisible = true;\r\n                        if (aliasesToMakeVisible) {\r\n                            if (!contains(aliasesToMakeVisible, anyImportSyntax)) {\r\n                                aliasesToMakeVisible.push(anyImportSyntax);\r\n                            }\r\n                        }\r\n                        else {\r\n                            aliasesToMakeVisible = [anyImportSyntax];\r\n                        }\r\n                        return true;\r\n                    }\r\n\r\n                    // Declaration is not visible\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function isEntityNameVisible(entityName: EntityName | Expression, enclosingDeclaration: Node): SymbolVisibilityResult {\r\n            // get symbol of the first identifier of the entityName\r\n            let meaning: SymbolFlags;\r\n            if (entityName.parent.kind === SyntaxKind.TypeQuery) {\r\n                // Typeof value\r\n                meaning = SymbolFlags.Value | SymbolFlags.ExportValue;\r\n            }\r\n            else if (entityName.kind === SyntaxKind.QualifiedName || entityName.kind === SyntaxKind.PropertyAccessExpression ||\r\n                entityName.parent.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n                // Left identifier from type reference or TypeAlias\r\n                // Entity name of the import declaration\r\n                meaning = SymbolFlags.Namespace;\r\n            }\r\n            else {\r\n                // Type Reference or TypeAlias entity = Identifier\r\n                meaning = SymbolFlags.Type;\r\n            }\r\n\r\n            let firstIdentifier = getFirstIdentifier(entityName);\r\n            let symbol = resolveName(enclosingDeclaration, (<Identifier>firstIdentifier).text, meaning, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined);\r\n\r\n            // Verify if the symbol is accessible\r\n            return (symbol && hasVisibleDeclarations(symbol)) || <SymbolVisibilityResult>{\r\n                accessibility: SymbolAccessibility.NotAccessible,\r\n                errorSymbolName: getTextOfNode(firstIdentifier),\r\n                errorNode: firstIdentifier\r\n            };\r\n        }\r\n\r\n        function writeKeyword(writer: SymbolWriter, kind: SyntaxKind) {\r\n            writer.writeKeyword(tokenToString(kind));\r\n        }\r\n\r\n        function writePunctuation(writer: SymbolWriter, kind: SyntaxKind) {\r\n            writer.writePunctuation(tokenToString(kind));\r\n        }\r\n\r\n        function writeSpace(writer: SymbolWriter) {\r\n            writer.writeSpace(\" \");\r\n        }\r\n\r\n        function symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags): string {\r\n            let writer = getSingleLineStringWriter();\r\n            getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning);\r\n            let result = writer.string();\r\n            releaseStringWriter(writer);\r\n\r\n            return result;\r\n        }\r\n\r\n        function signatureToString(signature: Signature, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string {\r\n            let writer = getSingleLineStringWriter();\r\n            getSymbolDisplayBuilder().buildSignatureDisplay(signature, writer, enclosingDeclaration, flags);\r\n            let result = writer.string();\r\n            releaseStringWriter(writer);\r\n\r\n            return result;\r\n        }\r\n\r\n        function typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string {\r\n            let writer = getSingleLineStringWriter();\r\n            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\r\n            let result = writer.string();\r\n            releaseStringWriter(writer);\r\n\r\n            let maxLength = compilerOptions.noErrorTruncation || flags & TypeFormatFlags.NoTruncation ? undefined : 100;\r\n            if (maxLength && result.length >= maxLength) {\r\n                result = result.substr(0, maxLength - \"...\".length) + \"...\";\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getTypeAliasForTypeLiteral(type: Type): Symbol {\r\n            if (type.symbol && type.symbol.flags & SymbolFlags.TypeLiteral) {\r\n                let node = type.symbol.declarations[0].parent;\r\n                while (node.kind === SyntaxKind.ParenthesizedType) {\r\n                    node = node.parent;\r\n                }\r\n                if (node.kind === SyntaxKind.TypeAliasDeclaration) {\r\n                    return getSymbolOfNode(node);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // This is for caching the result of getSymbolDisplayBuilder. Do not access directly.\r\n        let _displayBuilder: SymbolDisplayBuilder;\r\n        function getSymbolDisplayBuilder(): SymbolDisplayBuilder {\r\n            /**\r\n             * Writes only the name of the symbol out to the writer. Uses the original source text\r\n             * for the name of the symbol if it is available to match how the user inputted the name.\r\n             */\r\n            function appendSymbolNameOnly(symbol: Symbol, writer: SymbolWriter): void {\r\n                if (symbol.declarations && symbol.declarations.length > 0) {\r\n                    let declaration = symbol.declarations[0];\r\n                    if (declaration.name) {\r\n                        writer.writeSymbol(declarationNameToString(declaration.name), symbol);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                writer.writeSymbol(symbol.name, symbol);\r\n            }\r\n\r\n            /**\r\n             * Enclosing declaration is optional when we don't want to get qualified name in the enclosing declaration scope\r\n             * Meaning needs to be specified if the enclosing declaration is given\r\n             */\r\n            function buildSymbolDisplay(symbol: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, meaning?: SymbolFlags, flags?: SymbolFormatFlags, typeFlags?: TypeFormatFlags): void {\r\n                let parentSymbol: Symbol;\r\n                function appendParentTypeArgumentsAndSymbolName(symbol: Symbol): void {\r\n                    if (parentSymbol) {\r\n                        // Write type arguments of instantiated class/interface here\r\n                        if (flags & SymbolFormatFlags.WriteTypeParametersOrArguments) {\r\n                            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                                buildDisplayForTypeArgumentsAndDelimiters(getTypeParametersOfClassOrInterface(parentSymbol),\r\n                                    (<TransientSymbol>symbol).mapper, writer, enclosingDeclaration);\r\n                            }\r\n                            else {\r\n                                buildTypeParameterDisplayFromSymbol(parentSymbol, writer, enclosingDeclaration);\r\n                            }\r\n                        }\r\n                        writePunctuation(writer, SyntaxKind.DotToken);\r\n                    }\r\n                    parentSymbol = symbol;\r\n                    appendSymbolNameOnly(symbol, writer);\r\n                }\r\n\r\n                // Let the writer know we just wrote out a symbol.  The declaration emitter writer uses\r\n                // this to determine if an import it has previously seen (and not written out) needs\r\n                // to be written to the file once the walk of the tree is complete.\r\n                //\r\n                // NOTE(cyrusn): This approach feels somewhat unfortunate.  A simple pass over the tree\r\n                // up front (for example, during checking) could determine if we need to emit the imports\r\n                // and we could then access that data during declaration emit.\r\n                writer.trackSymbol(symbol, enclosingDeclaration, meaning);\r\n                function walkSymbol(symbol: Symbol, meaning: SymbolFlags): void {\r\n                    if (symbol) {\r\n                        let accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, !!(flags & SymbolFormatFlags.UseOnlyExternalAliasing));\r\n\r\n                        if (!accessibleSymbolChain ||\r\n                            needsQualification(accessibleSymbolChain[0], enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {\r\n\r\n                            // Go up and add our parent.\r\n                            walkSymbol(\r\n                                getParentOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol),\r\n                                getQualifiedLeftMeaning(meaning));\r\n                        }\r\n\r\n                        if (accessibleSymbolChain) {\r\n                            for (let accessibleSymbol of accessibleSymbolChain) {\r\n                                appendParentTypeArgumentsAndSymbolName(accessibleSymbol);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // If we didn't find accessible symbol chain for this symbol, break if this is external module\r\n                            if (!parentSymbol && ts.forEach(symbol.declarations, hasExternalModuleSymbol)) {\r\n                                return;\r\n                            }\r\n\r\n                            // if this is anonymous type break\r\n                            if (symbol.flags & SymbolFlags.TypeLiteral || symbol.flags & SymbolFlags.ObjectLiteral) {\r\n                                return;\r\n                            }\r\n\r\n                            appendParentTypeArgumentsAndSymbolName(symbol);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Get qualified name if the symbol is not a type parameter\r\n                // and there is an enclosing declaration or we specifically\r\n                // asked for it\r\n                let isTypeParameter = symbol.flags & SymbolFlags.TypeParameter;\r\n                let typeFormatFlag = TypeFormatFlags.UseFullyQualifiedType & typeFlags;\r\n                if (!isTypeParameter && (enclosingDeclaration || typeFormatFlag)) {\r\n                    walkSymbol(symbol, meaning);\r\n                    return;\r\n                }\r\n\r\n                return appendParentTypeArgumentsAndSymbolName(symbol);\r\n            }\r\n\r\n            function buildTypeDisplay(type: Type, writer: SymbolWriter, enclosingDeclaration?: Node, globalFlags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                let globalFlagsToPass = globalFlags & TypeFormatFlags.WriteOwnNameForAnyLike;\r\n                return writeType(type, globalFlags);\r\n\r\n                function writeType(type: Type, flags: TypeFormatFlags) {\r\n                    // Write undefined/null type as any\r\n                    if (type.flags & TypeFlags.Intrinsic) {\r\n                        // Special handling for unknown / resolving types, they should show up as any and not unknown or __resolving\r\n                        writer.writeKeyword(!(globalFlags & TypeFormatFlags.WriteOwnNameForAnyLike) && isTypeAny(type)\r\n                            ? \"any\"\r\n                            : (<IntrinsicType>type).intrinsicName);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Reference) {\r\n                        writeTypeReference(<TypeReference>type, flags);\r\n                    }\r\n                    else if (type.flags & (TypeFlags.Class | TypeFlags.Interface | TypeFlags.Enum | TypeFlags.TypeParameter)) {\r\n                        // The specified symbol flags need to be reinterpreted as type flags\r\n                        buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, SymbolFlags.Type, SymbolFormatFlags.None, flags);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Tuple) {\r\n                        writeTupleType(<TupleType>type);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Union) {\r\n                        writeUnionType(<UnionType>type, flags);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Anonymous) {\r\n                        writeAnonymousType(<ObjectType>type, flags);\r\n                    }\r\n                    else if (type.flags & TypeFlags.StringLiteral) {\r\n                        writer.writeStringLiteral((<StringLiteralType>type).text);\r\n                    }\r\n                    else {\r\n                        // Should never get here\r\n                        // { ... }\r\n                        writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                        writeSpace(writer);\r\n                        writePunctuation(writer, SyntaxKind.DotDotDotToken);\r\n                        writeSpace(writer);\r\n                        writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                    }\r\n                }\r\n\r\n                function writeTypeList(types: Type[], union: boolean) {\r\n                    for (let i = 0; i < types.length; i++) {\r\n                        if (i > 0) {\r\n                            if (union) {\r\n                                writeSpace(writer);\r\n                            }\r\n                            writePunctuation(writer, union ? SyntaxKind.BarToken : SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        writeType(types[i], union ? TypeFormatFlags.InElementType : TypeFormatFlags.None);\r\n                    }\r\n                }\r\n\r\n                function writeSymbolTypeReference(symbol: Symbol, typeArguments: Type[], pos: number, end: number) {\r\n                    // Unnamed function expressions, arrow functions, and unnamed class expressions have reserved names that\r\n                    // we don't want to display\r\n                    if (!isReservedMemberName(symbol.name)) {\r\n                        buildSymbolDisplay(symbol, writer, enclosingDeclaration, SymbolFlags.Type);\r\n                    }\r\n                    if (pos < end) {\r\n                        writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                        writeType(typeArguments[pos++], TypeFormatFlags.None);\r\n                        while (pos < end) {\r\n                            writePunctuation(writer, SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                            writeType(typeArguments[pos++], TypeFormatFlags.None);\r\n                        }\r\n                        writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                    }\r\n                }\r\n\r\n                function writeTypeReference(type: TypeReference, flags: TypeFormatFlags) {\r\n                    let typeArguments = type.typeArguments;\r\n                    if (type.target === globalArrayType && !(flags & TypeFormatFlags.WriteArrayAsGenericType)) {\r\n                        writeType(typeArguments[0], TypeFormatFlags.InElementType);\r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                    }\r\n                    else {\r\n                        // Write the type reference in the format f<A>.g<B>.C<X, Y> where A and B are type arguments\r\n                        // for outer type parameters, and f and g are the respective declaring containers of those\r\n                        // type parameters.\r\n                        let outerTypeParameters = type.target.outerTypeParameters;\r\n                        let i = 0;\r\n                        if (outerTypeParameters) {\r\n                            let length = outerTypeParameters.length;\r\n                            while (i < length) {\r\n                                // Find group of type arguments for type parameters with the same declaring container.\r\n                                let start = i;\r\n                                let parent = getParentSymbolOfTypeParameter(outerTypeParameters[i]);\r\n                                do {\r\n                                    i++;\r\n                                } while (i < length && getParentSymbolOfTypeParameter(outerTypeParameters[i]) === parent);\r\n                                // When type parameters are their own type arguments for the whole group (i.e. we have\r\n                                // the default outer type arguments), we don't show the group.\r\n                                if (!rangeEquals(outerTypeParameters, typeArguments, start, i)) {\r\n                                    writeSymbolTypeReference(parent, typeArguments, start, i);\r\n                                    writePunctuation(writer, SyntaxKind.DotToken);\r\n                                }\r\n                            }\r\n                        }\r\n                        writeSymbolTypeReference(type.symbol, typeArguments, i, typeArguments.length);\r\n                    }\r\n                }\r\n\r\n                function writeTupleType(type: TupleType) {\r\n                    writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                    writeTypeList(type.elementTypes, /*union*/ false);\r\n                    writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                }\r\n\r\n                function writeUnionType(type: UnionType, flags: TypeFormatFlags) {\r\n                    if (flags & TypeFormatFlags.InElementType) {\r\n                        writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                    }\r\n                    writeTypeList(type.types, /*union*/ true);\r\n                    if (flags & TypeFormatFlags.InElementType) {\r\n                        writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                    }\r\n                }\r\n\r\n                function writeAnonymousType(type: ObjectType, flags: TypeFormatFlags) {\r\n                    let symbol = type.symbol;\r\n                    if (symbol) {\r\n                        // Always use 'typeof T' for type of class, enum, and module objects\r\n                        if (symbol.flags & (SymbolFlags.Class | SymbolFlags.Enum | SymbolFlags.ValueModule)) {\r\n                            writeTypeofSymbol(type, flags);\r\n                        }\r\n                        else if (shouldWriteTypeOfFunctionSymbol()) {\r\n                            writeTypeofSymbol(type, flags);\r\n                        }\r\n                        else if (contains(symbolStack, symbol)) {\r\n                            // If type is an anonymous type literal in a type alias declaration, use type alias name\r\n                            let typeAlias = getTypeAliasForTypeLiteral(type);\r\n                            if (typeAlias) {\r\n                                // The specified symbol flags need to be reinterpreted as type flags\r\n                                buildSymbolDisplay(typeAlias, writer, enclosingDeclaration, SymbolFlags.Type, SymbolFormatFlags.None, flags);\r\n                            }\r\n                            else {\r\n                                // Recursive usage, use any\r\n                                writeKeyword(writer, SyntaxKind.AnyKeyword);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Since instantiations of the same anonymous type have the same symbol, tracking symbols instead\r\n                            // of types allows us to catch circular references to instantiations of the same anonymous type\r\n                            if (!symbolStack) {\r\n                                symbolStack = [];\r\n                            }\r\n                            symbolStack.push(symbol);\r\n                            writeLiteralType(type, flags);\r\n                            symbolStack.pop();\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Anonymous types with no symbol are never circular\r\n                        writeLiteralType(type, flags);\r\n                    }\r\n\r\n                    function shouldWriteTypeOfFunctionSymbol() {\r\n                        let isStaticMethodSymbol = !!(symbol.flags & SymbolFlags.Method &&  // typeof static method\r\n                            forEach(symbol.declarations, declaration => declaration.flags & NodeFlags.Static));\r\n                        let isNonLocalFunctionSymbol = !!(symbol.flags & SymbolFlags.Function) &&\r\n                            (symbol.parent || // is exported function symbol\r\n                                forEach(symbol.declarations, declaration =>\r\n                                    declaration.parent.kind === SyntaxKind.SourceFile || declaration.parent.kind === SyntaxKind.ModuleBlock));\r\n                        if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {\r\n                            // typeof is allowed only for static/non local functions\r\n                            return !!(flags & TypeFormatFlags.UseTypeOfFunction) || // use typeof if format flags specify it\r\n                                (contains(symbolStack, symbol)); // it is type of the symbol uses itself recursively\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function writeTypeofSymbol(type: ObjectType, typeFormatFlags?: TypeFormatFlags) {\r\n                    writeKeyword(writer, SyntaxKind.TypeOfKeyword);\r\n                    writeSpace(writer);\r\n                    buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, SymbolFlags.Value, SymbolFormatFlags.None, typeFormatFlags);\r\n                }\r\n\r\n                function getIndexerParameterName(type: ObjectType, indexKind: IndexKind, fallbackName: string): string {\r\n                    let declaration = <SignatureDeclaration>getIndexDeclarationOfSymbol(type.symbol, indexKind);\r\n                    if (!declaration) {\r\n                        // declaration might not be found if indexer was added from the contextual type.\r\n                        // in this case use fallback name\r\n                        return fallbackName;\r\n                    }\r\n                    Debug.assert(declaration.parameters.length !== 0);\r\n                    return declarationNameToString(declaration.parameters[0].name);\r\n                }\r\n\r\n                function writeLiteralType(type: ObjectType, flags: TypeFormatFlags) {\r\n                    let resolved = resolveObjectOrUnionTypeMembers(type);\r\n                    if (!resolved.properties.length && !resolved.stringIndexType && !resolved.numberIndexType) {\r\n                        if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {\r\n                            writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                            writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                            return;\r\n                        }\r\n\r\n                        if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                            }\r\n                            buildSignatureDisplay(resolved.callSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | TypeFormatFlags.WriteArrowStyleSignature, symbolStack);\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                            }\r\n                            writeKeyword(writer, SyntaxKind.NewKeyword);\r\n                            writeSpace(writer);\r\n                            buildSignatureDisplay(resolved.constructSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | TypeFormatFlags.WriteArrowStyleSignature, symbolStack);\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                    writer.writeLine();\r\n                    writer.increaseIndent();\r\n                    for (let signature of resolved.callSignatures) {\r\n                        buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    for (let signature of resolved.constructSignatures) {\r\n                        writeKeyword(writer, SyntaxKind.NewKeyword);\r\n                        writeSpace(writer);\r\n\r\n                        buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    if (resolved.stringIndexType) {\r\n                        // [x: string]:\r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writer.writeParameter(getIndexerParameterName(resolved, IndexKind.String, /*fallbackName*/\"x\"));\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeKeyword(writer, SyntaxKind.StringKeyword);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeType(resolved.stringIndexType, TypeFormatFlags.None);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    if (resolved.numberIndexType) {\r\n                        // [x: number]:\r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writer.writeParameter(getIndexerParameterName(resolved, IndexKind.Number, /*fallbackName*/\"x\"));\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeKeyword(writer, SyntaxKind.NumberKeyword);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeType(resolved.numberIndexType, TypeFormatFlags.None);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    for (let p of resolved.properties) {\r\n                        let t = getTypeOfSymbol(p);\r\n                        if (p.flags & (SymbolFlags.Function | SymbolFlags.Method) && !getPropertiesOfObjectType(t).length) {\r\n                            let signatures = getSignaturesOfType(t, SignatureKind.Call);\r\n                            for (let signature of signatures) {\r\n                                buildSymbolDisplay(p, writer);\r\n                                if (p.flags & SymbolFlags.Optional) {\r\n                                    writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                                }\r\n                                buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);\r\n                                writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                                writer.writeLine();\r\n                            }\r\n                        }\r\n                        else {\r\n                            buildSymbolDisplay(p, writer);\r\n                            if (p.flags & SymbolFlags.Optional) {\r\n                                writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                            }\r\n                            writePunctuation(writer, SyntaxKind.ColonToken);\r\n                            writeSpace(writer);\r\n                            writeType(t, TypeFormatFlags.None);\r\n                            writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                            writer.writeLine();\r\n                        }\r\n                    }\r\n                    writer.decreaseIndent();\r\n                    writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                }\r\n            }\r\n\r\n            function buildTypeParameterDisplayFromSymbol(symbol: Symbol, writer: SymbolWriter, enclosingDeclaraiton?: Node, flags?: TypeFormatFlags) {\r\n                let targetSymbol = getTargetSymbol(symbol);\r\n                if (targetSymbol.flags & SymbolFlags.Class || targetSymbol.flags & SymbolFlags.Interface) {\r\n                    buildDisplayForTypeParametersAndDelimiters(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), writer, enclosingDeclaraiton, flags);\r\n                }\r\n            }\r\n\r\n            function buildTypeParameterDisplay(tp: TypeParameter, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                appendSymbolNameOnly(tp.symbol, writer);\r\n                let constraint = getConstraintOfTypeParameter(tp);\r\n                if (constraint) {\r\n                    writeSpace(writer);\r\n                    writeKeyword(writer, SyntaxKind.ExtendsKeyword);\r\n                    writeSpace(writer);\r\n                    buildTypeDisplay(constraint, writer, enclosingDeclaration, flags, symbolStack);\r\n                }\r\n            }\r\n\r\n            function buildParameterDisplay(p: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                let parameterNode = <ParameterDeclaration>p.valueDeclaration;\r\n                if (isRestParameter(parameterNode)) {\r\n                    writePunctuation(writer, SyntaxKind.DotDotDotToken);\r\n                }\r\n                appendSymbolNameOnly(p, writer);\r\n                if (isOptionalParameter(parameterNode)) {\r\n                    writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                }\r\n                writePunctuation(writer, SyntaxKind.ColonToken);\r\n                writeSpace(writer);\r\n\r\n                buildTypeDisplay(getTypeOfSymbol(p), writer, enclosingDeclaration, flags, symbolStack);\r\n            }\r\n\r\n            function buildDisplayForTypeParametersAndDelimiters(typeParameters: TypeParameter[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                if (typeParameters && typeParameters.length) {\r\n                    writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                    for (let i = 0; i < typeParameters.length; i++) {\r\n                        if (i > 0) {\r\n                            writePunctuation(writer, SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        buildTypeParameterDisplay(typeParameters[i], writer, enclosingDeclaration, flags, symbolStack);\r\n                    }\r\n                    writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                }\r\n            }\r\n\r\n            function buildDisplayForTypeArgumentsAndDelimiters(typeParameters: TypeParameter[], mapper: TypeMapper, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                if (typeParameters && typeParameters.length) {\r\n                    writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                    for (let i = 0; i < typeParameters.length; i++) {\r\n                        if (i > 0) {\r\n                            writePunctuation(writer, SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        buildTypeDisplay(mapper(typeParameters[i]), writer, enclosingDeclaration, TypeFormatFlags.None);\r\n                    }\r\n                    writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                }\r\n            }\r\n\r\n            function buildDisplayForParametersAndDelimiters(parameters: Symbol[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                for (let i = 0; i < parameters.length; i++) {\r\n                    if (i > 0) {\r\n                        writePunctuation(writer, SyntaxKind.CommaToken);\r\n                        writeSpace(writer);\r\n                    }\r\n                    buildParameterDisplay(parameters[i], writer, enclosingDeclaration, flags, symbolStack);\r\n                }\r\n                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n            }\r\n\r\n            function buildReturnTypeDisplay(signature: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                if (flags & TypeFormatFlags.WriteArrowStyleSignature) {\r\n                    writeSpace(writer);\r\n                    writePunctuation(writer, SyntaxKind.EqualsGreaterThanToken);\r\n                }\r\n                else {\r\n                    writePunctuation(writer, SyntaxKind.ColonToken);\r\n                }\r\n                writeSpace(writer);\r\n                buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags, symbolStack);\r\n            }\r\n\r\n            function buildSignatureDisplay(signature: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, symbolStack?: Symbol[]) {\r\n                if (signature.target && (flags & TypeFormatFlags.WriteTypeArgumentsOfSignature)) {\r\n                    // Instantiated signature, write type arguments instead\r\n                    // This is achieved by passing in the mapper separately\r\n                    buildDisplayForTypeArgumentsAndDelimiters(signature.target.typeParameters, signature.mapper, writer, enclosingDeclaration);\r\n                }\r\n                else {\r\n                    buildDisplayForTypeParametersAndDelimiters(signature.typeParameters, writer, enclosingDeclaration, flags, symbolStack);\r\n                }\r\n\r\n                buildDisplayForParametersAndDelimiters(signature.parameters, writer, enclosingDeclaration, flags, symbolStack);\r\n                buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, symbolStack);\r\n            }\r\n\r\n            return _displayBuilder || (_displayBuilder = {\r\n                symbolToString: symbolToString,\r\n                typeToString: typeToString,\r\n                buildSymbolDisplay: buildSymbolDisplay,\r\n                buildTypeDisplay: buildTypeDisplay,\r\n                buildTypeParameterDisplay: buildTypeParameterDisplay,\r\n                buildParameterDisplay: buildParameterDisplay,\r\n                buildDisplayForParametersAndDelimiters: buildDisplayForParametersAndDelimiters,\r\n                buildDisplayForTypeParametersAndDelimiters: buildDisplayForTypeParametersAndDelimiters,\r\n                buildDisplayForTypeArgumentsAndDelimiters: buildDisplayForTypeArgumentsAndDelimiters,\r\n                buildTypeParameterDisplayFromSymbol: buildTypeParameterDisplayFromSymbol,\r\n                buildSignatureDisplay: buildSignatureDisplay,\r\n                buildReturnTypeDisplay: buildReturnTypeDisplay\r\n            });\r\n        }\r\n\r\n        function isDeclarationVisible(node: Declaration): boolean {\r\n            function getContainingExternalModule(node: Node) {\r\n                for (; node; node = node.parent) {\r\n                    if (node.kind === SyntaxKind.ModuleDeclaration) {\r\n                        if ((<ModuleDeclaration>node).name.kind === SyntaxKind.StringLiteral) {\r\n                            return node;\r\n                        }\r\n                    }\r\n                    else if (node.kind === SyntaxKind.SourceFile) {\r\n                        return isExternalModule(<SourceFile>node) ? node : undefined;\r\n                    }\r\n                }\r\n                Debug.fail(\"getContainingModule cant reach here\");\r\n            }\r\n\r\n            function isUsedInExportAssignment(node: Node) {\r\n                // Get source File and see if it is external module and has export assigned symbol\r\n                let externalModule = getContainingExternalModule(node);\r\n                let exportAssignmentSymbol: Symbol;\r\n                let resolvedExportSymbol: Symbol;\r\n                if (externalModule) {\r\n                    // This is export assigned symbol node\r\n                    let externalModuleSymbol = getSymbolOfNode(externalModule);\r\n                    exportAssignmentSymbol = getExportAssignmentSymbol(externalModuleSymbol);\r\n                    let symbolOfNode = getSymbolOfNode(node);\r\n                    if (isSymbolUsedInExportAssignment(symbolOfNode)) {\r\n                        return true;\r\n                    }\r\n\r\n                    // if symbolOfNode is alias declaration, resolve the symbol declaration and check\r\n                    if (symbolOfNode.flags & SymbolFlags.Alias) {\r\n                        return isSymbolUsedInExportAssignment(resolveAlias(symbolOfNode));\r\n                    }\r\n                }\r\n\r\n                // Check if the symbol is used in export assignment\r\n                function isSymbolUsedInExportAssignment(symbol: Symbol) {\r\n                    if (exportAssignmentSymbol === symbol) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (exportAssignmentSymbol && !!(exportAssignmentSymbol.flags & SymbolFlags.Alias)) {\r\n                        // if export assigned symbol is alias declaration, resolve the alias\r\n                        resolvedExportSymbol = resolvedExportSymbol || resolveAlias(exportAssignmentSymbol);\r\n                        if (resolvedExportSymbol === symbol) {\r\n                            return true;\r\n                        }\r\n\r\n                        // Container of resolvedExportSymbol is visible\r\n                        return forEach(resolvedExportSymbol.declarations, (current: Node) => {\r\n                            while (current) {\r\n                                if (current === node) {\r\n                                    return true;\r\n                                }\r\n                                current = current.parent;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function determineIfDeclarationIsVisible() {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.BindingElement:\r\n                        return isDeclarationVisible(<Declaration>node.parent.parent);\r\n                    case SyntaxKind.VariableDeclaration:\r\n                        if (isBindingPattern(node.name) &&\r\n                            !(<BindingPattern>node.name).elements.length) {\r\n                            // If the binding pattern is empty, this variable declaration is not visible\r\n                            return false;\r\n                        }\r\n                        // Otherwise fall through\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                    case SyntaxKind.TypeAliasDeclaration:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                    case SyntaxKind.ImportEqualsDeclaration:\r\n                        let parent = getDeclarationContainer(node);\r\n                        // If the node is not exported or it is not ambient module element (except import declaration)\r\n                        if (!(getCombinedNodeFlags(node) & NodeFlags.Export) &&\r\n                            !(node.kind !== SyntaxKind.ImportEqualsDeclaration && parent.kind !== SyntaxKind.SourceFile && isInAmbientContext(parent))) {\r\n                            return isGlobalSourceFile(parent);\r\n                        }\r\n                        // Exported members/ambient module elements (exception import declaration) are visible if parent is visible\r\n                        return isDeclarationVisible(<Declaration>parent);\r\n\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.PropertySignature:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.MethodDeclaration:\r\n                    case SyntaxKind.MethodSignature:\r\n                        if (node.flags & (NodeFlags.Private | NodeFlags.Protected)) {\r\n                            // Private/protected properties/methods are not visible\r\n                            return false;\r\n                        }\r\n                    // Public properties/methods are visible if its parents are visible, so let it fall into next case statement\r\n\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.CallSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.Parameter:\r\n                    case SyntaxKind.ModuleBlock:\r\n                    case SyntaxKind.FunctionType:\r\n                    case SyntaxKind.ConstructorType:\r\n                    case SyntaxKind.TypeLiteral:\r\n                    case SyntaxKind.TypeReference:\r\n                    case SyntaxKind.ArrayType:\r\n                    case SyntaxKind.TupleType:\r\n                    case SyntaxKind.UnionType:\r\n                    case SyntaxKind.ParenthesizedType:\r\n                        return isDeclarationVisible(<Declaration>node.parent);\r\n\r\n                    // Default binding, import specifier and namespace import is visible \r\n                    // only on demand so by default it is not visible\r\n                    case SyntaxKind.ImportClause:\r\n                    case SyntaxKind.NamespaceImport:\r\n                    case SyntaxKind.ImportSpecifier:\r\n                        return false;\r\n\r\n                    // Type parameters are always visible\r\n                    case SyntaxKind.TypeParameter:\r\n                    // Source file is always visible\r\n                    case SyntaxKind.SourceFile:\r\n                        return true;\r\n\r\n                    // Export assignements do not create name bindings outside the module\r\n                    case SyntaxKind.ExportAssignment:\r\n                        return false;\r\n\r\n                    default:\r\n                        Debug.fail(\"isDeclarationVisible unknown: SyntaxKind: \" + node.kind);\r\n                }\r\n            }\r\n\r\n            if (node) {\r\n                let links = getNodeLinks(node);\r\n                if (links.isVisible === undefined) {\r\n                    links.isVisible = !!determineIfDeclarationIsVisible();\r\n                }\r\n                return links.isVisible;\r\n            }\r\n        }\r\n\r\n        function collectLinkedAliases(node: Identifier): Node[] {\r\n            var exportSymbol: Symbol;\r\n            if (node.parent && node.parent.kind === SyntaxKind.ExportAssignment) {\r\n                exportSymbol = resolveName(node.parent, node.text, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace, Diagnostics.Cannot_find_name_0, node);\r\n            }\r\n            else if (node.parent.kind === SyntaxKind.ExportSpecifier) {\r\n                exportSymbol = getTargetOfExportSpecifier(<ExportSpecifier>node.parent);\r\n            }\r\n            var result: Node[] = [];\r\n            if (exportSymbol) {\r\n                buildVisibleNodeList(exportSymbol.declarations);\r\n            }\r\n            return result;\r\n\r\n            function buildVisibleNodeList(declarations: Declaration[]) {\r\n                forEach(declarations, declaration => {\r\n                    getNodeLinks(declaration).isVisible = true;\r\n                    var resultNode = getAnyImportSyntax(declaration) || declaration;\r\n                    if (!contains(result, resultNode)) {\r\n                        result.push(resultNode);\r\n                    }\r\n\r\n                    if (isInternalModuleImportEqualsDeclaration(declaration)) {\r\n                        // Add the referenced top container visible\r\n                        var internalModuleReference = <Identifier | QualifiedName>(<ImportEqualsDeclaration>declaration).moduleReference;\r\n                        var firstIdentifier = getFirstIdentifier(internalModuleReference);\r\n                        var importSymbol = resolveName(declaration, firstIdentifier.text, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace,\r\n                            Diagnostics.Cannot_find_name_0, firstIdentifier);\r\n                        buildVisibleNodeList(importSymbol.declarations);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // Push an entry on the type resolution stack. If an entry with the given target is not already on the stack,\r\n        // a new entry with that target and an associated result value of true is pushed on the stack, and the value\r\n        // true is returned. Otherwise, a circularity has occurred and the result values of the existing entry and\r\n        // all entries pushed after it are changed to false, and the value false is returned. The target object provides\r\n        // a unique identity for a particular type resolution result: Symbol instances are used to track resolution of\r\n        // SymbolLinks.type, SymbolLinks instances are used to track resolution of SymbolLinks.declaredType, and\r\n        // Signature instances are used to track resolution of Signature.resolvedReturnType.\r\n        function pushTypeResolution(target: Object): boolean {\r\n            let i = 0;\r\n            let count = resolutionTargets.length;\r\n            while (i < count && resolutionTargets[i] !== target) {\r\n                i++;\r\n            }\r\n            if (i < count) {\r\n                do {\r\n                    resolutionResults[i++] = false;\r\n                }\r\n                while (i < count);\r\n                return false;\r\n            }\r\n            resolutionTargets.push(target);\r\n            resolutionResults.push(true);\r\n            return true;\r\n        }\r\n\r\n        // Pop an entry from the type resolution stack and return its associated result value. The result value will\r\n        // be true if no circularities were detected, or false if a circularity was found.\r\n        function popTypeResolution(): boolean {\r\n            resolutionTargets.pop();\r\n            return resolutionResults.pop();\r\n        }\r\n\r\n        function getDeclarationContainer(node: Node): Node {\r\n            node = getRootDeclaration(node);\r\n\r\n            // Parent chain:\r\n            // VaribleDeclaration -> VariableDeclarationList -> VariableStatement -> 'Declaration Container'\r\n            return node.kind === SyntaxKind.VariableDeclaration ? node.parent.parent.parent : node.parent;\r\n        }\r\n\r\n        function getTypeOfPrototypeProperty(prototype: Symbol): Type {\r\n            // TypeScript 1.0 spec (April 2014): 8.4\r\n            // Every class automatically contains a static property member named 'prototype',\r\n            // the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.\r\n            // It is an error to explicitly declare a static property member with the name 'prototype'.\r\n            let classType = <InterfaceType>getDeclaredTypeOfSymbol(prototype.parent);\r\n            return classType.typeParameters ? createTypeReference(<GenericType>classType, map(classType.typeParameters, _ => anyType)) : classType;\r\n        }\r\n\r\n        // Return the type of the given property in the given type, or undefined if no such property exists\r\n        function getTypeOfPropertyOfType(type: Type, name: string): Type {\r\n            let prop = getPropertyOfType(type, name);\r\n            return prop ? getTypeOfSymbol(prop) : undefined;\r\n        }\r\n\r\n        function isTypeAny(type: Type) {\r\n            return type && (type.flags & TypeFlags.Any) !== 0;\r\n        }\r\n\r\n        // Return the inferred type for a binding element\r\n        function getTypeForBindingElement(declaration: BindingElement): Type {\r\n            let pattern = <BindingPattern>declaration.parent;\r\n            let parentType = getTypeForVariableLikeDeclaration(<VariableLikeDeclaration>pattern.parent);\r\n            // If parent has the unknown (error) type, then so does this binding element\r\n            if (parentType === unknownType) {\r\n                return unknownType;\r\n            }\r\n            // If no type was specified or inferred for parent, or if the specified or inferred type is any,\r\n            // infer from the initializer of the binding element if one is present. Otherwise, go with the\r\n            // undefined or any type of the parent.\r\n            if (!parentType || isTypeAny(parentType)) {\r\n                if (declaration.initializer) {\r\n                    return checkExpressionCached(declaration.initializer);\r\n                }\r\n                return parentType;\r\n            }\r\n\r\n            let type: Type;\r\n            if (pattern.kind === SyntaxKind.ObjectBindingPattern) {\r\n                // Use explicitly specified property name ({ p: xxx } form), or otherwise the implied name ({ p } form)\r\n                let name = declaration.propertyName || <Identifier>declaration.name;\r\n                // Use type of the specified property, or otherwise, for a numeric name, the type of the numeric index signature,\r\n                // or otherwise the type of the string index signature.\r\n                type = getTypeOfPropertyOfType(parentType, name.text) ||\r\n                    isNumericLiteralName(name.text) && getIndexTypeOfType(parentType, IndexKind.Number) ||\r\n                    getIndexTypeOfType(parentType, IndexKind.String);\r\n                if (!type) {\r\n                    error(name, Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(parentType), declarationNameToString(name));\r\n                    return unknownType;\r\n                }\r\n            }\r\n            else {\r\n                // This elementType will be used if the specific property corresponding to this index is not\r\n                // present (aka the tuple element property). This call also checks that the parentType is in\r\n                // fact an iterable or array (depending on target language).\r\n                let elementType = checkIteratedTypeOrElementType(parentType, pattern, /*allowStringInput*/ false);\r\n                if (!declaration.dotDotDotToken) {\r\n                    if (isTypeAny(elementType)) {\r\n                        return elementType;\r\n                    }\r\n\r\n                    // Use specific property type when parent is a tuple or numeric index type when parent is an array\r\n                    let propName = \"\" + indexOf(pattern.elements, declaration);\r\n                    type = isTupleLikeType(parentType)\r\n                        ? getTypeOfPropertyOfType(parentType, propName)\r\n                        : elementType;\r\n                    if (!type) {\r\n                        if (isTupleType(parentType)) {\r\n                            error(declaration, Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(parentType), (<TupleType>parentType).elementTypes.length, pattern.elements.length);\r\n                        }\r\n                        else {\r\n                            error(declaration, Diagnostics.Type_0_has_no_property_1, typeToString(parentType), propName);\r\n                        }\r\n                        return unknownType;\r\n                    }\r\n                }\r\n                else {\r\n                    // Rest element has an array type with the same element type as the parent type\r\n                    type = createArrayType(elementType);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Return the inferred type for a variable, parameter, or property declaration\r\n        function getTypeForVariableLikeDeclaration(declaration: VariableLikeDeclaration): Type {\r\n            // A variable declared in a for..in statement is always of type any\r\n            if (declaration.parent.parent.kind === SyntaxKind.ForInStatement) {\r\n                return anyType;\r\n            }\r\n            if (declaration.parent.parent.kind === SyntaxKind.ForOfStatement) {\r\n                // checkRightHandSideOfForOf will return undefined if the for-of expression type was\r\n                // missing properties/signatures required to get its iteratedType (like\r\n                // [Symbol.iterator] or next). This may be because we accessed properties from anyType,\r\n                // or it may have led to an error inside getElementTypeOfIterable.\r\n                return checkRightHandSideOfForOf((<ForOfStatement>declaration.parent.parent).expression) || anyType;\r\n            }\r\n            if (isBindingPattern(declaration.parent)) {\r\n                return getTypeForBindingElement(<BindingElement>declaration);\r\n            }\r\n            // Use type from type annotation if one is present\r\n            if (declaration.type) {\r\n                return getTypeFromTypeNode(declaration.type);\r\n            }\r\n            if (declaration.kind === SyntaxKind.Parameter) {\r\n                let func = <FunctionLikeDeclaration>declaration.parent;\r\n                // For a parameter of a set accessor, use the type of the get accessor if one is present\r\n                if (func.kind === SyntaxKind.SetAccessor && !hasDynamicName(func)) {\r\n                    let getter = <AccessorDeclaration>getDeclarationOfKind(declaration.parent.symbol, SyntaxKind.GetAccessor);\r\n                    if (getter) {\r\n                        return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));\r\n                    }\r\n                }\r\n                // Use contextual parameter type if one is available\r\n                let type = getContextuallyTypedParameterType(<ParameterDeclaration>declaration);\r\n                if (type) {\r\n                    return type;\r\n                }\r\n            }\r\n            // Use the type of the initializer expression if one is present\r\n            if (declaration.initializer) {\r\n                return checkExpressionCached(declaration.initializer);\r\n            }\r\n            // If it is a short-hand property assignment, use the type of the identifier\r\n            if (declaration.kind === SyntaxKind.ShorthandPropertyAssignment) {\r\n                return checkIdentifier(<Identifier>declaration.name);\r\n            }\r\n            // No type specified and nothing can be inferred\r\n            return undefined;\r\n        }\r\n\r\n        // Return the type implied by a binding pattern element. This is the type of the initializer of the element if\r\n        // one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding\r\n        // pattern. Otherwise, it is the type any.\r\n        function getTypeFromBindingElement(element: BindingElement): Type {\r\n            if (element.initializer) {\r\n                return getWidenedType(checkExpressionCached(element.initializer));\r\n            }\r\n            if (isBindingPattern(element.name)) {\r\n                return getTypeFromBindingPattern(<BindingPattern>element.name);\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        // Return the type implied by an object binding pattern\r\n        function getTypeFromObjectBindingPattern(pattern: BindingPattern): Type {\r\n            let members: SymbolTable = {};\r\n            forEach(pattern.elements, e => {\r\n                let flags = SymbolFlags.Property | SymbolFlags.Transient | (e.initializer ? SymbolFlags.Optional : 0);\r\n                let name = e.propertyName || <Identifier>e.name;\r\n                let symbol = <TransientSymbol>createSymbol(flags, name.text);\r\n                symbol.type = getTypeFromBindingElement(e);\r\n                members[symbol.name] = symbol;\r\n            });\r\n            return createAnonymousType(undefined, members, emptyArray, emptyArray, undefined, undefined);\r\n        }\r\n\r\n        // Return the type implied by an array binding pattern\r\n        function getTypeFromArrayBindingPattern(pattern: BindingPattern): Type {\r\n            let hasSpreadElement: boolean = false;\r\n            let elementTypes: Type[] = [];\r\n            forEach(pattern.elements, e => {\r\n                elementTypes.push(e.kind === SyntaxKind.OmittedExpression || e.dotDotDotToken ? anyType : getTypeFromBindingElement(e));\r\n                if (e.dotDotDotToken) {\r\n                    hasSpreadElement = true;\r\n                }\r\n            });\r\n            if (!elementTypes.length) {\r\n                return languageVersion >= ScriptTarget.ES6 ? createIterableType(anyType) : anyArrayType;\r\n            }\r\n            else if (hasSpreadElement) {\r\n                let unionOfElements = getUnionType(elementTypes);\r\n                return languageVersion >= ScriptTarget.ES6 ? createIterableType(unionOfElements) : createArrayType(unionOfElements);\r\n            }\r\n\r\n            // If the pattern has at least one element, and no rest element, then it should imply a tuple type.\r\n            return createTupleType(elementTypes);\r\n        }\r\n\r\n        // Return the type implied by a binding pattern. This is the type implied purely by the binding pattern itself\r\n        // and without regard to its context (i.e. without regard any type annotation or initializer associated with the\r\n        // declaration in which the binding pattern is contained). For example, the implied type of [x, y] is [any, any]\r\n        // and the implied type of { x, y: z = 1 } is { x: any; y: number; }. The type implied by a binding pattern is\r\n        // used as the contextual type of an initializer associated with the binding pattern. Also, for a destructuring\r\n        // parameter with no type annotation or initializer, the type implied by the binding pattern becomes the type of\r\n        // the parameter.\r\n        function getTypeFromBindingPattern(pattern: BindingPattern): Type {\r\n            return pattern.kind === SyntaxKind.ObjectBindingPattern\r\n                ? getTypeFromObjectBindingPattern(pattern)\r\n                : getTypeFromArrayBindingPattern(pattern);\r\n        }\r\n\r\n        // Return the type associated with a variable, parameter, or property declaration. In the simple case this is the type\r\n        // specified in a type annotation or inferred from an initializer. However, in the case of a destructuring declaration it\r\n        // is a bit more involved. For example:\r\n        //\r\n        //   var [x, s = \"\"] = [1, \"one\"];\r\n        //\r\n        // Here, the array literal [1, \"one\"] is contextually typed by the type [any, string], which is the implied type of the\r\n        // binding pattern [x, s = \"\"]. Because the contextual type is a tuple type, the resulting type of [1, \"one\"] is the\r\n        // tuple type [number, string]. Thus, the type inferred for 'x' is number and the type inferred for 's' is string.\r\n        function getWidenedTypeForVariableLikeDeclaration(declaration: VariableLikeDeclaration, reportErrors?: boolean): Type {\r\n            let type = getTypeForVariableLikeDeclaration(declaration);\r\n            if (type) {\r\n                if (reportErrors) {\r\n                    reportErrorsFromWidening(declaration, type);\r\n                }\r\n                // During a normal type check we'll never get to here with a property assignment (the check of the containing\r\n                // object literal uses a different path). We exclude widening only so that language services and type verification\r\n                // tools see the actual type.\r\n                return declaration.kind !== SyntaxKind.PropertyAssignment ? getWidenedType(type) : type;\r\n            }\r\n            // If no type was specified and nothing could be inferred, and if the declaration specifies a binding pattern, use\r\n            // the type implied by the binding pattern\r\n            if (isBindingPattern(declaration.name)) {\r\n                return getTypeFromBindingPattern(<BindingPattern>declaration.name);\r\n            }\r\n            // Rest parameters default to type any[], other parameters default to type any\r\n            type = declaration.dotDotDotToken ? anyArrayType : anyType;\r\n            // Report implicit any errors unless this is a private property within an ambient declaration\r\n            if (reportErrors && compilerOptions.noImplicitAny) {\r\n                let root = getRootDeclaration(declaration);\r\n                if (!isPrivateWithinAmbient(root) && !(root.kind === SyntaxKind.Parameter && isPrivateWithinAmbient(root.parent))) {\r\n                    reportImplicitAnyError(declaration, type);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function getTypeOfVariableOrParameterOrProperty(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                // Handle prototype property\r\n                if (symbol.flags & SymbolFlags.Prototype) {\r\n                    return links.type = getTypeOfPrototypeProperty(symbol);\r\n                }\r\n                // Handle catch clause variables\r\n                let declaration = symbol.valueDeclaration;\r\n                if (declaration.parent.kind === SyntaxKind.CatchClause) {\r\n                    return links.type = anyType;\r\n                }\r\n                // Handle export default expressions\r\n                if (declaration.kind === SyntaxKind.ExportAssignment) {\r\n                    return links.type = checkExpression((<ExportAssignment>declaration).expression);\r\n                }\r\n                // Handle variable, parameter or property\r\n                if (!pushTypeResolution(symbol)) {\r\n                    return unknownType;\r\n                }\r\n                let type = getWidenedTypeForVariableLikeDeclaration(<VariableLikeDeclaration>declaration, /*reportErrors*/ true);\r\n                if (!popTypeResolution()) {\r\n                    if ((<VariableLikeDeclaration>symbol.valueDeclaration).type) {\r\n                        // Variable has type annotation that circularly references the variable itself\r\n                        type = unknownType;\r\n                        error(symbol.valueDeclaration, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation,\r\n                            symbolToString(symbol));\r\n                    }\r\n                    else {\r\n                        // Variable has initializer that circularly references the variable itself\r\n                        type = anyType;\r\n                        if (compilerOptions.noImplicitAny) {\r\n                            error(symbol.valueDeclaration, Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer,\r\n                                symbolToString(symbol));\r\n                        }\r\n                    }\r\n                }\r\n                links.type = type;\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getSetAccessorTypeAnnotationNode(accessor: AccessorDeclaration): TypeNode {\r\n            return accessor && accessor.parameters.length > 0 && accessor.parameters[0].type;\r\n        }\r\n\r\n        function getAnnotatedAccessorType(accessor: AccessorDeclaration): Type {\r\n            if (accessor) {\r\n                if (accessor.kind === SyntaxKind.GetAccessor) {\r\n                    return accessor.type && getTypeFromTypeNode(accessor.type);\r\n                }\r\n                else {\r\n                    let setterTypeAnnotation = getSetAccessorTypeAnnotationNode(accessor);\r\n                    return setterTypeAnnotation && getTypeFromTypeNode(setterTypeAnnotation);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getTypeOfAccessors(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                if (!pushTypeResolution(symbol)) {\r\n                    return unknownType;\r\n                }\r\n                let getter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.GetAccessor);\r\n                let setter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.SetAccessor);\r\n                let type: Type;\r\n                // First try to see if the user specified a return type on the get-accessor.\r\n                let getterReturnType = getAnnotatedAccessorType(getter);\r\n                if (getterReturnType) {\r\n                    type = getterReturnType;\r\n                }\r\n                else {\r\n                    // If the user didn't specify a return type, try to use the set-accessor's parameter type.\r\n                    let setterParameterType = getAnnotatedAccessorType(setter);\r\n                    if (setterParameterType) {\r\n                        type = setterParameterType;\r\n                    }\r\n                    else {\r\n                        // If there are no specified types, try to infer it from the body of the get accessor if it exists.\r\n                        if (getter && getter.body) {\r\n                            type = getReturnTypeFromBody(getter);\r\n                        }\r\n                        // Otherwise, fall back to 'any'.\r\n                        else {\r\n                            if (compilerOptions.noImplicitAny) {\r\n                                error(setter, Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation, symbolToString(symbol));\r\n                            }\r\n                            type = anyType;\r\n                        }\r\n                    }\r\n                }\r\n                if (!popTypeResolution()) {\r\n                    type = anyType;\r\n                    if (compilerOptions.noImplicitAny) {\r\n                        let getter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.GetAccessor);\r\n                        error(getter, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));\r\n                    }\r\n                }\r\n                links.type = type;\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfFuncClassEnumModule(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = createObjectType(TypeFlags.Anonymous, symbol);\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfEnumMember(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfAlias(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                let targetSymbol = resolveAlias(symbol);\r\n\r\n                // It only makes sense to get the type of a value symbol. If the result of resolving\r\n                // the alias is not a value, then it has no type. To get the type associated with a\r\n                // type symbol, call getDeclaredTypeOfSymbol.\r\n                // This check is important because without it, a call to getTypeOfSymbol could end\r\n                // up recursively calling getTypeOfAlias, causing a stack overflow.\r\n                links.type = targetSymbol.flags & SymbolFlags.Value\r\n                    ? getTypeOfSymbol(targetSymbol)\r\n                    : unknownType;\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfInstantiatedSymbol(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper);\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfSymbol(symbol: Symbol): Type {\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                return getTypeOfInstantiatedSymbol(symbol);\r\n            }\r\n            if (symbol.flags & (SymbolFlags.Variable | SymbolFlags.Property)) {\r\n                return getTypeOfVariableOrParameterOrProperty(symbol);\r\n            }\r\n            if (symbol.flags & (SymbolFlags.Function | SymbolFlags.Method | SymbolFlags.Class | SymbolFlags.Enum | SymbolFlags.ValueModule)) {\r\n                return getTypeOfFuncClassEnumModule(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.EnumMember) {\r\n                return getTypeOfEnumMember(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Accessor) {\r\n                return getTypeOfAccessors(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Alias) {\r\n                return getTypeOfAlias(symbol);\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function getTargetType(type: ObjectType): Type {\r\n            return type.flags & TypeFlags.Reference ? (<TypeReference>type).target : type;\r\n        }\r\n\r\n        function hasBaseType(type: InterfaceType, checkBase: InterfaceType) {\r\n            return check(type);\r\n            function check(type: InterfaceType): boolean {\r\n                let target = <InterfaceType>getTargetType(type);\r\n                return target === checkBase || forEach(getBaseTypes(target), check);\r\n            }\r\n        }\r\n\r\n        // Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.\r\n        // The function allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set\r\n        // in-place and returns the same array.\r\n        function appendTypeParameters(typeParameters: TypeParameter[], declarations: TypeParameterDeclaration[]): TypeParameter[] {\r\n            for (let declaration of declarations) {\r\n                let tp = getDeclaredTypeOfTypeParameter(getSymbolOfNode(declaration));\r\n                if (!typeParameters) {\r\n                    typeParameters = [tp];\r\n                }\r\n                else if (!contains(typeParameters, tp)) {\r\n                    typeParameters.push(tp);\r\n                }\r\n            }\r\n            return typeParameters;\r\n        }\r\n\r\n        // Appends the outer type parameters of a node to a set of type parameters and returns the resulting set. The function\r\n        // allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set in-place and\r\n        // returns the same array.\r\n        function appendOuterTypeParameters(typeParameters: TypeParameter[], node: Node): TypeParameter[]{\r\n            while (true) {\r\n                node = node.parent;\r\n                if (!node) {\r\n                    return typeParameters;\r\n                }\r\n                if (node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.FunctionDeclaration ||\r\n                    node.kind === SyntaxKind.FunctionExpression || node.kind === SyntaxKind.MethodDeclaration ||\r\n                    node.kind === SyntaxKind.ArrowFunction) {\r\n                    let declarations = (<ClassDeclaration | FunctionLikeDeclaration>node).typeParameters;\r\n                    if (declarations) {\r\n                        return appendTypeParameters(appendOuterTypeParameters(typeParameters, node), declarations);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // The outer type parameters are those defined by enclosing generic classes, methods, or functions.\r\n        function getOuterTypeParametersOfClassOrInterface(symbol: Symbol): TypeParameter[] {\r\n            var kind = symbol.flags & SymbolFlags.Class ? SyntaxKind.ClassDeclaration : SyntaxKind.InterfaceDeclaration;\r\n            return appendOuterTypeParameters(undefined, getDeclarationOfKind(symbol, kind));\r\n        }\r\n\r\n        // The local type parameters are the combined set of type parameters from all declarations of the class,\r\n        // interface, or type alias.\r\n        function getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol: Symbol): TypeParameter[] {\r\n            let result: TypeParameter[];\r\n            for (let node of symbol.declarations) {\r\n                if (node.kind === SyntaxKind.InterfaceDeclaration || node.kind === SyntaxKind.ClassDeclaration || node.kind === SyntaxKind.TypeAliasDeclaration) {\r\n                    let declaration = <InterfaceDeclaration | TypeAliasDeclaration>node;\r\n                    if (declaration.typeParameters) {\r\n                        result = appendTypeParameters(result, declaration.typeParameters);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // The full set of type parameters for a generic class or interface type consists of its outer type parameters plus\r\n        // its locally declared type parameters.\r\n        function getTypeParametersOfClassOrInterface(symbol: Symbol): TypeParameter[] {\r\n            return concatenate(getOuterTypeParametersOfClassOrInterface(symbol), getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol));\r\n        }\r\n\r\n        function getBaseTypes(type: InterfaceType): ObjectType[] {\r\n            let typeWithBaseTypes = <InterfaceTypeWithBaseTypes>type;\r\n            if (!typeWithBaseTypes.baseTypes) {\r\n                if (type.symbol.flags & SymbolFlags.Class) {\r\n                    resolveBaseTypesOfClass(typeWithBaseTypes);\r\n                }\r\n                else if (type.symbol.flags & SymbolFlags.Interface) {\r\n                    resolveBaseTypesOfInterface(typeWithBaseTypes);\r\n                }\r\n                else {\r\n                    Debug.fail(\"type must be class or interface\");\r\n                }\r\n            }\r\n\r\n            return typeWithBaseTypes.baseTypes;\r\n        }\r\n\r\n        function resolveBaseTypesOfClass(type: InterfaceTypeWithBaseTypes): void {\r\n            type.baseTypes = [];\r\n            let declaration = <ClassDeclaration>getDeclarationOfKind(type.symbol, SyntaxKind.ClassDeclaration);\r\n            let baseTypeNode = getClassExtendsHeritageClauseElement(declaration);\r\n            if (baseTypeNode) {\r\n                let baseType = getTypeFromTypeNode(baseTypeNode);\r\n                if (baseType !== unknownType) {\r\n                    if (getTargetType(baseType).flags & TypeFlags.Class) {\r\n                        if (type !== baseType && !hasBaseType(<InterfaceType>baseType, type)) {\r\n                            type.baseTypes.push(baseType);\r\n                        }\r\n                        else {\r\n                            error(declaration, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType));\r\n                        }\r\n                    }\r\n                    else {\r\n                        error(baseTypeNode, Diagnostics.A_class_may_only_extend_another_class);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function resolveBaseTypesOfInterface(type: InterfaceTypeWithBaseTypes): void {\r\n            type.baseTypes = [];\r\n            for (let declaration of type.symbol.declarations) {\r\n                if (declaration.kind === SyntaxKind.InterfaceDeclaration && getInterfaceBaseTypeNodes(<InterfaceDeclaration>declaration)) {\r\n                    for (let node of getInterfaceBaseTypeNodes(<InterfaceDeclaration>declaration)) {\r\n                        let baseType = getTypeFromTypeNode(node);\r\n\r\n                        if (baseType !== unknownType) {\r\n                            if (getTargetType(baseType).flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                                if (type !== baseType && !hasBaseType(<InterfaceType>baseType, type)) {\r\n                                    type.baseTypes.push(baseType);\r\n                                }\r\n                                else {\r\n                                    error(declaration, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType));\r\n                                }\r\n                            }\r\n                            else {\r\n                                error(node, Diagnostics.An_interface_may_only_extend_a_class_or_another_interface);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getDeclaredTypeOfClassOrInterface(symbol: Symbol): InterfaceType {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                let kind = symbol.flags & SymbolFlags.Class ? TypeFlags.Class : TypeFlags.Interface;\r\n                let type = links.declaredType = <InterfaceType>createObjectType(kind, symbol);\r\n                let outerTypeParameters = getOuterTypeParametersOfClassOrInterface(symbol);\r\n                let localTypeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);\r\n                if (outerTypeParameters || localTypeParameters) {\r\n                    type.flags |= TypeFlags.Reference;\r\n                    type.typeParameters = concatenate(outerTypeParameters, localTypeParameters);\r\n                    type.outerTypeParameters = outerTypeParameters;\r\n                    type.localTypeParameters = localTypeParameters;\r\n                    (<GenericType>type).instantiations = {};\r\n                    (<GenericType>type).instantiations[getTypeListId(type.typeParameters)] = <GenericType>type;\r\n                    (<GenericType>type).target = <GenericType>type;\r\n                    (<GenericType>type).typeArguments = type.typeParameters;\r\n                }\r\n            }\r\n            return <InterfaceType>links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfTypeAlias(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                // Note that we use the links object as the target here because the symbol object is used as the unique\r\n                // identity for resolution of the 'type' property in SymbolLinks.\r\n                if (!pushTypeResolution(links)) {\r\n                    return unknownType;\r\n                }\r\n                let declaration = <TypeAliasDeclaration>getDeclarationOfKind(symbol, SyntaxKind.TypeAliasDeclaration);\r\n                let type = getTypeFromTypeNode(declaration.type);\r\n                if (popTypeResolution()) {\r\n                    links.typeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);\r\n                    if (links.typeParameters) {\r\n                        // Initialize the instantiation cache for generic type aliases. The declared type corresponds to\r\n                        // an instantiation of the type alias with the type parameters supplied as type arguments.\r\n                        links.instantiations = {};\r\n                        links.instantiations[getTypeListId(links.typeParameters)] = type;\r\n                    }\r\n                }\r\n                else {\r\n                    type = unknownType;\r\n                    error(declaration.name, Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));\r\n                }\r\n                links.declaredType = type;\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfEnum(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                let type = createType(TypeFlags.Enum);\r\n                type.symbol = symbol;\r\n                links.declaredType = type;\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfTypeParameter(symbol: Symbol): TypeParameter {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                let type = <TypeParameter>createType(TypeFlags.TypeParameter);\r\n                type.symbol = symbol;\r\n                if (!(<TypeParameterDeclaration>getDeclarationOfKind(symbol, SyntaxKind.TypeParameter)).constraint) {\r\n                    type.constraint = noConstraintType;\r\n                }\r\n                links.declaredType = type;\r\n            }\r\n            return <TypeParameter>links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfAlias(symbol: Symbol): Type {\r\n            let links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol));\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfSymbol(symbol: Symbol): Type {\r\n            Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0);\r\n            if (symbol.flags & (SymbolFlags.Class | SymbolFlags.Interface)) {\r\n                return getDeclaredTypeOfClassOrInterface(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.TypeAlias) {\r\n                return getDeclaredTypeOfTypeAlias(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Enum) {\r\n                return getDeclaredTypeOfEnum(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.TypeParameter) {\r\n                return getDeclaredTypeOfTypeParameter(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Alias) {\r\n                return getDeclaredTypeOfAlias(symbol);\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function createSymbolTable(symbols: Symbol[]): SymbolTable {\r\n            let result: SymbolTable = {};\r\n            for (let symbol of symbols) {\r\n                result[symbol.name] = symbol;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function createInstantiatedSymbolTable(symbols: Symbol[], mapper: TypeMapper): SymbolTable {\r\n            let result: SymbolTable = {};\r\n            for (let symbol of symbols) {\r\n                result[symbol.name] = instantiateSymbol(symbol, mapper);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function addInheritedMembers(symbols: SymbolTable, baseSymbols: Symbol[]) {\r\n            for (let s of baseSymbols) {\r\n                if (!hasProperty(symbols, s.name)) {\r\n                    symbols[s.name] = s;\r\n                }\r\n            }\r\n        }\r\n\r\n        function addInheritedSignatures(signatures: Signature[], baseSignatures: Signature[]) {\r\n            if (baseSignatures) {\r\n                for (let signature of baseSignatures) {\r\n                    signatures.push(signature);\r\n                }\r\n            }\r\n        }\r\n\r\n        function resolveDeclaredMembers(type: InterfaceType): InterfaceTypeWithDeclaredMembers {\r\n            if (!(<InterfaceTypeWithDeclaredMembers>type).declaredProperties) {\r\n                let symbol = type.symbol;\r\n                (<InterfaceTypeWithDeclaredMembers>type).declaredProperties = getNamedMembers(symbol.members);\r\n                (<InterfaceTypeWithDeclaredMembers>type).declaredCallSignatures = getSignaturesOfSymbol(symbol.members[\"__call\"]);\r\n                (<InterfaceTypeWithDeclaredMembers>type).declaredConstructSignatures = getSignaturesOfSymbol(symbol.members[\"__new\"]);\r\n                (<InterfaceTypeWithDeclaredMembers>type).declaredStringIndexType = getIndexTypeOfSymbol(symbol, IndexKind.String);\r\n                (<InterfaceTypeWithDeclaredMembers>type).declaredNumberIndexType = getIndexTypeOfSymbol(symbol, IndexKind.Number);\r\n            }\r\n            return <InterfaceTypeWithDeclaredMembers>type;\r\n        }\r\n\r\n        function resolveClassOrInterfaceMembers(type: InterfaceType): void {\r\n            let target = resolveDeclaredMembers(type);\r\n            let members = target.symbol.members;\r\n            let callSignatures = target.declaredCallSignatures;\r\n            let constructSignatures = target.declaredConstructSignatures;\r\n            let stringIndexType = target.declaredStringIndexType;\r\n            let numberIndexType = target.declaredNumberIndexType;\r\n            let baseTypes = getBaseTypes(target);\r\n            if (baseTypes.length) {\r\n                members = createSymbolTable(target.declaredProperties);\r\n                for (let baseType of baseTypes) {\r\n                    addInheritedMembers(members, getPropertiesOfObjectType(baseType));\r\n                    callSignatures = concatenate(callSignatures, getSignaturesOfType(baseType, SignatureKind.Call));\r\n                    constructSignatures = concatenate(constructSignatures, getSignaturesOfType(baseType, SignatureKind.Construct));\r\n                    stringIndexType = stringIndexType || getIndexTypeOfType(baseType, IndexKind.String);\r\n                    numberIndexType = numberIndexType || getIndexTypeOfType(baseType, IndexKind.Number);\r\n                }\r\n            }\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveTypeReferenceMembers(type: TypeReference): void {\r\n            let target = resolveDeclaredMembers(type.target);\r\n            let mapper = createTypeMapper(target.typeParameters, type.typeArguments);\r\n            let members = createInstantiatedSymbolTable(target.declaredProperties, mapper);\r\n            let callSignatures = instantiateList(target.declaredCallSignatures, mapper, instantiateSignature);\r\n            let constructSignatures = instantiateList(target.declaredConstructSignatures, mapper, instantiateSignature);\r\n            let stringIndexType = target.declaredStringIndexType ? instantiateType(target.declaredStringIndexType, mapper) : undefined;\r\n            let numberIndexType = target.declaredNumberIndexType ? instantiateType(target.declaredNumberIndexType, mapper) : undefined;\r\n            forEach(getBaseTypes(target), baseType => {\r\n                let instantiatedBaseType = instantiateType(baseType, mapper);\r\n                addInheritedMembers(members, getPropertiesOfObjectType(instantiatedBaseType));\r\n                callSignatures = concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, SignatureKind.Call));\r\n                constructSignatures = concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, SignatureKind.Construct));\r\n                stringIndexType = stringIndexType || getIndexTypeOfType(instantiatedBaseType, IndexKind.String);\r\n                numberIndexType = numberIndexType || getIndexTypeOfType(instantiatedBaseType, IndexKind.Number);\r\n            });\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function createSignature(declaration: SignatureDeclaration, typeParameters: TypeParameter[], parameters: Symbol[],\r\n            resolvedReturnType: Type, typePredicate: TypePredicate, minArgumentCount: number, hasRestParameter: boolean, hasStringLiterals: boolean): Signature {\r\n            let sig = new Signature(checker);\r\n            sig.declaration = declaration;\r\n            sig.typeParameters = typeParameters;\r\n            sig.parameters = parameters;\r\n            sig.resolvedReturnType = resolvedReturnType;\r\n            sig.typePredicate = typePredicate;\r\n            sig.minArgumentCount = minArgumentCount;\r\n            sig.hasRestParameter = hasRestParameter;\r\n            sig.hasStringLiterals = hasStringLiterals;\r\n            return sig;\r\n        }\r\n\r\n        function cloneSignature(sig: Signature): Signature {\r\n            return createSignature(sig.declaration, sig.typeParameters, sig.parameters, sig.resolvedReturnType, sig.typePredicate,\r\n                sig.minArgumentCount, sig.hasRestParameter, sig.hasStringLiterals);\r\n        }\r\n\r\n        function getDefaultConstructSignatures(classType: InterfaceType): Signature[]{\r\n            let baseTypes = getBaseTypes(classType);\r\n            if (baseTypes.length) {\r\n                let baseType = baseTypes[0];\r\n                let baseSignatures = getSignaturesOfType(getTypeOfSymbol(baseType.symbol), SignatureKind.Construct);\r\n                return map(baseSignatures, baseSignature => {\r\n                    let signature = baseType.flags & TypeFlags.Reference ?\r\n                        getSignatureInstantiation(baseSignature, (<TypeReference>baseType).typeArguments) : cloneSignature(baseSignature);\r\n                    signature.typeParameters = classType.localTypeParameters;\r\n                    signature.resolvedReturnType = classType;\r\n                    return signature;\r\n                });\r\n            }\r\n            return [createSignature(undefined, classType.localTypeParameters, emptyArray, classType, undefined, 0, false, false)];\r\n        }\r\n\r\n        function createTupleTypeMemberSymbols(memberTypes: Type[]): SymbolTable {\r\n            let members: SymbolTable = {};\r\n            for (let i = 0; i < memberTypes.length; i++) {\r\n                let symbol = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"\" + i);\r\n                symbol.type = memberTypes[i];\r\n                members[i] = symbol;\r\n            }\r\n            return members;\r\n        }\r\n\r\n        function resolveTupleTypeMembers(type: TupleType) {\r\n            let arrayType = resolveObjectOrUnionTypeMembers(createArrayType(getUnionType(type.elementTypes)));\r\n            let members = createTupleTypeMemberSymbols(type.elementTypes);\r\n            addInheritedMembers(members, arrayType.properties);\r\n            setObjectTypeMembers(type, members, arrayType.callSignatures, arrayType.constructSignatures, arrayType.stringIndexType, arrayType.numberIndexType);\r\n        }\r\n\r\n        function signatureListsIdentical(s: Signature[], t: Signature[]): boolean {\r\n            if (s.length !== t.length) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < s.length; i++) {\r\n                if (!compareSignatures(s[i], t[i], /*compareReturnTypes*/ false, compareTypes)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // If the lists of call or construct signatures in the given types are all identical except for return types,\r\n        // and if none of the signatures are generic, return a list of signatures that has substitutes a union of the\r\n        // return types of the corresponding signatures in each resulting signature.\r\n        function getUnionSignatures(types: Type[], kind: SignatureKind): Signature[] {\r\n            let signatureLists = map(types, t => getSignaturesOfType(t, kind));\r\n            let signatures = signatureLists[0];\r\n            for (let signature of signatures) {\r\n                if (signature.typeParameters) {\r\n                    return emptyArray;\r\n                }\r\n            }\r\n            for (let i = 1; i < signatureLists.length; i++) {\r\n                if (!signatureListsIdentical(signatures, signatureLists[i])) {\r\n                    return emptyArray;\r\n                }\r\n            }\r\n            let result = map(signatures, cloneSignature);\r\n            for (var i = 0; i < result.length; i++) {\r\n                let s = result[i];\r\n                // Clear resolved return type we possibly got from cloneSignature\r\n                s.resolvedReturnType = undefined;\r\n                s.unionSignatures = map(signatureLists, signatures => signatures[i]);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getUnionIndexType(types: Type[], kind: IndexKind): Type {\r\n            let indexTypes: Type[] = [];\r\n            for (let type of types) {\r\n                let indexType = getIndexTypeOfType(type, kind);\r\n                if (!indexType) {\r\n                    return undefined;\r\n                }\r\n                indexTypes.push(indexType);\r\n            }\r\n            return getUnionType(indexTypes);\r\n        }\r\n\r\n        function resolveUnionTypeMembers(type: UnionType) {\r\n            // The members and properties collections are empty for union types. To get all properties of a union\r\n            // type use getPropertiesOfType (only the language service uses this).\r\n            let callSignatures = getUnionSignatures(type.types, SignatureKind.Call);\r\n            let constructSignatures = getUnionSignatures(type.types, SignatureKind.Construct);\r\n            let stringIndexType = getUnionIndexType(type.types, IndexKind.String);\r\n            let numberIndexType = getUnionIndexType(type.types, IndexKind.Number);\r\n            setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveAnonymousTypeMembers(type: ObjectType) {\r\n            let symbol = type.symbol;\r\n            let members: SymbolTable;\r\n            let callSignatures: Signature[];\r\n            let constructSignatures: Signature[];\r\n            let stringIndexType: Type;\r\n            let numberIndexType: Type;\r\n\r\n            if (symbol.flags & SymbolFlags.TypeLiteral) {\r\n                members = symbol.members;\r\n                callSignatures = getSignaturesOfSymbol(members[\"__call\"]);\r\n                constructSignatures = getSignaturesOfSymbol(members[\"__new\"]);\r\n                stringIndexType = getIndexTypeOfSymbol(symbol, IndexKind.String);\r\n                numberIndexType = getIndexTypeOfSymbol(symbol, IndexKind.Number);\r\n            }\r\n            else {\r\n                // Combinations of function, class, enum and module\r\n                members = emptySymbols;\r\n                callSignatures = emptyArray;\r\n                constructSignatures = emptyArray;\r\n                if (symbol.flags & SymbolFlags.HasExports) {\r\n                    members = getExportsOfSymbol(symbol);\r\n                }\r\n                if (symbol.flags & (SymbolFlags.Function | SymbolFlags.Method)) {\r\n                    callSignatures = getSignaturesOfSymbol(symbol);\r\n                }\r\n                if (symbol.flags & SymbolFlags.Class) {\r\n                    let classType = getDeclaredTypeOfClassOrInterface(symbol);\r\n                    constructSignatures = getSignaturesOfSymbol(symbol.members[\"__constructor\"]);\r\n                    if (!constructSignatures.length) {\r\n                        constructSignatures = getDefaultConstructSignatures(classType);\r\n                    }\r\n                    let baseTypes = getBaseTypes(classType);\r\n                    if (baseTypes.length) {\r\n                        members = createSymbolTable(getNamedMembers(members));\r\n                        addInheritedMembers(members, getPropertiesOfObjectType(getTypeOfSymbol(baseTypes[0].symbol)));\r\n                    }\r\n                }\r\n                stringIndexType = undefined;\r\n                numberIndexType = (symbol.flags & SymbolFlags.Enum) ? stringType : undefined;\r\n            }\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveObjectOrUnionTypeMembers(type: ObjectType): ResolvedType {\r\n            if (!(<ResolvedType>type).members) {\r\n                if (type.flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                    resolveClassOrInterfaceMembers(<InterfaceType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Anonymous) {\r\n                    resolveAnonymousTypeMembers(<ObjectType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Tuple) {\r\n                    resolveTupleTypeMembers(<TupleType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Union) {\r\n                    resolveUnionTypeMembers(<UnionType>type);\r\n                }\r\n                else {\r\n                    resolveTypeReferenceMembers(<TypeReference>type);\r\n                }\r\n            }\r\n            return <ResolvedType>type;\r\n        }\r\n\r\n        // Return properties of an object type or an empty array for other types\r\n        function getPropertiesOfObjectType(type: Type): Symbol[] {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                return resolveObjectOrUnionTypeMembers(<ObjectType>type).properties;\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        // If the given type is an object type and that type has a property by the given name, return\r\n        // the symbol for that property. Otherwise return undefined.\r\n        function getPropertyOfObjectType(type: Type, name: string): Symbol {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (hasProperty(resolved.members, name)) {\r\n                    let symbol = resolved.members[name];\r\n                    if (symbolIsValue(symbol)) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getPropertiesOfUnionType(type: UnionType): Symbol[] {\r\n            let result: Symbol[] = [];\r\n            forEach(getPropertiesOfType(type.types[0]), prop => {\r\n                let unionProp = getPropertyOfUnionType(type, prop.name);\r\n                if (unionProp) {\r\n                    result.push(unionProp);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function getPropertiesOfType(type: Type): Symbol[] {\r\n            type = getApparentType(type);\r\n            return type.flags & TypeFlags.Union ? getPropertiesOfUnionType(<UnionType>type) : getPropertiesOfObjectType(type);\r\n        }\r\n\r\n        // For a type parameter, return the base constraint of the type parameter. For the string, number,\r\n        // boolean, and symbol primitive types, return the corresponding object types. Otherwise return the\r\n        // type itself. Note that the apparent type of a union type is the union type itself.\r\n        function getApparentType(type: Type): Type {\r\n            if (type.flags & TypeFlags.Union) {\r\n                type = getReducedTypeOfUnionType(<UnionType>type);\r\n            }\r\n            if (type.flags & TypeFlags.TypeParameter) {\r\n                do {\r\n                    type = getConstraintOfTypeParameter(<TypeParameter>type);\r\n                } while (type && type.flags & TypeFlags.TypeParameter);\r\n                if (!type) {\r\n                    type = emptyObjectType;\r\n                }\r\n            }\r\n            if (type.flags & TypeFlags.StringLike) {\r\n                type = globalStringType;\r\n            }\r\n            else if (type.flags & TypeFlags.NumberLike) {\r\n                type = globalNumberType;\r\n            }\r\n            else if (type.flags & TypeFlags.Boolean) {\r\n                type = globalBooleanType;\r\n            }\r\n            else if (type.flags & TypeFlags.ESSymbol) {\r\n                type = globalESSymbolType;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function createUnionProperty(unionType: UnionType, name: string): Symbol {\r\n            let types = unionType.types;\r\n            let props: Symbol[];\r\n            for (let current of types) {\r\n                let type = getApparentType(current);\r\n                if (type !== unknownType) {\r\n                    let prop = getPropertyOfType(type, name);\r\n                    if (!prop || getDeclarationFlagsFromSymbol(prop) & (NodeFlags.Private | NodeFlags.Protected)) {\r\n                        return undefined;\r\n                    }\r\n                    if (!props) {\r\n                        props = [prop];\r\n                    }\r\n                    else {\r\n                        props.push(prop);\r\n                    }\r\n                }\r\n            }\r\n            let propTypes: Type[] = [];\r\n            let declarations: Declaration[] = [];\r\n            for (let prop of props) {\r\n                if (prop.declarations) {\r\n                    declarations.push.apply(declarations, prop.declarations);\r\n                }\r\n                propTypes.push(getTypeOfSymbol(prop));\r\n            }\r\n            let result = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient | SymbolFlags.UnionProperty, name);\r\n            result.unionType = unionType;\r\n            result.declarations = declarations;\r\n            result.type = getUnionType(propTypes);\r\n            return result;\r\n        }\r\n\r\n        function getPropertyOfUnionType(type: UnionType, name: string): Symbol {\r\n            let properties = type.resolvedProperties || (type.resolvedProperties = {});\r\n            if (hasProperty(properties, name)) {\r\n                return properties[name];\r\n            }\r\n            let property = createUnionProperty(type, name);\r\n            if (property) {\r\n                properties[name] = property;\r\n            }\r\n            return property;\r\n        }\r\n\r\n        // Return the symbol for the property with the given name in the given type. Creates synthetic union properties when\r\n        // necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from\r\n        // Object and Function as appropriate.\r\n        function getPropertyOfType(type: Type, name: string): Symbol {\r\n            type = getApparentType(type);\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(type);\r\n                if (hasProperty(resolved.members, name)) {\r\n                    let symbol = resolved.members[name];\r\n                    if (symbolIsValue(symbol)) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {\r\n                    let symbol = getPropertyOfObjectType(globalFunctionType, name);\r\n                    if (symbol) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                return getPropertyOfObjectType(globalObjectType, name);\r\n            }\r\n            if (type.flags & TypeFlags.Union) {\r\n                return getPropertyOfUnionType(<UnionType>type, name);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getSignaturesOfObjectOrUnionType(type: Type, kind: SignatureKind): Signature[] {\r\n            if (type.flags & (TypeFlags.ObjectType | TypeFlags.Union)) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                return kind === SignatureKind.Call ? resolved.callSignatures : resolved.constructSignatures;\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        // Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and\r\n        // maps primitive types and type parameters are to their apparent types.\r\n        function getSignaturesOfType(type: Type, kind: SignatureKind): Signature[] {\r\n            return getSignaturesOfObjectOrUnionType(getApparentType(type), kind);\r\n        }\r\n\r\n        function typeHasCallOrConstructSignatures(type: Type): boolean {\r\n            let apparentType = getApparentType(type);\r\n            if (apparentType.flags & (TypeFlags.ObjectType | TypeFlags.Union)) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                return resolved.callSignatures.length > 0\r\n                    || resolved.constructSignatures.length > 0;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getIndexTypeOfObjectOrUnionType(type: Type, kind: IndexKind): Type {\r\n            if (type.flags & (TypeFlags.ObjectType | TypeFlags.Union)) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                return kind === IndexKind.String ? resolved.stringIndexType : resolved.numberIndexType;\r\n            }\r\n        }\r\n\r\n        // Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and\r\n        // maps primitive types and type parameters are to their apparent types.\r\n        function getIndexTypeOfType(type: Type, kind: IndexKind): Type {\r\n            return getIndexTypeOfObjectOrUnionType(getApparentType(type), kind);\r\n        }\r\n\r\n        // Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual\r\n        // type checking functions).\r\n        function getTypeParametersFromDeclaration(typeParameterDeclarations: TypeParameterDeclaration[]): TypeParameter[] {\r\n            let result: TypeParameter[] = [];\r\n            forEach(typeParameterDeclarations, node => {\r\n                let tp = getDeclaredTypeOfTypeParameter(node.symbol);\r\n                if (!contains(result, tp)) {\r\n                    result.push(tp);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function symbolsToArray(symbols: SymbolTable): Symbol[] {\r\n            let result: Symbol[] = [];\r\n            for (let id in symbols) {\r\n                if (!isReservedMemberName(id)) {\r\n                    result.push(symbols[id]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function isOptionalParameter(node: ParameterDeclaration) {\r\n            return hasQuestionToken(node) || !!node.initializer;\r\n        }\r\n\r\n        function getSignatureFromDeclaration(declaration: SignatureDeclaration): Signature {\r\n            let links = getNodeLinks(declaration);\r\n            if (!links.resolvedSignature) {\r\n                let classType = declaration.kind === SyntaxKind.Constructor ? getDeclaredTypeOfClassOrInterface((<ClassDeclaration>declaration.parent).symbol) : undefined;\r\n                let typeParameters = classType ? classType.localTypeParameters :\r\n                    declaration.typeParameters ? getTypeParametersFromDeclaration(declaration.typeParameters) : undefined;\r\n                let parameters: Symbol[] = [];\r\n                let hasStringLiterals = false;\r\n                let minArgumentCount = -1;\r\n                for (let i = 0, n = declaration.parameters.length; i < n; i++) {\r\n                    let param = declaration.parameters[i];\r\n                    parameters.push(param.symbol);\r\n                    if (param.type && param.type.kind === SyntaxKind.StringLiteral) {\r\n                        hasStringLiterals = true;\r\n                    }\r\n                    if (minArgumentCount < 0) {\r\n                        if (param.initializer || param.questionToken || param.dotDotDotToken) {\r\n                            minArgumentCount = i;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (minArgumentCount < 0) {\r\n                    minArgumentCount = declaration.parameters.length;\r\n                }\r\n\r\n                let returnType: Type;\r\n                let typePredicate: TypePredicate;\r\n                if (classType) {\r\n                    returnType = classType;\r\n                }\r\n                else if (declaration.type) {\r\n                    returnType = getTypeFromTypeNode(declaration.type);\r\n                    if (declaration.type.kind === SyntaxKind.TypePredicate) {\r\n                        let typePredicateNode = <TypePredicateNode>declaration.type;\r\n                        typePredicate = {\r\n                            parameterName: typePredicateNode.parameterName ? typePredicateNode.parameterName.text : undefined,\r\n                            parameterIndex: typePredicateNode.parameterName ? getTypePredicateParameterIndex(declaration.parameters, typePredicateNode.parameterName) : undefined,\r\n                            type: getTypeFromTypeNode(typePredicateNode.type)\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    // TypeScript 1.0 spec (April 2014):\r\n                    // If only one accessor includes a type annotation, the other behaves as if it had the same type annotation.\r\n                    if (declaration.kind === SyntaxKind.GetAccessor && !hasDynamicName(declaration)) {\r\n                        let setter = <AccessorDeclaration>getDeclarationOfKind(declaration.symbol, SyntaxKind.SetAccessor);\r\n                        returnType = getAnnotatedAccessorType(setter);\r\n                    }\r\n\r\n                    if (!returnType && nodeIsMissing((<FunctionLikeDeclaration>declaration).body)) {\r\n                        returnType = anyType;\r\n                    }\r\n                }\r\n\r\n                links.resolvedSignature = createSignature(declaration, typeParameters, parameters, returnType, typePredicate,\r\n                    minArgumentCount, hasRestParameter(declaration), hasStringLiterals);\r\n            }\r\n            return links.resolvedSignature;\r\n        }\r\n\r\n        function getSignaturesOfSymbol(symbol: Symbol): Signature[] {\r\n            if (!symbol) return emptyArray;\r\n            let result: Signature[] = [];\r\n            for (let i = 0, len = symbol.declarations.length; i < len; i++) {\r\n                let node = symbol.declarations[i];\r\n                switch (node.kind) {\r\n                    case SyntaxKind.FunctionType:\r\n                    case SyntaxKind.ConstructorType:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.MethodDeclaration:\r\n                    case SyntaxKind.MethodSignature:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.CallSignature:\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.ArrowFunction:\r\n                        // Don't include signature if node is the implementation of an overloaded function. A node is considered\r\n                        // an implementation node if it has a body and the previous node is of the same kind and immediately\r\n                        // precedes the implementation node (i.e. has the same parent and ends where the implementation starts).\r\n                        if (i > 0 && (<FunctionLikeDeclaration>node).body) {\r\n                            let previous = symbol.declarations[i - 1];\r\n                            if (node.parent === previous.parent && node.kind === previous.kind && node.pos === previous.end) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        result.push(getSignatureFromDeclaration(<SignatureDeclaration>node));\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getReturnTypeOfSignature(signature: Signature): Type {\r\n            if (!signature.resolvedReturnType) {\r\n                if (!pushTypeResolution(signature)) {\r\n                    return unknownType;\r\n                }\r\n                let type: Type;\r\n                if (signature.target) {\r\n                    type = instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper);\r\n                }\r\n                else if (signature.unionSignatures) {\r\n                    type = getUnionType(map(signature.unionSignatures, getReturnTypeOfSignature));\r\n                }\r\n                else {\r\n                    type = getReturnTypeFromBody(<FunctionLikeDeclaration>signature.declaration);\r\n                }\r\n                if (!popTypeResolution()) {\r\n                    type = anyType;\r\n                    if (compilerOptions.noImplicitAny) {\r\n                        let declaration = <Declaration>signature.declaration;\r\n                        if (declaration.name) {\r\n                            error(declaration.name, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, declarationNameToString(declaration.name));\r\n                        }\r\n                        else {\r\n                            error(declaration, Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);\r\n                        }\r\n                    }\r\n                }\r\n                signature.resolvedReturnType = type;\r\n            }\r\n            return signature.resolvedReturnType;\r\n        }\r\n\r\n        function getRestTypeOfSignature(signature: Signature): Type {\r\n            if (signature.hasRestParameter) {\r\n                let type = getTypeOfSymbol(lastOrUndefined(signature.parameters));\r\n                if (type.flags & TypeFlags.Reference && (<TypeReference>type).target === globalArrayType) {\r\n                    return (<TypeReference>type).typeArguments[0];\r\n                }\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        function getSignatureInstantiation(signature: Signature, typeArguments: Type[]): Signature {\r\n            return instantiateSignature(signature, createTypeMapper(signature.typeParameters, typeArguments), true);\r\n        }\r\n\r\n        function getErasedSignature(signature: Signature): Signature {\r\n            if (!signature.typeParameters) return signature;\r\n            if (!signature.erasedSignatureCache) {\r\n                if (signature.target) {\r\n                    signature.erasedSignatureCache = instantiateSignature(getErasedSignature(signature.target), signature.mapper);\r\n                }\r\n                else {\r\n                    signature.erasedSignatureCache = instantiateSignature(signature, createTypeEraser(signature.typeParameters), true);\r\n                }\r\n            }\r\n            return signature.erasedSignatureCache;\r\n        }\r\n\r\n        function getOrCreateTypeFromSignature(signature: Signature): ObjectType {\r\n            // There are two ways to declare a construct signature, one is by declaring a class constructor\r\n            // using the constructor keyword, and the other is declaring a bare construct signature in an\r\n            // object type literal or interface (using the new keyword). Each way of declaring a constructor\r\n            // will result in a different declaration kind.\r\n            if (!signature.isolatedSignatureType) {\r\n                let isConstructor = signature.declaration.kind === SyntaxKind.Constructor || signature.declaration.kind === SyntaxKind.ConstructSignature;\r\n                let type = <ResolvedType>createObjectType(TypeFlags.Anonymous | TypeFlags.FromSignature);\r\n                type.members = emptySymbols;\r\n                type.properties = emptyArray;\r\n                type.callSignatures = !isConstructor ? [signature] : emptyArray;\r\n                type.constructSignatures = isConstructor ? [signature] : emptyArray;\r\n                signature.isolatedSignatureType = type;\r\n            }\r\n\r\n            return signature.isolatedSignatureType;\r\n        }\r\n\r\n        function getIndexSymbol(symbol: Symbol): Symbol {\r\n            return symbol.members[\"__index\"];\r\n        }\r\n\r\n        function getIndexDeclarationOfSymbol(symbol: Symbol, kind: IndexKind): SignatureDeclaration {\r\n            let syntaxKind = kind === IndexKind.Number ? SyntaxKind.NumberKeyword : SyntaxKind.StringKeyword;\r\n            let indexSymbol = getIndexSymbol(symbol);\r\n            if (indexSymbol) {\r\n                let len = indexSymbol.declarations.length;\r\n                for (let decl of indexSymbol.declarations) {\r\n                    let node = <SignatureDeclaration>decl;\r\n                    if (node.parameters.length === 1) {\r\n                        let parameter = node.parameters[0];\r\n                        if (parameter && parameter.type && parameter.type.kind === syntaxKind) {\r\n                            return node;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function getIndexTypeOfSymbol(symbol: Symbol, kind: IndexKind): Type {\r\n            let declaration = getIndexDeclarationOfSymbol(symbol, kind);\r\n            return declaration\r\n                ? declaration.type ? getTypeFromTypeNode(declaration.type) : anyType\r\n                : undefined;\r\n        }\r\n\r\n        function getConstraintOfTypeParameter(type: TypeParameter): Type {\r\n            if (!type.constraint) {\r\n                if (type.target) {\r\n                    let targetConstraint = getConstraintOfTypeParameter(type.target);\r\n                    type.constraint = targetConstraint ? instantiateType(targetConstraint, type.mapper) : noConstraintType;\r\n                }\r\n                else {\r\n                    type.constraint = getTypeFromTypeNode((<TypeParameterDeclaration>getDeclarationOfKind(type.symbol, SyntaxKind.TypeParameter)).constraint);\r\n                }\r\n            }\r\n            return type.constraint === noConstraintType ? undefined : type.constraint;\r\n        }\r\n\r\n        function getParentSymbolOfTypeParameter(typeParameter: TypeParameter): Symbol {\r\n            return getSymbolOfNode(getDeclarationOfKind(typeParameter.symbol, SyntaxKind.TypeParameter).parent);\r\n        }\r\n\r\n        function getTypeListId(types: Type[]) {\r\n            switch (types.length) {\r\n                case 1:\r\n                    return \"\" + types[0].id;\r\n                case 2:\r\n                    return types[0].id + \",\" + types[1].id;\r\n                default:\r\n                    let result = \"\";\r\n                    for (let i = 0; i < types.length; i++) {\r\n                        if (i > 0) {\r\n                            result += \",\";\r\n                        }\r\n\r\n                        result += types[i].id;\r\n                    }\r\n                    return result;\r\n            }\r\n        }\r\n\r\n        // This function is used to propagate widening flags when creating new object types references and union types.\r\n        // It is only necessary to do so if a constituent type might be the undefined type, the null type, or the type\r\n        // of an object literal (since those types have widening related information we need to track).\r\n        function getWideningFlagsOfTypes(types: Type[]): TypeFlags {\r\n            let result: TypeFlags = 0;\r\n            for (let type of types) {\r\n                result |= type.flags;\r\n            }\r\n            return result & TypeFlags.RequiresWidening;\r\n        }\r\n\r\n        function createTypeReference(target: GenericType, typeArguments: Type[]): TypeReference {\r\n            let id = getTypeListId(typeArguments);\r\n            let type = target.instantiations[id];\r\n            if (!type) {\r\n                let flags = TypeFlags.Reference | getWideningFlagsOfTypes(typeArguments);\r\n                type = target.instantiations[id] = <TypeReference>createObjectType(flags, target.symbol);\r\n                type.target = target;\r\n                type.typeArguments = typeArguments;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function isTypeParameterReferenceIllegalInConstraint(typeReferenceNode: TypeReferenceNode | ExpressionWithTypeArguments, typeParameterSymbol: Symbol): boolean {\r\n            let links = getNodeLinks(typeReferenceNode);\r\n            if (links.isIllegalTypeReferenceInConstraint !== undefined) {\r\n                return links.isIllegalTypeReferenceInConstraint;\r\n            }\r\n\r\n            // bubble up to the declaration\r\n            let currentNode: Node = typeReferenceNode;\r\n            // forEach === exists\r\n            while (!forEach(typeParameterSymbol.declarations, d => d.parent === currentNode.parent)) {\r\n                currentNode = currentNode.parent;\r\n            }\r\n            // if last step was made from the type parameter this means that path has started somewhere in constraint which is illegal\r\n            links.isIllegalTypeReferenceInConstraint = currentNode.kind === SyntaxKind.TypeParameter;\r\n            return links.isIllegalTypeReferenceInConstraint;\r\n        }\r\n\r\n        function checkTypeParameterHasIllegalReferencesInConstraint(typeParameter: TypeParameterDeclaration): void {\r\n            let typeParameterSymbol: Symbol;\r\n            function check(n: Node): void {\r\n                if (n.kind === SyntaxKind.TypeReference && (<TypeReferenceNode>n).typeName.kind === SyntaxKind.Identifier) {\r\n                    let links = getNodeLinks(n);\r\n                    if (links.isIllegalTypeReferenceInConstraint === undefined) {\r\n                        let symbol = resolveName(typeParameter, (<Identifier>(<TypeReferenceNode>n).typeName).text, SymbolFlags.Type, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined);\r\n                        if (symbol && (symbol.flags & SymbolFlags.TypeParameter)) {\r\n                            // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                            // Type parameters declared in a particular type parameter list\r\n                            // may not be referenced in constraints in that type parameter list\r\n\r\n                            // symbol.declaration.parent === typeParameter.parent\r\n                            // -> typeParameter and symbol.declaration originate from the same type parameter list\r\n                            // -> illegal for all declarations in symbol\r\n                            // forEach === exists\r\n                            links.isIllegalTypeReferenceInConstraint = forEach(symbol.declarations, d => d.parent == typeParameter.parent);\r\n                        }\r\n                    }\r\n                    if (links.isIllegalTypeReferenceInConstraint) {\r\n                        error(typeParameter, Diagnostics.Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list);\r\n                    }\r\n                }\r\n                forEachChild(n, check);\r\n            }\r\n\r\n            if (typeParameter.constraint) {\r\n                typeParameterSymbol = getSymbolOfNode(typeParameter);\r\n                check(typeParameter.constraint);\r\n            }\r\n        }\r\n\r\n        // Get type from reference to class or interface\r\n        function getTypeFromClassOrInterfaceReference(node: TypeReferenceNode | ExpressionWithTypeArguments, symbol: Symbol): Type {\r\n            let type = getDeclaredTypeOfSymbol(symbol);\r\n            let typeParameters = (<InterfaceType>type).localTypeParameters;\r\n            if (typeParameters) {\r\n                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\r\n                    error(node, Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType), typeParameters.length);\r\n                    return unknownType;\r\n                }\r\n                // In a type reference, the outer type parameters of the referenced class or interface are automatically\r\n                // supplied as type arguments and the type reference only specifies arguments for the local type parameters\r\n                // of the class or interface.\r\n                return createTypeReference(<GenericType>type, concatenate((<InterfaceType>type).outerTypeParameters,\r\n                    map(node.typeArguments, getTypeFromTypeNode)));\r\n            }\r\n            if (node.typeArguments) {\r\n                error(node, Diagnostics.Type_0_is_not_generic, typeToString(type));\r\n                return unknownType;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include\r\n        // references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the\r\n        // declared type. Instantiations are cached using the type identities of the type arguments as the key.\r\n        function getTypeFromTypeAliasReference(node: TypeReferenceNode | ExpressionWithTypeArguments, symbol: Symbol): Type {\r\n            let type = getDeclaredTypeOfSymbol(symbol);\r\n            let links = getSymbolLinks(symbol);\r\n            let typeParameters = links.typeParameters;\r\n            if (typeParameters) {\r\n                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\r\n                    error(node, Diagnostics.Generic_type_0_requires_1_type_argument_s, symbolToString(symbol), typeParameters.length);\r\n                    return unknownType;\r\n                }\r\n                let typeArguments = map(node.typeArguments, getTypeFromTypeNode);\r\n                let id = getTypeListId(typeArguments);\r\n                return links.instantiations[id] || (links.instantiations[id] = instantiateType(type, createTypeMapper(typeParameters, typeArguments)));\r\n            }\r\n            if (node.typeArguments) {\r\n                error(node, Diagnostics.Type_0_is_not_generic, symbolToString(symbol));\r\n                return unknownType;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Get type from reference to named type that cannot be generic (enum or type parameter)\r\n        function getTypeFromNonGenericTypeReference(node: TypeReferenceNode | ExpressionWithTypeArguments, symbol: Symbol): Type {\r\n            if (symbol.flags & SymbolFlags.TypeParameter && isTypeParameterReferenceIllegalInConstraint(node, symbol)) {\r\n                // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                // Type parameters declared in a particular type parameter list\r\n                // may not be referenced in constraints in that type parameter list\r\n                // Implementation: such type references are resolved to 'unknown' type that usually denotes error\r\n                return unknownType;\r\n            }\r\n            if (node.typeArguments) {\r\n                error(node, Diagnostics.Type_0_is_not_generic, symbolToString(symbol));\r\n                return unknownType;\r\n            }\r\n            return getDeclaredTypeOfSymbol(symbol);\r\n        }\r\n\r\n        function getTypeFromTypeReference(node: TypeReferenceNode | ExpressionWithTypeArguments): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                // We only support expressions that are simple qualified names. For other expressions this produces undefined.\r\n                let typeNameOrExpression = node.kind === SyntaxKind.TypeReference ? (<TypeReferenceNode>node).typeName :\r\n                    isSupportedExpressionWithTypeArguments(<ExpressionWithTypeArguments>node) ? (<ExpressionWithTypeArguments>node).expression :\r\n                    undefined;\r\n                let symbol = typeNameOrExpression && resolveEntityName(typeNameOrExpression, SymbolFlags.Type) || unknownSymbol;\r\n                let type = symbol === unknownSymbol ? unknownType :\r\n                    symbol.flags & (SymbolFlags.Class | SymbolFlags.Interface) ? getTypeFromClassOrInterfaceReference(node, symbol) :\r\n                    symbol.flags & SymbolFlags.TypeAlias ? getTypeFromTypeAliasReference(node, symbol) :\r\n                    getTypeFromNonGenericTypeReference(node, symbol);\r\n                // Cache both the resolved symbol and the resolved type. The resolved symbol is needed in when we check the\r\n                // type reference in checkTypeReferenceOrExpressionWithTypeArguments.\r\n                links.resolvedSymbol = symbol;\r\n                links.resolvedType = type;\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeQueryNode(node: TypeQueryNode): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                // TypeScript 1.0 spec (April 2014): 3.6.3\r\n                // The expression is processed as an identifier expression (section 4.3)\r\n                // or property access expression(section 4.10),\r\n                // the widened type(section 3.9) of which becomes the result.\r\n                links.resolvedType = getWidenedType(checkExpressionOrQualifiedName(node.exprName));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeOfGlobalSymbol(symbol: Symbol, arity: number): ObjectType {\r\n\r\n            function getTypeDeclaration(symbol: Symbol): Declaration {\r\n                let declarations = symbol.declarations;\r\n                for (let declaration of declarations) {\r\n                    switch (declaration.kind) {\r\n                        case SyntaxKind.ClassDeclaration:\r\n                        case SyntaxKind.InterfaceDeclaration:\r\n                        case SyntaxKind.EnumDeclaration:\r\n                            return declaration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!symbol) {\r\n                return arity ? emptyGenericType : emptyObjectType;\r\n            }\r\n            let type = getDeclaredTypeOfSymbol(symbol);\r\n            if (!(type.flags & TypeFlags.ObjectType)) {\r\n                error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbol.name);\r\n                return arity ? emptyGenericType : emptyObjectType;\r\n            }\r\n            if (((<InterfaceType>type).typeParameters ? (<InterfaceType>type).typeParameters.length : 0) !== arity) {\r\n                error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbol.name, arity);\r\n                return arity ? emptyGenericType : emptyObjectType;\r\n            }\r\n            return <ObjectType>type;\r\n        }\r\n\r\n        function getGlobalValueSymbol(name: string): Symbol {\r\n            return getGlobalSymbol(name, SymbolFlags.Value, Diagnostics.Cannot_find_global_value_0);\r\n        }\r\n\r\n        function getGlobalTypeSymbol(name: string): Symbol {\r\n            return getGlobalSymbol(name, SymbolFlags.Type, Diagnostics.Cannot_find_global_type_0);\r\n        }\r\n\r\n        function getGlobalSymbol(name: string, meaning: SymbolFlags, diagnostic: DiagnosticMessage): Symbol {\r\n            return resolveName(undefined, name, meaning, diagnostic, name);\r\n        }\r\n\r\n        function getGlobalType(name: string, arity = 0): ObjectType {\r\n            return getTypeOfGlobalSymbol(getGlobalTypeSymbol(name), arity);\r\n        }\r\n\r\n        function getGlobalESSymbolConstructorSymbol() {\r\n            return globalESSymbolConstructorSymbol || (globalESSymbolConstructorSymbol = getGlobalValueSymbol(\"Symbol\"));\r\n        }\r\n\r\n        /**\r\n         * Instantiates a global type that is generic with some element type, and returns that instantiation.\r\n         */\r\n        function createTypeFromGenericGlobalType(genericGlobalType: GenericType, elementType: Type): Type {\r\n            return <ObjectType>genericGlobalType !== emptyGenericType ? createTypeReference(genericGlobalType, [elementType]) : emptyObjectType;\r\n        }\r\n\r\n        function createIterableType(elementType: Type): Type {\r\n            return createTypeFromGenericGlobalType(globalIterableType, elementType);\r\n        }\r\n\r\n        function createIterableIteratorType(elementType: Type): Type {\r\n            return createTypeFromGenericGlobalType(globalIterableIteratorType, elementType);\r\n        }\r\n\r\n        function createArrayType(elementType: Type): Type {\r\n            return createTypeFromGenericGlobalType(globalArrayType, elementType);\r\n        }\r\n\r\n        function getTypeFromArrayTypeNode(node: ArrayTypeNode): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = createArrayType(getTypeFromTypeNode(node.elementType));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function createTupleType(elementTypes: Type[]) {\r\n            let id = getTypeListId(elementTypes);\r\n            let type = tupleTypes[id];\r\n            if (!type) {\r\n                type = tupleTypes[id] = <TupleType>createObjectType(TypeFlags.Tuple);\r\n                type.elementTypes = elementTypes;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function getTypeFromTupleTypeNode(node: TupleTypeNode): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = createTupleType(map(node.elementTypes, getTypeFromTypeNode));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function addTypeToSortedSet(sortedSet: Type[], type: Type) {\r\n            if (type.flags & TypeFlags.Union) {\r\n                addTypesToSortedSet(sortedSet, (<UnionType>type).types);\r\n            }\r\n            else {\r\n                let i = 0;\r\n                let id = type.id;\r\n                while (i < sortedSet.length && sortedSet[i].id < id) {\r\n                    i++;\r\n                }\r\n                if (i === sortedSet.length || sortedSet[i].id !== id) {\r\n                    sortedSet.splice(i, 0, type);\r\n                }\r\n            }\r\n        }\r\n\r\n        function addTypesToSortedSet(sortedTypes: Type[], types: Type[]) {\r\n            for (let type of types) {\r\n                addTypeToSortedSet(sortedTypes, type);\r\n            }\r\n        }\r\n\r\n        function isSubtypeOfAny(candidate: Type, types: Type[]): boolean {\r\n            for (let type of types) {\r\n                if (candidate !== type && isTypeSubtypeOf(candidate, type)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function removeSubtypes(types: Type[]) {\r\n            let i = types.length;\r\n            while (i > 0) {\r\n                i--;\r\n                if (isSubtypeOfAny(types[i], types)) {\r\n                    types.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        function containsTypeAny(types: Type[]) {\r\n            for (let type of types) {\r\n                if (isTypeAny(type)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function removeAllButLast(types: Type[], typeToRemove: Type) {\r\n            let i = types.length;\r\n            while (i > 0 && types.length > 1) {\r\n                i--;\r\n                if (types[i] === typeToRemove) {\r\n                    types.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // The noSubtypeReduction flag is there because it isn't possible to always do subtype reduction. The flag\r\n        // is true when creating a union type from a type node and when instantiating a union type. In both of those\r\n        // cases subtype reduction has to be deferred to properly support recursive union types. For example, a\r\n        // type alias of the form \"type Item = string | (() => Item)\" cannot be reduced during its declaration.\r\n        function getUnionType(types: Type[], noSubtypeReduction?: boolean): Type {\r\n            if (types.length === 0) {\r\n                return emptyObjectType;\r\n            }\r\n            let sortedTypes: Type[] = [];\r\n            addTypesToSortedSet(sortedTypes, types);\r\n            if (noSubtypeReduction) {\r\n                if (containsTypeAny(sortedTypes)) {\r\n                    return anyType;\r\n                }\r\n                removeAllButLast(sortedTypes, undefinedType);\r\n                removeAllButLast(sortedTypes, nullType);\r\n            }\r\n            else {\r\n                removeSubtypes(sortedTypes);\r\n            }\r\n            if (sortedTypes.length === 1) {\r\n                return sortedTypes[0];\r\n            }\r\n            let id = getTypeListId(sortedTypes);\r\n            let type = unionTypes[id];\r\n            if (!type) {\r\n                type = unionTypes[id] = <UnionType>createObjectType(TypeFlags.Union | getWideningFlagsOfTypes(sortedTypes));\r\n                type.types = sortedTypes;\r\n                type.reducedType = noSubtypeReduction ? undefined : type;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Subtype reduction is basically an optimization we do to avoid excessively large union types, which take longer\r\n        // to process and look strange in quick info and error messages. Semantically there is no difference between the\r\n        // reduced type and the type itself. So, when we detect a circularity we simply say that the reduced type is the\r\n        // type itself.\r\n        function getReducedTypeOfUnionType(type: UnionType): Type {\r\n            if (!type.reducedType) {\r\n                type.reducedType = circularType;\r\n                let reducedType = getUnionType(type.types, /*noSubtypeReduction*/ false);\r\n                if (type.reducedType === circularType) {\r\n                    type.reducedType = reducedType;\r\n                }\r\n            }\r\n            else if (type.reducedType === circularType) {\r\n                type.reducedType = type;\r\n            }\r\n            return type.reducedType;\r\n        }\r\n\r\n        function getTypeFromUnionTypeNode(node: UnionTypeNode): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = getUnionType(map(node.types, getTypeFromTypeNode), /*noSubtypeReduction*/ true);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node: Node): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                // Deferred resolution of members is handled by resolveObjectTypeMembers\r\n                links.resolvedType = createObjectType(TypeFlags.Anonymous, node.symbol);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getStringLiteralType(node: StringLiteral): StringLiteralType {\r\n            if (hasProperty(stringLiteralTypes, node.text)) {\r\n                return stringLiteralTypes[node.text];\r\n            }\r\n\r\n            let type = stringLiteralTypes[node.text] = <StringLiteralType>createType(TypeFlags.StringLiteral);\r\n            type.text = getTextOfNode(node);\r\n            return type;\r\n        }\r\n\r\n        function getTypeFromStringLiteral(node: StringLiteral): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = getStringLiteralType(node);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeNode(node: TypeNode): Type {\r\n            switch (node.kind) {\r\n                case SyntaxKind.AnyKeyword:\r\n                    return anyType;\r\n                case SyntaxKind.StringKeyword:\r\n                    return stringType;\r\n                case SyntaxKind.NumberKeyword:\r\n                    return numberType;\r\n                case SyntaxKind.BooleanKeyword:\r\n                    return booleanType;\r\n                case SyntaxKind.SymbolKeyword:\r\n                    return esSymbolType;\r\n                case SyntaxKind.VoidKeyword:\r\n                    return voidType;\r\n                case SyntaxKind.StringLiteral:\r\n                    return getTypeFromStringLiteral(<StringLiteral>node);\r\n                case SyntaxKind.TypeReference:\r\n                    return getTypeFromTypeReference(<TypeReferenceNode>node);\r\n                case SyntaxKind.TypePredicate:\r\n                    return booleanType;\r\n                case SyntaxKind.ExpressionWithTypeArguments:\r\n                    return getTypeFromTypeReference(<ExpressionWithTypeArguments>node);\r\n                case SyntaxKind.TypeQuery:\r\n                    return getTypeFromTypeQueryNode(<TypeQueryNode>node);\r\n                case SyntaxKind.ArrayType:\r\n                    return getTypeFromArrayTypeNode(<ArrayTypeNode>node);\r\n                case SyntaxKind.TupleType:\r\n                    return getTypeFromTupleTypeNode(<TupleTypeNode>node);\r\n                case SyntaxKind.UnionType:\r\n                    return getTypeFromUnionTypeNode(<UnionTypeNode>node);\r\n                case SyntaxKind.ParenthesizedType:\r\n                    return getTypeFromTypeNode((<ParenthesizedTypeNode>node).type);\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                case SyntaxKind.TypeLiteral:\r\n                    return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);\r\n                // This function assumes that an identifier or qualified name is a type expression\r\n                // Callers should first ensure this by calling isTypeNode\r\n                case SyntaxKind.Identifier:\r\n                case SyntaxKind.QualifiedName:\r\n                    let symbol = getSymbolInfo(node);\r\n                    return symbol && getDeclaredTypeOfSymbol(symbol);\r\n                default:\r\n                    return unknownType;\r\n            }\r\n        }\r\n\r\n        function instantiateList<T>(items: T[], mapper: TypeMapper, instantiator: (item: T, mapper: TypeMapper) => T): T[] {\r\n            if (items && items.length) {\r\n                let result: T[] = [];\r\n                for (let v of items) {\r\n                    result.push(instantiator(v, mapper));\r\n                }\r\n                return result;\r\n            }\r\n            return items;\r\n        }\r\n\r\n        function createUnaryTypeMapper(source: Type, target: Type): TypeMapper {\r\n            return t => t === source ? target : t;\r\n        }\r\n\r\n        function createBinaryTypeMapper(source1: Type, target1: Type, source2: Type, target2: Type): TypeMapper {\r\n            return t => t === source1 ? target1 : t === source2 ? target2 : t;\r\n        }\r\n\r\n        function createTypeMapper(sources: Type[], targets: Type[]): TypeMapper {\r\n            switch (sources.length) {\r\n                case 1: return createUnaryTypeMapper(sources[0], targets[0]);\r\n                case 2: return createBinaryTypeMapper(sources[0], targets[0], sources[1], targets[1]);\r\n            }\r\n            return t => {\r\n                for (let i = 0; i < sources.length; i++) {\r\n                    if (t === sources[i]) {\r\n                        return targets[i];\r\n                    }\r\n                }\r\n                return t;\r\n            };\r\n        }\r\n\r\n        function createUnaryTypeEraser(source: Type): TypeMapper {\r\n            return t => t === source ? anyType : t;\r\n        }\r\n\r\n        function createBinaryTypeEraser(source1: Type, source2: Type): TypeMapper {\r\n            return t => t === source1 || t === source2 ? anyType : t;\r\n        }\r\n\r\n        function createTypeEraser(sources: Type[]): TypeMapper {\r\n            switch (sources.length) {\r\n                case 1: return createUnaryTypeEraser(sources[0]);\r\n                case 2: return createBinaryTypeEraser(sources[0], sources[1]);\r\n            }\r\n            return t => {\r\n                for (let source of sources) {\r\n                    if (t === source) {\r\n                        return anyType;\r\n                    }\r\n                }\r\n                return t;\r\n            };\r\n        }\r\n\r\n        function createInferenceMapper(context: InferenceContext): TypeMapper {\r\n            return t => {\r\n                for (let i = 0; i < context.typeParameters.length; i++) {\r\n                    if (t === context.typeParameters[i]) {\r\n                        context.inferences[i].isFixed = true;\r\n                        return getInferredType(context, i);\r\n                    }\r\n                }\r\n                return t;\r\n            }\r\n        }\r\n\r\n        function identityMapper(type: Type): Type {\r\n            return type;\r\n        }\r\n\r\n        function combineTypeMappers(mapper1: TypeMapper, mapper2: TypeMapper): TypeMapper {\r\n            return t => instantiateType(mapper1(t), mapper2);\r\n        }\r\n\r\n        function instantiateTypeParameter(typeParameter: TypeParameter, mapper: TypeMapper): TypeParameter {\r\n            let result = <TypeParameter>createType(TypeFlags.TypeParameter);\r\n            result.symbol = typeParameter.symbol;\r\n            if (typeParameter.constraint) {\r\n                result.constraint = instantiateType(typeParameter.constraint, mapper);\r\n            }\r\n            else {\r\n                result.target = typeParameter;\r\n                result.mapper = mapper;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function instantiateSignature(signature: Signature, mapper: TypeMapper, eraseTypeParameters?: boolean): Signature {\r\n            let freshTypeParameters: TypeParameter[];\r\n            let freshTypePredicate: TypePredicate;\r\n            if (signature.typeParameters && !eraseTypeParameters) {\r\n                freshTypeParameters = instantiateList(signature.typeParameters, mapper, instantiateTypeParameter);\r\n                mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);\r\n            }\r\n            if (signature.typePredicate) {\r\n                freshTypePredicate = {\r\n                    parameterName: signature.typePredicate.parameterName,\r\n                    parameterIndex: signature.typePredicate.parameterIndex,\r\n                    type: instantiateType(signature.typePredicate.type, mapper)\r\n                }\r\n            }\r\n            let result = createSignature(signature.declaration, freshTypeParameters,\r\n                instantiateList(signature.parameters, mapper, instantiateSymbol),\r\n                signature.resolvedReturnType ? instantiateType(signature.resolvedReturnType, mapper) : undefined,\r\n                freshTypePredicate,\r\n                signature.minArgumentCount, signature.hasRestParameter, signature.hasStringLiterals);\r\n            result.target = signature;\r\n            result.mapper = mapper;\r\n            return result;\r\n        }\r\n\r\n        function instantiateSymbol(symbol: Symbol, mapper: TypeMapper): Symbol {\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                let links = getSymbolLinks(symbol);\r\n                // If symbol being instantiated is itself a instantiation, fetch the original target and combine the\r\n                // type mappers. This ensures that original type identities are properly preserved and that aliases\r\n                // always reference a non-aliases.\r\n                symbol = links.target;\r\n                mapper = combineTypeMappers(links.mapper, mapper);\r\n            }\r\n\r\n            // Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and\r\n            // also transient so that we can just store data on it directly.\r\n            let result = <TransientSymbol>createSymbol(SymbolFlags.Instantiated | SymbolFlags.Transient | symbol.flags, symbol.name);\r\n            result.declarations = symbol.declarations;\r\n            result.parent = symbol.parent;\r\n            result.target = symbol;\r\n            result.mapper = mapper;\r\n            if (symbol.valueDeclaration) {\r\n                result.valueDeclaration = symbol.valueDeclaration;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function instantiateAnonymousType(type: ObjectType, mapper: TypeMapper): ObjectType {\r\n            // Mark the anonymous type as instantiated such that our infinite instantiation detection logic can recognize it\r\n            let result = <ResolvedType>createObjectType(TypeFlags.Anonymous | TypeFlags.Instantiated, type.symbol);\r\n            result.properties = instantiateList(getPropertiesOfObjectType(type), mapper, instantiateSymbol);\r\n            result.members = createSymbolTable(result.properties);\r\n            result.callSignatures = instantiateList(getSignaturesOfType(type, SignatureKind.Call), mapper, instantiateSignature);\r\n            result.constructSignatures = instantiateList(getSignaturesOfType(type, SignatureKind.Construct), mapper, instantiateSignature);\r\n            let stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n            let numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n            if (stringIndexType) result.stringIndexType = instantiateType(stringIndexType, mapper);\r\n            if (numberIndexType) result.numberIndexType = instantiateType(numberIndexType, mapper);\r\n            return result;\r\n        }\r\n\r\n        function instantiateType(type: Type, mapper: TypeMapper): Type {\r\n            if (mapper !== identityMapper) {\r\n                if (type.flags & TypeFlags.TypeParameter) {\r\n                    return mapper(<TypeParameter>type);\r\n                }\r\n                if (type.flags & TypeFlags.Anonymous) {\r\n                    return type.symbol && type.symbol.flags & (SymbolFlags.Function | SymbolFlags.Method | SymbolFlags.Class | SymbolFlags.TypeLiteral | SymbolFlags.ObjectLiteral) ?\r\n                        instantiateAnonymousType(<ObjectType>type, mapper) : type;\r\n                }\r\n                if (type.flags & TypeFlags.Reference) {\r\n                    return createTypeReference((<TypeReference>type).target, instantiateList((<TypeReference>type).typeArguments, mapper, instantiateType));\r\n                }\r\n                if (type.flags & TypeFlags.Tuple) {\r\n                    return createTupleType(instantiateList((<TupleType>type).elementTypes, mapper, instantiateType));\r\n                }\r\n                if (type.flags & TypeFlags.Union) {\r\n                    return getUnionType(instantiateList((<UnionType>type).types, mapper, instantiateType), /*noSubtypeReduction*/ true);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Returns true if the given expression contains (at any level of nesting) a function or arrow expression\r\n        // that is subject to contextual typing.\r\n        function isContextSensitive(node: Expression | MethodDeclaration | ObjectLiteralElement): boolean {\r\n            Debug.assert(node.kind !== SyntaxKind.MethodDeclaration || isObjectLiteralMethod(node));\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    return isContextSensitiveFunctionLikeDeclaration(<FunctionExpression>node);\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                    return forEach((<ObjectLiteralExpression>node).properties, isContextSensitive);\r\n                case SyntaxKind.ArrayLiteralExpression:\r\n                    return forEach((<ArrayLiteralExpression>node).elements, isContextSensitive);\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return isContextSensitive((<ConditionalExpression>node).whenTrue) ||\r\n                        isContextSensitive((<ConditionalExpression>node).whenFalse);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return (<BinaryExpression>node).operatorToken.kind === SyntaxKind.BarBarToken &&\r\n                        (isContextSensitive((<BinaryExpression>node).left) || isContextSensitive((<BinaryExpression>node).right));\r\n                case SyntaxKind.PropertyAssignment:\r\n                    return isContextSensitive((<PropertyAssignment>node).initializer);\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    return isContextSensitiveFunctionLikeDeclaration(<MethodDeclaration>node);\r\n                case SyntaxKind.ParenthesizedExpression:\r\n                    return isContextSensitive((<ParenthesizedExpression>node).expression);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isContextSensitiveFunctionLikeDeclaration(node: FunctionLikeDeclaration) {\r\n            return !node.typeParameters && node.parameters.length && !forEach(node.parameters, p => p.type);\r\n        }\r\n\r\n        function getTypeWithoutConstructors(type: Type): Type {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (resolved.constructSignatures.length) {\r\n                    let result = <ResolvedType>createObjectType(TypeFlags.Anonymous, type.symbol);\r\n                    result.members = resolved.members;\r\n                    result.properties = resolved.properties;\r\n                    result.callSignatures = resolved.callSignatures;\r\n                    result.constructSignatures = emptyArray;\r\n                    type = result;\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // TYPE CHECKING\r\n\r\n        let subtypeRelation: Map<RelationComparisonResult> = {};\r\n        let assignableRelation: Map<RelationComparisonResult> = {};\r\n        let identityRelation: Map<RelationComparisonResult> = {};\r\n\r\n        function isTypeIdenticalTo(source: Type, target: Type): boolean {\r\n            return checkTypeRelatedTo(source, target, identityRelation, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function compareTypes(source: Type, target: Type): Ternary {\r\n            return checkTypeRelatedTo(source, target, identityRelation, /*errorNode*/ undefined) ? Ternary.True : Ternary.False;\r\n        }\r\n\r\n        function isTypeSubtypeOf(source: Type, target: Type): boolean {\r\n            return checkTypeSubtypeOf(source, target, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function isTypeAssignableTo(source: Type, target: Type): boolean {\r\n            return checkTypeAssignableTo(source, target, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function checkTypeSubtypeOf(source: Type, target: Type, errorNode: Node, headMessage?: DiagnosticMessage, containingMessageChain?: DiagnosticMessageChain): boolean {\r\n            return checkTypeRelatedTo(source, target, subtypeRelation, errorNode, headMessage, containingMessageChain);\r\n        }\r\n\r\n        function checkTypeAssignableTo(source: Type, target: Type, errorNode: Node, headMessage?: DiagnosticMessage): boolean {\r\n            return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage);\r\n        }\r\n\r\n        function isSignatureAssignableTo(source: Signature, target: Signature): boolean {\r\n            let sourceType = getOrCreateTypeFromSignature(source);\r\n            let targetType = getOrCreateTypeFromSignature(target);\r\n            return checkTypeRelatedTo(sourceType, targetType, assignableRelation, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function checkTypeRelatedTo(\r\n            source: Type,\r\n            target: Type,\r\n            relation: Map<RelationComparisonResult>,\r\n            errorNode: Node,\r\n            headMessage?: DiagnosticMessage,\r\n            containingMessageChain?: DiagnosticMessageChain): boolean {\r\n\r\n            let errorInfo: DiagnosticMessageChain;\r\n            let sourceStack: ObjectType[];\r\n            let targetStack: ObjectType[];\r\n            let maybeStack: Map<RelationComparisonResult>[];\r\n            let expandingFlags: number;\r\n            let depth = 0;\r\n            let overflow = false;\r\n            let elaborateErrors = false;\r\n\r\n            Debug.assert(relation !== identityRelation || !errorNode, \"no error reporting in identity checking\");\r\n\r\n            let result = isRelatedTo(source, target, errorNode !== undefined, headMessage);\r\n            if (overflow) {\r\n                error(errorNode, Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));\r\n            }\r\n            else if (errorInfo) {\r\n                // If we already computed this relation, but in a context where we didn't want to report errors (e.g. overload resolution),\r\n                // then we'll only have a top-level error (e.g. 'Class X does not implement interface Y') without any details. If this happened,\r\n                // request a recompuation to get a complete error message. This will be skipped if we've already done this computation in a context\r\n                // where errors were being reported.\r\n                if (errorInfo.next === undefined) {\r\n                    errorInfo = undefined;\r\n                    elaborateErrors = true;\r\n                    isRelatedTo(source, target, errorNode !== undefined, headMessage);\r\n                }\r\n                if (containingMessageChain) {\r\n                    errorInfo = concatenateDiagnosticMessageChains(containingMessageChain, errorInfo);\r\n                }\r\n\r\n                diagnostics.add(createDiagnosticForNodeFromMessageChain(errorNode, errorInfo));\r\n            }\r\n            return result !== Ternary.False;\r\n\r\n            function reportError(message: DiagnosticMessage, arg0?: string, arg1?: string, arg2?: string): void {\r\n                errorInfo = chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);\r\n            }\r\n\r\n            // Compare two types and return\r\n            // Ternary.True if they are related with no assumptions,\r\n            // Ternary.Maybe if they are related with assumptions of other relationships, or\r\n            // Ternary.False if they are not related.\r\n            function isRelatedTo(source: Type, target: Type, reportErrors?: boolean, headMessage?: DiagnosticMessage): Ternary {\r\n                let result: Ternary;\r\n                // both types are the same - covers 'they are the same primitive type or both are Any' or the same type parameter cases\r\n                if (source === target) return Ternary.True;\r\n                if (relation !== identityRelation) {\r\n                    if (isTypeAny(target)) return Ternary.True;\r\n                    if (source === undefinedType) return Ternary.True;\r\n                    if (source === nullType && target !== undefinedType) return Ternary.True;\r\n                    if (source.flags & TypeFlags.Enum && target === numberType) return Ternary.True;\r\n                    if (source.flags & TypeFlags.StringLiteral && target === stringType) return Ternary.True;\r\n                    if (relation === assignableRelation) {\r\n                        if (isTypeAny(source)) return Ternary.True;\r\n                        if (source === numberType && target.flags & TypeFlags.Enum) return Ternary.True;\r\n                    }\r\n                }\r\n                let saveErrorInfo = errorInfo;\r\n                if (source.flags & TypeFlags.Union || target.flags & TypeFlags.Union) {\r\n                    if (relation === identityRelation) {\r\n                        if (source.flags & TypeFlags.Union && target.flags & TypeFlags.Union) {\r\n                            if (result = unionTypeRelatedToUnionType(<UnionType>source, <UnionType>target)) {\r\n                                if (result &= unionTypeRelatedToUnionType(<UnionType>target, <UnionType>source)) {\r\n                                    return result;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (source.flags & TypeFlags.Union) {\r\n                            if (result = unionTypeRelatedToType(<UnionType>source, target, reportErrors)) {\r\n                                return result;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (result = unionTypeRelatedToType(<UnionType>target, source, reportErrors)) {\r\n                                return result;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (source.flags & TypeFlags.Union) {\r\n                            if (result = unionTypeRelatedToType(<UnionType>source, target, reportErrors)) {\r\n                                return result;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (result = typeRelatedToUnionType(source, <UnionType>target, reportErrors)) {\r\n                                return result;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.TypeParameter && target.flags & TypeFlags.TypeParameter) {\r\n                    if (result = typeParameterRelatedTo(<TypeParameter>source, <TypeParameter>target, reportErrors)) {\r\n                        return result;\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.Reference && target.flags & TypeFlags.Reference && (<TypeReference>source).target === (<TypeReference>target).target) {\r\n                    // We have type references to same target type, see if relationship holds for all type arguments\r\n                    if (result = typesRelatedTo((<TypeReference>source).typeArguments, (<TypeReference>target).typeArguments, reportErrors)) {\r\n                        return result;\r\n                    }\r\n                }\r\n\r\n                // Even if relationship doesn't hold for unions, type parameters, or generic type references,\r\n                // it may hold in a structural comparison.\r\n                // Report structural errors only if we haven't reported any errors yet\r\n                let reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo;\r\n                // identity relation does not use apparent type\r\n                let sourceOrApparentType = relation === identityRelation ? source : getApparentType(source);\r\n                if (sourceOrApparentType.flags & TypeFlags.ObjectType && target.flags & TypeFlags.ObjectType) {\r\n                    if (result = objectTypeRelatedTo(sourceOrApparentType, <ObjectType>target, reportStructuralErrors)) {\r\n                        errorInfo = saveErrorInfo;\r\n                        return result;\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.TypeParameter && sourceOrApparentType.flags & TypeFlags.Union) {\r\n                    // We clear the errors first because the following check often gives a better error than\r\n                    // the union comparison above if it is applicable.\r\n                    errorInfo = saveErrorInfo;\r\n                    if (result = isRelatedTo(sourceOrApparentType, target, reportErrors)) {\r\n                        return result;\r\n                    }\r\n                }\r\n\r\n                if (reportErrors) {\r\n                    headMessage = headMessage || Diagnostics.Type_0_is_not_assignable_to_type_1;\r\n                    let sourceType = typeToString(source);\r\n                    let targetType = typeToString(target);\r\n                    if (sourceType === targetType) {\r\n                        sourceType = typeToString(source, /*enclosingDeclaration*/ undefined, TypeFormatFlags.UseFullyQualifiedType);\r\n                        targetType = typeToString(target, /*enclosingDeclaration*/ undefined, TypeFormatFlags.UseFullyQualifiedType);\r\n                    }\r\n                    reportError(headMessage, sourceType, targetType);\r\n                }\r\n                return Ternary.False;\r\n            }\r\n\r\n            function unionTypeRelatedToUnionType(source: UnionType, target: UnionType): Ternary {\r\n                let result = Ternary.True;\r\n                let sourceTypes = source.types;\r\n                for (let sourceType of sourceTypes) {\r\n                    let related = typeRelatedToUnionType(sourceType, target, false);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function typeRelatedToUnionType(source: Type, target: UnionType, reportErrors: boolean): Ternary {\r\n                let targetTypes = target.types;\r\n                for (let i = 0, len = targetTypes.length; i < len; i++) {\r\n                    let related = isRelatedTo(source, targetTypes[i], reportErrors && i === len - 1);\r\n                    if (related) {\r\n                        return related;\r\n                    }\r\n                }\r\n                return Ternary.False;\r\n            }\r\n\r\n            function unionTypeRelatedToType(source: UnionType, target: Type, reportErrors: boolean): Ternary {\r\n                let result = Ternary.True;\r\n                let sourceTypes = source.types;\r\n                for (let sourceType of sourceTypes) {\r\n                    let related = isRelatedTo(sourceType, target, reportErrors);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function typesRelatedTo(sources: Type[], targets: Type[], reportErrors: boolean): Ternary {\r\n                let result = Ternary.True;\r\n                for (let i = 0, len = sources.length; i < len; i++) {\r\n                    let related = isRelatedTo(sources[i], targets[i], reportErrors);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function typeParameterRelatedTo(source: TypeParameter, target: TypeParameter, reportErrors: boolean): Ternary {\r\n                if (relation === identityRelation) {\r\n                    if (source.symbol.name !== target.symbol.name) {\r\n                        return Ternary.False;\r\n                    }\r\n                    // covers case when both type parameters does not have constraint (both equal to noConstraintType)\r\n                    if (source.constraint === target.constraint) {\r\n                        return Ternary.True;\r\n                    }\r\n                    if (source.constraint === noConstraintType || target.constraint === noConstraintType) {\r\n                        return Ternary.False;\r\n                    }\r\n                    return isRelatedTo(source.constraint, target.constraint, reportErrors);\r\n                }\r\n                else {\r\n                    while (true) {\r\n                        let constraint = getConstraintOfTypeParameter(source);\r\n                        if (constraint === target) return Ternary.True;\r\n                        if (!(constraint && constraint.flags & TypeFlags.TypeParameter)) break;\r\n                        source = <TypeParameter>constraint;\r\n                    }\r\n                    return Ternary.False;\r\n                }\r\n            }\r\n\r\n            // Determine if two object types are related by structure. First, check if the result is already available in the global cache.\r\n            // Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.\r\n            // Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are\r\n            // equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion\r\n            // and issue an error. Otherwise, actually compare the structure of the two types.\r\n            function objectTypeRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): Ternary {\r\n                if (overflow) {\r\n                    return Ternary.False;\r\n                }\r\n                let id = relation !== identityRelation || source.id < target.id ? source.id + \",\" + target.id : target.id + \",\" + source.id;\r\n                let related = relation[id];\r\n                //let related: RelationComparisonResult = undefined; // relation[id];\r\n                if (related !== undefined) {\r\n                    // If we computed this relation already and it was failed and reported, or if we're not being asked to elaborate\r\n                    // errors, we can use the cached value. Otherwise, recompute the relation\r\n                    if (!elaborateErrors || (related === RelationComparisonResult.FailedAndReported)) {\r\n                        return related === RelationComparisonResult.Succeeded ? Ternary.True : Ternary.False;\r\n                    }\r\n                }\r\n                if (depth > 0) {\r\n                    for (let i = 0; i < depth; i++) {\r\n                        // If source and target are already being compared, consider them related with assumptions\r\n                        if (maybeStack[i][id]) {\r\n                            return Ternary.Maybe;\r\n                        }\r\n                    }\r\n                    if (depth === 100) {\r\n                        overflow = true;\r\n                        return Ternary.False;\r\n                    }\r\n                }\r\n                else {\r\n                    sourceStack = [];\r\n                    targetStack = [];\r\n                    maybeStack = [];\r\n                    expandingFlags = 0;\r\n                }\r\n                sourceStack[depth] = source;\r\n                targetStack[depth] = target;\r\n                maybeStack[depth] = {};\r\n                maybeStack[depth][id] = RelationComparisonResult.Succeeded;\r\n                depth++;\r\n                let saveExpandingFlags = expandingFlags;\r\n                if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack)) expandingFlags |= 1;\r\n                if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack)) expandingFlags |= 2;\r\n                let result: Ternary;\r\n                if (expandingFlags === 3) {\r\n                    result = Ternary.Maybe;\r\n                }\r\n                else {\r\n                    result = propertiesRelatedTo(source, target, reportErrors);\r\n                    if (result) {\r\n                        result &= signaturesRelatedTo(source, target, SignatureKind.Call, reportErrors);\r\n                        if (result) {\r\n                            result &= signaturesRelatedTo(source, target, SignatureKind.Construct, reportErrors);\r\n                            if (result) {\r\n                                result &= stringIndexTypesRelatedTo(source, target, reportErrors);\r\n                                if (result) {\r\n                                    result &= numberIndexTypesRelatedTo(source, target, reportErrors);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                expandingFlags = saveExpandingFlags;\r\n                depth--;\r\n                if (result) {\r\n                    let maybeCache = maybeStack[depth];\r\n                    // If result is definitely true, copy assumptions to global cache, else copy to next level up\r\n                    let destinationCache = (result === Ternary.True || depth === 0) ? relation : maybeStack[depth - 1];\r\n                    copyMap(maybeCache, destinationCache);\r\n                }\r\n                else {\r\n                    // A false result goes straight into global cache (when something is false under assumptions it\r\n                    // will also be false without assumptions)\r\n                    relation[id] = reportErrors ? RelationComparisonResult.FailedAndReported : RelationComparisonResult.Failed;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            // Return true if the given type is part of a deeply nested chain of generic instantiations. We consider this to be the case\r\n            // when structural type comparisons have been started for 10 or more instantiations of the same generic type. It is possible,\r\n            // though highly unlikely, for this test to be true in a situation where a chain of instantiations is not infinitely expanding.\r\n            // Effectively, we will generate a false positive when two types are structurally equal to at least 10 levels, but unequal at\r\n            // some level beyond that.\r\n            function isDeeplyNestedGeneric(type: ObjectType, stack: ObjectType[]): boolean {\r\n                // We track type references (created by createTypeReference) and instantiated types (created by instantiateType)\r\n                if (type.flags & (TypeFlags.Reference | TypeFlags.Instantiated) && depth >= 10) {\r\n                    let symbol = type.symbol;\r\n                    let count = 0;\r\n                    for (let i = 0; i < depth; i++) {\r\n                        let t = stack[i];\r\n                        if (t.flags & (TypeFlags.Reference | TypeFlags.Instantiated) && t.symbol === symbol) {\r\n                            count++;\r\n                            if (count >= 10) return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function propertiesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): Ternary {\r\n                if (relation === identityRelation) {\r\n                    return propertiesIdenticalTo(source, target);\r\n                }\r\n                let result = Ternary.True;\r\n                let properties = getPropertiesOfObjectType(target);\r\n                let requireOptionalProperties = relation === subtypeRelation && !(source.flags & TypeFlags.ObjectLiteral);\r\n                for (let targetProp of properties) {\r\n                    let sourceProp = getPropertyOfType(source, targetProp.name);\r\n                    if (sourceProp !== targetProp) {\r\n                        if (!sourceProp) {\r\n                            if (!(targetProp.flags & SymbolFlags.Optional) || requireOptionalProperties) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_missing_in_type_1, symbolToString(targetProp), typeToString(source));\r\n                                }\r\n                                return Ternary.False;\r\n                            }\r\n                        }\r\n                        else if (!(targetProp.flags & SymbolFlags.Prototype)) {\r\n                            let sourceFlags = getDeclarationFlagsFromSymbol(sourceProp);\r\n                            let targetFlags = getDeclarationFlagsFromSymbol(targetProp);\r\n                            if (sourceFlags & NodeFlags.Private || targetFlags & NodeFlags.Private) {\r\n                                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {\r\n                                    if (reportErrors) {\r\n                                        if (sourceFlags & NodeFlags.Private && targetFlags & NodeFlags.Private) {\r\n                                            reportError(Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));\r\n                                        }\r\n                                        else {\r\n                                            reportError(Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp),\r\n                                                typeToString(sourceFlags & NodeFlags.Private ? source : target),\r\n                                                typeToString(sourceFlags & NodeFlags.Private ? target : source));\r\n                                        }\r\n                                    }\r\n                                    return Ternary.False;\r\n                                }\r\n                            }\r\n                            else if (targetFlags & NodeFlags.Protected) {\r\n                                let sourceDeclaredInClass = sourceProp.parent && sourceProp.parent.flags & SymbolFlags.Class;\r\n                                let sourceClass = sourceDeclaredInClass ? <InterfaceType>getDeclaredTypeOfSymbol(sourceProp.parent) : undefined;\r\n                                let targetClass = <InterfaceType>getDeclaredTypeOfSymbol(targetProp.parent);\r\n                                if (!sourceClass || !hasBaseType(sourceClass, targetClass)) {\r\n                                    if (reportErrors) {\r\n                                        reportError(Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2,\r\n                                            symbolToString(targetProp), typeToString(sourceClass || source), typeToString(targetClass));\r\n                                    }\r\n                                    return Ternary.False;\r\n                                }\r\n                            }\r\n                            else if (sourceFlags & NodeFlags.Protected) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2,\r\n                                        symbolToString(targetProp), typeToString(source), typeToString(target));\r\n                                }\r\n                                return Ternary.False;\r\n                            }\r\n                            let related = isRelatedTo(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);\r\n                            if (!related) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));\r\n                                }\r\n                                return Ternary.False;\r\n                            }\r\n                            result &= related;\r\n                            if (sourceProp.flags & SymbolFlags.Optional && !(targetProp.flags & SymbolFlags.Optional)) {\r\n                                // TypeScript 1.0 spec (April 2014): 3.8.3\r\n                                // S is a subtype of a type T, and T is a supertype of S if ...\r\n                                // S' and T are object types and, for each member M in T..\r\n                                // M is a property and S' contains a property N where\r\n                                // if M is a required property, N is also a required property\r\n                                // (M - property in T)\r\n                                // (N - property in S)\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2,\r\n                                        symbolToString(targetProp), typeToString(source), typeToString(target));\r\n                                }\r\n                                return Ternary.False;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function propertiesIdenticalTo(source: ObjectType, target: ObjectType): Ternary {\r\n                let sourceProperties = getPropertiesOfObjectType(source);\r\n                let targetProperties = getPropertiesOfObjectType(target);\r\n                if (sourceProperties.length !== targetProperties.length) {\r\n                    return Ternary.False;\r\n                }\r\n                let result = Ternary.True;\r\n                for (let sourceProp of sourceProperties) {\r\n                    let targetProp = getPropertyOfObjectType(target, sourceProp.name);\r\n                    if (!targetProp) {\r\n                        return Ternary.False;\r\n                    }\r\n                    let related = compareProperties(sourceProp, targetProp, isRelatedTo);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function signaturesRelatedTo(source: ObjectType, target: ObjectType, kind: SignatureKind, reportErrors: boolean): Ternary {\r\n                if (relation === identityRelation) {\r\n                    return signaturesIdenticalTo(source, target, kind);\r\n                }\r\n                if (target === anyFunctionType || source === anyFunctionType) {\r\n                    return Ternary.True;\r\n                }\r\n                let sourceSignatures = getSignaturesOfType(source, kind);\r\n                let targetSignatures = getSignaturesOfType(target, kind);\r\n                let result = Ternary.True;\r\n                let saveErrorInfo = errorInfo;\r\n                outer: for (let t of targetSignatures) {\r\n                    if (!t.hasStringLiterals || target.flags & TypeFlags.FromSignature) {\r\n                        let localErrors = reportErrors;\r\n                        for (let s of sourceSignatures) {\r\n                            if (!s.hasStringLiterals || source.flags & TypeFlags.FromSignature) {\r\n                                let related = signatureRelatedTo(s, t, localErrors);\r\n                                if (related) {\r\n                                    result &= related;\r\n                                    errorInfo = saveErrorInfo;\r\n                                    continue outer;\r\n                                }\r\n                                // Only report errors from the first failure\r\n                                localErrors = false;\r\n                            }\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function signatureRelatedTo(source: Signature, target: Signature, reportErrors: boolean): Ternary {\r\n                if (source === target) {\r\n                    return Ternary.True;\r\n                }\r\n                if (!target.hasRestParameter && source.minArgumentCount > target.parameters.length) {\r\n                    return Ternary.False;\r\n                }\r\n                let sourceMax = source.parameters.length;\r\n                let targetMax = target.parameters.length;\r\n                let checkCount: number;\r\n                if (source.hasRestParameter && target.hasRestParameter) {\r\n                    checkCount = sourceMax > targetMax ? sourceMax : targetMax;\r\n                    sourceMax--;\r\n                    targetMax--;\r\n                }\r\n                else if (source.hasRestParameter) {\r\n                    sourceMax--;\r\n                    checkCount = targetMax;\r\n                }\r\n                else if (target.hasRestParameter) {\r\n                    targetMax--;\r\n                    checkCount = sourceMax;\r\n                }\r\n                else {\r\n                    checkCount = sourceMax < targetMax ? sourceMax : targetMax;\r\n                }\r\n                // Spec 1.0 Section 3.8.3 & 3.8.4:\r\n                // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\r\n                source = getErasedSignature(source);\r\n                target = getErasedSignature(target);\r\n                let result = Ternary.True;\r\n                for (let i = 0; i < checkCount; i++) {\r\n                    let s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);\r\n                    let t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);\r\n                    let saveErrorInfo = errorInfo;\r\n                    let related = isRelatedTo(s, t, reportErrors);\r\n                    if (!related) {\r\n                        related = isRelatedTo(t, s, false);\r\n                        if (!related) {\r\n                            if (reportErrors) {\r\n                                reportError(Diagnostics.Types_of_parameters_0_and_1_are_incompatible,\r\n                                    source.parameters[i < sourceMax ? i : sourceMax].name,\r\n                                    target.parameters[i < targetMax ? i : targetMax].name);\r\n                            }\r\n                            return Ternary.False;\r\n                        }\r\n                        errorInfo = saveErrorInfo;\r\n                    }\r\n                    result &= related;\r\n                }\r\n\r\n                if (source.typePredicate && target.typePredicate) {\r\n                    let hasDifferentParameterIndex = source.typePredicate.parameterIndex !== target.typePredicate.parameterIndex;\r\n                    let hasDifferentTypes: boolean;\r\n                    if (hasDifferentParameterIndex || \r\n                        (hasDifferentTypes = !isTypeIdenticalTo(source.typePredicate.type, target.typePredicate.type))) {\r\n\r\n                        if (reportErrors) {\r\n                            let sourceParamText = source.typePredicate.parameterName;\r\n                            let targetParamText = target.typePredicate.parameterName;\r\n                            let sourceTypeText = typeToString(source.typePredicate.type);\r\n                            let targetTypeText = typeToString(target.typePredicate.type);\r\n\r\n                            if (hasDifferentParameterIndex) {\r\n                                reportError(Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, \r\n                                    sourceParamText,\r\n                                    targetParamText);\r\n                            }\r\n                            else if (hasDifferentTypes) {\r\n                                reportError(Diagnostics.Type_0_is_not_assignable_to_type_1, \r\n                                    sourceTypeText,\r\n                                    targetTypeText);\r\n                            }\r\n\r\n                            reportError(Diagnostics.Type_predicate_0_is_not_assignable_to_1,\r\n                                `${sourceParamText} is ${sourceTypeText}`,\r\n                                `${targetParamText} is ${targetTypeText}`);\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                }\r\n                else if (!source.typePredicate && target.typePredicate) {\r\n                    if (reportErrors) {\r\n                        reportError(Diagnostics.Signature_0_must_have_a_type_predicate, signatureToString(source));\r\n                    }\r\n                    return Ternary.False;\r\n                }\r\n\r\n                let t = getReturnTypeOfSignature(target);\r\n                if (t === voidType) return result;\r\n                let s = getReturnTypeOfSignature(source);\r\n                return result & isRelatedTo(s, t, reportErrors);\r\n            }\r\n\r\n            function signaturesIdenticalTo(source: ObjectType, target: ObjectType, kind: SignatureKind): Ternary {\r\n                let sourceSignatures = getSignaturesOfType(source, kind);\r\n                let targetSignatures = getSignaturesOfType(target, kind);\r\n                if (sourceSignatures.length !== targetSignatures.length) {\r\n                    return Ternary.False;\r\n                }\r\n                let result = Ternary.True;\r\n                for (let i = 0, len = sourceSignatures.length; i < len; ++i) {\r\n                    let related = compareSignatures(sourceSignatures[i], targetSignatures[i], /*compareReturnTypes*/ true, isRelatedTo);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function stringIndexTypesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): Ternary {\r\n                if (relation === identityRelation) {\r\n                    return indexTypesIdenticalTo(IndexKind.String, source, target);\r\n                }\r\n                let targetType = getIndexTypeOfType(target, IndexKind.String);\r\n                if (targetType) {\r\n                    let sourceType = getIndexTypeOfType(source, IndexKind.String);\r\n                    if (!sourceType) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                    let related = isRelatedTo(sourceType, targetType, reportErrors);\r\n                    if (!related) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signatures_are_incompatible);\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                    return related;\r\n                }\r\n                return Ternary.True;\r\n            }\r\n\r\n            function numberIndexTypesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): Ternary {\r\n                if (relation === identityRelation) {\r\n                    return indexTypesIdenticalTo(IndexKind.Number, source, target);\r\n                }\r\n                let targetType = getIndexTypeOfType(target, IndexKind.Number);\r\n                if (targetType) {\r\n                    let sourceStringType = getIndexTypeOfType(source, IndexKind.String);\r\n                    let sourceNumberType = getIndexTypeOfType(source, IndexKind.Number);\r\n                    if (!(sourceStringType || sourceNumberType)) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                    let related: Ternary;\r\n                    if (sourceStringType && sourceNumberType) {\r\n                        // If we know for sure we're testing both string and numeric index types then only report errors from the second one\r\n                        related = isRelatedTo(sourceStringType, targetType, false) || isRelatedTo(sourceNumberType, targetType, reportErrors);\r\n                    }\r\n                    else {\r\n                        related = isRelatedTo(sourceStringType || sourceNumberType, targetType, reportErrors);\r\n                    }\r\n                    if (!related) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signatures_are_incompatible);\r\n                        }\r\n                        return Ternary.False;\r\n                    }\r\n                    return related;\r\n                }\r\n                return Ternary.True;\r\n            }\r\n\r\n            function indexTypesIdenticalTo(indexKind: IndexKind, source: ObjectType, target: ObjectType): Ternary {\r\n                let targetType = getIndexTypeOfType(target, indexKind);\r\n                let sourceType = getIndexTypeOfType(source, indexKind);\r\n                if (!sourceType && !targetType) {\r\n                    return Ternary.True;\r\n                }\r\n                if (sourceType && targetType) {\r\n                    return isRelatedTo(sourceType, targetType);\r\n                }\r\n                return Ternary.False;\r\n            }\r\n        }\r\n\r\n        function isPropertyIdenticalTo(sourceProp: Symbol, targetProp: Symbol): boolean {\r\n            return compareProperties(sourceProp, targetProp, compareTypes) !== Ternary.False;\r\n        }\r\n\r\n        function compareProperties(sourceProp: Symbol, targetProp: Symbol, compareTypes: (source: Type, target: Type) => Ternary): Ternary {\r\n            // Two members are considered identical when\r\n            // - they are public properties with identical names, optionality, and types,\r\n            // - they are private or protected properties originating in the same declaration and having identical types\r\n            if (sourceProp === targetProp) {\r\n                return Ternary.True;\r\n            }\r\n            let sourcePropAccessibility = getDeclarationFlagsFromSymbol(sourceProp) & (NodeFlags.Private | NodeFlags.Protected);\r\n            let targetPropAccessibility = getDeclarationFlagsFromSymbol(targetProp) & (NodeFlags.Private | NodeFlags.Protected);\r\n            if (sourcePropAccessibility !== targetPropAccessibility) {\r\n                return Ternary.False;\r\n            }\r\n            if (sourcePropAccessibility) {\r\n                if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {\r\n                    return Ternary.False;\r\n                }\r\n            }\r\n            else {\r\n                if ((sourceProp.flags & SymbolFlags.Optional) !== (targetProp.flags & SymbolFlags.Optional)) {\r\n                    return Ternary.False;\r\n                }\r\n            }\r\n            return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));\r\n        }\r\n\r\n        function compareSignatures(source: Signature, target: Signature, compareReturnTypes: boolean, compareTypes: (s: Type, t: Type) => Ternary): Ternary {\r\n            if (source === target) {\r\n                return Ternary.True;\r\n            }\r\n            if (source.parameters.length !== target.parameters.length ||\r\n                source.minArgumentCount !== target.minArgumentCount ||\r\n                source.hasRestParameter !== target.hasRestParameter) {\r\n                return Ternary.False;\r\n            }\r\n            let result = Ternary.True;\r\n            if (source.typeParameters && target.typeParameters) {\r\n                if (source.typeParameters.length !== target.typeParameters.length) {\r\n                    return Ternary.False;\r\n                }\r\n                for (let i = 0, len = source.typeParameters.length; i < len; ++i) {\r\n                    let related = compareTypes(source.typeParameters[i], target.typeParameters[i]);\r\n                    if (!related) {\r\n                        return Ternary.False;\r\n                    }\r\n                    result &= related;\r\n                }\r\n            }\r\n            else if (source.typeParameters || target.typeParameters) {\r\n                return Ternary.False;\r\n            }\r\n            // Spec 1.0 Section 3.8.3 & 3.8.4:\r\n            // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\r\n            source = getErasedSignature(source);\r\n            target = getErasedSignature(target);\r\n            for (let i = 0, len = source.parameters.length; i < len; i++) {\r\n                let s = source.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(source) : getTypeOfSymbol(source.parameters[i]);\r\n                let t = target.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(target) : getTypeOfSymbol(target.parameters[i]);\r\n                let related = compareTypes(s, t);\r\n                if (!related) {\r\n                    return Ternary.False;\r\n                }\r\n                result &= related;\r\n            }\r\n            if (compareReturnTypes) {\r\n                result &= compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function isSupertypeOfEach(candidate: Type, types: Type[]): boolean {\r\n            for (let type of types) {\r\n                if (candidate !== type && !isTypeSubtypeOf(type, candidate)) return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function getCommonSupertype(types: Type[]): Type {\r\n            return forEach(types, t => isSupertypeOfEach(t, types) ? t : undefined);\r\n        }\r\n\r\n        function reportNoCommonSupertypeError(types: Type[], errorLocation: Node, errorMessageChainHead: DiagnosticMessageChain): void {\r\n            // The downfallType/bestSupertypeDownfallType is the first type that caused a particular candidate\r\n            // to not be the common supertype. So if it weren't for this one downfallType (and possibly others),\r\n            // the type in question could have been the common supertype.\r\n            let bestSupertype: Type;\r\n            let bestSupertypeDownfallType: Type;\r\n            let bestSupertypeScore = 0;\r\n\r\n            for (let i = 0; i < types.length; i++) {\r\n                let score = 0;\r\n                let downfallType: Type = undefined;\r\n                for (let j = 0; j < types.length; j++) {\r\n                    if (isTypeSubtypeOf(types[j], types[i])) {\r\n                        score++;\r\n                    }\r\n                    else if (!downfallType) {\r\n                        downfallType = types[j];\r\n                    }\r\n                }\r\n\r\n                Debug.assert(!!downfallType, \"If there is no common supertype, each type should have a downfallType\");\r\n\r\n                if (score > bestSupertypeScore) {\r\n                    bestSupertype = types[i];\r\n                    bestSupertypeDownfallType = downfallType;\r\n                    bestSupertypeScore = score;\r\n                }\r\n\r\n                // types.length - 1 is the maximum score, given that getCommonSupertype returned false\r\n                if (bestSupertypeScore === types.length - 1) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // In the following errors, the {1} slot is before the {0} slot because checkTypeSubtypeOf supplies the\r\n            // subtype as the first argument to the error\r\n            checkTypeSubtypeOf(bestSupertypeDownfallType, bestSupertype, errorLocation,\r\n                Diagnostics.Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0,\r\n                errorMessageChainHead);\r\n        }\r\n\r\n        function isArrayType(type: Type): boolean {\r\n            return type.flags & TypeFlags.Reference && (<TypeReference>type).target === globalArrayType;\r\n        }\r\n\r\n        function isArrayLikeType(type: Type): boolean {\r\n            // A type is array-like if it is not the undefined or null type and if it is assignable to any[]\r\n            return !(type.flags & (TypeFlags.Undefined | TypeFlags.Null)) && isTypeAssignableTo(type, anyArrayType);\r\n        }\r\n\r\n        function isTupleLikeType(type: Type): boolean {\r\n            return !!getPropertyOfType(type, \"0\");\r\n        }\r\n\r\n        /**\r\n         * Check if a Type was written as a tuple type literal.\r\n         * Prefer using isTupleLikeType() unless the use of `elementTypes` is required.\r\n         */\r\n        function isTupleType(type: Type): boolean {\r\n            return (type.flags & TypeFlags.Tuple) && !!(<TupleType>type).elementTypes;\r\n        }\r\n\r\n        function getWidenedTypeOfObjectLiteral(type: Type): Type {\r\n            let properties = getPropertiesOfObjectType(type);\r\n            let members: SymbolTable = {};\r\n            forEach(properties, p => {\r\n                let propType = getTypeOfSymbol(p);\r\n                let widenedType = getWidenedType(propType);\r\n                if (propType !== widenedType) {\r\n                    let symbol = <TransientSymbol>createSymbol(p.flags | SymbolFlags.Transient, p.name);\r\n                    symbol.declarations = p.declarations;\r\n                    symbol.parent = p.parent;\r\n                    symbol.type = widenedType;\r\n                    symbol.target = p;\r\n                    if (p.valueDeclaration) symbol.valueDeclaration = p.valueDeclaration;\r\n                    p = symbol;\r\n                }\r\n                members[p.name] = p;\r\n            });\r\n            let stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n            let numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n            if (stringIndexType) stringIndexType = getWidenedType(stringIndexType);\r\n            if (numberIndexType) numberIndexType = getWidenedType(numberIndexType);\r\n            return createAnonymousType(type.symbol, members, emptyArray, emptyArray, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function getWidenedType(type: Type): Type {\r\n            if (type.flags & TypeFlags.RequiresWidening) {\r\n                if (type.flags & (TypeFlags.Undefined | TypeFlags.Null)) {\r\n                    return anyType;\r\n                }\r\n                if (type.flags & TypeFlags.ObjectLiteral) {\r\n                    return getWidenedTypeOfObjectLiteral(type);\r\n                }\r\n                if (type.flags & TypeFlags.Union) {\r\n                    return getUnionType(map((<UnionType>type).types, getWidenedType));\r\n                }\r\n                if (isArrayType(type)) {\r\n                    return createArrayType(getWidenedType((<TypeReference>type).typeArguments[0]));\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function reportWideningErrorsInType(type: Type): boolean {\r\n            if (type.flags & TypeFlags.Union) {\r\n                let errorReported = false;\r\n                forEach((<UnionType>type).types, t => {\r\n                    if (reportWideningErrorsInType(t)) {\r\n                        errorReported = true;\r\n                    }\r\n                });\r\n                return errorReported;\r\n            }\r\n            if (isArrayType(type)) {\r\n                return reportWideningErrorsInType((<TypeReference>type).typeArguments[0]);\r\n            }\r\n            if (type.flags & TypeFlags.ObjectLiteral) {\r\n                let errorReported = false;\r\n                forEach(getPropertiesOfObjectType(type), p => {\r\n                    let t = getTypeOfSymbol(p);\r\n                    if (t.flags & TypeFlags.ContainsUndefinedOrNull) {\r\n                        if (!reportWideningErrorsInType(t)) {\r\n                            error(p.valueDeclaration, Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, p.name, typeToString(getWidenedType(t)));\r\n                        }\r\n                        errorReported = true;\r\n                    }\r\n                });\r\n                return errorReported;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function reportImplicitAnyError(declaration: Declaration, type: Type) {\r\n            let typeAsString = typeToString(getWidenedType(type));\r\n            let diagnostic: DiagnosticMessage;\r\n            switch (declaration.kind) {\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                    diagnostic = Diagnostics.Member_0_implicitly_has_an_1_type;\r\n                    break;\r\n                case SyntaxKind.Parameter:\r\n                    diagnostic = (<ParameterDeclaration>declaration).dotDotDotToken ?\r\n                        Diagnostics.Rest_parameter_0_implicitly_has_an_any_type :\r\n                        Diagnostics.Parameter_0_implicitly_has_an_1_type;\r\n                    break;\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    if (!declaration.name) {\r\n                        error(declaration, Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);\r\n                        return;\r\n                    }\r\n                    diagnostic = Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;\r\n                    break;\r\n                default:\r\n                    diagnostic = Diagnostics.Variable_0_implicitly_has_an_1_type;\r\n            }\r\n            error(declaration, diagnostic, declarationNameToString(declaration.name), typeAsString);\r\n        }\r\n\r\n        function reportErrorsFromWidening(declaration: Declaration, type: Type) {\r\n            if (produceDiagnostics && compilerOptions.noImplicitAny && type.flags & TypeFlags.ContainsUndefinedOrNull) {\r\n                // Report implicit any error within type if possible, otherwise report error on declaration\r\n                if (!reportWideningErrorsInType(type)) {\r\n                    reportImplicitAnyError(declaration, type);\r\n                }\r\n            }\r\n        }\r\n\r\n        function forEachMatchingParameterType(source: Signature, target: Signature, callback: (s: Type, t: Type) => void) {\r\n            let sourceMax = source.parameters.length;\r\n            let targetMax = target.parameters.length;\r\n            let count: number;\r\n            if (source.hasRestParameter && target.hasRestParameter) {\r\n                count = sourceMax > targetMax ? sourceMax : targetMax;\r\n                sourceMax--;\r\n                targetMax--;\r\n            }\r\n            else if (source.hasRestParameter) {\r\n                sourceMax--;\r\n                count = targetMax;\r\n            }\r\n            else if (target.hasRestParameter) {\r\n                targetMax--;\r\n                count = sourceMax;\r\n            }\r\n            else {\r\n                count = sourceMax < targetMax ? sourceMax : targetMax;\r\n            }\r\n            for (let i = 0; i < count; i++) {\r\n                let s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);\r\n                let t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);\r\n                callback(s, t);\r\n            }\r\n        }\r\n\r\n        function createInferenceContext(typeParameters: TypeParameter[], inferUnionTypes: boolean): InferenceContext {\r\n            let inferences: TypeInferences[] = [];\r\n            for (let unused of typeParameters) {\r\n                inferences.push({ primary: undefined, secondary: undefined, isFixed: false });\r\n            }\r\n            return {\r\n                typeParameters,\r\n                inferUnionTypes,\r\n                inferences,\r\n                inferredTypes: new Array(typeParameters.length),\r\n            };\r\n        }\r\n\r\n        function inferTypes(context: InferenceContext, source: Type, target: Type) {\r\n            let sourceStack: Type[];\r\n            let targetStack: Type[];\r\n            let depth = 0;\r\n            let inferiority = 0;\r\n            inferFromTypes(source, target);\r\n\r\n            function isInProcess(source: Type, target: Type) {\r\n                for (let i = 0; i < depth; i++) {\r\n                    if (source === sourceStack[i] && target === targetStack[i]) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function isWithinDepthLimit(type: Type, stack: Type[]) {\r\n                if (depth >= 5) {\r\n                    let target = (<TypeReference>type).target;\r\n                    let count = 0;\r\n                    for (let i = 0; i < depth; i++) {\r\n                        let t = stack[i];\r\n                        if (t.flags & TypeFlags.Reference && (<TypeReference>t).target === target) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    return count < 5;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function inferFromTypes(source: Type, target: Type) {\r\n                if (source === anyFunctionType) {\r\n                    return;\r\n                }\r\n                if (target.flags & TypeFlags.TypeParameter) {\r\n                    // If target is a type parameter, make an inference\r\n                    let typeParameters = context.typeParameters;\r\n                    for (let i = 0; i < typeParameters.length; i++) {\r\n                        if (target === typeParameters[i]) {\r\n                            let inferences = context.inferences[i];\r\n                            if (!inferences.isFixed) {\r\n                                // Any inferences that are made to a type parameter in a union type are inferior\r\n                                // to inferences made to a flat (non-union) type. This is because if we infer to\r\n                                // T | string[], we really don't know if we should be inferring to T or not (because\r\n                                // the correct constituent on the target side could be string[]). Therefore, we put\r\n                                // such inferior inferences into a secondary bucket, and only use them if the primary\r\n                                // bucket is empty.\r\n                                let candidates = inferiority ?\r\n                                    inferences.secondary || (inferences.secondary = []) :\r\n                                    inferences.primary || (inferences.primary = []);\r\n                                if (!contains(candidates, source)) {\r\n                                    candidates.push(source);\r\n                                }\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.Reference && target.flags & TypeFlags.Reference && (<TypeReference>source).target === (<TypeReference>target).target) {\r\n                    // If source and target are references to the same generic type, infer from type arguments\r\n                    let sourceTypes = (<TypeReference>source).typeArguments;\r\n                    let targetTypes = (<TypeReference>target).typeArguments;\r\n                    for (let i = 0; i < sourceTypes.length; i++) {\r\n                        inferFromTypes(sourceTypes[i], targetTypes[i]);\r\n                    }\r\n                }\r\n                else if (target.flags & TypeFlags.Union) {\r\n                    let targetTypes = (<UnionType>target).types;\r\n                    let typeParameterCount = 0;\r\n                    let typeParameter: TypeParameter;\r\n                    // First infer to each type in union that isn't a type parameter\r\n                    for (let t of targetTypes) {\r\n                        if (t.flags & TypeFlags.TypeParameter && contains(context.typeParameters, t)) {\r\n                            typeParameter = <TypeParameter>t;\r\n                            typeParameterCount++;\r\n                        }\r\n                        else {\r\n                            inferFromTypes(source, t);\r\n                        }\r\n                    }\r\n                    // If union contains a single naked type parameter, make a secondary inference to that type parameter\r\n                    if (typeParameterCount === 1) {\r\n                        inferiority++;\r\n                        inferFromTypes(source, typeParameter);\r\n                        inferiority--;\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.Union) {\r\n                    // Source is a union type, infer from each consituent type\r\n                    let sourceTypes = (<UnionType>source).types;\r\n                    for (let sourceType of sourceTypes) {\r\n                        inferFromTypes(sourceType, target);\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.ObjectType && (target.flags & (TypeFlags.Reference | TypeFlags.Tuple) ||\r\n                    (target.flags & TypeFlags.Anonymous) && target.symbol && target.symbol.flags & (SymbolFlags.Method | SymbolFlags.TypeLiteral))) {\r\n                    // If source is an object type, and target is a type reference, a tuple type, the type of a method, or a type literal, infer from members\r\n                    if (!isInProcess(source, target) && isWithinDepthLimit(source, sourceStack) && isWithinDepthLimit(target, targetStack)) {\r\n                        if (depth === 0) {\r\n                            sourceStack = [];\r\n                            targetStack = [];\r\n                        }\r\n                        sourceStack[depth] = source;\r\n                        targetStack[depth] = target;\r\n                        depth++;\r\n                        inferFromProperties(source, target);\r\n                        inferFromSignatures(source, target, SignatureKind.Call);\r\n                        inferFromSignatures(source, target, SignatureKind.Construct);\r\n                        inferFromIndexTypes(source, target, IndexKind.String, IndexKind.String);\r\n                        inferFromIndexTypes(source, target, IndexKind.Number, IndexKind.Number);\r\n                        inferFromIndexTypes(source, target, IndexKind.String, IndexKind.Number);\r\n                        depth--;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function inferFromProperties(source: Type, target: Type) {\r\n                let properties = getPropertiesOfObjectType(target);\r\n                for (let targetProp of properties) {\r\n                    let sourceProp = getPropertyOfObjectType(source, targetProp.name);\r\n                    if (sourceProp) {\r\n                        inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));\r\n                    }\r\n                }\r\n            }\r\n\r\n            function inferFromSignatures(source: Type, target: Type, kind: SignatureKind) {\r\n                let sourceSignatures = getSignaturesOfType(source, kind);\r\n                let targetSignatures = getSignaturesOfType(target, kind);\r\n                let sourceLen = sourceSignatures.length;\r\n                let targetLen = targetSignatures.length;\r\n                let len = sourceLen < targetLen ? sourceLen : targetLen;\r\n                for (let i = 0; i < len; i++) {\r\n                    inferFromSignature(getErasedSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));\r\n                }\r\n            }\r\n\r\n            function inferFromSignature(source: Signature, target: Signature) {\r\n                forEachMatchingParameterType(source, target, inferFromTypes);\r\n                if (source.typePredicate && target.typePredicate) {\r\n                    if (target.typePredicate.parameterIndex === source.typePredicate.parameterIndex) {\r\n                        // Return types from type predicates are treated as booleans. In order to infer types\r\n                        // from type predicates we would need to infer using the type within the type predicate\r\n                        // (i.e. 'Foo' from 'x is Foo').\r\n                        inferFromTypes(source.typePredicate.type, target.typePredicate.type);\r\n                    }\r\n                }\r\n                else {\r\n                    inferFromTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\r\n                }\r\n            }\r\n\r\n            function inferFromIndexTypes(source: Type, target: Type, sourceKind: IndexKind, targetKind: IndexKind) {\r\n                let targetIndexType = getIndexTypeOfType(target, targetKind);\r\n                if (targetIndexType) {\r\n                    let sourceIndexType = getIndexTypeOfType(source, sourceKind);\r\n                    if (sourceIndexType) {\r\n                        inferFromTypes(sourceIndexType, targetIndexType);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getInferenceCandidates(context: InferenceContext, index: number): Type[] {\r\n            let inferences = context.inferences[index];\r\n            return inferences.primary || inferences.secondary || emptyArray;\r\n        }\r\n\r\n        function getInferredType(context: InferenceContext, index: number): Type {\r\n            let inferredType = context.inferredTypes[index];\r\n            let inferenceSucceeded: boolean;\r\n            if (!inferredType) {\r\n                let inferences = getInferenceCandidates(context, index);\r\n                if (inferences.length) {\r\n                    // Infer widened union or supertype, or the unknown type for no common supertype\r\n                    let unionOrSuperType = context.inferUnionTypes ? getUnionType(inferences) : getCommonSupertype(inferences);\r\n                    inferredType = unionOrSuperType ? getWidenedType(unionOrSuperType) : unknownType;\r\n                    inferenceSucceeded = !!unionOrSuperType;\r\n                }\r\n                else {\r\n                    // Infer the empty object type when no inferences were made. It is important to remember that\r\n                    // in this case, inference still succeeds, meaning there is no error for not having inference\r\n                    // candidates. An inference error only occurs when there are *conflicting* candidates, i.e.\r\n                    // candidates with no common supertype.\r\n                    inferredType = emptyObjectType;\r\n                    inferenceSucceeded = true;\r\n                }\r\n\r\n                // Only do the constraint check if inference succeeded (to prevent cascading errors)\r\n                if (inferenceSucceeded) {\r\n                    let constraint = getConstraintOfTypeParameter(context.typeParameters[index]);\r\n                    inferredType = constraint && !isTypeAssignableTo(inferredType, constraint) ? constraint : inferredType;\r\n                }\r\n                else if (context.failedTypeParameterIndex === undefined || context.failedTypeParameterIndex > index) {\r\n                    // If inference failed, it is necessary to record the index of the failed type parameter (the one we are on).\r\n                    // It might be that inference has already failed on a later type parameter on a previous call to inferTypeArguments.\r\n                    // So if this failure is on preceding type parameter, this type parameter is the new failure index.\r\n                    context.failedTypeParameterIndex = index;\r\n                }\r\n                context.inferredTypes[index] = inferredType;\r\n            }\r\n            return inferredType;\r\n        }\r\n\r\n        function getInferredTypes(context: InferenceContext): Type[] {\r\n            for (let i = 0; i < context.inferredTypes.length; i++) {\r\n                getInferredType(context, i);\r\n            }\r\n\r\n            return context.inferredTypes;\r\n        }\r\n\r\n        function hasAncestor(node: Node, kind: SyntaxKind): boolean {\r\n            return getAncestor(node, kind) !== undefined;\r\n        }\r\n\r\n        // EXPRESSION TYPE CHECKING\r\n\r\n        function getResolvedSymbol(node: Identifier): Symbol {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedSymbol) {\r\n                links.resolvedSymbol = (!nodeIsMissing(node) && resolveName(node, node.text, SymbolFlags.Value | SymbolFlags.ExportValue, Diagnostics.Cannot_find_name_0, node)) || unknownSymbol;\r\n            }\r\n            return links.resolvedSymbol;\r\n        }\r\n\r\n        function isInTypeQuery(node: Node): boolean {\r\n            // TypeScript 1.0 spec (April 2014): 3.6.3\r\n            // A type query consists of the keyword typeof followed by an expression.\r\n            // The expression is restricted to a single identifier or a sequence of identifiers separated by periods\r\n            while (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.TypeQuery:\r\n                        return true;\r\n                    case SyntaxKind.Identifier:\r\n                    case SyntaxKind.QualifiedName:\r\n                        node = node.parent;\r\n                        continue;\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n            Debug.fail(\"should not get here\");\r\n        }\r\n\r\n        // For a union type, remove all constituent types that are of the given type kind (when isOfTypeKind is true)\r\n        // or not of the given type kind (when isOfTypeKind is false)\r\n        function removeTypesFromUnionType(type: Type, typeKind: TypeFlags, isOfTypeKind: boolean, allowEmptyUnionResult: boolean): Type {\r\n            if (type.flags & TypeFlags.Union) {\r\n                let types = (<UnionType>type).types;\r\n                if (forEach(types, t => !!(t.flags & typeKind) === isOfTypeKind)) {\r\n                    // Above we checked if we have anything to remove, now use the opposite test to do the removal\r\n                    let narrowedType = getUnionType(filter(types, t => !(t.flags & typeKind) === isOfTypeKind));\r\n                    if (allowEmptyUnionResult || narrowedType !== emptyObjectType) {\r\n                        return narrowedType;\r\n                    }\r\n                }\r\n            }\r\n            else if (allowEmptyUnionResult && !!(type.flags & typeKind) === isOfTypeKind) {\r\n                // Use getUnionType(emptyArray) instead of emptyObjectType in case the way empty union types\r\n                // are represented ever changes.\r\n                return getUnionType(emptyArray);\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function hasInitializer(node: VariableLikeDeclaration): boolean {\r\n            return !!(node.initializer || isBindingPattern(node.parent) && hasInitializer(<VariableLikeDeclaration>node.parent.parent));\r\n        }\r\n\r\n        // Check if a given variable is assigned within a given syntax node\r\n        function isVariableAssignedWithin(symbol: Symbol, node: Node): boolean {\r\n            let links = getNodeLinks(node);\r\n            if (links.assignmentChecks) {\r\n                let cachedResult = links.assignmentChecks[symbol.id];\r\n                if (cachedResult !== undefined) {\r\n                    return cachedResult;\r\n                }\r\n            }\r\n            else {\r\n                links.assignmentChecks = {};\r\n            }\r\n            return links.assignmentChecks[symbol.id] = isAssignedIn(node);\r\n\r\n            function isAssignedInBinaryExpression(node: BinaryExpression) {\r\n                if (node.operatorToken.kind >= SyntaxKind.FirstAssignment && node.operatorToken.kind <= SyntaxKind.LastAssignment) {\r\n                    let n = node.left;\r\n                    while (n.kind === SyntaxKind.ParenthesizedExpression) {\r\n                        n = (<ParenthesizedExpression>n).expression;\r\n                    }\r\n                    if (n.kind === SyntaxKind.Identifier && getResolvedSymbol(<Identifier>n) === symbol) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return forEachChild(node, isAssignedIn);\r\n            }\r\n\r\n            function isAssignedInVariableDeclaration(node: VariableLikeDeclaration) {\r\n                if (!isBindingPattern(node.name) && getSymbolOfNode(node) === symbol && hasInitializer(node)) {\r\n                    return true;\r\n                }\r\n                return forEachChild(node, isAssignedIn);\r\n            }\r\n\r\n            function isAssignedIn(node: Node): boolean {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.BinaryExpression:\r\n                        return isAssignedInBinaryExpression(<BinaryExpression>node);\r\n                    case SyntaxKind.VariableDeclaration:\r\n                    case SyntaxKind.BindingElement:\r\n                        return isAssignedInVariableDeclaration(<VariableLikeDeclaration>node);\r\n                    case SyntaxKind.ObjectBindingPattern:\r\n                    case SyntaxKind.ArrayBindingPattern:\r\n                    case SyntaxKind.ArrayLiteralExpression:\r\n                    case SyntaxKind.ObjectLiteralExpression:\r\n                    case SyntaxKind.PropertyAccessExpression:\r\n                    case SyntaxKind.ElementAccessExpression:\r\n                    case SyntaxKind.CallExpression:\r\n                    case SyntaxKind.NewExpression:\r\n                    case SyntaxKind.TypeAssertionExpression:\r\n                    case SyntaxKind.ParenthesizedExpression:\r\n                    case SyntaxKind.PrefixUnaryExpression:\r\n                    case SyntaxKind.DeleteExpression:\r\n                    case SyntaxKind.TypeOfExpression:\r\n                    case SyntaxKind.VoidExpression:\r\n                    case SyntaxKind.PostfixUnaryExpression:\r\n                    case SyntaxKind.ConditionalExpression:\r\n                    case SyntaxKind.SpreadElementExpression:\r\n                    case SyntaxKind.Block:\r\n                    case SyntaxKind.VariableStatement:\r\n                    case SyntaxKind.ExpressionStatement:\r\n                    case SyntaxKind.IfStatement:\r\n                    case SyntaxKind.DoStatement:\r\n                    case SyntaxKind.WhileStatement:\r\n                    case SyntaxKind.ForStatement:\r\n                    case SyntaxKind.ForInStatement:\r\n                    case SyntaxKind.ForOfStatement:\r\n                    case SyntaxKind.ReturnStatement:\r\n                    case SyntaxKind.WithStatement:\r\n                    case SyntaxKind.SwitchStatement:\r\n                    case SyntaxKind.CaseClause:\r\n                    case SyntaxKind.DefaultClause:\r\n                    case SyntaxKind.LabeledStatement:\r\n                    case SyntaxKind.ThrowStatement:\r\n                    case SyntaxKind.TryStatement:\r\n                    case SyntaxKind.CatchClause:\r\n                        return forEachChild(node, isAssignedIn);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function resolveLocation(node: Node) {\r\n            // Resolve location from top down towards node if it is a context sensitive expression\r\n            // That helps in making sure not assigning types as any when resolved out of order\r\n            let containerNodes: Node[] = [];\r\n            for (let parent = node.parent; parent; parent = parent.parent) {\r\n                if ((isExpression(parent) || isObjectLiteralMethod(node)) &&\r\n                    isContextSensitive(<Expression>parent)) {\r\n                    containerNodes.unshift(parent);\r\n                }\r\n            }\r\n\r\n            ts.forEach(containerNodes, node => { getTypeOfNode(node); });\r\n        }\r\n\r\n        function getSymbolAtLocation(node: Node): Symbol {\r\n            resolveLocation(node);\r\n            return getSymbolInfo(node);\r\n        }\r\n\r\n        function getTypeAtLocation(node: Node): Type {\r\n            resolveLocation(node);\r\n            return getTypeOfNode(node);\r\n        }\r\n\r\n        function getTypeOfSymbolAtLocation(symbol: Symbol, node: Node): Type {\r\n            resolveLocation(node);\r\n            // Get the narrowed type of symbol at given location instead of just getting\r\n            // the type of the symbol.\r\n            // eg.\r\n            // function foo(a: string | number) {\r\n            //     if (typeof a === \"string\") {\r\n            //         a/**/\r\n            //     }\r\n            // }\r\n            // getTypeOfSymbol for a would return type of parameter symbol string | number\r\n            // Unless we provide location /**/, checker wouldn't know how to narrow the type\r\n            // By using getNarrowedTypeOfSymbol would return string since it would be able to narrow\r\n            // it by typeguard in the if true condition\r\n            return getNarrowedTypeOfSymbol(symbol, node);\r\n        }\r\n\r\n        // Get the narrowed type of a given symbol at a given location\r\n        function getNarrowedTypeOfSymbol(symbol: Symbol, node: Node) {\r\n            let type = getTypeOfSymbol(symbol);\r\n            // Only narrow when symbol is variable of type any or an object, union, or type parameter type\r\n            if (node && symbol.flags & SymbolFlags.Variable) {\r\n                if (isTypeAny(type) || type.flags & (TypeFlags.ObjectType | TypeFlags.Union | TypeFlags.TypeParameter)) {\r\n                    loop: while (node.parent) {\r\n                        let child = node;\r\n                        node = node.parent;\r\n                        let narrowedType = type;\r\n                        switch (node.kind) {\r\n                            case SyntaxKind.IfStatement:\r\n                                // In a branch of an if statement, narrow based on controlling expression\r\n                                if (child !== (<IfStatement>node).expression) {\r\n                                    narrowedType = narrowType(type, (<IfStatement>node).expression, /*assumeTrue*/ child === (<IfStatement>node).thenStatement);\r\n                                }\r\n                                break;\r\n                            case SyntaxKind.ConditionalExpression:\r\n                                // In a branch of a conditional expression, narrow based on controlling condition\r\n                                if (child !== (<ConditionalExpression>node).condition) {\r\n                                    narrowedType = narrowType(type, (<ConditionalExpression>node).condition, /*assumeTrue*/ child === (<ConditionalExpression>node).whenTrue);\r\n                                }\r\n                                break;\r\n                            case SyntaxKind.BinaryExpression:\r\n                                // In the right operand of an && or ||, narrow based on left operand\r\n                                if (child === (<BinaryExpression>node).right) {\r\n                                    if ((<BinaryExpression>node).operatorToken.kind === SyntaxKind.AmpersandAmpersandToken) {\r\n                                        narrowedType = narrowType(type, (<BinaryExpression>node).left, /*assumeTrue*/ true);\r\n                                    }\r\n                                    else if ((<BinaryExpression>node).operatorToken.kind === SyntaxKind.BarBarToken) {\r\n                                        narrowedType = narrowType(type, (<BinaryExpression>node).left, /*assumeTrue*/ false);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case SyntaxKind.SourceFile:\r\n                            case SyntaxKind.ModuleDeclaration:\r\n                            case SyntaxKind.FunctionDeclaration:\r\n                            case SyntaxKind.MethodDeclaration:\r\n                            case SyntaxKind.MethodSignature:\r\n                            case SyntaxKind.GetAccessor:\r\n                            case SyntaxKind.SetAccessor:\r\n                            case SyntaxKind.Constructor:\r\n                                // Stop at the first containing function or module declaration\r\n                                break loop;\r\n                        }\r\n                        // Use narrowed type if construct contains no assignments to variable\r\n                        if (narrowedType !== type) {\r\n                            if (isVariableAssignedWithin(symbol, node)) {\r\n                                break;\r\n                            }\r\n                            type = narrowedType;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return type;\r\n\r\n            function narrowTypeByEquality(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                // Check that we have 'typeof <symbol>' on the left and string literal on the right\r\n                if (expr.left.kind !== SyntaxKind.TypeOfExpression || expr.right.kind !== SyntaxKind.StringLiteral) {\r\n                    return type;\r\n                }\r\n                let left = <TypeOfExpression>expr.left;\r\n                let right = <LiteralExpression>expr.right;\r\n                if (left.expression.kind !== SyntaxKind.Identifier || getResolvedSymbol(<Identifier>left.expression) !== symbol) {\r\n                    return type;\r\n                }\r\n                let typeInfo = primitiveTypeInfo[right.text];\r\n                if (expr.operatorToken.kind === SyntaxKind.ExclamationEqualsEqualsToken) {\r\n                    assumeTrue = !assumeTrue;\r\n                }\r\n                if (assumeTrue) {\r\n                    // Assumed result is true. If check was not for a primitive type, remove all primitive types\r\n                    if (!typeInfo) {\r\n                        return removeTypesFromUnionType(type, /*typeKind*/ TypeFlags.StringLike | TypeFlags.NumberLike | TypeFlags.Boolean | TypeFlags.ESSymbol,\r\n                            /*isOfTypeKind*/ true, /*allowEmptyUnionResult*/ false);\r\n                    }\r\n                    // Check was for a primitive type, return that primitive type if it is a subtype\r\n                    if (isTypeSubtypeOf(typeInfo.type, type)) {\r\n                        return typeInfo.type;\r\n                    }\r\n                    // Otherwise, remove all types that aren't of the primitive type kind. This can happen when the type is\r\n                    // union of enum types and other types.\r\n                    return removeTypesFromUnionType(type, /*typeKind*/ typeInfo.flags, /*isOfTypeKind*/ false, /*allowEmptyUnionResult*/ false);\r\n                }\r\n                else {\r\n                    // Assumed result is false. If check was for a primitive type, remove that primitive type\r\n                    if (typeInfo) {\r\n                        return removeTypesFromUnionType(type, /*typeKind*/ typeInfo.flags, /*isOfTypeKind*/ true, /*allowEmptyUnionResult*/ false);\r\n                    }\r\n                    // Otherwise we don't have enough information to do anything.\r\n                    return type;\r\n                }\r\n            }\r\n\r\n            function narrowTypeByAnd(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                if (assumeTrue) {\r\n                    // The assumed result is true, therefore we narrow assuming each operand to be true.\r\n                    return narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ true);\r\n                }\r\n                else {\r\n                    // The assumed result is false. This means either the first operand was false, or the first operand was true\r\n                    // and the second operand was false. We narrow with those assumptions and union the two resulting types.\r\n                    return getUnionType([\r\n                        narrowType(type, expr.left, /*assumeTrue*/ false),\r\n                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ false)\r\n                    ]);\r\n                }\r\n            }\r\n\r\n            function narrowTypeByOr(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                if (assumeTrue) {\r\n                    // The assumed result is true. This means either the first operand was true, or the first operand was false\r\n                    // and the second operand was true. We narrow with those assumptions and union the two resulting types.\r\n                    return getUnionType([\r\n                        narrowType(type, expr.left, /*assumeTrue*/ true),\r\n                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ true)\r\n                    ]);\r\n                }\r\n                else {\r\n                    // The assumed result is false, therefore we narrow assuming each operand to be false.\r\n                    return narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ false);\r\n                }\r\n            }\r\n\r\n            function narrowTypeByInstanceof(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                // Check that type is not any, assumed result is true, and we have variable symbol on the left\r\n                if (isTypeAny(type) || !assumeTrue || expr.left.kind !== SyntaxKind.Identifier || getResolvedSymbol(<Identifier>expr.left) !== symbol) {\r\n                    return type;\r\n                }\r\n                // Check that right operand is a function type with a prototype property\r\n                let rightType = checkExpression(expr.right);\r\n                if (!isTypeSubtypeOf(rightType, globalFunctionType)) {\r\n                    return type;\r\n                }\r\n\r\n                let targetType: Type;\r\n                let prototypeProperty = getPropertyOfType(rightType, \"prototype\");\r\n                if (prototypeProperty) {\r\n                    // Target type is type of the prototype property\r\n                    let prototypePropertyType = getTypeOfSymbol(prototypeProperty);\r\n                    if (!isTypeAny(prototypePropertyType)) {\r\n                        targetType = prototypePropertyType;\r\n                    }\r\n                }\r\n\r\n                if (!targetType) {\r\n                    // Target type is type of construct signature\r\n                    let constructSignatures: Signature[];\r\n                    if (rightType.flags & TypeFlags.Interface) {\r\n                        constructSignatures = resolveDeclaredMembers(<InterfaceType>rightType).declaredConstructSignatures;\r\n                    }\r\n                    else if (rightType.flags & TypeFlags.Anonymous) {\r\n                        constructSignatures = getSignaturesOfType(rightType, SignatureKind.Construct);\r\n                    }\r\n                    if (constructSignatures && constructSignatures.length) {\r\n                        targetType = getUnionType(map(constructSignatures, signature => getReturnTypeOfSignature(getErasedSignature(signature))));\r\n                    }\r\n                }\r\n\r\n                if (targetType) {\r\n                    return getNarrowedType(type, targetType);\r\n                }\r\n\r\n                return type;\r\n            }\r\n\r\n            function getNarrowedType(originalType: Type, narrowedTypeCandidate: Type) {\r\n                // Narrow to the target type if it's a subtype of the current type\r\n                if (isTypeSubtypeOf(narrowedTypeCandidate, originalType)) {\r\n                    return narrowedTypeCandidate;\r\n                }\r\n                // If the current type is a union type, remove all constituents that aren't subtypes of the target.\r\n                if (originalType.flags & TypeFlags.Union) {\r\n                    return getUnionType(filter((<UnionType>originalType).types, t => isTypeSubtypeOf(t, narrowedTypeCandidate)));\r\n                }\r\n                return originalType;\r\n            }\r\n\r\n            function narrowTypeByTypePredicate(type: Type, expr: CallExpression, assumeTrue: boolean): Type {\r\n                if (type.flags & TypeFlags.Any) {\r\n                    return type;\r\n                }\r\n                let signature = getResolvedSignature(expr);\r\n\r\n                if (signature.typePredicate &&\r\n                    getSymbolAtLocation(expr.arguments[signature.typePredicate.parameterIndex]) === symbol) {\r\n\r\n                    if (!assumeTrue) {\r\n                        if (type.flags & TypeFlags.Union) {\r\n                            return getUnionType(filter((<UnionType>type).types, t => !isTypeSubtypeOf(t, signature.typePredicate.type)));\r\n                        } \r\n                        return type;\r\n                    }\r\n                    return getNarrowedType(type, signature.typePredicate.type);\r\n                }\r\n                return type;\r\n            }\r\n\r\n            // Narrow the given type based on the given expression having the assumed boolean value. The returned type\r\n            // will be a subtype or the same type as the argument.\r\n            function narrowType(type: Type, expr: Expression, assumeTrue: boolean): Type {\r\n                switch (expr.kind) {\r\n                    case SyntaxKind.CallExpression:\r\n                        return narrowTypeByTypePredicate(type, <CallExpression>expr, assumeTrue);\r\n                    case SyntaxKind.ParenthesizedExpression:\r\n                        return narrowType(type, (<ParenthesizedExpression>expr).expression, assumeTrue);\r\n                    case SyntaxKind.BinaryExpression:\r\n                        let operator = (<BinaryExpression>expr).operatorToken.kind;\r\n                        if (operator === SyntaxKind.EqualsEqualsEqualsToken || operator === SyntaxKind.ExclamationEqualsEqualsToken) {\r\n                            return narrowTypeByEquality(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.AmpersandAmpersandToken) {\r\n                            return narrowTypeByAnd(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.BarBarToken) {\r\n                            return narrowTypeByOr(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.InstanceOfKeyword) {\r\n                            return narrowTypeByInstanceof(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.PrefixUnaryExpression:\r\n                        if ((<PrefixUnaryExpression>expr).operator === SyntaxKind.ExclamationToken) {\r\n                            return narrowType(type, (<PrefixUnaryExpression>expr).operand, !assumeTrue);\r\n                        }\r\n                        break;\r\n                }\r\n                return type;\r\n            }\r\n        }\r\n\r\n        function checkIdentifier(node: Identifier): Type {\r\n            let symbol = getResolvedSymbol(node);\r\n\r\n            // As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.\r\n            // Although in down-level emit of arrow function, we emit it using function expression which means that\r\n            // arguments objects will be bound to the inner object; emitting arrow function natively in ES6, arguments objects\r\n            // will be bound to non-arrow function that contain this arrow function. This results in inconsistent behavior.\r\n            // To avoid that we will give an error to users if they use arguments objects in arrow function so that they\r\n            // can explicitly bound arguments objects\r\n            if (symbol === argumentsSymbol && getContainingFunction(node).kind === SyntaxKind.ArrowFunction && languageVersion < ScriptTarget.ES6) {\r\n                error(node, Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression);\r\n            }\r\n\r\n            if (symbol.flags & SymbolFlags.Alias && !isInTypeQuery(node) && !isConstEnumOrConstEnumOnlyModule(resolveAlias(symbol))) {\r\n                markAliasSymbolAsReferenced(symbol);\r\n            }\r\n\r\n            checkCollisionWithCapturedSuperVariable(node, node);\r\n            checkCollisionWithCapturedThisVariable(node, node);\r\n            checkBlockScopedBindingCapturedInLoop(node, symbol);\r\n\r\n            return getNarrowedTypeOfSymbol(getExportSymbolOfValueSymbolIfExported(symbol), node);\r\n        }\r\n\r\n        function isInsideFunction(node: Node, threshold: Node): boolean {\r\n            let current = node;\r\n            while (current && current !== threshold) {\r\n                if (isFunctionLike(current)) {\r\n                    return true;\r\n                }\r\n                current = current.parent;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkBlockScopedBindingCapturedInLoop(node: Identifier, symbol: Symbol): void {\r\n            if (languageVersion >= ScriptTarget.ES6 ||\r\n                (symbol.flags & SymbolFlags.BlockScopedVariable) === 0 ||\r\n                symbol.valueDeclaration.parent.kind === SyntaxKind.CatchClause) {\r\n                return;\r\n            }\r\n\r\n            // - check if binding is used in some function\r\n            // (stop the walk when reaching container of binding declaration)\r\n            // - if first check succeeded - check if variable is declared inside the loop\r\n\r\n            // nesting structure:\r\n            // (variable declaration or binding element) -> variable declaration list -> container\r\n            let container: Node = symbol.valueDeclaration;\r\n            while (container.kind !== SyntaxKind.VariableDeclarationList) {\r\n                container = container.parent;\r\n            }\r\n            // get the parent of variable declaration list\r\n            container = container.parent;\r\n            if (container.kind === SyntaxKind.VariableStatement) {\r\n                // if parent is variable statement - get its parent\r\n                container = container.parent;\r\n            }\r\n\r\n            let inFunction = isInsideFunction(node.parent, container);\r\n\r\n            let current = container;\r\n            while (current && !nodeStartsNewLexicalEnvironment(current)) {\r\n                if (isIterationStatement(current, /*lookInLabeledStatements*/ false)) {\r\n                    if (inFunction) {\r\n                        grammarErrorOnFirstToken(current, Diagnostics.Loop_contains_block_scoped_variable_0_referenced_by_a_function_in_the_loop_This_is_only_supported_in_ECMAScript_6_or_higher, declarationNameToString(node));\r\n                    }\r\n                    // mark value declaration so during emit they can have a special handling\r\n                    getNodeLinks(<VariableDeclaration>symbol.valueDeclaration).flags |= NodeCheckFlags.BlockScopedBindingInLoop;\r\n                    break;\r\n                }\r\n                current = current.parent;\r\n            }\r\n        }\r\n\r\n        function captureLexicalThis(node: Node, container: Node): void {\r\n            let classNode = container.parent && container.parent.kind === SyntaxKind.ClassDeclaration ? container.parent : undefined;\r\n            getNodeLinks(node).flags |= NodeCheckFlags.LexicalThis;\r\n            if (container.kind === SyntaxKind.PropertyDeclaration || container.kind === SyntaxKind.Constructor) {\r\n                getNodeLinks(classNode).flags |= NodeCheckFlags.CaptureThis;\r\n            }\r\n            else {\r\n                getNodeLinks(container).flags |= NodeCheckFlags.CaptureThis;\r\n            }\r\n        }\r\n\r\n        function checkThisExpression(node: Node): Type {\r\n            // Stop at the first arrow function so that we can\r\n            // tell whether 'this' needs to be captured.\r\n            let container = getThisContainer(node, /* includeArrowFunctions */ true);\r\n            let needToCaptureLexicalThis = false;\r\n\r\n            // Now skip arrow functions to get the \"real\" owner of 'this'.\r\n            if (container.kind === SyntaxKind.ArrowFunction) {\r\n                container = getThisContainer(container, /* includeArrowFunctions */ false);\r\n\r\n                // When targeting es6, arrow function lexically bind \"this\" so we do not need to do the work of binding \"this\" in emitted code\r\n                needToCaptureLexicalThis = (languageVersion < ScriptTarget.ES6);\r\n            }\r\n\r\n            switch (container.kind) {\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    error(node, Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body);\r\n                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    break;\r\n                case SyntaxKind.EnumDeclaration:\r\n                    error(node, Diagnostics.this_cannot_be_referenced_in_current_location);\r\n                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    break;\r\n                case SyntaxKind.Constructor:\r\n                    if (isInConstructorArgumentInitializer(node, container)) {\r\n                        error(node, Diagnostics.this_cannot_be_referenced_in_constructor_arguments);\r\n                        // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    }\r\n                    break;\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                    if (container.flags & NodeFlags.Static) {\r\n                        error(node, Diagnostics.this_cannot_be_referenced_in_a_static_property_initializer);\r\n                        // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    }\r\n                    break;\r\n                case SyntaxKind.ComputedPropertyName:\r\n                    error(node, Diagnostics.this_cannot_be_referenced_in_a_computed_property_name);\r\n                    break;\r\n            }\r\n\r\n            if (needToCaptureLexicalThis) {\r\n                captureLexicalThis(node, container);\r\n            }\r\n\r\n            let classNode = container.parent && container.parent.kind === SyntaxKind.ClassDeclaration ? container.parent : undefined;\r\n            if (classNode) {\r\n                let symbol = getSymbolOfNode(classNode);\r\n                return container.flags & NodeFlags.Static ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        function isInConstructorArgumentInitializer(node: Node, constructorDecl: Node): boolean {\r\n            for (let n = node; n && n !== constructorDecl; n = n.parent) {\r\n                if (n.kind === SyntaxKind.Parameter) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkSuperExpression(node: Node): Type {\r\n            let isCallExpression = node.parent.kind === SyntaxKind.CallExpression && (<CallExpression>node.parent).expression === node;\r\n            let enclosingClass = <ClassDeclaration>getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            let baseClass: Type;\r\n            if (enclosingClass && getClassExtendsHeritageClauseElement(enclosingClass)) {\r\n                let classType = <InterfaceType>getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClass));\r\n                let baseTypes = getBaseTypes(classType);\r\n                baseClass = baseTypes.length && baseTypes[0];\r\n            }\r\n\r\n            if (!baseClass) {\r\n                error(node, Diagnostics.super_can_only_be_referenced_in_a_derived_class);\r\n                return unknownType;\r\n            }\r\n\r\n            let container = getSuperContainer(node, /*includeFunctions*/ true);\r\n\r\n            if (container) {\r\n                let canUseSuperExpression = false;\r\n                let needToCaptureLexicalThis: boolean;\r\n                if (isCallExpression) {\r\n                    // TS 1.0 SPEC (April 2014): 4.8.1\r\n                    // Super calls are only permitted in constructors of derived classes\r\n                    canUseSuperExpression = container.kind === SyntaxKind.Constructor;\r\n                }\r\n                else {\r\n                    // TS 1.0 SPEC (April 2014)\r\n                    // 'super' property access is allowed\r\n                    // - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance\r\n                    // - In a static member function or static member accessor\r\n\r\n                    // super property access might appear in arrow functions with arbitrary deep nesting\r\n                    needToCaptureLexicalThis = false;\r\n                    while (container && container.kind === SyntaxKind.ArrowFunction) {\r\n                        container = getSuperContainer(container, /*includeFunctions*/ true);\r\n                        needToCaptureLexicalThis = languageVersion < ScriptTarget.ES6;\r\n                    }\r\n\r\n                    // topmost container must be something that is directly nested in the class declaration\r\n                    if (container && container.parent && container.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                        if (container.flags & NodeFlags.Static) {\r\n                            canUseSuperExpression =\r\n                                container.kind === SyntaxKind.MethodDeclaration ||\r\n                                container.kind === SyntaxKind.MethodSignature ||\r\n                                container.kind === SyntaxKind.GetAccessor ||\r\n                                container.kind === SyntaxKind.SetAccessor;\r\n                        }\r\n                        else {\r\n                            canUseSuperExpression =\r\n                                container.kind === SyntaxKind.MethodDeclaration ||\r\n                                container.kind === SyntaxKind.MethodSignature ||\r\n                                container.kind === SyntaxKind.GetAccessor ||\r\n                                container.kind === SyntaxKind.SetAccessor ||\r\n                                container.kind === SyntaxKind.PropertyDeclaration ||\r\n                                container.kind === SyntaxKind.PropertySignature ||\r\n                                container.kind === SyntaxKind.Constructor;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (canUseSuperExpression) {\r\n                    let returnType: Type;\r\n\r\n                    if ((container.flags & NodeFlags.Static) || isCallExpression) {\r\n                        getNodeLinks(node).flags |= NodeCheckFlags.SuperStatic;\r\n                        returnType = getTypeOfSymbol(baseClass.symbol);\r\n                    }\r\n                    else {\r\n                        getNodeLinks(node).flags |= NodeCheckFlags.SuperInstance;\r\n                        returnType = baseClass;\r\n                    }\r\n\r\n                    if (container.kind === SyntaxKind.Constructor && isInConstructorArgumentInitializer(node, container)) {\r\n                        // issue custom error message for super property access in constructor arguments (to be aligned with old compiler)\r\n                        error(node, Diagnostics.super_cannot_be_referenced_in_constructor_arguments);\r\n                        returnType = unknownType;\r\n                    }\r\n\r\n                    if (!isCallExpression && needToCaptureLexicalThis) {\r\n                        // call expressions are allowed only in constructors so they should always capture correct 'this'\r\n                        // super property access expressions can also appear in arrow functions -\r\n                        // in this case they should also use correct lexical this\r\n                        captureLexicalThis(node.parent, container);\r\n                    }\r\n\r\n                    return returnType;\r\n                }\r\n            }\r\n\r\n            if (container && container.kind === SyntaxKind.ComputedPropertyName) {\r\n                error(node, Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);\r\n            }\r\n            else if (isCallExpression) {\r\n                error(node, Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);\r\n            }\r\n            else {\r\n                error(node, Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);\r\n            }\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        // Return contextual type of parameter or undefined if no contextual type is available\r\n        function getContextuallyTypedParameterType(parameter: ParameterDeclaration): Type {\r\n            if (isFunctionExpressionOrArrowFunction(parameter.parent)) {\r\n                let func = <FunctionExpression>parameter.parent;\r\n                if (isContextSensitive(func)) {\r\n                    let contextualSignature = getContextualSignature(func);\r\n                    if (contextualSignature) {\r\n\r\n                        let funcHasRestParameters = hasRestParameter(func);\r\n                        let len = func.parameters.length - (funcHasRestParameters ? 1 : 0);\r\n                        let indexOfParameter = indexOf(func.parameters, parameter);\r\n                        if (indexOfParameter < len) {\r\n                            return getTypeAtPosition(contextualSignature, indexOfParameter);\r\n                        }\r\n\r\n                        // If last parameter is contextually rest parameter get its type\r\n                        if (indexOfParameter === (func.parameters.length - 1) &&\r\n                            funcHasRestParameters && contextualSignature.hasRestParameter && func.parameters.length >= contextualSignature.parameters.length) {\r\n                            return getTypeOfSymbol(lastOrUndefined(contextualSignature.parameters));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In a variable, parameter or property declaration with a type annotation, the contextual type of an initializer\r\n        // expression is the type of the variable, parameter or property. Otherwise, in a parameter declaration of a\r\n        // contextually typed function expression, the contextual type of an initializer expression is the contextual type\r\n        // of the parameter. Otherwise, in a variable or parameter declaration with a binding pattern name, the contextual\r\n        // type of an initializer expression is the type implied by the binding pattern.\r\n        function getContextualTypeForInitializerExpression(node: Expression): Type {\r\n            let declaration = <VariableLikeDeclaration>node.parent;\r\n            if (node === declaration.initializer) {\r\n                if (declaration.type) {\r\n                    return getTypeFromTypeNode(declaration.type);\r\n                }\r\n                if (declaration.kind === SyntaxKind.Parameter) {\r\n                    let type = getContextuallyTypedParameterType(<ParameterDeclaration>declaration);\r\n                    if (type) {\r\n                        return type;\r\n                    }\r\n                }\r\n                if (isBindingPattern(declaration.name)) {\r\n                    return getTypeFromBindingPattern(<BindingPattern>declaration.name);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForReturnExpression(node: Expression): Type {\r\n            let func = getContainingFunction(node);\r\n            if (func && !func.asteriskToken) {\r\n                return getContextualReturnType(func);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForYieldOperand(node: YieldExpression): Type {\r\n            let func = getContainingFunction(node);\r\n            if (func) {\r\n                let contextualReturnType = getContextualReturnType(func);\r\n                if (contextualReturnType) {\r\n                    return node.asteriskToken\r\n                        ? contextualReturnType\r\n                        : getElementTypeOfIterableIterator(contextualReturnType);\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualReturnType(functionDecl: FunctionLikeDeclaration): Type {\r\n            // If the containing function has a return type annotation, is a constructor, or is a get accessor whose\r\n            // corresponding set accessor has a type annotation, return statements in the function are contextually typed\r\n            if (functionDecl.type ||\r\n                functionDecl.kind === SyntaxKind.Constructor ||\r\n                functionDecl.kind === SyntaxKind.GetAccessor && getSetAccessorTypeAnnotationNode(<AccessorDeclaration>getDeclarationOfKind(functionDecl.symbol, SyntaxKind.SetAccessor))) {\r\n                return getReturnTypeOfSignature(getSignatureFromDeclaration(functionDecl));\r\n            }\r\n\r\n            // Otherwise, if the containing function is contextually typed by a function type with exactly one call signature\r\n            // and that call signature is non-generic, return statements are contextually typed by the return type of the signature\r\n            let signature = getContextualSignatureForFunctionLikeDeclaration(<FunctionExpression>functionDecl);\r\n            if (signature) {\r\n                return getReturnTypeOfSignature(signature);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        // In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.\r\n        function getContextualTypeForArgument(callTarget: CallLikeExpression, arg: Expression): Type {\r\n            let args = getEffectiveCallArguments(callTarget);\r\n            let argIndex = indexOf(args, arg);\r\n            if (argIndex >= 0) {\r\n                let signature = getResolvedSignature(callTarget);\r\n                return getTypeAtPosition(signature, argIndex);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForSubstitutionExpression(template: TemplateExpression, substitutionExpression: Expression) {\r\n            if (template.parent.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                return getContextualTypeForArgument(<TaggedTemplateExpression>template.parent, substitutionExpression);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForBinaryOperand(node: Expression): Type {\r\n            let binaryExpression = <BinaryExpression>node.parent;\r\n            let operator = binaryExpression.operatorToken.kind;\r\n            if (operator >= SyntaxKind.FirstAssignment && operator <= SyntaxKind.LastAssignment) {\r\n                // In an assignment expression, the right operand is contextually typed by the type of the left operand.\r\n                if (node === binaryExpression.right) {\r\n                    return checkExpression(binaryExpression.left);\r\n                }\r\n            }\r\n            else if (operator === SyntaxKind.BarBarToken) {\r\n                // When an || expression has a contextual type, the operands are contextually typed by that type. When an ||\r\n                // expression has no contextual type, the right operand is contextually typed by the type of the left operand.\r\n                let type = getContextualType(binaryExpression);\r\n                if (!type && node === binaryExpression.right) {\r\n                    type = checkExpression(binaryExpression.left);\r\n                }\r\n                return type;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Apply a mapping function to a contextual type and return the resulting type. If the contextual type\r\n        // is a union type, the mapping function is applied to each constituent type and a union of the resulting\r\n        // types is returned.\r\n        function applyToContextualType(type: Type, mapper: (t: Type) => Type): Type {\r\n            if (!(type.flags & TypeFlags.Union)) {\r\n                return mapper(type);\r\n            }\r\n            let types = (<UnionType>type).types;\r\n            let mappedType: Type;\r\n            let mappedTypes: Type[];\r\n            for (let current of types) {\r\n                let t = mapper(current);\r\n                if (t) {\r\n                    if (!mappedType) {\r\n                        mappedType = t;\r\n                    }\r\n                    else if (!mappedTypes) {\r\n                        mappedTypes = [mappedType, t];\r\n                    }\r\n                    else {\r\n                        mappedTypes.push(t);\r\n                    }\r\n                }\r\n            }\r\n            return mappedTypes ? getUnionType(mappedTypes) : mappedType;\r\n        }\r\n\r\n        function getTypeOfPropertyOfContextualType(type: Type, name: string) {\r\n            return applyToContextualType(type, t => {\r\n                let prop = getPropertyOfObjectType(t, name);\r\n                return prop ? getTypeOfSymbol(prop) : undefined;\r\n            });\r\n        }\r\n\r\n        function getIndexTypeOfContextualType(type: Type, kind: IndexKind) {\r\n            return applyToContextualType(type, t => getIndexTypeOfObjectOrUnionType(t, kind));\r\n        }\r\n\r\n        // Return true if the given contextual type is a tuple-like type\r\n        function contextualTypeIsTupleLikeType(type: Type): boolean {\r\n            return !!(type.flags & TypeFlags.Union ? forEach((<UnionType>type).types, isTupleLikeType) : isTupleLikeType(type));\r\n        }\r\n\r\n        // Return true if the given contextual type provides an index signature of the given kind\r\n        function contextualTypeHasIndexSignature(type: Type, kind: IndexKind): boolean {\r\n            return !!(type.flags & TypeFlags.Union ? forEach((<UnionType>type).types, t => getIndexTypeOfObjectOrUnionType(t, kind)) : getIndexTypeOfObjectOrUnionType(type, kind));\r\n        }\r\n\r\n        // In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of\r\n        // the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one\r\n        // exists. Otherwise, it is the type of the string index signature in T, if one exists.\r\n        function getContextualTypeForObjectLiteralMethod(node: MethodDeclaration): Type {\r\n            Debug.assert(isObjectLiteralMethod(node));\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return undefined;\r\n            }\r\n\r\n            return getContextualTypeForObjectLiteralElement(node);\r\n        }\r\n\r\n        function getContextualTypeForObjectLiteralElement(element: ObjectLiteralElement) {\r\n            let objectLiteral = <ObjectLiteralExpression>element.parent;\r\n            let type = getContextualType(objectLiteral);\r\n            if (type) {\r\n                if (!hasDynamicName(element)) {\r\n                    // For a (non-symbol) computed property, there is no reason to look up the name\r\n                    // in the type. It will just be \"__computed\", which does not appear in any\r\n                    // SymbolTable.\r\n                    let symbolName = getSymbolOfNode(element).name;\r\n                    let propertyType = getTypeOfPropertyOfContextualType(type, symbolName);\r\n                    if (propertyType) {\r\n                        return propertyType;\r\n                    }\r\n                }\r\n\r\n                return isNumericName(element.name) && getIndexTypeOfContextualType(type, IndexKind.Number) ||\r\n                    getIndexTypeOfContextualType(type, IndexKind.String);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        // In an array literal contextually typed by a type T, the contextual type of an element expression at index N is\r\n        // the type of the property with the numeric name N in T, if one exists. Otherwise, if T has a numeric index signature,\r\n        // it is the type of the numeric index signature in T. Otherwise, in ES6 and higher, the contextual type is the iterated\r\n        // type of T.\r\n        function getContextualTypeForElementExpression(node: Expression): Type {\r\n            let arrayLiteral = <ArrayLiteralExpression>node.parent;\r\n            let type = getContextualType(arrayLiteral);\r\n            if (type) {\r\n                let index = indexOf(arrayLiteral.elements, node);\r\n                return getTypeOfPropertyOfContextualType(type, \"\" + index)\r\n                    || getIndexTypeOfContextualType(type, IndexKind.Number)\r\n                    || (languageVersion >= ScriptTarget.ES6 ? getElementTypeOfIterable(type, /*errorNode*/ undefined) : undefined);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.\r\n        function getContextualTypeForConditionalOperand(node: Expression): Type {\r\n            let conditional = <ConditionalExpression>node.parent;\r\n            return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional) : undefined;\r\n        }\r\n\r\n        // Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily\r\n        // be \"pushed\" onto a node using the contextualType property.\r\n        function getContextualType(node: Expression): Type {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return undefined;\r\n            }\r\n            if (node.contextualType) {\r\n                return node.contextualType;\r\n            }\r\n            let parent = node.parent;\r\n            switch (parent.kind) {\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.Parameter:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.BindingElement:\r\n                    return getContextualTypeForInitializerExpression(node);\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.ReturnStatement:\r\n                    return getContextualTypeForReturnExpression(node);\r\n                case SyntaxKind.YieldExpression:\r\n                    return getContextualTypeForYieldOperand(<YieldExpression>parent);\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                    return getContextualTypeForArgument(<CallExpression>parent, node);\r\n                case SyntaxKind.TypeAssertionExpression:\r\n                    return getTypeFromTypeNode((<TypeAssertion>parent).type);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return getContextualTypeForBinaryOperand(node);\r\n                case SyntaxKind.PropertyAssignment:\r\n                    return getContextualTypeForObjectLiteralElement(<ObjectLiteralElement>parent);\r\n                case SyntaxKind.ArrayLiteralExpression:\r\n                    return getContextualTypeForElementExpression(node);\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return getContextualTypeForConditionalOperand(node);\r\n                case SyntaxKind.TemplateSpan:\r\n                    Debug.assert(parent.parent.kind === SyntaxKind.TemplateExpression);\r\n                    return getContextualTypeForSubstitutionExpression(<TemplateExpression>parent.parent, node);\r\n                case SyntaxKind.ParenthesizedExpression:\r\n                    return getContextualType(<ParenthesizedExpression>parent);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // If the given type is an object or union type, if that type has a single signature, and if\r\n        // that signature is non-generic, return the signature. Otherwise return undefined.\r\n        function getNonGenericSignature(type: Type): Signature {\r\n            let signatures = getSignaturesOfObjectOrUnionType(type, SignatureKind.Call);\r\n            if (signatures.length === 1) {\r\n                let signature = signatures[0];\r\n                if (!signature.typeParameters) {\r\n                    return signature;\r\n                }\r\n            }\r\n        }\r\n\r\n        function isFunctionExpressionOrArrowFunction(node: Node): boolean {\r\n            return node.kind === SyntaxKind.FunctionExpression || node.kind === SyntaxKind.ArrowFunction;\r\n        }\r\n\r\n        function getContextualSignatureForFunctionLikeDeclaration(node: FunctionLikeDeclaration): Signature {\r\n            // Only function expressions, arrow functions, and object literal methods are contextually typed.\r\n            return isFunctionExpressionOrArrowFunction(node) || isObjectLiteralMethod(node)\r\n                ? getContextualSignature(<FunctionExpression>node)\r\n                : undefined;\r\n        }\r\n\r\n        // Return the contextual signature for a given expression node. A contextual type provides a\r\n        // contextual signature if it has a single call signature and if that call signature is non-generic.\r\n        // If the contextual type is a union type, get the signature from each type possible and if they are\r\n        // all identical ignoring their return type, the result is same signature but with return type as\r\n        // union type of return types from these signatures\r\n        function getContextualSignature(node: FunctionExpression | MethodDeclaration): Signature {\r\n            Debug.assert(node.kind !== SyntaxKind.MethodDeclaration || isObjectLiteralMethod(node));\r\n            let type = isObjectLiteralMethod(node)\r\n                ? getContextualTypeForObjectLiteralMethod(<MethodDeclaration>node)\r\n                : getContextualType(<FunctionExpression>node);\r\n            if (!type) {\r\n                return undefined;\r\n            }\r\n            if (!(type.flags & TypeFlags.Union)) {\r\n                return getNonGenericSignature(type);\r\n            }\r\n            let signatureList: Signature[];\r\n            let types = (<UnionType>type).types;\r\n            for (let current of types) {\r\n                // The signature set of all constituent type with call signatures should match\r\n                // So number of signatures allowed is either 0 or 1\r\n                if (signatureList &&\r\n                    getSignaturesOfObjectOrUnionType(current, SignatureKind.Call).length > 1) {\r\n                    return undefined;\r\n                }\r\n\r\n                let signature = getNonGenericSignature(current);\r\n                if (signature) {\r\n                    if (!signatureList) {\r\n                        // This signature will contribute to contextual union signature\r\n                        signatureList = [signature];\r\n                    }\r\n                    else if (!compareSignatures(signatureList[0], signature, /*compareReturnTypes*/ false, compareTypes)) {\r\n                        // Signatures aren't identical, do not use\r\n                        return undefined;\r\n                    }\r\n                    else {\r\n                        // Use this signature for contextual union signature\r\n                        signatureList.push(signature);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Result is union of signatures collected (return type is union of return types of this signature set)\r\n            let result: Signature;\r\n            if (signatureList) {\r\n                result = cloneSignature(signatureList[0]);\r\n                // Clear resolved return type we possibly got from cloneSignature\r\n                result.resolvedReturnType = undefined;\r\n                result.unionSignatures = signatureList;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Presence of a contextual type mapper indicates inferential typing, except the identityMapper object is\r\n        // used as a special marker for other purposes.\r\n        function isInferentialContext(mapper: TypeMapper) {\r\n            return mapper && mapper !== identityMapper;\r\n        }\r\n\r\n        // A node is an assignment target if it is on the left hand side of an '=' token, if it is parented by a property\r\n        // assignment in an object literal that is an assignment target, or if it is parented by an array literal that is\r\n        // an assignment target. Examples include 'a = xxx', '{ p: a } = xxx', '[{ p: a}] = xxx'.\r\n        function isAssignmentTarget(node: Node): boolean {\r\n            let parent = node.parent;\r\n            if (parent.kind === SyntaxKind.BinaryExpression && (<BinaryExpression>parent).operatorToken.kind === SyntaxKind.EqualsToken && (<BinaryExpression>parent).left === node) {\r\n                return true;\r\n            }\r\n            if (parent.kind === SyntaxKind.PropertyAssignment) {\r\n                return isAssignmentTarget(parent.parent);\r\n            }\r\n            if (parent.kind === SyntaxKind.ArrayLiteralExpression) {\r\n                return isAssignmentTarget(parent);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkSpreadElementExpression(node: SpreadElementExpression, contextualMapper?: TypeMapper): Type {\r\n            // It is usually not safe to call checkExpressionCached if we can be contextually typing.\r\n            // You can tell that we are contextually typing because of the contextualMapper parameter.\r\n            // While it is true that a spread element can have a contextual type, it does not do anything\r\n            // with this type. It is neither affected by it, nor does it propagate it to its operand.\r\n            // So the fact that contextualMapper is passed is not important, because the operand of a spread\r\n            // element is not contextually typed.\r\n            let arrayOrIterableType = checkExpressionCached(node.expression, contextualMapper);\r\n            return checkIteratedTypeOrElementType(arrayOrIterableType, node.expression, /*allowStringInput*/ false);\r\n        }\r\n\r\n        function checkArrayLiteral(node: ArrayLiteralExpression, contextualMapper?: TypeMapper): Type {\r\n            let elements = node.elements;\r\n            if (!elements.length) {\r\n                return createArrayType(undefinedType);\r\n            }\r\n            let hasSpreadElement = false;\r\n            let elementTypes: Type[] = [];\r\n            let inDestructuringPattern = isAssignmentTarget(node);\r\n            for (let e of elements) {\r\n                if (inDestructuringPattern && e.kind === SyntaxKind.SpreadElementExpression) {\r\n                    // Given the following situation:\r\n                    //    var c: {};\r\n                    //    [...c] = [\"\", 0];\r\n                    //\r\n                    // c is represented in the tree as a spread element in an array literal.\r\n                    // But c really functions as a rest element, and its purpose is to provide\r\n                    // a contextual type for the right hand side of the assignment. Therefore,\r\n                    // instead of calling checkExpression on \"...c\", which will give an error \r\n                    // if c is not iterable/array-like, we need to act as if we are trying to\r\n                    // get the contextual element type from it. So we do something similar to\r\n                    // getContextualTypeForElementExpression, which will crucially not error\r\n                    // if there is no index type / iterated type.\r\n                    let restArrayType = checkExpression((<SpreadElementExpression>e).expression, contextualMapper);\r\n                    let restElementType = getIndexTypeOfType(restArrayType, IndexKind.Number) ||\r\n                        (languageVersion >= ScriptTarget.ES6 ? getElementTypeOfIterable(restArrayType, /*errorNode*/ undefined) : undefined);\r\n                    \r\n                    if (restElementType) {\r\n                        elementTypes.push(restElementType);\r\n                    }\r\n                }\r\n                else {\r\n                    let type = checkExpression(e, contextualMapper);\r\n                    elementTypes.push(type);\r\n                }\r\n                hasSpreadElement = hasSpreadElement || e.kind === SyntaxKind.SpreadElementExpression;\r\n            }\r\n            if (!hasSpreadElement) {\r\n                let contextualType = getContextualType(node);\r\n                if (contextualType && contextualTypeIsTupleLikeType(contextualType) || inDestructuringPattern) {\r\n                    return createTupleType(elementTypes);\r\n                }\r\n            }\r\n            return createArrayType(getUnionType(elementTypes));\r\n        }\r\n\r\n        function isNumericName(name: DeclarationName): boolean {\r\n            return name.kind === SyntaxKind.ComputedPropertyName ? isNumericComputedName(<ComputedPropertyName>name) : isNumericLiteralName((<Identifier>name).text);\r\n        }\r\n\r\n        function isNumericComputedName(name: ComputedPropertyName): boolean {\r\n            // It seems odd to consider an expression of type Any to result in a numeric name,\r\n            // but this behavior is consistent with checkIndexedAccess\r\n            return isTypeAnyOrAllConstituentTypesHaveKind(checkComputedPropertyName(name), TypeFlags.NumberLike);\r\n        }\r\n\r\n        function isTypeAnyOrAllConstituentTypesHaveKind(type: Type, kind: TypeFlags): boolean {\r\n            return isTypeAny(type) || allConstituentTypesHaveKind(type, kind);\r\n        }\r\n\r\n        function isNumericLiteralName(name: string) {\r\n            // The intent of numeric names is that\r\n            //     - they are names with text in a numeric form, and that\r\n            //     - setting properties/indexing with them is always equivalent to doing so with the numeric literal 'numLit',\r\n            //         acquired by applying the abstract 'ToNumber' operation on the name's text.\r\n            //\r\n            // The subtlety is in the latter portion, as we cannot reliably say that anything that looks like a numeric literal is a numeric name.\r\n            // In fact, it is the case that the text of the name must be equal to 'ToString(numLit)' for this to hold.\r\n            //\r\n            // Consider the property name '\"0xF00D\"'. When one indexes with '0xF00D', they are actually indexing with the value of 'ToString(0xF00D)'\r\n            // according to the ECMAScript specification, so it is actually as if the user indexed with the string '\"61453\"'.\r\n            // Thus, the text of all numeric literals equivalent to '61543' such as '0xF00D', '0xf00D', '0170015', etc. are not valid numeric names\r\n            // because their 'ToString' representation is not equal to their original text.\r\n            // This is motivated by ECMA-262 sections 9.3.1, 9.8.1, 11.1.5, and 11.2.1.\r\n            //\r\n            // Here, we test whether 'ToString(ToNumber(name))' is exactly equal to 'name'.\r\n            // The '+' prefix operator is equivalent here to applying the abstract ToNumber operation.\r\n            // Applying the 'toString()' method on a number gives us the abstract ToString operation on a number.\r\n            //\r\n            // Note that this accepts the values 'Infinity', '-Infinity', and 'NaN', and that this is intentional.\r\n            // This is desired behavior, because when indexing with them as numeric entities, you are indexing\r\n            // with the strings '\"Infinity\"', '\"-Infinity\"', and '\"NaN\"' respectively.\r\n            return (+name).toString() === name;\r\n        }\r\n\r\n        function checkComputedPropertyName(node: ComputedPropertyName): Type {\r\n            let links = getNodeLinks(node.expression);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = checkExpression(node.expression);\r\n\r\n                // This will allow types number, string, symbol or any. It will also allow enums, the unknown\r\n                // type, and any union of these types (like string | number).\r\n                if (!isTypeAnyOrAllConstituentTypesHaveKind(links.resolvedType, TypeFlags.NumberLike | TypeFlags.StringLike | TypeFlags.ESSymbol)) {\r\n                    error(node, Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any);\r\n                }\r\n                else {\r\n                    checkThatExpressionIsProperSymbolReference(node.expression, links.resolvedType, /*reportError*/ true);\r\n                }\r\n            }\r\n\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function checkObjectLiteral(node: ObjectLiteralExpression, contextualMapper?: TypeMapper): Type {\r\n            // Grammar checking\r\n            checkGrammarObjectLiteralExpression(node);\r\n\r\n            let propertiesTable: SymbolTable = {};\r\n            let propertiesArray: Symbol[] = [];\r\n            let contextualType = getContextualType(node);\r\n            let typeFlags: TypeFlags;\r\n\r\n            for (let memberDecl of node.properties) {\r\n                let member = memberDecl.symbol;\r\n                if (memberDecl.kind === SyntaxKind.PropertyAssignment ||\r\n                    memberDecl.kind === SyntaxKind.ShorthandPropertyAssignment ||\r\n                    isObjectLiteralMethod(memberDecl)) {\r\n                    let type: Type;\r\n                    if (memberDecl.kind === SyntaxKind.PropertyAssignment) {\r\n                        type = checkPropertyAssignment(<PropertyAssignment>memberDecl, contextualMapper);\r\n                    }\r\n                    else if (memberDecl.kind === SyntaxKind.MethodDeclaration) {\r\n                        type = checkObjectLiteralMethod(<MethodDeclaration>memberDecl, contextualMapper);\r\n                    }\r\n                    else {\r\n                        Debug.assert(memberDecl.kind === SyntaxKind.ShorthandPropertyAssignment);\r\n                        type = checkExpression((<ShorthandPropertyAssignment>memberDecl).name, contextualMapper);\r\n                    }\r\n                    typeFlags |= type.flags;\r\n                    let prop = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient | member.flags, member.name);\r\n                    prop.declarations = member.declarations;\r\n                    prop.parent = member.parent;\r\n                    if (member.valueDeclaration) {\r\n                        prop.valueDeclaration = member.valueDeclaration;\r\n                    }\r\n\r\n                    prop.type = type;\r\n                    prop.target = member;\r\n                    member = prop;\r\n                }\r\n                else {\r\n                    // TypeScript 1.0 spec (April 2014)\r\n                    // A get accessor declaration is processed in the same manner as\r\n                    // an ordinary function declaration(section 6.1) with no parameters.\r\n                    // A set accessor declaration is processed in the same manner\r\n                    // as an ordinary function declaration with a single parameter and a Void return type.\r\n                    Debug.assert(memberDecl.kind === SyntaxKind.GetAccessor || memberDecl.kind === SyntaxKind.SetAccessor);\r\n                    checkAccessorDeclaration(<AccessorDeclaration>memberDecl);\r\n                }\r\n\r\n                if (!hasDynamicName(memberDecl)) {\r\n                    propertiesTable[member.name] = member;\r\n                }\r\n                propertiesArray.push(member);\r\n            }\r\n\r\n            let stringIndexType = getIndexType(IndexKind.String);\r\n            let numberIndexType = getIndexType(IndexKind.Number);\r\n            let result = createAnonymousType(node.symbol, propertiesTable, emptyArray, emptyArray, stringIndexType, numberIndexType);\r\n            result.flags |= TypeFlags.ObjectLiteral | TypeFlags.ContainsObjectLiteral | (typeFlags & TypeFlags.ContainsUndefinedOrNull);\r\n            return result;\r\n\r\n            function getIndexType(kind: IndexKind) {\r\n                if (contextualType && contextualTypeHasIndexSignature(contextualType, kind)) {\r\n                    let propTypes: Type[] = [];\r\n                    for (let i = 0; i < propertiesArray.length; i++) {\r\n                        let propertyDecl = node.properties[i];\r\n                        if (kind === IndexKind.String || isNumericName(propertyDecl.name)) {\r\n                            // Do not call getSymbolOfNode(propertyDecl), as that will get the\r\n                            // original symbol for the node. We actually want to get the symbol\r\n                            // created by checkObjectLiteral, since that will be appropriately\r\n                            // contextually typed and resolved.\r\n                            let type = getTypeOfSymbol(propertiesArray[i]);\r\n                            if (!contains(propTypes, type)) {\r\n                                propTypes.push(type);\r\n                            }\r\n                        }\r\n                    }\r\n                    let result = propTypes.length ? getUnionType(propTypes) : undefinedType;\r\n                    typeFlags |= result.flags;\r\n                    return result;\r\n                }\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        // If a symbol is a synthesized symbol with no value declaration, we assume it is a property. Example of this are the synthesized\r\n        // '.prototype' property as well as synthesized tuple index properties.\r\n        function getDeclarationKindFromSymbol(s: Symbol) {\r\n            return s.valueDeclaration ? s.valueDeclaration.kind : SyntaxKind.PropertyDeclaration;\r\n        }\r\n\r\n        function getDeclarationFlagsFromSymbol(s: Symbol) {\r\n            return s.valueDeclaration ? getCombinedNodeFlags(s.valueDeclaration) : s.flags & SymbolFlags.Prototype ? NodeFlags.Public | NodeFlags.Static : 0;\r\n        }\r\n\r\n        function checkClassPropertyAccess(node: PropertyAccessExpression | QualifiedName, left: Expression | QualifiedName, type: Type, prop: Symbol) {\r\n            let flags = getDeclarationFlagsFromSymbol(prop);\r\n            // Public properties are always accessible\r\n            if (!(flags & (NodeFlags.Private | NodeFlags.Protected))) {\r\n                return;\r\n            }\r\n            // Property is known to be private or protected at this point\r\n            // Get the declaring and enclosing class instance types\r\n            let enclosingClassDeclaration = getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            let enclosingClass = enclosingClassDeclaration ? <InterfaceType>getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined;\r\n            let declaringClass = <InterfaceType>getDeclaredTypeOfSymbol(prop.parent);\r\n            // Private property is accessible if declaring and enclosing class are the same\r\n            if (flags & NodeFlags.Private) {\r\n                if (declaringClass !== enclosingClass) {\r\n                    error(node, Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));\r\n                }\r\n                return;\r\n            }\r\n            // Property is known to be protected at this point\r\n            // All protected properties of a supertype are accessible in a super access\r\n            if (left.kind === SyntaxKind.SuperKeyword) {\r\n                return;\r\n            }\r\n            // A protected property is accessible in the declaring class and classes derived from it\r\n            if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {\r\n                error(node, Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));\r\n                return;\r\n            }\r\n            // No further restrictions for static properties\r\n            if (flags & NodeFlags.Static) {\r\n                return;\r\n            }\r\n            // An instance property must be accessed through an instance of the enclosing class\r\n            if (!(getTargetType(type).flags & (TypeFlags.Class | TypeFlags.Interface) && hasBaseType(<InterfaceType>type, enclosingClass))) {\r\n                error(node, Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));\r\n            }\r\n        }\r\n\r\n        function checkPropertyAccessExpression(node: PropertyAccessExpression) {\r\n            return checkPropertyAccessExpressionOrQualifiedName(node, node.expression, node.name);\r\n        }\r\n\r\n        function checkQualifiedName(node: QualifiedName) {\r\n            return checkPropertyAccessExpressionOrQualifiedName(node, node.left, node.right);\r\n        }\r\n\r\n        function checkPropertyAccessExpressionOrQualifiedName(node: PropertyAccessExpression | QualifiedName, left: Expression | QualifiedName, right: Identifier) {\r\n            let type = checkExpressionOrQualifiedName(left);\r\n            if (isTypeAny(type)) {\r\n                return type;\r\n            }\r\n\r\n            let apparentType = getApparentType(getWidenedType(type));\r\n            if (apparentType === unknownType) {\r\n                // handle cases when type is Type parameter with invalid constraint\r\n                return unknownType;\r\n            }\r\n            let prop = getPropertyOfType(apparentType, right.text);\r\n            if (!prop) {\r\n                if (right.text) {\r\n                    error(right, Diagnostics.Property_0_does_not_exist_on_type_1, declarationNameToString(right), typeToString(type));\r\n                }\r\n                return unknownType;\r\n            }\r\n            getNodeLinks(node).resolvedSymbol = prop;\r\n            if (prop.parent && prop.parent.flags & SymbolFlags.Class) {\r\n                // TS 1.0 spec (April 2014): 4.8.2\r\n                // - In a constructor, instance member function, instance member accessor, or\r\n                //   instance member variable initializer where this references a derived class instance,\r\n                //   a super property access is permitted and must specify a public instance member function of the base class.\r\n                // - In a static member function or static member accessor\r\n                //   where this references the constructor function object of a derived class,\r\n                //   a super property access is permitted and must specify a public static member function of the base class.\r\n                if (left.kind === SyntaxKind.SuperKeyword && getDeclarationKindFromSymbol(prop) !== SyntaxKind.MethodDeclaration) {\r\n                    error(right, Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);\r\n                }\r\n                else {\r\n                    checkClassPropertyAccess(node, left, type, prop);\r\n                }\r\n            }\r\n            return getTypeOfSymbol(prop);\r\n        }\r\n\r\n        function isValidPropertyAccess(node: PropertyAccessExpression | QualifiedName, propertyName: string): boolean {\r\n            let left = node.kind === SyntaxKind.PropertyAccessExpression\r\n                ? (<PropertyAccessExpression>node).expression\r\n                : (<QualifiedName>node).left;\r\n\r\n            let type = checkExpressionOrQualifiedName(left);\r\n            if (type !== unknownType && !isTypeAny(type)) {\r\n                let prop = getPropertyOfType(getWidenedType(type), propertyName);\r\n                if (prop && prop.parent && prop.parent.flags & SymbolFlags.Class) {\r\n                    if (left.kind === SyntaxKind.SuperKeyword && getDeclarationKindFromSymbol(prop) !== SyntaxKind.MethodDeclaration) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        let modificationCount = diagnostics.getModificationCount();\r\n                        checkClassPropertyAccess(node, left, type, prop);\r\n                        return diagnostics.getModificationCount() === modificationCount;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkIndexedAccess(node: ElementAccessExpression): Type {\r\n            // Grammar checking\r\n            if (!node.argumentExpression) {\r\n                let sourceFile = getSourceFile(node);\r\n                if (node.parent.kind === SyntaxKind.NewExpression && (<NewExpression>node.parent).expression === node) {\r\n                    let start = skipTrivia(sourceFile.text, node.expression.end);\r\n                    let end = node.end;\r\n                    grammarErrorAtPos(sourceFile, start, end - start, Diagnostics.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead);\r\n                }\r\n                else {\r\n                    let start = node.end - \"]\".length;\r\n                    let end = node.end;\r\n                    grammarErrorAtPos(sourceFile, start, end - start, Diagnostics.Expression_expected);\r\n                }\r\n            }\r\n\r\n            // Obtain base constraint such that we can bail out if the constraint is an unknown type\r\n            let objectType = getApparentType(checkExpression(node.expression));\r\n            let indexType = node.argumentExpression ? checkExpression(node.argumentExpression) : unknownType;\r\n\r\n            if (objectType === unknownType) {\r\n                return unknownType;\r\n            }\r\n\r\n            let isConstEnum = isConstEnumObjectType(objectType);\r\n            if (isConstEnum &&\r\n                (!node.argumentExpression || node.argumentExpression.kind !== SyntaxKind.StringLiteral)) {\r\n                error(node.argumentExpression, Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal);\r\n                return unknownType;\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014): 4.10 Property Access\r\n            // - If IndexExpr is a string literal or a numeric literal and ObjExpr's apparent type has a property with the name\r\n            //    given by that literal(converted to its string representation in the case of a numeric literal), the property access is of the type of that property.\r\n            // - Otherwise, if ObjExpr's apparent type has a numeric index signature and IndexExpr is of type Any, the Number primitive type, or an enum type,\r\n            //    the property access is of the type of that index signature.\r\n            // - Otherwise, if ObjExpr's apparent type has a string index signature and IndexExpr is of type Any, the String or Number primitive type, or an enum type,\r\n            //    the property access is of the type of that index signature.\r\n            // - Otherwise, if IndexExpr is of type Any, the String or Number primitive type, or an enum type, the property access is of type Any.\r\n\r\n            // See if we can index as a property.\r\n            if (node.argumentExpression) {\r\n                let name = getPropertyNameForIndexedAccess(node.argumentExpression, indexType);\r\n                if (name !== undefined) {\r\n                    let prop = getPropertyOfType(objectType, name);\r\n                    if (prop) {\r\n                        getNodeLinks(node).resolvedSymbol = prop;\r\n                        return getTypeOfSymbol(prop);\r\n                    }\r\n                    else if (isConstEnum) {\r\n                        error(node.argumentExpression, Diagnostics.Property_0_does_not_exist_on_const_enum_1, name, symbolToString(objectType.symbol));\r\n                        return unknownType;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Check for compatible indexer types.\r\n            if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, TypeFlags.StringLike | TypeFlags.NumberLike | TypeFlags.ESSymbol)) {\r\n\r\n                // Try to use a number indexer.\r\n                if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, TypeFlags.NumberLike)) {\r\n                    let numberIndexType = getIndexTypeOfType(objectType, IndexKind.Number);\r\n                    if (numberIndexType) {\r\n                        return numberIndexType;\r\n                    }\r\n                }\r\n\r\n                // Try to use string indexing.\r\n                let stringIndexType = getIndexTypeOfType(objectType, IndexKind.String);\r\n                if (stringIndexType) {\r\n                    return stringIndexType;\r\n                }\r\n\r\n                // Fall back to any.\r\n                if (compilerOptions.noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && !isTypeAny(objectType)) {\r\n                    error(node, Diagnostics.Index_signature_of_object_type_implicitly_has_an_any_type);\r\n                }\r\n\r\n                return anyType;\r\n            }\r\n\r\n            // REVIEW: Users should know the type that was actually used.\r\n            error(node, Diagnostics.An_index_expression_argument_must_be_of_type_string_number_symbol_or_any);\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        /**\r\n         * If indexArgumentExpression is a string literal or number literal, returns its text.\r\n         * If indexArgumentExpression is a well known symbol, returns the property name corresponding\r\n         *    to this symbol, as long as it is a proper symbol reference.\r\n         * Otherwise, returns undefined.\r\n         */\r\n        function getPropertyNameForIndexedAccess(indexArgumentExpression: Expression, indexArgumentType: Type): string {\r\n            if (indexArgumentExpression.kind === SyntaxKind.StringLiteral || indexArgumentExpression.kind === SyntaxKind.NumericLiteral) {\r\n                return (<LiteralExpression>indexArgumentExpression).text;\r\n            }\r\n            if (checkThatExpressionIsProperSymbolReference(indexArgumentExpression, indexArgumentType, /*reportError*/ false)) {\r\n                let rightHandSideName = (<Identifier>(<PropertyAccessExpression>indexArgumentExpression).name).text;\r\n                return getPropertyNameForKnownSymbolName(rightHandSideName);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * A proper symbol reference requires the following:\r\n         *   1. The property access denotes a property that exists\r\n         *   2. The expression is of the form Symbol.<identifier>\r\n         *   3. The property access is of the primitive type symbol.\r\n         *   4. Symbol in this context resolves to the global Symbol object\r\n         */\r\n        function checkThatExpressionIsProperSymbolReference(expression: Expression, expressionType: Type, reportError: boolean): boolean {\r\n            if (expressionType === unknownType) {\r\n                // There is already an error, so no need to report one.\r\n                return false;\r\n            }\r\n\r\n            if (!isWellKnownSymbolSyntactically(expression)) {\r\n                return false;\r\n            }\r\n\r\n            // Make sure the property type is the primitive symbol type\r\n            if ((expressionType.flags & TypeFlags.ESSymbol) === 0) {\r\n                if (reportError) {\r\n                    error(expression, Diagnostics.A_computed_property_name_of_the_form_0_must_be_of_type_symbol, getTextOfNode(expression));\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // The name is Symbol.<someName>, so make sure Symbol actually resolves to the\r\n            // global Symbol object\r\n            let leftHandSide = <Identifier>(<PropertyAccessExpression>expression).expression;\r\n            let leftHandSideSymbol = getResolvedSymbol(leftHandSide);\r\n            if (!leftHandSideSymbol) {\r\n                return false;\r\n            }\r\n\r\n            let globalESSymbol = getGlobalESSymbolConstructorSymbol();\r\n            if (!globalESSymbol) {\r\n                // Already errored when we tried to look up the symbol\r\n                return false;\r\n            }\r\n\r\n            if (leftHandSideSymbol !== globalESSymbol) {\r\n                if (reportError) {\r\n                    error(leftHandSide, Diagnostics.Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function resolveUntypedCall(node: CallLikeExpression): Signature {\r\n            if (node.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                checkExpression((<TaggedTemplateExpression>node).template);\r\n            }\r\n            else {\r\n                forEach((<CallExpression>node).arguments, argument => {\r\n                    checkExpression(argument);\r\n                });\r\n            }\r\n            return anySignature;\r\n        }\r\n\r\n        function resolveErrorCall(node: CallLikeExpression): Signature {\r\n            resolveUntypedCall(node);\r\n            return unknownSignature;\r\n        }\r\n\r\n        // Re-order candidate signatures into the result array. Assumes the result array to be empty.\r\n        // The candidate list orders groups in reverse, but within a group signatures are kept in declaration order\r\n        // A nit here is that we reorder only signatures that belong to the same symbol,\r\n        // so order how inherited signatures are processed is still preserved.\r\n        // interface A { (x: string): void }\r\n        // interface B extends A { (x: 'foo'): string }\r\n        // let b: B;\r\n        // b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]\r\n        function reorderCandidates(signatures: Signature[], result: Signature[]): void {\r\n            let lastParent: Node;\r\n            let lastSymbol: Symbol;\r\n            let cutoffIndex: number = 0;\r\n            let index: number;\r\n            let specializedIndex: number = -1;\r\n            let spliceIndex: number;\r\n            Debug.assert(!result.length);\r\n            for (let signature of signatures) {\r\n                let symbol = signature.declaration && getSymbolOfNode(signature.declaration);\r\n                let parent = signature.declaration && signature.declaration.parent;\r\n                if (!lastSymbol || symbol === lastSymbol) {\r\n                    if (lastParent && parent === lastParent) {\r\n                        index++;\r\n                    }\r\n                    else {\r\n                        lastParent = parent;\r\n                        index = cutoffIndex;\r\n                    }\r\n                }\r\n                else {\r\n                    // current declaration belongs to a different symbol\r\n                    // set cutoffIndex so re-orderings in the future won't change result set from 0 to cutoffIndex\r\n                    index = cutoffIndex = result.length;\r\n                    lastParent = parent;\r\n                }\r\n                lastSymbol = symbol;\r\n\r\n                // specialized signatures always need to be placed before non-specialized signatures regardless\r\n                // of the cutoff position; see GH#1133\r\n                if (signature.hasStringLiterals) {\r\n                    specializedIndex++;\r\n                    spliceIndex = specializedIndex;\r\n                    // The cutoff index always needs to be greater than or equal to the specialized signature index\r\n                    // in order to prevent non-specialized signatures from being added before a specialized\r\n                    // signature.\r\n                    cutoffIndex++;\r\n                }\r\n                else {\r\n                    spliceIndex = index;\r\n                }\r\n\r\n                result.splice(spliceIndex, 0, signature);\r\n            }\r\n        }\r\n\r\n        function getSpreadArgumentIndex(args: Expression[]): number {\r\n            for (let i = 0; i < args.length; i++) {\r\n                if (args[i].kind === SyntaxKind.SpreadElementExpression) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function hasCorrectArity(node: CallLikeExpression, args: Expression[], signature: Signature) {\r\n            let adjustedArgCount: number;            // Apparent number of arguments we will have in this call\r\n            let typeArguments: NodeArray<TypeNode>;  // Type arguments (undefined if none)\r\n            let callIsIncomplete: boolean;           // In incomplete call we want to be lenient when we have too few arguments\r\n\r\n            if (node.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                let tagExpression = <TaggedTemplateExpression>node;\r\n\r\n                // Even if the call is incomplete, we'll have a missing expression as our last argument,\r\n                // so we can say the count is just the arg list length\r\n                adjustedArgCount = args.length;\r\n                typeArguments = undefined;\r\n\r\n                if (tagExpression.template.kind === SyntaxKind.TemplateExpression) {\r\n                    // If a tagged template expression lacks a tail literal, the call is incomplete.\r\n                    // Specifically, a template only can end in a TemplateTail or a Missing literal.\r\n                    let templateExpression = <TemplateExpression>tagExpression.template;\r\n                    let lastSpan = lastOrUndefined(templateExpression.templateSpans);\r\n                    Debug.assert(lastSpan !== undefined); // we should always have at least one span.\r\n                    callIsIncomplete = nodeIsMissing(lastSpan.literal) || !!lastSpan.literal.isUnterminated;\r\n                }\r\n                else {\r\n                    // If the template didn't end in a backtick, or its beginning occurred right prior to EOF,\r\n                    // then this might actually turn out to be a TemplateHead in the future;\r\n                    // so we consider the call to be incomplete.\r\n                    let templateLiteral = <LiteralExpression>tagExpression.template;\r\n                    Debug.assert(templateLiteral.kind === SyntaxKind.NoSubstitutionTemplateLiteral);\r\n                    callIsIncomplete = !!templateLiteral.isUnterminated;\r\n                }\r\n            }\r\n            else {\r\n                let callExpression = <CallExpression>node;\r\n                if (!callExpression.arguments) {\r\n                    // This only happens when we have something of the form: 'new C'\r\n                    Debug.assert(callExpression.kind === SyntaxKind.NewExpression);\r\n\r\n                    return signature.minArgumentCount === 0;\r\n                }\r\n\r\n                // For IDE scenarios we may have an incomplete call, so a trailing comma is tantamount to adding another argument.\r\n                adjustedArgCount = callExpression.arguments.hasTrailingComma ? args.length + 1 : args.length;\r\n\r\n                // If we are missing the close paren, the call is incomplete.\r\n                callIsIncomplete = (<CallExpression>callExpression).arguments.end === callExpression.end;\r\n\r\n                typeArguments = callExpression.typeArguments;\r\n            }\r\n\r\n            // If the user supplied type arguments, but the number of type arguments does not match\r\n            // the declared number of type parameters, the call has an incorrect arity.\r\n            let hasRightNumberOfTypeArgs = !typeArguments ||\r\n                (signature.typeParameters && typeArguments.length === signature.typeParameters.length);\r\n            if (!hasRightNumberOfTypeArgs) {\r\n                return false;\r\n            }\r\n\r\n            // If spread arguments are present, check that they correspond to a rest parameter. If so, no\r\n            // further checking is necessary.\r\n            let spreadArgIndex = getSpreadArgumentIndex(args);\r\n            if (spreadArgIndex >= 0) {\r\n                return signature.hasRestParameter && spreadArgIndex >= signature.parameters.length - 1;\r\n            }\r\n\r\n            // Too many arguments implies incorrect arity.\r\n            if (!signature.hasRestParameter && adjustedArgCount > signature.parameters.length) {\r\n                return false;\r\n            }\r\n\r\n            // If the call is incomplete, we should skip the lower bound check.\r\n            let hasEnoughArguments = adjustedArgCount >= signature.minArgumentCount;\r\n            return callIsIncomplete || hasEnoughArguments;\r\n        }\r\n\r\n        // If type has a single call signature and no other members, return that signature. Otherwise, return undefined.\r\n        function getSingleCallSignature(type: Type): Signature {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                let resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 &&\r\n                    resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {\r\n                    return resolved.callSignatures[0];\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)\r\n        function instantiateSignatureInContextOf(signature: Signature, contextualSignature: Signature, contextualMapper: TypeMapper): Signature {\r\n            let context = createInferenceContext(signature.typeParameters, /*inferUnionTypes*/ true);\r\n            forEachMatchingParameterType(contextualSignature, signature, (source, target) => {\r\n                // Type parameters from outer context referenced by source type are fixed by instantiation of the source type\r\n                inferTypes(context, instantiateType(source, contextualMapper), target);\r\n            });\r\n            return getSignatureInstantiation(signature, getInferredTypes(context));\r\n        }\r\n\r\n        function inferTypeArguments(signature: Signature, args: Expression[], excludeArgument: boolean[], context: InferenceContext): void {\r\n            let typeParameters = signature.typeParameters;\r\n            let inferenceMapper = createInferenceMapper(context);\r\n\r\n            // Clear out all the inference results from the last time inferTypeArguments was called on this context\r\n            for (let i = 0; i < typeParameters.length; i++) {\r\n                // As an optimization, we don't have to clear (and later recompute) inferred types\r\n                // for type parameters that have already been fixed on the previous call to inferTypeArguments.\r\n                // It would be just as correct to reset all of them. But then we'd be repeating the same work\r\n                // for the type parameters that were fixed, namely the work done by getInferredType.\r\n                if (!context.inferences[i].isFixed) {\r\n                    context.inferredTypes[i] = undefined;\r\n                }\r\n            }\r\n\r\n            // On this call to inferTypeArguments, we may get more inferences for certain type parameters that were not\r\n            // fixed last time. This means that a type parameter that failed inference last time may succeed this time,\r\n            // or vice versa. Therefore, the failedTypeParameterIndex is useless if it points to an unfixed type parameter,\r\n            // because it may change. So here we reset it. However, getInferredType will not revisit any type parameters\r\n            // that were previously fixed. So if a fixed type parameter failed previously, it will fail again because\r\n            // it will contain the exact same set of inferences. So if we reset the index from a fixed type parameter,\r\n            // we will lose information that we won't recover this time around.\r\n            if (context.failedTypeParameterIndex !== undefined && !context.inferences[context.failedTypeParameterIndex].isFixed) {\r\n                context.failedTypeParameterIndex = undefined;\r\n            }\r\n\r\n            // We perform two passes over the arguments. In the first pass we infer from all arguments, but use\r\n            // wildcards for all context sensitive function expressions.\r\n            for (let i = 0; i < args.length; i++) {\r\n                let arg = args[i];\r\n                if (arg.kind !== SyntaxKind.OmittedExpression) {\r\n                    let paramType = getTypeAtPosition(signature, i);\r\n                    let argType: Type;\r\n                    if (i === 0 && args[i].parent.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                        argType = globalTemplateStringsArrayType;\r\n                    }\r\n                    else {\r\n                        // For context sensitive arguments we pass the identityMapper, which is a signal to treat all\r\n                        // context sensitive function expressions as wildcards\r\n                        let mapper = excludeArgument && excludeArgument[i] !== undefined ? identityMapper : inferenceMapper;\r\n                        argType = checkExpressionWithContextualType(arg, paramType, mapper);\r\n                    }\r\n                    inferTypes(context, argType, paramType);\r\n                }\r\n            }\r\n\r\n            // In the second pass we visit only context sensitive arguments, and only those that aren't excluded, this\r\n            // time treating function expressions normally (which may cause previously inferred type arguments to be fixed\r\n            // as we construct types for contextually typed parameters)\r\n            if (excludeArgument) {\r\n                for (let i = 0; i < args.length; i++) {\r\n                    // No need to check for omitted args and template expressions, their exlusion value is always undefined\r\n                    if (excludeArgument[i] === false) {\r\n                        let arg = args[i];\r\n                        let paramType = getTypeAtPosition(signature, i);\r\n                        inferTypes(context, checkExpressionWithContextualType(arg, paramType, inferenceMapper), paramType);\r\n                    }\r\n                }\r\n            }\r\n\r\n            getInferredTypes(context);\r\n        }\r\n\r\n        function checkTypeArguments(signature: Signature, typeArguments: TypeNode[], typeArgumentResultTypes: Type[], reportErrors: boolean): boolean {\r\n            let typeParameters = signature.typeParameters;\r\n            let typeArgumentsAreAssignable = true;\r\n            for (let i = 0; i < typeParameters.length; i++) {\r\n                let typeArgNode = typeArguments[i];\r\n                let typeArgument = getTypeFromTypeNode(typeArgNode);\r\n                // Do not push on this array! It has a preallocated length\r\n                typeArgumentResultTypes[i] = typeArgument;\r\n                if (typeArgumentsAreAssignable /* so far */) {\r\n                    let constraint = getConstraintOfTypeParameter(typeParameters[i]);\r\n                    if (constraint) {\r\n                        typeArgumentsAreAssignable = checkTypeAssignableTo(typeArgument, constraint, reportErrors ? typeArgNode : undefined,\r\n                            Diagnostics.Type_0_does_not_satisfy_the_constraint_1);\r\n                    }\r\n                }\r\n            }\r\n            return typeArgumentsAreAssignable;\r\n        }\r\n\r\n        function checkApplicableSignature(node: CallLikeExpression, args: Expression[], signature: Signature, relation: Map<RelationComparisonResult>, excludeArgument: boolean[], reportErrors: boolean) {\r\n            for (let i = 0; i < args.length; i++) {\r\n                let arg = args[i];\r\n                if (arg.kind !== SyntaxKind.OmittedExpression) {\r\n                    // Check spread elements against rest type (from arity check we know spread argument corresponds to a rest parameter)\r\n                    let paramType = getTypeAtPosition(signature, i);\r\n                    // A tagged template expression provides a special first argument, and string literals get string literal types\r\n                    // unless we're reporting errors\r\n                    let argType = i === 0 && node.kind === SyntaxKind.TaggedTemplateExpression\r\n                        ? globalTemplateStringsArrayType\r\n                        : arg.kind === SyntaxKind.StringLiteral && !reportErrors\r\n                            ? getStringLiteralType(<StringLiteral>arg)\r\n                            : checkExpressionWithContextualType(arg, paramType, excludeArgument && excludeArgument[i] ? identityMapper : undefined);\r\n\r\n                    // Use argument expression as error location when reporting errors\r\n                    if (!checkTypeRelatedTo(argType, paramType, relation, reportErrors ? arg : undefined,\r\n                        Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns the effective arguments for an expression that works like a function invocation.\r\n         *\r\n         * If 'node' is a CallExpression or a NewExpression, then its argument list is returned.\r\n         * If 'node' is a TaggedTemplateExpression, a new argument list is constructed from the substitution\r\n         *    expressions, where the first element of the list is the template for error reporting purposes.\r\n         */\r\n        function getEffectiveCallArguments(node: CallLikeExpression): Expression[] {\r\n            let args: Expression[];\r\n            if (node.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                let template = (<TaggedTemplateExpression>node).template;\r\n                args = [template];\r\n\r\n                if (template.kind === SyntaxKind.TemplateExpression) {\r\n                    forEach((<TemplateExpression>template).templateSpans, span => {\r\n                        args.push(span.expression);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                args = (<CallExpression>node).arguments || emptyArray;\r\n            }\r\n\r\n            return args;\r\n        }\r\n\r\n        /**\r\n         * In a 'super' call, type arguments are not provided within the CallExpression node itself.\r\n         * Instead, they must be fetched from the class declaration's base type node.\r\n         *\r\n         * If 'node' is a 'super' call (e.g. super(...), new super(...)), then we attempt to fetch\r\n         * the type arguments off the containing class's first heritage clause (if one exists). Note that if\r\n         * type arguments are supplied on the 'super' call, they are ignored (though this is syntactically incorrect).\r\n         *\r\n         * In all other cases, the call's explicit type arguments are returned.\r\n         */\r\n        function getEffectiveTypeArguments(callExpression: CallExpression): TypeNode[] {\r\n            if (callExpression.expression.kind === SyntaxKind.SuperKeyword) {\r\n                let containingClass = <ClassDeclaration>getAncestor(callExpression, SyntaxKind.ClassDeclaration);\r\n                let baseClassTypeNode = containingClass && getClassExtendsHeritageClauseElement(containingClass);\r\n                return baseClassTypeNode && baseClassTypeNode.typeArguments;\r\n            }\r\n            else {\r\n                // Ordinary case - simple function invocation.\r\n                return callExpression.typeArguments;\r\n            }\r\n        }\r\n\r\n        function resolveCall(node: CallLikeExpression, signatures: Signature[], candidatesOutArray: Signature[]): Signature {\r\n            let isTaggedTemplate = node.kind === SyntaxKind.TaggedTemplateExpression;\r\n\r\n            let typeArguments: TypeNode[];\r\n\r\n            if (!isTaggedTemplate) {\r\n                typeArguments = getEffectiveTypeArguments(<CallExpression>node);\r\n\r\n                // We already perform checking on the type arguments on the class declaration itself.\r\n                if ((<CallExpression>node).expression.kind !== SyntaxKind.SuperKeyword) {\r\n                    forEach(typeArguments, checkSourceElement);\r\n                }\r\n            }\r\n\r\n            let candidates = candidatesOutArray || [];\r\n            // reorderCandidates fills up the candidates array directly\r\n            reorderCandidates(signatures, candidates);\r\n            if (!candidates.length) {\r\n                error(node, Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            let args = getEffectiveCallArguments(node);\r\n\r\n            // The following applies to any value of 'excludeArgument[i]':\r\n            //    - true:      the argument at 'i' is susceptible to a one-time permanent contextual typing.\r\n            //    - undefined: the argument at 'i' is *not* susceptible to permanent contextual typing.\r\n            //    - false:     the argument at 'i' *was* and *has been* permanently contextually typed.\r\n            //\r\n            // The idea is that we will perform type argument inference & assignability checking once\r\n            // without using the susceptible parameters that are functions, and once more for each of those\r\n            // parameters, contextually typing each as we go along.\r\n            //\r\n            // For a tagged template, then the first argument be 'undefined' if necessary\r\n            // because it represents a TemplateStringsArray.\r\n            let excludeArgument: boolean[];\r\n            for (let i = isTaggedTemplate ? 1 : 0; i < args.length; i++) {\r\n                if (isContextSensitive(args[i])) {\r\n                    if (!excludeArgument) {\r\n                        excludeArgument = new Array(args.length);\r\n                    }\r\n                    excludeArgument[i] = true;\r\n                }\r\n            }\r\n\r\n            // The following variables are captured and modified by calls to chooseOverload.\r\n            // If overload resolution or type argument inference fails, we want to report the\r\n            // best error possible. The best error is one which says that an argument was not\r\n            // assignable to a parameter. This implies that everything else about the overload\r\n            // was fine. So if there is any overload that is only incorrect because of an\r\n            // argument, we will report an error on that one.\r\n            //\r\n            //     function foo(s: string) {}\r\n            //     function foo(n: number) {} // Report argument error on this overload\r\n            //     function foo() {}\r\n            //     foo(true);\r\n            //\r\n            // If none of the overloads even made it that far, there are two possibilities.\r\n            // There was a problem with type arguments for some overload, in which case\r\n            // report an error on that. Or none of the overloads even had correct arity,\r\n            // in which case give an arity error.\r\n            //\r\n            //     function foo<T>(x: T, y: T) {} // Report type argument inference error\r\n            //     function foo() {}\r\n            //     foo(0, true);\r\n            //\r\n            let candidateForArgumentError: Signature;\r\n            let candidateForTypeArgumentError: Signature;\r\n            let resultOfFailedInference: InferenceContext;\r\n            let result: Signature;\r\n\r\n            // Section 4.12.1:\r\n            // if the candidate list contains one or more signatures for which the type of each argument\r\n            // expression is a subtype of each corresponding parameter type, the return type of the first\r\n            // of those signatures becomes the return type of the function call.\r\n            // Otherwise, the return type of the first signature in the candidate list becomes the return\r\n            // type of the function call.\r\n            //\r\n            // Whether the call is an error is determined by assignability of the arguments. The subtype pass\r\n            // is just important for choosing the best signature. So in the case where there is only one\r\n            // signature, the subtype pass is useless. So skipping it is an optimization.\r\n            if (candidates.length > 1) {\r\n                result = chooseOverload(candidates, subtypeRelation);\r\n            }\r\n            if (!result) {\r\n                // Reinitialize these pointers for round two\r\n                candidateForArgumentError = undefined;\r\n                candidateForTypeArgumentError = undefined;\r\n                resultOfFailedInference = undefined;\r\n                result = chooseOverload(candidates, assignableRelation);\r\n            }\r\n            if (result) {\r\n                return result;\r\n            }\r\n\r\n            // No signatures were applicable. Now report errors based on the last applicable signature with\r\n            // no arguments excluded from assignability checks.\r\n            // If candidate is undefined, it means that no candidates had a suitable arity. In that case,\r\n            // skip the checkApplicableSignature check.\r\n            if (candidateForArgumentError) {\r\n                // excludeArgument is undefined, in this case also equivalent to [undefined, undefined, ...]\r\n                // The importance of excludeArgument is to prevent us from typing function expression parameters\r\n                // in arguments too early. If possible, we'd like to only type them once we know the correct\r\n                // overload. However, this matters for the case where the call is correct. When the call is\r\n                // an error, we don't need to exclude any arguments, although it would cause no harm to do so.\r\n                checkApplicableSignature(node, args, candidateForArgumentError, assignableRelation, /*excludeArgument*/ undefined, /*reportErrors*/ true);\r\n            }\r\n            else if (candidateForTypeArgumentError) {\r\n                if (!isTaggedTemplate && (<CallExpression>node).typeArguments) {\r\n                    checkTypeArguments(candidateForTypeArgumentError, (<CallExpression>node).typeArguments, [], /*reportErrors*/ true)\r\n                }\r\n                else {\r\n                    Debug.assert(resultOfFailedInference.failedTypeParameterIndex >= 0);\r\n                    let failedTypeParameter = candidateForTypeArgumentError.typeParameters[resultOfFailedInference.failedTypeParameterIndex];\r\n                    let inferenceCandidates = getInferenceCandidates(resultOfFailedInference, resultOfFailedInference.failedTypeParameterIndex);\r\n\r\n                    let diagnosticChainHead = chainDiagnosticMessages(/*details*/ undefined, // details will be provided by call to reportNoCommonSupertypeError\r\n                        Diagnostics.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\r\n                        typeToString(failedTypeParameter));\r\n\r\n                    reportNoCommonSupertypeError(inferenceCandidates, (<CallExpression>node).expression || (<TaggedTemplateExpression>node).tag, diagnosticChainHead);\r\n                }\r\n            }\r\n            else {\r\n                error(node, Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\r\n            }\r\n\r\n            // No signature was applicable. We have already reported the errors for the invalid signature.\r\n            // If this is a type resolution session, e.g. Language Service, try to get better information that anySignature.\r\n            // Pick the first candidate that matches the arity. This way we can get a contextual type for cases like:\r\n            //  declare function f(a: { xa: number; xb: number; });\r\n            //  f({ |\r\n            if (!produceDiagnostics) {\r\n                for (let candidate of candidates) {\r\n                    if (hasCorrectArity(node, args, candidate)) {\r\n                        return candidate;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return resolveErrorCall(node);\r\n\r\n            function chooseOverload(candidates: Signature[], relation: Map<RelationComparisonResult>) {\r\n                for (let originalCandidate of candidates) {\r\n                    if (!hasCorrectArity(node, args, originalCandidate)) {\r\n                        continue;\r\n                    }\r\n                    \r\n                    let candidate: Signature;\r\n                    let typeArgumentsAreValid: boolean;\r\n                    let inferenceContext = originalCandidate.typeParameters\r\n                        ? createInferenceContext(originalCandidate.typeParameters, /*inferUnionTypes*/ false)\r\n                        : undefined;\r\n\r\n                    while (true) {\r\n                        candidate = originalCandidate;\r\n                        if (candidate.typeParameters) {\r\n                            let typeArgumentTypes: Type[];\r\n                            if (typeArguments) {\r\n                                typeArgumentTypes = new Array<Type>(candidate.typeParameters.length);\r\n                                typeArgumentsAreValid = checkTypeArguments(candidate, typeArguments, typeArgumentTypes, /*reportErrors*/ false)\r\n                            }\r\n                            else {\r\n                                inferTypeArguments(candidate, args, excludeArgument, inferenceContext);\r\n                                typeArgumentsAreValid = inferenceContext.failedTypeParameterIndex === undefined;\r\n                                typeArgumentTypes = inferenceContext.inferredTypes;\r\n                            }\r\n                            if (!typeArgumentsAreValid) {\r\n                                break;\r\n                            }\r\n                            candidate = getSignatureInstantiation(candidate, typeArgumentTypes);\r\n                        }\r\n                        if (!checkApplicableSignature(node, args, candidate, relation, excludeArgument, /*reportErrors*/ false)) {\r\n                            break;\r\n                        }\r\n                        let index = excludeArgument ? indexOf(excludeArgument, true) : -1;\r\n                        if (index < 0) {\r\n                            return candidate;\r\n                        }\r\n                        excludeArgument[index] = false;\r\n                    }\r\n\r\n                    // A post-mortem of this iteration of the loop. The signature was not applicable,\r\n                    // so we want to track it as a candidate for reporting an error. If the candidate\r\n                    // had no type parameters, or had no issues related to type arguments, we can\r\n                    // report an error based on the arguments. If there was an issue with type\r\n                    // arguments, then we can only report an error based on the type arguments.\r\n                    if (originalCandidate.typeParameters) {\r\n                        let instantiatedCandidate = candidate;\r\n                        if (typeArgumentsAreValid) {\r\n                            candidateForArgumentError = instantiatedCandidate;\r\n                        }\r\n                        else {\r\n                            candidateForTypeArgumentError = originalCandidate;\r\n                            if (!typeArguments) {\r\n                                resultOfFailedInference = inferenceContext;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Debug.assert(originalCandidate === candidate);\r\n                        candidateForArgumentError = originalCandidate;\r\n                    }\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n\r\n        }\r\n\r\n        function resolveCallExpression(node: CallExpression, candidatesOutArray: Signature[]): Signature {\r\n            if (node.expression.kind === SyntaxKind.SuperKeyword) {\r\n                let superType = checkSuperExpression(node.expression);\r\n                if (superType !== unknownType) {\r\n                    return resolveCall(node, getSignaturesOfType(superType, SignatureKind.Construct), candidatesOutArray);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n\r\n            let funcType = checkExpression(node.expression);\r\n            let apparentType = getApparentType(funcType);\r\n\r\n            if (apparentType === unknownType) {\r\n                // Another error has already been reported\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            // Technically, this signatures list may be incomplete. We are taking the apparent type,\r\n            // but we are not including call signatures that may have been added to the Object or\r\n            // Function interface, since they have none by default. This is a bit of a leap of faith\r\n            // that the user will not add any.\r\n            let callSignatures = getSignaturesOfType(apparentType, SignatureKind.Call);\r\n\r\n            let constructSignatures = getSignaturesOfType(apparentType, SignatureKind.Construct);\r\n            // TS 1.0 spec: 4.12\r\n            // If FuncExpr is of type Any, or of an object type that has no call or construct signatures\r\n            // but is a subtype of the Function interface, the call is an untyped function call. In an\r\n            // untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual\r\n            // types are provided for the argument expressions, and the result is always of type Any.\r\n            // We exclude union types because we may have a union of function types that happen to have\r\n            // no common signatures.\r\n            if (isTypeAny(funcType) || (!callSignatures.length && !constructSignatures.length && !(funcType.flags & TypeFlags.Union) && isTypeAssignableTo(funcType, globalFunctionType))) {\r\n                // The unknownType indicates that an error already occured (and was reported).  No\r\n                // need to report another error in this case.\r\n                if (funcType !== unknownType && node.typeArguments) {\r\n                    error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n            // If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.\r\n            // TypeScript employs overload resolution in typed function calls in order to support functions\r\n            // with multiple call signatures.\r\n            if (!callSignatures.length) {\r\n                if (constructSignatures.length) {\r\n                    error(node, Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\r\n                }\r\n                return resolveErrorCall(node);\r\n            }\r\n            return resolveCall(node, callSignatures, candidatesOutArray);\r\n        }\r\n\r\n        function resolveNewExpression(node: NewExpression, candidatesOutArray: Signature[]): Signature {\r\n            if (node.arguments && languageVersion < ScriptTarget.ES5) {\r\n                let spreadIndex = getSpreadArgumentIndex(node.arguments);\r\n                if (spreadIndex >= 0) {\r\n                    error(node.arguments[spreadIndex], Diagnostics.Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher);\r\n                }\r\n            }\r\n\r\n            let expressionType = checkExpression(node.expression);\r\n\r\n            // If ConstructExpr's apparent type(section 3.8.1) is an object type with one or\r\n            // more construct signatures, the expression is processed in the same manner as a\r\n            // function call, but using the construct signatures as the initial set of candidate\r\n            // signatures for overload resolution. The result type of the function call becomes\r\n            // the result type of the operation.\r\n            expressionType = getApparentType(expressionType);\r\n            if (expressionType === unknownType) {\r\n                // Another error has already been reported\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            // TS 1.0 spec: 4.11\r\n            // If ConstructExpr is of type Any, Args can be any argument\r\n            // list and the result of the operation is of type Any.\r\n            if (isTypeAny(expressionType)) {\r\n                if (node.typeArguments) {\r\n                    error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n\r\n            // Technically, this signatures list may be incomplete. We are taking the apparent type,\r\n            // but we are not including construct signatures that may have been added to the Object or\r\n            // Function interface, since they have none by default. This is a bit of a leap of faith\r\n            // that the user will not add any.\r\n            let constructSignatures = getSignaturesOfType(expressionType, SignatureKind.Construct);\r\n            if (constructSignatures.length) {\r\n                return resolveCall(node, constructSignatures, candidatesOutArray);\r\n            }\r\n\r\n            // If ConstructExpr's apparent type is an object type with no construct signatures but\r\n            // one or more call signatures, the expression is processed as a function call. A compile-time\r\n            // error occurs if the result of the function call is not Void. The type of the result of the\r\n            // operation is Any.\r\n            let callSignatures = getSignaturesOfType(expressionType, SignatureKind.Call);\r\n            if (callSignatures.length) {\r\n                let signature = resolveCall(node, callSignatures, candidatesOutArray);\r\n                if (getReturnTypeOfSignature(signature) !== voidType) {\r\n                    error(node, Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);\r\n                }\r\n                return signature;\r\n            }\r\n\r\n            error(node, Diagnostics.Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature);\r\n            return resolveErrorCall(node);\r\n        }\r\n\r\n        function resolveTaggedTemplateExpression(node: TaggedTemplateExpression, candidatesOutArray: Signature[]): Signature {\r\n            let tagType = checkExpression(node.tag);\r\n            let apparentType = getApparentType(tagType);\r\n\r\n            if (apparentType === unknownType) {\r\n                // Another error has already been reported\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            let callSignatures = getSignaturesOfType(apparentType, SignatureKind.Call);\r\n\r\n            if (isTypeAny(tagType) || (!callSignatures.length && !(tagType.flags & TypeFlags.Union) && isTypeAssignableTo(tagType, globalFunctionType))) {\r\n                return resolveUntypedCall(node);\r\n            }\r\n\r\n            if (!callSignatures.length) {\r\n                error(node, Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            return resolveCall(node, callSignatures, candidatesOutArray);\r\n        }\r\n\r\n        // candidatesOutArray is passed by signature help in the language service, and collectCandidates\r\n        // must fill it up with the appropriate candidate signatures\r\n        function getResolvedSignature(node: CallLikeExpression, candidatesOutArray?: Signature[]): Signature {\r\n            let links = getNodeLinks(node);\r\n            // If getResolvedSignature has already been called, we will have cached the resolvedSignature.\r\n            // However, it is possible that either candidatesOutArray was not passed in the first time,\r\n            // or that a different candidatesOutArray was passed in. Therefore, we need to redo the work\r\n            // to correctly fill the candidatesOutArray.\r\n            if (!links.resolvedSignature || candidatesOutArray) {\r\n                links.resolvedSignature = anySignature;\r\n\r\n                if (node.kind === SyntaxKind.CallExpression) {\r\n                    links.resolvedSignature = resolveCallExpression(<CallExpression>node, candidatesOutArray);\r\n                }\r\n                else if (node.kind === SyntaxKind.NewExpression) {\r\n                    links.resolvedSignature = resolveNewExpression(<NewExpression>node, candidatesOutArray);\r\n                }\r\n                else if (node.kind === SyntaxKind.TaggedTemplateExpression) {\r\n                    links.resolvedSignature = resolveTaggedTemplateExpression(<TaggedTemplateExpression>node, candidatesOutArray);\r\n                }\r\n                else {\r\n                    Debug.fail(\"Branch in 'getResolvedSignature' should be unreachable.\");\r\n                }\r\n            }\r\n            return links.resolvedSignature;\r\n        }\r\n\r\n        function checkCallExpression(node: CallExpression): Type {\r\n            // Grammar checking; stop grammar-checking if checkGrammarTypeArguments return true\r\n            checkGrammarTypeArguments(node, node.typeArguments) || checkGrammarArguments(node, node.arguments);\r\n\r\n            let signature = getResolvedSignature(node);\r\n            if (node.expression.kind === SyntaxKind.SuperKeyword) {\r\n                return voidType;\r\n            }\r\n            if (node.kind === SyntaxKind.NewExpression) {\r\n                let declaration = signature.declaration;\r\n                if (declaration &&\r\n                    declaration.kind !== SyntaxKind.Constructor &&\r\n                    declaration.kind !== SyntaxKind.ConstructSignature &&\r\n                    declaration.kind !== SyntaxKind.ConstructorType) {\r\n\r\n                    // When resolved signature is a call signature (and not a construct signature) the result type is any\r\n                    if (compilerOptions.noImplicitAny) {\r\n                        error(node, Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);\r\n                    }\r\n                    return anyType;\r\n                }\r\n            }\r\n            return getReturnTypeOfSignature(signature);\r\n        }\r\n\r\n        function checkTaggedTemplateExpression(node: TaggedTemplateExpression): Type {\r\n            return getReturnTypeOfSignature(getResolvedSignature(node));\r\n        }\r\n\r\n        function checkTypeAssertion(node: TypeAssertion): Type {\r\n            let exprType = checkExpression(node.expression);\r\n            let targetType = getTypeFromTypeNode(node.type);\r\n            if (produceDiagnostics && targetType !== unknownType) {\r\n                let widenedType = getWidenedType(exprType);\r\n                if (!(isTypeAssignableTo(targetType, widenedType))) {\r\n                    checkTypeAssignableTo(exprType, targetType, node, Diagnostics.Neither_type_0_nor_type_1_is_assignable_to_the_other);\r\n                }\r\n            }\r\n            return targetType;\r\n        }\r\n\r\n        function getTypeAtPosition(signature: Signature, pos: number): Type {\r\n            return signature.hasRestParameter ?\r\n                pos < signature.parameters.length - 1 ? getTypeOfSymbol(signature.parameters[pos]) : getRestTypeOfSignature(signature) :\r\n                pos < signature.parameters.length ? getTypeOfSymbol(signature.parameters[pos]) : anyType;\r\n        }\r\n\r\n        function assignContextualParameterTypes(signature: Signature, context: Signature, mapper: TypeMapper) {\r\n            let len = signature.parameters.length - (signature.hasRestParameter ? 1 : 0);\r\n            for (let i = 0; i < len; i++) {\r\n                let parameter = signature.parameters[i];\r\n                let links = getSymbolLinks(parameter);\r\n                links.type = instantiateType(getTypeAtPosition(context, i), mapper);\r\n            }\r\n            if (signature.hasRestParameter && context.hasRestParameter && signature.parameters.length >= context.parameters.length) {\r\n                let parameter = lastOrUndefined(signature.parameters);\r\n                let links = getSymbolLinks(parameter);\r\n                links.type = instantiateType(getTypeOfSymbol(lastOrUndefined(context.parameters)), mapper);\r\n            }\r\n        }\r\n\r\n        function getReturnTypeFromBody(func: FunctionLikeDeclaration, contextualMapper?: TypeMapper): Type {\r\n            let contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);\r\n            if (!func.body) {\r\n                return unknownType;\r\n            }\r\n            let type: Type;\r\n            if (func.body.kind !== SyntaxKind.Block) {\r\n                type = checkExpressionCached(<Expression>func.body, contextualMapper);\r\n            }\r\n            else {\r\n                let types: Type[];\r\n                let funcIsGenerator = !!func.asteriskToken;\r\n                if (funcIsGenerator) {\r\n                    types = checkAndAggregateYieldOperandTypes(<Block>func.body, contextualMapper);\r\n                    if (types.length === 0) {\r\n                        let iterableIteratorAny = createIterableIteratorType(anyType);\r\n                        if (compilerOptions.noImplicitAny) {\r\n                            error(func.asteriskToken,\r\n                                Diagnostics.Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type, typeToString(iterableIteratorAny));\r\n                        }\r\n                        return iterableIteratorAny;\r\n                    }\r\n                }\r\n                else {\r\n                    types = checkAndAggregateReturnExpressionTypes(<Block>func.body, contextualMapper);\r\n                    if (types.length === 0) {\r\n                        return voidType;\r\n                    }\r\n                }\r\n\r\n                // When yield/return statements are contextually typed we allow the return type to be a union type.\r\n                // Otherwise we require the yield/return expressions to have a best common supertype.\r\n                type = contextualSignature ? getUnionType(types) : getCommonSupertype(types);\r\n                if (!type) {\r\n                    if (funcIsGenerator) {\r\n                        error(func, Diagnostics.No_best_common_type_exists_among_yield_expressions);\r\n                        return createIterableIteratorType(unknownType);\r\n                    }\r\n                    else {\r\n                        error(func, Diagnostics.No_best_common_type_exists_among_return_expressions);\r\n                        return unknownType;\r\n                    }\r\n                }\r\n\r\n                if (funcIsGenerator) {\r\n                    type = createIterableIteratorType(type);\r\n                }\r\n            }\r\n            if (!contextualSignature) {\r\n                reportErrorsFromWidening(func, type);\r\n            }\r\n            return getWidenedType(type);\r\n        }\r\n\r\n        function checkAndAggregateYieldOperandTypes(body: Block, contextualMapper?: TypeMapper): Type[] {\r\n            let aggregatedTypes: Type[] = [];\r\n\r\n            forEachYieldExpression(body, yieldExpression => {\r\n                let expr = yieldExpression.expression;\r\n                if (expr) {\r\n                    let type = checkExpressionCached(expr, contextualMapper);\r\n\r\n                    if (yieldExpression.asteriskToken) {\r\n                        // A yield* expression effectively yields everything that its operand yields\r\n                        type = checkElementTypeOfIterable(type, yieldExpression.expression);\r\n                    }\r\n\r\n                    if (!contains(aggregatedTypes, type)) {\r\n                        aggregatedTypes.push(type);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return aggregatedTypes;\r\n        }\r\n\r\n        function checkAndAggregateReturnExpressionTypes(body: Block, contextualMapper?: TypeMapper): Type[] {\r\n            let aggregatedTypes: Type[] = [];\r\n\r\n            forEachReturnStatement(body, returnStatement => {\r\n                let expr = returnStatement.expression;\r\n                if (expr) {\r\n                    let type = checkExpressionCached(expr, contextualMapper);\r\n                    if (!contains(aggregatedTypes, type)) {\r\n                        aggregatedTypes.push(type);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return aggregatedTypes;\r\n        }\r\n\r\n        function bodyContainsAReturnStatement(funcBody: Block) {\r\n            return forEachReturnStatement(funcBody, returnStatement => {\r\n                return true;\r\n            });\r\n        }\r\n\r\n        function bodyContainsSingleThrowStatement(body: Block) {\r\n            return (body.statements.length === 1) && (body.statements[0].kind === SyntaxKind.ThrowStatement);\r\n        }\r\n\r\n        // TypeScript Specification 1.0 (6.3) - July 2014\r\n        // An explicitly typed function whose return type isn't the Void or the Any type\r\n        // must have at least one return statement somewhere in its body.\r\n        // An exception to this rule is if the function implementation consists of a single 'throw' statement.\r\n        function checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(func: FunctionLikeDeclaration, returnType: Type): void {\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n\r\n            // Functions that return 'void' or 'any' don't need any return expressions.\r\n            if (returnType === voidType || isTypeAny(returnType)) {\r\n                return;\r\n            }\r\n\r\n            // If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.\r\n            if (nodeIsMissing(func.body) || func.body.kind !== SyntaxKind.Block) {\r\n                return;\r\n            }\r\n\r\n            let bodyBlock = <Block>func.body;\r\n\r\n            // Ensure the body has at least one return expression.\r\n            if (bodyContainsAReturnStatement(bodyBlock)) {\r\n                return;\r\n            }\r\n\r\n            // If there are no return expressions, then we need to check if\r\n            // the function body consists solely of a throw statement;\r\n            // this is to make an exception for unimplemented functions.\r\n            if (bodyContainsSingleThrowStatement(bodyBlock)) {\r\n                return;\r\n            }\r\n\r\n            // This function does not conform to the specification.\r\n            error(func.type, Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement);\r\n        }\r\n\r\n        function checkFunctionExpressionOrObjectLiteralMethod(node: FunctionExpression | MethodDeclaration, contextualMapper?: TypeMapper): Type {\r\n            Debug.assert(node.kind !== SyntaxKind.MethodDeclaration || isObjectLiteralMethod(node));\r\n\r\n            // Grammar checking\r\n            let hasGrammarError = checkGrammarDeclarationNameInStrictMode(node) || checkGrammarFunctionLikeDeclaration(node);\r\n            if (!hasGrammarError && node.kind === SyntaxKind.FunctionExpression) {\r\n                checkGrammarFunctionName(node.name) || checkGrammarForGenerator(node);\r\n            }\r\n\r\n            // The identityMapper object is used to indicate that function expressions are wildcards\r\n            if (contextualMapper === identityMapper && isContextSensitive(node)) {\r\n                return anyFunctionType;\r\n            }\r\n            let links = getNodeLinks(node);\r\n            let type = getTypeOfSymbol(node.symbol);\r\n            // Check if function expression is contextually typed and assign parameter types if so\r\n            if (!(links.flags & NodeCheckFlags.ContextChecked)) {\r\n                let contextualSignature = getContextualSignature(node);\r\n                // If a type check is started at a function expression that is an argument of a function call, obtaining the\r\n                // contextual type may recursively get back to here during overload resolution of the call. If so, we will have\r\n                // already assigned contextual types.\r\n                if (!(links.flags & NodeCheckFlags.ContextChecked)) {\r\n                    links.flags |= NodeCheckFlags.ContextChecked;\r\n                    if (contextualSignature) {\r\n                        let signature = getSignaturesOfType(type, SignatureKind.Call)[0];\r\n                        if (isContextSensitive(node)) {\r\n                            assignContextualParameterTypes(signature, contextualSignature, contextualMapper || identityMapper);\r\n                        }\r\n                        if (!node.type && !signature.resolvedReturnType) {\r\n                            let returnType = getReturnTypeFromBody(node, contextualMapper);\r\n                            if (!signature.resolvedReturnType) {\r\n                                signature.resolvedReturnType = returnType;\r\n                            }\r\n                        }\r\n                    }\r\n                    checkSignatureDeclaration(node);\r\n                }\r\n            }\r\n\r\n            if (produceDiagnostics && node.kind !== SyntaxKind.MethodDeclaration && node.kind !== SyntaxKind.MethodSignature) {\r\n                checkCollisionWithCapturedSuperVariable(node, (<FunctionExpression>node).name);\r\n                checkCollisionWithCapturedThisVariable(node, (<FunctionExpression>node).name);\r\n            }\r\n\r\n            return type;\r\n        }\r\n\r\n        function checkFunctionExpressionOrObjectLiteralMethodBody(node: FunctionExpression | MethodDeclaration) {\r\n            Debug.assert(node.kind !== SyntaxKind.MethodDeclaration || isObjectLiteralMethod(node));\r\n            if (node.type && !node.asteriskToken) {\r\n                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));\r\n            }\r\n\r\n            if (node.body) {\r\n                if (!node.type) {\r\n                    // There are some checks that are only performed in getReturnTypeFromBody, that may produce errors\r\n                    // we need. An example is the noImplicitAny errors resulting from widening the return expression\r\n                    // of a function. Because checking of function expression bodies is deferred, there was never an\r\n                    // appropriate time to do this during the main walk of the file (see the comment at the top of\r\n                    // checkFunctionExpressionBodies). So it must be done now.\r\n                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));\r\n                }\r\n\r\n                if (node.body.kind === SyntaxKind.Block) {\r\n                    checkSourceElement(node.body);\r\n                }\r\n                else {\r\n                    let exprType = checkExpression(<Expression>node.body);\r\n                    if (node.type) {\r\n                        checkTypeAssignableTo(exprType, getTypeFromTypeNode(node.type), node.body, /*headMessage*/ undefined);\r\n                    }\r\n                    checkFunctionExpressionBodies(node.body);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkArithmeticOperandType(operand: Node, type: Type, diagnostic: DiagnosticMessage): boolean {\r\n            if (!isTypeAnyOrAllConstituentTypesHaveKind(type, TypeFlags.NumberLike)) {\r\n                error(operand, diagnostic);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkReferenceExpression(n: Node, invalidReferenceMessage: DiagnosticMessage, constantVariableMessage: DiagnosticMessage): boolean {\r\n            function findSymbol(n: Node): Symbol {\r\n                let symbol = getNodeLinks(n).resolvedSymbol;\r\n                // Because we got the symbol from the resolvedSymbol property, it might be of kind\r\n                // SymbolFlags.ExportValue. In this case it is necessary to get the actual export\r\n                // symbol, which will have the correct flags set on it.\r\n                return symbol && getExportSymbolOfValueSymbolIfExported(symbol);\r\n            }\r\n\r\n            function isReferenceOrErrorExpression(n: Node): boolean {\r\n                // TypeScript 1.0 spec (April 2014):\r\n                // Expressions are classified as values or references.\r\n                // References are the subset of expressions that are permitted as the target of an assignment.\r\n                // Specifically, references are combinations of identifiers(section 4.3), parentheses(section 4.7),\r\n                // and property accesses(section 4.10).\r\n                // All other expression constructs described in this chapter are classified as values.\r\n                switch (n.kind) {\r\n                    case SyntaxKind.Identifier: {\r\n                        let symbol = findSymbol(n);\r\n                        // TypeScript 1.0 spec (April 2014): 4.3\r\n                        // An identifier expression that references a variable or parameter is classified as a reference.\r\n                        // An identifier expression that references any other kind of entity is classified as a value(and therefore cannot be the target of an assignment).\r\n                        return !symbol || symbol === unknownSymbol || symbol === argumentsSymbol || (symbol.flags & SymbolFlags.Variable) !== 0;\r\n                    }\r\n                    case SyntaxKind.PropertyAccessExpression: {\r\n                        let symbol = findSymbol(n);\r\n                        // TypeScript 1.0 spec (April 2014): 4.10\r\n                        // A property access expression is always classified as a reference.\r\n                        // NOTE (not in spec): assignment to enum members should not be allowed\r\n                        return !symbol || symbol === unknownSymbol || (symbol.flags & ~SymbolFlags.EnumMember) !== 0;\r\n                    }\r\n                    case SyntaxKind.ElementAccessExpression:\r\n                        //  old compiler doesn't check indexed assess\r\n                        return true;\r\n                    case SyntaxKind.ParenthesizedExpression:\r\n                        return isReferenceOrErrorExpression((<ParenthesizedExpression>n).expression);\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            function isConstVariableReference(n: Node): boolean {\r\n                switch (n.kind) {\r\n                    case SyntaxKind.Identifier:\r\n                    case SyntaxKind.PropertyAccessExpression: {\r\n                        let symbol = findSymbol(n);\r\n                        return symbol && (symbol.flags & SymbolFlags.Variable) !== 0 && (getDeclarationFlagsFromSymbol(symbol) & NodeFlags.Const) !== 0;\r\n                    }\r\n                    case SyntaxKind.ElementAccessExpression: {\r\n                        let index = (<ElementAccessExpression>n).argumentExpression;\r\n                        let symbol = findSymbol((<ElementAccessExpression>n).expression);\r\n                        if (symbol && index && index.kind === SyntaxKind.StringLiteral) {\r\n                            let name = (<LiteralExpression>index).text;\r\n                            let prop = getPropertyOfType(getTypeOfSymbol(symbol), name);\r\n                            return prop && (prop.flags & SymbolFlags.Variable) !== 0 && (getDeclarationFlagsFromSymbol(prop) & NodeFlags.Const) !== 0;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    case SyntaxKind.ParenthesizedExpression:\r\n                        return isConstVariableReference((<ParenthesizedExpression>n).expression);\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            if (!isReferenceOrErrorExpression(n)) {\r\n                error(n, invalidReferenceMessage);\r\n                return false;\r\n            }\r\n\r\n            if (isConstVariableReference(n)) {\r\n                error(n, constantVariableMessage);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function checkDeleteExpression(node: DeleteExpression): Type {\r\n            // Grammar checking\r\n            if (node.parserContextFlags & ParserContextFlags.StrictMode && node.expression.kind === SyntaxKind.Identifier) {\r\n                // When a delete operator occurs within strict mode code, a SyntaxError is thrown if its\r\n                // UnaryExpression is a direct reference to a variable, function argument, or function name\r\n                grammarErrorOnNode(node.expression, Diagnostics.delete_cannot_be_called_on_an_identifier_in_strict_mode);\r\n            }\r\n\r\n            let operandType = checkExpression(node.expression);\r\n            return booleanType;\r\n        }\r\n\r\n        function checkTypeOfExpression(node: TypeOfExpression): Type {\r\n            let operandType = checkExpression(node.expression);\r\n            return stringType;\r\n        }\r\n\r\n        function checkVoidExpression(node: VoidExpression): Type {\r\n            let operandType = checkExpression(node.expression);\r\n            return undefinedType;\r\n        }\r\n\r\n        function checkPrefixUnaryExpression(node: PrefixUnaryExpression): Type {\r\n            // Grammar checking\r\n            // The identifier eval or arguments may not appear as the LeftHandSideExpression of an\r\n            // Assignment operator(11.13) or of a PostfixExpression(11.3) or as the UnaryExpression\r\n            // operated upon by a Prefix Increment(11.4.4) or a Prefix Decrement(11.4.5) operator\r\n            if ((node.operator === SyntaxKind.PlusPlusToken || node.operator === SyntaxKind.MinusMinusToken)) {\r\n                checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.operand);\r\n            }\r\n\r\n            let operandType = checkExpression(node.operand);\r\n            switch (node.operator) {\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.TildeToken:\r\n                    if (someConstituentTypeHasKind(operandType, TypeFlags.ESSymbol)) {\r\n                        error(node.operand, Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, tokenToString(node.operator));\r\n                    }\r\n                    return numberType;\r\n                case SyntaxKind.ExclamationToken:\r\n                    return booleanType;\r\n                case SyntaxKind.PlusPlusToken:\r\n                case SyntaxKind.MinusMinusToken:\r\n                    let ok = checkArithmeticOperandType(node.operand, operandType, Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\r\n                    if (ok) {\r\n                        // run check only if former checks succeeded to avoid reporting cascading errors\r\n                        checkReferenceExpression(node.operand,\r\n                            Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer,\r\n                            Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\r\n                    }\r\n                    return numberType;\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function checkPostfixUnaryExpression(node: PostfixUnaryExpression): Type {\r\n            // Grammar checking\r\n            // The identifier eval or arguments may not appear as the LeftHandSideExpression of an\r\n            // Assignment operator(11.13) or of a PostfixExpression(11.3) or as the UnaryExpression\r\n            // operated upon by a Prefix Increment(11.4.4) or a Prefix Decrement(11.4.5) operator.\r\n            checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.operand);\r\n\r\n            let operandType = checkExpression(node.operand);\r\n            let ok = checkArithmeticOperandType(node.operand, operandType, Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\r\n            if (ok) {\r\n                // run check only if former checks succeeded to avoid reporting cascading errors\r\n                checkReferenceExpression(node.operand,\r\n                    Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer,\r\n                    Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\r\n            }\r\n            return numberType;\r\n        }\r\n\r\n        // Just like isTypeOfKind below, except that it returns true if *any* constituent\r\n        // has this kind.\r\n        function someConstituentTypeHasKind(type: Type, kind: TypeFlags): boolean {\r\n            if (type.flags & kind) {\r\n                return true;\r\n            }\r\n            if (type.flags & TypeFlags.Union) {\r\n                let types = (<UnionType>type).types;\r\n                for (let current of types) {\r\n                    if (current.flags & kind) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Return true if type has the given flags, or is a union type composed of types that all have those flags.\r\n        function allConstituentTypesHaveKind(type: Type, kind: TypeFlags): boolean {\r\n            if (type.flags & kind) {\r\n                return true;\r\n            }\r\n            if (type.flags & TypeFlags.Union) {\r\n                let types = (<UnionType>type).types;\r\n                for (let current of types) {\r\n                    if (!(current.flags & kind)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isConstEnumObjectType(type: Type): boolean {\r\n            return type.flags & (TypeFlags.ObjectType | TypeFlags.Anonymous) && type.symbol && isConstEnumSymbol(type.symbol);\r\n        }\r\n\r\n        function isConstEnumSymbol(symbol: Symbol): boolean {\r\n            return (symbol.flags & SymbolFlags.ConstEnum) !== 0;\r\n        }\r\n\r\n        function checkInstanceOfExpression(node: BinaryExpression, leftType: Type, rightType: Type): Type {\r\n            // TypeScript 1.0 spec (April 2014): 4.15.4\r\n            // The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,\r\n            // and the right operand to be of type Any or a subtype of the 'Function' interface type.\r\n            // The result is always of the Boolean primitive type.\r\n            // NOTE: do not raise error if leftType is unknown as related error was already reported\r\n            if (allConstituentTypesHaveKind(leftType, TypeFlags.Primitive)) {\r\n                error(node.left, Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n            // NOTE: do not raise error if right is unknown as related error was already reported\r\n            if (!(isTypeAny(rightType) || isTypeSubtypeOf(rightType, globalFunctionType))) {\r\n                error(node.right, Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);\r\n            }\r\n            return booleanType;\r\n        }\r\n\r\n        function checkInExpression(node: BinaryExpression, leftType: Type, rightType: Type): Type {\r\n            // TypeScript 1.0 spec (April 2014): 4.15.5\r\n            // The in operator requires the left operand to be of type Any, the String primitive type, or the Number primitive type,\r\n            // and the right operand to be of type Any, an object type, or a type parameter type.\r\n            // The result is always of the Boolean primitive type.\r\n            if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, TypeFlags.StringLike | TypeFlags.NumberLike | TypeFlags.ESSymbol)) {\r\n                error(node.left, Diagnostics.The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol);\r\n            }\r\n            if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, TypeFlags.ObjectType | TypeFlags.TypeParameter)) {\r\n                error(node.right, Diagnostics.The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n            return booleanType;\r\n        }\r\n\r\n        function checkObjectLiteralAssignment(node: ObjectLiteralExpression, sourceType: Type, contextualMapper?: TypeMapper): Type {\r\n            let properties = node.properties;\r\n            for (let p of properties) {\r\n                if (p.kind === SyntaxKind.PropertyAssignment || p.kind === SyntaxKind.ShorthandPropertyAssignment) {\r\n                    // TODO(andersh): Computed property support\r\n                    let name = <Identifier>(<PropertyAssignment>p).name;\r\n                    let type = isTypeAny(sourceType)\r\n                        ? sourceType\r\n                        : getTypeOfPropertyOfType(sourceType, name.text) ||\r\n                            isNumericLiteralName(name.text) && getIndexTypeOfType(sourceType, IndexKind.Number) ||\r\n                            getIndexTypeOfType(sourceType, IndexKind.String);\r\n                    if (type) {\r\n                        checkDestructuringAssignment((<PropertyAssignment>p).initializer || name, type);\r\n                    }\r\n                    else {\r\n                        error(name, Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(sourceType), declarationNameToString(name));\r\n                    }\r\n                }\r\n                else {\r\n                    error(p, Diagnostics.Property_assignment_expected);\r\n                }\r\n            }\r\n            return sourceType;\r\n        }\r\n\r\n        function checkArrayLiteralAssignment(node: ArrayLiteralExpression, sourceType: Type, contextualMapper?: TypeMapper): Type {\r\n            // This elementType will be used if the specific property corresponding to this index is not\r\n            // present (aka the tuple element property). This call also checks that the parentType is in\r\n            // fact an iterable or array (depending on target language).\r\n            let elementType = checkIteratedTypeOrElementType(sourceType, node, /*allowStringInput*/ false) || unknownType;\r\n            let elements = node.elements;\r\n            for (let i = 0; i < elements.length; i++) {\r\n                let e = elements[i];\r\n                if (e.kind !== SyntaxKind.OmittedExpression) {\r\n                    if (e.kind !== SyntaxKind.SpreadElementExpression) {\r\n                        let propName = \"\" + i;\r\n                        let type = isTypeAny(sourceType)\r\n                            ? sourceType\r\n                            : isTupleLikeType(sourceType)\r\n                                ? getTypeOfPropertyOfType(sourceType, propName)\r\n                                : elementType;\r\n                        if (type) {\r\n                            checkDestructuringAssignment(e, type, contextualMapper);\r\n                        }\r\n                        else {\r\n                            if (isTupleType(sourceType)) {\r\n                                error(e, Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(sourceType), (<TupleType>sourceType).elementTypes.length, elements.length);\r\n                            }\r\n                            else {\r\n                                error(e, Diagnostics.Type_0_has_no_property_1, typeToString(sourceType), propName);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (i < elements.length - 1) {\r\n                            error(e, Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);\r\n                        }\r\n                        else {\r\n                            let restExpression = (<SpreadElementExpression>e).expression;\r\n                            if (restExpression.kind === SyntaxKind.BinaryExpression && (<BinaryExpression>restExpression).operatorToken.kind === SyntaxKind.EqualsToken) {\r\n                                error((<BinaryExpression>restExpression).operatorToken, Diagnostics.A_rest_element_cannot_have_an_initializer);\r\n                            }\r\n                            else {\r\n                                checkDestructuringAssignment(restExpression, createArrayType(elementType), contextualMapper);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return sourceType;\r\n        }\r\n\r\n        function checkDestructuringAssignment(target: Expression, sourceType: Type, contextualMapper?: TypeMapper): Type {\r\n            if (target.kind === SyntaxKind.BinaryExpression && (<BinaryExpression>target).operatorToken.kind === SyntaxKind.EqualsToken) {\r\n                checkBinaryExpression(<BinaryExpression>target, contextualMapper);\r\n                target = (<BinaryExpression>target).left;\r\n            }\r\n            if (target.kind === SyntaxKind.ObjectLiteralExpression) {\r\n                return checkObjectLiteralAssignment(<ObjectLiteralExpression>target, sourceType, contextualMapper);\r\n            }\r\n            if (target.kind === SyntaxKind.ArrayLiteralExpression) {\r\n                return checkArrayLiteralAssignment(<ArrayLiteralExpression>target, sourceType, contextualMapper);\r\n            }\r\n            return checkReferenceAssignment(target, sourceType, contextualMapper);\r\n        }\r\n\r\n        function checkReferenceAssignment(target: Expression, sourceType: Type, contextualMapper?: TypeMapper): Type {\r\n            let targetType = checkExpression(target, contextualMapper);\r\n            if (checkReferenceExpression(target, Diagnostics.Invalid_left_hand_side_of_assignment_expression, Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant)) {\r\n                checkTypeAssignableTo(sourceType, targetType, target, /*headMessage*/ undefined);\r\n            }\r\n            return sourceType;\r\n        }\r\n\r\n        function checkBinaryExpression(node: BinaryExpression, contextualMapper?: TypeMapper) {\r\n            // Grammar checking\r\n            if (isLeftHandSideExpression(node.left) && isAssignmentOperator(node.operatorToken.kind)) {\r\n                // ECMA 262 (Annex C) The identifier eval or arguments may not appear as the LeftHandSideExpression of an\r\n                // Assignment operator(11.13) or of a PostfixExpression(11.3)\r\n                checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.left);\r\n            }\r\n\r\n            let operator = node.operatorToken.kind;\r\n            if (operator === SyntaxKind.EqualsToken && (node.left.kind === SyntaxKind.ObjectLiteralExpression || node.left.kind === SyntaxKind.ArrayLiteralExpression)) {\r\n                return checkDestructuringAssignment(node.left, checkExpression(node.right, contextualMapper), contextualMapper);\r\n            }\r\n            let leftType = checkExpression(node.left, contextualMapper);\r\n            let rightType = checkExpression(node.right, contextualMapper);\r\n            switch (operator) {\r\n                case SyntaxKind.AsteriskToken:\r\n                case SyntaxKind.AsteriskEqualsToken:\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.SlashEqualsToken:\r\n                case SyntaxKind.PercentToken:\r\n                case SyntaxKind.PercentEqualsToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.MinusEqualsToken:\r\n                case SyntaxKind.LessThanLessThanToken:\r\n                case SyntaxKind.LessThanLessThanEqualsToken:\r\n                case SyntaxKind.GreaterThanGreaterThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\r\n                case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\r\n                case SyntaxKind.BarToken:\r\n                case SyntaxKind.BarEqualsToken:\r\n                case SyntaxKind.CaretToken:\r\n                case SyntaxKind.CaretEqualsToken:\r\n                case SyntaxKind.AmpersandToken:\r\n                case SyntaxKind.AmpersandEqualsToken:\r\n                    // TypeScript 1.0 spec (April 2014): 4.15.1\r\n                    // These operators require their operands to be of type Any, the Number primitive type,\r\n                    // or an enum type. Operands of an enum type are treated\r\n                    // as having the primitive type Number. If one operand is the null or undefined value,\r\n                    // it is treated as having the type of the other operand.\r\n                    // The result is always of the Number primitive type.\r\n                    if (leftType.flags & (TypeFlags.Undefined | TypeFlags.Null)) leftType = rightType;\r\n                    if (rightType.flags & (TypeFlags.Undefined | TypeFlags.Null)) rightType = leftType;\r\n\r\n                    let suggestedOperator: SyntaxKind;\r\n                    // if a user tries to apply a bitwise operator to 2 boolean operands\r\n                    // try and return them a helpful suggestion\r\n                    if ((leftType.flags & TypeFlags.Boolean) &&\r\n                        (rightType.flags & TypeFlags.Boolean) &&\r\n                        (suggestedOperator = getSuggestedBooleanOperator(node.operatorToken.kind)) !== undefined) {\r\n                        error(node, Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, tokenToString(node.operatorToken.kind), tokenToString(suggestedOperator));\r\n                    }\r\n                    else {\r\n                        // otherwise just check each operand separately and report errors as normal\r\n                        let leftOk = checkArithmeticOperandType(node.left, leftType, Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\r\n                        let rightOk = checkArithmeticOperandType(node.right, rightType, Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\r\n                        if (leftOk && rightOk) {\r\n                            checkAssignmentOperator(numberType);\r\n                        }\r\n                    }\r\n\r\n                    return numberType;\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.PlusEqualsToken:\r\n                    // TypeScript 1.0 spec (April 2014): 4.15.2\r\n                    // The binary + operator requires both operands to be of the Number primitive type or an enum type,\r\n                    // or at least one of the operands to be of type Any or the String primitive type.\r\n\r\n                    // If one operand is the null or undefined value, it is treated as having the type of the other operand.\r\n                    if (leftType.flags & (TypeFlags.Undefined | TypeFlags.Null)) leftType = rightType;\r\n                    if (rightType.flags & (TypeFlags.Undefined | TypeFlags.Null)) rightType = leftType;\r\n\r\n                    let resultType: Type;\r\n                    if (allConstituentTypesHaveKind(leftType, TypeFlags.NumberLike) && allConstituentTypesHaveKind(rightType, TypeFlags.NumberLike)) {\r\n                        // Operands of an enum type are treated as having the primitive type Number.\r\n                        // If both operands are of the Number primitive type, the result is of the Number primitive type.\r\n                        resultType = numberType;\r\n                    }\r\n                    else {\r\n                        if (allConstituentTypesHaveKind(leftType, TypeFlags.StringLike) || allConstituentTypesHaveKind(rightType, TypeFlags.StringLike)) {\r\n                            // If one or both operands are of the String primitive type, the result is of the String primitive type.\r\n                            resultType = stringType;\r\n                        }\r\n                        else if (isTypeAny(leftType) || isTypeAny(rightType)) {\r\n                            // Otherwise, the result is of type Any.\r\n                            // NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.\r\n                            resultType = leftType === unknownType || rightType === unknownType ? unknownType : anyType;\r\n                        }\r\n\r\n                        // Symbols are not allowed at all in arithmetic expressions\r\n                        if (resultType && !checkForDisallowedESSymbolOperand(operator)) {\r\n                            return resultType;\r\n                        }\r\n                    }\r\n\r\n                    if (!resultType) {\r\n                        reportOperatorError();\r\n                        return anyType;\r\n                    }\r\n\r\n                    if (operator === SyntaxKind.PlusEqualsToken) {\r\n                        checkAssignmentOperator(resultType);\r\n                    }\r\n                    return resultType;\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.GreaterThanToken:\r\n                case SyntaxKind.LessThanEqualsToken:\r\n                case SyntaxKind.GreaterThanEqualsToken:\r\n                    if (!checkForDisallowedESSymbolOperand(operator)) {\r\n                        return booleanType;\r\n                    }\r\n                    // Fall through\r\n                case SyntaxKind.EqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsToken:\r\n                case SyntaxKind.EqualsEqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsEqualsToken:\r\n                    if (!isTypeAssignableTo(leftType, rightType) && !isTypeAssignableTo(rightType, leftType)) {\r\n                        reportOperatorError();\r\n                    }\r\n                    return booleanType;\r\n                case SyntaxKind.InstanceOfKeyword:\r\n                    return checkInstanceOfExpression(node, leftType, rightType);\r\n                case SyntaxKind.InKeyword:\r\n                    return checkInExpression(node, leftType, rightType);\r\n                case SyntaxKind.AmpersandAmpersandToken:\r\n                    return rightType;\r\n                case SyntaxKind.BarBarToken:\r\n                    return getUnionType([leftType, rightType]);\r\n                case SyntaxKind.EqualsToken:\r\n                    checkAssignmentOperator(rightType);\r\n                    return rightType;\r\n                case SyntaxKind.CommaToken:\r\n                    return rightType;\r\n            }\r\n\r\n            // Return true if there was no error, false if there was an error.\r\n            function checkForDisallowedESSymbolOperand(operator: SyntaxKind): boolean {\r\n                let offendingSymbolOperand =\r\n                    someConstituentTypeHasKind(leftType, TypeFlags.ESSymbol) ? node.left :\r\n                    someConstituentTypeHasKind(rightType, TypeFlags.ESSymbol) ? node.right :\r\n                    undefined;\r\n                if (offendingSymbolOperand) {\r\n                    error(offendingSymbolOperand, Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, tokenToString(operator));\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            function getSuggestedBooleanOperator(operator: SyntaxKind): SyntaxKind {\r\n                switch (operator) {\r\n                    case SyntaxKind.BarToken:\r\n                    case SyntaxKind.BarEqualsToken:\r\n                        return SyntaxKind.BarBarToken;\r\n                    case SyntaxKind.CaretToken:\r\n                    case SyntaxKind.CaretEqualsToken:\r\n                        return SyntaxKind.ExclamationEqualsEqualsToken;\r\n                    case SyntaxKind.AmpersandToken:\r\n                    case SyntaxKind.AmpersandEqualsToken:\r\n                        return SyntaxKind.AmpersandAmpersandToken;\r\n                    default:\r\n                        return undefined;\r\n                }\r\n            }\r\n\r\n            function checkAssignmentOperator(valueType: Type): void {\r\n                if (produceDiagnostics && operator >= SyntaxKind.FirstAssignment && operator <= SyntaxKind.LastAssignment) {\r\n                    // TypeScript 1.0 spec (April 2014): 4.17\r\n                    // An assignment of the form\r\n                    //    VarExpr = ValueExpr\r\n                    // requires VarExpr to be classified as a reference\r\n                    // A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1)\r\n                    // and the type of the non - compound operation to be assignable to the type of VarExpr.\r\n                    let ok = checkReferenceExpression(node.left, Diagnostics.Invalid_left_hand_side_of_assignment_expression, Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant);\r\n                    // Use default messages\r\n                    if (ok) {\r\n                        // to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported\r\n                        checkTypeAssignableTo(valueType, leftType, node.left, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function reportOperatorError() {\r\n                error(node, Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, tokenToString(node.operatorToken.kind), typeToString(leftType), typeToString(rightType));\r\n            }\r\n        }\r\n\r\n        function isYieldExpressionInClass(node: YieldExpression): boolean {\r\n            let current: Node = node\r\n            let parent = node.parent;\r\n            while (parent) { \r\n                if (isFunctionLike(parent) && current === (<FunctionLikeDeclaration>parent).body) {\r\n                    return false;\r\n                }\r\n                else if (current.kind === SyntaxKind.ClassDeclaration || current.kind === SyntaxKind.ClassExpression) {\r\n                    return true;\r\n                }\r\n\r\n                current = parent;\r\n                parent = parent.parent;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkYieldExpression(node: YieldExpression): Type {\r\n            // Grammar checking\r\n            if (!(node.parserContextFlags & ParserContextFlags.Yield) || isYieldExpressionInClass(node)) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body);\r\n            }\r\n\r\n            if (node.expression) {\r\n                let func = getContainingFunction(node);\r\n                // If the user's code is syntactically correct, the func should always have a star. After all,\r\n                // we are in a yield context.\r\n                if (func && func.asteriskToken) {\r\n                    let expressionType = checkExpressionCached(node.expression, /*contextualMapper*/ undefined);\r\n                    let expressionElementType: Type;\r\n                    let nodeIsYieldStar = !!node.asteriskToken;\r\n                    if (nodeIsYieldStar) {\r\n                        expressionElementType = checkElementTypeOfIterable(expressionType, node.expression);\r\n                    }\r\n                    // There is no point in doing an assignability check if the function\r\n                    // has no explicit return type because the return type is directly computed\r\n                    // from the yield expressions.\r\n                    if (func.type) {\r\n                        let signatureElementType = getElementTypeOfIterableIterator(getTypeFromTypeNode(func.type)) || anyType;\r\n                        if (nodeIsYieldStar) {\r\n                            checkTypeAssignableTo(expressionElementType, signatureElementType, node.expression, /*headMessage*/ undefined);\r\n                        }\r\n                        else {\r\n                            checkTypeAssignableTo(expressionType, signatureElementType, node.expression, /*headMessage*/ undefined);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Both yield and yield* expressions have type 'any'\r\n            return anyType;\r\n        }\r\n\r\n        function checkConditionalExpression(node: ConditionalExpression, contextualMapper?: TypeMapper): Type {\r\n            checkExpression(node.condition);\r\n            let type1 = checkExpression(node.whenTrue, contextualMapper);\r\n            let type2 = checkExpression(node.whenFalse, contextualMapper);\r\n            return getUnionType([type1, type2]);\r\n        }\r\n\r\n        function checkTemplateExpression(node: TemplateExpression): Type {\r\n            // We just want to check each expressions, but we are unconcerned with\r\n            // the type of each expression, as any value may be coerced into a string.\r\n            // It is worth asking whether this is what we really want though.\r\n            // A place where we actually *are* concerned with the expressions' types are\r\n            // in tagged templates.\r\n            forEach((<TemplateExpression>node).templateSpans, templateSpan => {\r\n                checkExpression(templateSpan.expression);\r\n            });\r\n\r\n            return stringType;\r\n        }\r\n\r\n        function checkExpressionWithContextualType(node: Expression, contextualType: Type, contextualMapper?: TypeMapper): Type {\r\n            let saveContextualType = node.contextualType;\r\n            node.contextualType = contextualType;\r\n            let result = checkExpression(node, contextualMapper);\r\n            node.contextualType = saveContextualType;\r\n            return result;\r\n        }\r\n\r\n        function checkExpressionCached(node: Expression, contextualMapper?: TypeMapper): Type {\r\n            let links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = checkExpression(node, contextualMapper);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function checkPropertyAssignment(node: PropertyAssignment, contextualMapper?: TypeMapper): Type {\r\n            // Do not use hasDynamicName here, because that returns false for well known symbols.\r\n            // We want to perform checkComputedPropertyName for all computed properties, including\r\n            // well known symbols.\r\n            if (node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                checkComputedPropertyName(<ComputedPropertyName>node.name);\r\n            }\r\n\r\n            return checkExpression((<PropertyAssignment>node).initializer, contextualMapper);\r\n        }\r\n\r\n        function checkObjectLiteralMethod(node: MethodDeclaration, contextualMapper?: TypeMapper): Type {\r\n            // Grammar checking\r\n            checkGrammarMethod(node);\r\n\r\n            // Do not use hasDynamicName here, because that returns false for well known symbols.\r\n            // We want to perform checkComputedPropertyName for all computed properties, including\r\n            // well known symbols.\r\n            if (node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                checkComputedPropertyName(<ComputedPropertyName>node.name);\r\n            }\r\n\r\n            let uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);\r\n            return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);\r\n        }\r\n\r\n        function instantiateTypeWithSingleGenericCallSignature(node: Expression | MethodDeclaration, type: Type, contextualMapper?: TypeMapper) {\r\n            if (contextualMapper && contextualMapper !== identityMapper) {\r\n                let signature = getSingleCallSignature(type);\r\n                if (signature && signature.typeParameters) {\r\n                    let contextualType = getContextualType(<Expression>node);\r\n                    if (contextualType) {\r\n                        let contextualSignature = getSingleCallSignature(contextualType);\r\n                        if (contextualSignature && !contextualSignature.typeParameters) {\r\n                            return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return type;\r\n        }\r\n\r\n        function checkExpression(node: Expression, contextualMapper?: TypeMapper): Type {\r\n            checkGrammarIdentifierInStrictMode(node);\r\n            return checkExpressionOrQualifiedName(node, contextualMapper);\r\n        }\r\n\r\n        // Checks an expression and returns its type. The contextualMapper parameter serves two purposes: When\r\n        // contextualMapper is not undefined and not equal to the identityMapper function object it indicates that the\r\n        // expression is being inferentially typed (section 4.12.2 in spec) and provides the type mapper to use in\r\n        // conjunction with the generic contextual type. When contextualMapper is equal to the identityMapper function\r\n        // object, it serves as an indicator that all contained function and arrow expressions should be considered to\r\n        // have the wildcard function type; this form of type check is used during overload resolution to exclude\r\n        // contextually typed function and arrow expressions in the initial phase.\r\n        function checkExpressionOrQualifiedName(node: Expression | QualifiedName, contextualMapper?: TypeMapper): Type {\r\n            let type: Type;\r\n            if (node.kind == SyntaxKind.QualifiedName) {\r\n                type = checkQualifiedName(<QualifiedName>node);\r\n            }\r\n            else {\r\n                let uninstantiatedType = checkExpressionWorker(<Expression>node, contextualMapper);\r\n                type = instantiateTypeWithSingleGenericCallSignature(<Expression>node, uninstantiatedType, contextualMapper);\r\n            }\r\n\r\n            if (isConstEnumObjectType(type)) {\r\n                // enum object type for const enums are only permitted in:\r\n                // - 'left' in property access\r\n                // - 'object' in indexed access\r\n                // - target in rhs of import statement\r\n                let ok =\r\n                    (node.parent.kind === SyntaxKind.PropertyAccessExpression && (<PropertyAccessExpression>node.parent).expression === node) ||\r\n                    (node.parent.kind === SyntaxKind.ElementAccessExpression && (<ElementAccessExpression>node.parent).expression === node) ||\r\n                    ((node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.QualifiedName) && isInRightSideOfImportOrExportAssignment(<Identifier>node));\r\n\r\n                if (!ok) {\r\n                    error(node, Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function checkNumericLiteral(node: LiteralExpression): Type {\r\n            // Grammar checking\r\n            checkGrammarNumericLiteral(node);\r\n            return numberType;\r\n        }\r\n\r\n        function checkExpressionWorker(node: Expression, contextualMapper: TypeMapper): Type {\r\n            switch (node.kind) {\r\n                case SyntaxKind.Identifier:\r\n                    return checkIdentifier(<Identifier>node);\r\n                case SyntaxKind.ThisKeyword:\r\n                    return checkThisExpression(node);\r\n                case SyntaxKind.SuperKeyword:\r\n                    return checkSuperExpression(node);\r\n                case SyntaxKind.NullKeyword:\r\n                    return nullType;\r\n                case SyntaxKind.TrueKeyword:\r\n                case SyntaxKind.FalseKeyword:\r\n                    return booleanType;\r\n                case SyntaxKind.NumericLiteral:\r\n                    return checkNumericLiteral(<LiteralExpression>node);\r\n                case SyntaxKind.TemplateExpression:\r\n                    return checkTemplateExpression(<TemplateExpression>node);\r\n                case SyntaxKind.StringLiteral:\r\n                case SyntaxKind.NoSubstitutionTemplateLiteral:\r\n                    return stringType;\r\n                case SyntaxKind.RegularExpressionLiteral:\r\n                    return globalRegExpType;\r\n                case SyntaxKind.ArrayLiteralExpression:\r\n                    return checkArrayLiteral(<ArrayLiteralExpression>node, contextualMapper);\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                    return checkObjectLiteral(<ObjectLiteralExpression>node, contextualMapper);\r\n                case SyntaxKind.PropertyAccessExpression:\r\n                    return checkPropertyAccessExpression(<PropertyAccessExpression>node);\r\n                case SyntaxKind.ElementAccessExpression:\r\n                    return checkIndexedAccess(<ElementAccessExpression>node);\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                    return checkCallExpression(<CallExpression>node);\r\n                case SyntaxKind.TaggedTemplateExpression:\r\n                    return checkTaggedTemplateExpression(<TaggedTemplateExpression>node);\r\n                case SyntaxKind.TypeAssertionExpression:\r\n                    return checkTypeAssertion(<TypeAssertion>node);\r\n                case SyntaxKind.ParenthesizedExpression:\r\n                    return checkExpression((<ParenthesizedExpression>node).expression, contextualMapper);\r\n                case SyntaxKind.ClassExpression:\r\n                    return checkClassExpression(<ClassExpression>node);\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    return checkFunctionExpressionOrObjectLiteralMethod(<FunctionExpression>node, contextualMapper);\r\n                case SyntaxKind.TypeOfExpression:\r\n                    return checkTypeOfExpression(<TypeOfExpression>node);\r\n                case SyntaxKind.DeleteExpression:\r\n                    return checkDeleteExpression(<DeleteExpression>node);\r\n                case SyntaxKind.VoidExpression:\r\n                    return checkVoidExpression(<VoidExpression>node);\r\n                case SyntaxKind.PrefixUnaryExpression:\r\n                    return checkPrefixUnaryExpression(<PrefixUnaryExpression>node);\r\n                case SyntaxKind.PostfixUnaryExpression:\r\n                    return checkPostfixUnaryExpression(<PostfixUnaryExpression>node);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return checkBinaryExpression(<BinaryExpression>node, contextualMapper);\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return checkConditionalExpression(<ConditionalExpression>node, contextualMapper);\r\n                case SyntaxKind.SpreadElementExpression:\r\n                    return checkSpreadElementExpression(<SpreadElementExpression>node, contextualMapper);\r\n                case SyntaxKind.OmittedExpression:\r\n                    return undefinedType;\r\n                case SyntaxKind.YieldExpression:\r\n                    return checkYieldExpression(<YieldExpression>node);\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        // DECLARATION AND STATEMENT TYPE CHECKING\r\n\r\n        function checkTypeParameter(node: TypeParameterDeclaration) {\r\n            checkGrammarDeclarationNameInStrictMode(node);\r\n\r\n            // Grammar Checking\r\n            if (node.expression) {\r\n                grammarErrorOnFirstToken(node.expression, Diagnostics.Type_expected);\r\n            }\r\n\r\n            checkSourceElement(node.constraint);\r\n            if (produceDiagnostics) {\r\n                checkTypeParameterHasIllegalReferencesInConstraint(node);\r\n                checkTypeNameIsReserved(node.name, Diagnostics.Type_parameter_name_cannot_be_0);\r\n            }\r\n            // TODO: Check multiple declarations are identical\r\n        }\r\n\r\n        function checkParameter(node: ParameterDeclaration) {\r\n            // Grammar checking\r\n            // It is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the\r\n            // Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code\r\n            // or if its FunctionBody is strict code(11.1.5).\r\n            // It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a\r\n            // strict mode FunctionLikeDeclaration or FunctionExpression(13.1)\r\n\r\n            // Grammar checking\r\n            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.name);\r\n\r\n            checkVariableLikeDeclaration(node);\r\n            let func = getContainingFunction(node);\r\n            if (node.flags & NodeFlags.AccessibilityModifier) {\r\n                func = getContainingFunction(node);\r\n                if (!(func.kind === SyntaxKind.Constructor && nodeIsPresent(func.body))) {\r\n                    error(node, Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);\r\n                }\r\n            }\r\n            if (node.questionToken && isBindingPattern(node.name) && func.body) {\r\n                error(node, Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature);\r\n            }\r\n            \r\n            // Only check rest parameter type if it's not a binding pattern. Since binding patterns are\r\n            // not allowed in a rest parameter, we already have an error from checkGrammarParameterList.\r\n            if (node.dotDotDotToken && !isBindingPattern(node.name) && !isArrayType(getTypeOfSymbol(node.symbol))) {\r\n                error(node, Diagnostics.A_rest_parameter_must_be_of_an_array_type);\r\n            }\r\n        }\r\n\r\n        function isSyntacticallyValidGenerator(node: SignatureDeclaration): boolean {\r\n            if (!(<FunctionLikeDeclaration>node).asteriskToken || !(<FunctionLikeDeclaration>node).body) {\r\n                return false;\r\n            }\r\n\r\n            return node.kind === SyntaxKind.MethodDeclaration ||\r\n                node.kind === SyntaxKind.FunctionDeclaration ||\r\n                node.kind === SyntaxKind.FunctionExpression;\r\n        }\r\n\r\n        function getTypePredicateParameterIndex(parameterList: NodeArray<ParameterDeclaration>, parameter: Identifier): number {\r\n            if (parameterList) {\r\n                for (let i = 0; i < parameterList.length; i++) {\r\n                    let param = parameterList[i];\r\n                    if (param.name.kind === SyntaxKind.Identifier &&\r\n                        (<Identifier>param.name).text === parameter.text) {\r\n\r\n                        return i;\r\n                    }\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function isInLegalTypePredicatePosition(node: Node): boolean {\r\n            switch (node.parent.kind) {\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    return node === (<SignatureDeclaration>node.parent).type;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkSignatureDeclaration(node: SignatureDeclaration) {\r\n            // Grammar checking\r\n            if (node.kind === SyntaxKind.IndexSignature) {\r\n                checkGrammarIndexSignature(<SignatureDeclaration>node);\r\n            }\r\n            // TODO (yuisu): Remove this check in else-if when SyntaxKind.Construct is moved and ambient context is handled\r\n            else if (node.kind === SyntaxKind.FunctionType || node.kind === SyntaxKind.FunctionDeclaration || node.kind === SyntaxKind.ConstructorType ||\r\n                node.kind === SyntaxKind.CallSignature || node.kind === SyntaxKind.Constructor ||\r\n                node.kind === SyntaxKind.ConstructSignature) {\r\n                checkGrammarFunctionLikeDeclaration(<FunctionLikeDeclaration>node);\r\n            }\r\n\r\n            checkTypeParameters(node.typeParameters);\r\n\r\n            forEach(node.parameters, checkParameter);\r\n\r\n            if (node.type) {\r\n                if (node.type.kind === SyntaxKind.TypePredicate) {\r\n                    let typePredicate = getSignatureFromDeclaration(node).typePredicate;\r\n                    let typePredicateNode = <TypePredicateNode>node.type;\r\n                    if (isInLegalTypePredicatePosition(typePredicateNode)) {\r\n                        if (typePredicate.parameterIndex >= 0) {\r\n                            if (node.parameters[typePredicate.parameterIndex].dotDotDotToken) {\r\n                                error(typePredicateNode.parameterName,\r\n                                    Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter);\r\n                            }\r\n                            else {\r\n                                checkTypeAssignableTo(typePredicate.type,\r\n                                    getTypeAtLocation(node.parameters[typePredicate.parameterIndex]),\r\n                                    typePredicateNode.type);\r\n                            }\r\n                        }\r\n                        else if (typePredicateNode.parameterName) {\r\n                            let hasReportedError = false;\r\n                            for (var param of node.parameters) {\r\n                                if (hasReportedError) {\r\n                                    break;\r\n                                }\r\n                                if (param.name.kind === SyntaxKind.ObjectBindingPattern || \r\n                                    param.name.kind === SyntaxKind.ArrayBindingPattern) {\r\n\r\n                                    (function checkBindingPattern(pattern: BindingPattern) {\r\n                                        for (let element of pattern.elements) {\r\n                                            if (element.name.kind === SyntaxKind.Identifier && \r\n                                                (<Identifier>element.name).text === typePredicate.parameterName) {\r\n\r\n                                                error(typePredicateNode.parameterName,\r\n                                                    Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern,\r\n                                                    typePredicate.parameterName);\r\n                                                hasReportedError = true;\r\n                                                break;\r\n                                            }\r\n                                            else if (element.name.kind === SyntaxKind.ArrayBindingPattern ||\r\n                                                element.name.kind === SyntaxKind.ObjectBindingPattern) {\r\n\r\n                                                checkBindingPattern(<BindingPattern>element.name);\r\n                                            }\r\n                                        }\r\n                                    })(<BindingPattern>param.name);\r\n                                }\r\n                            }\r\n                            if (!hasReportedError) {\r\n                                error(typePredicateNode.parameterName,\r\n                                    Diagnostics.Cannot_find_parameter_0,\r\n                                    typePredicate.parameterName);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        error(typePredicateNode,\r\n                            Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);\r\n                    }\r\n                }\r\n                else {\r\n                    checkSourceElement(node.type);\r\n                }\r\n            }\r\n\r\n            if (produceDiagnostics) {\r\n                checkCollisionWithArgumentsInGeneratedCode(node);\r\n                if (compilerOptions.noImplicitAny && !node.type) {\r\n                    switch (node.kind) {\r\n                        case SyntaxKind.ConstructSignature:\r\n                            error(node, Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\r\n                            break;\r\n                        case SyntaxKind.CallSignature:\r\n                            error(node, Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (node.type) {\r\n                    if (languageVersion >= ScriptTarget.ES6 && isSyntacticallyValidGenerator(node)) {\r\n                        let returnType = getTypeFromTypeNode(node.type);\r\n                        if (returnType === voidType) {\r\n                            error(node.type, Diagnostics.A_generator_cannot_have_a_void_type_annotation);\r\n                        }\r\n                        else {\r\n                            let generatorElementType = getElementTypeOfIterableIterator(returnType) || anyType;\r\n                            let iterableIteratorInstantiation = createIterableIteratorType(generatorElementType);\r\n\r\n                            // Naively, one could check that IterableIterator<any> is assignable to the return type annotation.\r\n                            // However, that would not catch the error in the following case.\r\n                            //\r\n                            //    interface BadGenerator extends Iterable<number>, Iterator<string> { }\r\n                            //    function* g(): BadGenerator { } // Iterable and Iterator have different types!\r\n                            //\r\n                            checkTypeAssignableTo(iterableIteratorInstantiation, returnType, node.type);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            checkSpecializedSignatureDeclaration(node);\r\n        }\r\n\r\n        function checkTypeForDuplicateIndexSignatures(node: Node) {\r\n            if (node.kind === SyntaxKind.InterfaceDeclaration) {\r\n                let nodeSymbol = getSymbolOfNode(node);\r\n                // in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration\r\n                // to prevent this run check only for the first declaration of a given kind\r\n                if (nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014)\r\n            // 3.7.4: An object type can contain at most one string index signature and one numeric index signature.\r\n            // 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration\r\n            let indexSymbol = getIndexSymbol(getSymbolOfNode(node));\r\n            if (indexSymbol) {\r\n                let seenNumericIndexer = false;\r\n                let seenStringIndexer = false;\r\n                for (let decl of indexSymbol.declarations) {\r\n                    let declaration = <SignatureDeclaration>decl;\r\n                    if (declaration.parameters.length === 1 && declaration.parameters[0].type) {\r\n                        switch (declaration.parameters[0].type.kind) {\r\n                            case SyntaxKind.StringKeyword:\r\n                                if (!seenStringIndexer) {\r\n                                    seenStringIndexer = true;\r\n                                }\r\n                                else {\r\n                                    error(declaration, Diagnostics.Duplicate_string_index_signature);\r\n                                }\r\n                                break;\r\n                            case SyntaxKind.NumberKeyword:\r\n                                if (!seenNumericIndexer) {\r\n                                    seenNumericIndexer = true;\r\n                                }\r\n                                else {\r\n                                    error(declaration, Diagnostics.Duplicate_number_index_signature);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkPropertyDeclaration(node: PropertyDeclaration) {\r\n            // Grammar checking\r\n            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarProperty(node) || checkGrammarComputedPropertyName(node.name);\r\n\r\n            checkVariableLikeDeclaration(node);\r\n        }\r\n\r\n        function checkMethodDeclaration(node: MethodDeclaration) {\r\n            // Grammar checking\r\n            checkGrammarMethod(node) || checkGrammarComputedPropertyName(node.name);\r\n\r\n            // Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration\r\n            checkFunctionLikeDeclaration(node);\r\n        }\r\n\r\n        function checkConstructorDeclaration(node: ConstructorDeclaration) {\r\n            // Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.\r\n            checkSignatureDeclaration(node);\r\n            // Grammar check for checking only related to constructoDeclaration\r\n            checkGrammarConstructorTypeParameters(node) || checkGrammarConstructorTypeAnnotation(node);\r\n\r\n            checkSourceElement(node.body);\r\n\r\n            let symbol = getSymbolOfNode(node);\r\n            let firstDeclaration = getDeclarationOfKind(symbol, node.kind);\r\n            // Only type check the symbol once\r\n            if (node === firstDeclaration) {\r\n                checkFunctionOrConstructorSymbol(symbol);\r\n            }\r\n\r\n            // exit early in the case of signature - super checks are not relevant to them\r\n            if (nodeIsMissing(node.body)) {\r\n                return;\r\n            }\r\n\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n\r\n            function isSuperCallExpression(n: Node): boolean {\r\n                return n.kind === SyntaxKind.CallExpression && (<CallExpression>n).expression.kind === SyntaxKind.SuperKeyword;\r\n            }\r\n\r\n            function containsSuperCall(n: Node): boolean {\r\n                if (isSuperCallExpression(n)) {\r\n                    return true;\r\n                }\r\n                switch (n.kind) {\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.ArrowFunction:\r\n                    case SyntaxKind.ObjectLiteralExpression: return false;\r\n                    default: return forEachChild(n, containsSuperCall);\r\n                }\r\n            }\r\n\r\n            function markThisReferencesAsErrors(n: Node): void {\r\n                if (n.kind === SyntaxKind.ThisKeyword) {\r\n                    error(n, Diagnostics.this_cannot_be_referenced_in_current_location);\r\n                }\r\n                else if (n.kind !== SyntaxKind.FunctionExpression && n.kind !== SyntaxKind.FunctionDeclaration) {\r\n                    forEachChild(n, markThisReferencesAsErrors);\r\n                }\r\n            }\r\n\r\n            function isInstancePropertyWithInitializer(n: Node): boolean {\r\n                return n.kind === SyntaxKind.PropertyDeclaration &&\r\n                    !(n.flags & NodeFlags.Static) &&\r\n                    !!(<PropertyDeclaration>n).initializer;\r\n            }\r\n\r\n            // TS 1.0 spec (April 2014): 8.3.2\r\n            // Constructors of classes with no extends clause may not contain super calls, whereas\r\n            // constructors of derived classes must contain at least one super call somewhere in their function body.\r\n            if (getClassExtendsHeritageClauseElement(<ClassDeclaration>node.parent)) {\r\n\r\n                if (containsSuperCall(node.body)) {\r\n                    // The first statement in the body of a constructor must be a super call if both of the following are true:\r\n                    // - The containing class is a derived class.\r\n                    // - The constructor declares parameter properties\r\n                    //   or the containing class declares instance member variables with initializers.\r\n                    let superCallShouldBeFirst =\r\n                        forEach((<ClassDeclaration>node.parent).members, isInstancePropertyWithInitializer) ||\r\n                        forEach(node.parameters, p => p.flags & (NodeFlags.Public | NodeFlags.Private | NodeFlags.Protected));\r\n\r\n                    if (superCallShouldBeFirst) {\r\n                        let statements = (<Block>node.body).statements;\r\n                        if (!statements.length || statements[0].kind !== SyntaxKind.ExpressionStatement || !isSuperCallExpression((<ExpressionStatement>statements[0]).expression)) {\r\n                            error(node, Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties);\r\n                        }\r\n                        else {\r\n                            // In such a required super call, it is a compile-time error for argument expressions to reference this.\r\n                            markThisReferencesAsErrors((<ExpressionStatement>statements[0]).expression);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkAccessorDeclaration(node: AccessorDeclaration) {\r\n            if (produceDiagnostics) {\r\n                // Grammar checking accessors\r\n                checkGrammarFunctionLikeDeclaration(node) || checkGrammarAccessor(node) || checkGrammarComputedPropertyName(node.name);\r\n\r\n                if (node.kind === SyntaxKind.GetAccessor) {\r\n                    if (!isInAmbientContext(node) && nodeIsPresent(node.body) && !(bodyContainsAReturnStatement(<Block>node.body) || bodyContainsSingleThrowStatement(<Block>node.body))) {\r\n                        error(node.name, Diagnostics.A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement);\r\n                    }\r\n                }\r\n\r\n                if (!hasDynamicName(node)) {\r\n                    // TypeScript 1.0 spec (April 2014): 8.4.3\r\n                    // Accessors for the same member name must specify the same accessibility.\r\n                    let otherKind = node.kind === SyntaxKind.GetAccessor ? SyntaxKind.SetAccessor : SyntaxKind.GetAccessor;\r\n                    let otherAccessor = <AccessorDeclaration>getDeclarationOfKind(node.symbol, otherKind);\r\n                    if (otherAccessor) {\r\n                        if (((node.flags & NodeFlags.AccessibilityModifier) !== (otherAccessor.flags & NodeFlags.AccessibilityModifier))) {\r\n                            error(node.name, Diagnostics.Getter_and_setter_accessors_do_not_agree_in_visibility);\r\n                        }\r\n\r\n                        let currentAccessorType = getAnnotatedAccessorType(node);\r\n                        let otherAccessorType = getAnnotatedAccessorType(otherAccessor);\r\n                        // TypeScript 1.0 spec (April 2014): 4.5\r\n                        // If both accessors include type annotations, the specified types must be identical.\r\n                        if (currentAccessorType && otherAccessorType) {\r\n                            if (!isTypeIdenticalTo(currentAccessorType, otherAccessorType)) {\r\n                                error(node, Diagnostics.get_and_set_accessor_must_have_the_same_type);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                getTypeOfAccessors(getSymbolOfNode(node));\r\n            }\r\n\r\n            checkFunctionLikeDeclaration(node);\r\n        }\r\n\r\n        function checkMissingDeclaration(node: Node) {\r\n            checkDecorators(node);\r\n        }\r\n\r\n        function checkTypeReferenceNode(node: TypeReferenceNode) {\r\n            checkGrammarTypeReferenceInStrictMode(node.typeName);\r\n            return checkTypeReferenceOrExpressionWithTypeArguments(node);\r\n        }\r\n\r\n        function checkExpressionWithTypeArguments(node: ExpressionWithTypeArguments) {\r\n            checkGrammarExpressionWithTypeArgumentsInStrictMode(<PropertyAccessExpression>node.expression);\r\n\r\n            return checkTypeReferenceOrExpressionWithTypeArguments(node);\r\n        }\r\n\r\n        function checkTypeReferenceOrExpressionWithTypeArguments(node: TypeReferenceNode | ExpressionWithTypeArguments) {\r\n            // Grammar checking\r\n            checkGrammarTypeArguments(node, node.typeArguments);\r\n\r\n            let type = getTypeFromTypeReference(node);\r\n            if (type !== unknownType && node.typeArguments) {\r\n                // Do type argument local checks only if referenced type is successfully resolved\r\n                let symbol = getNodeLinks(node).resolvedSymbol;\r\n                let typeParameters = symbol.flags & SymbolFlags.TypeAlias ? getSymbolLinks(symbol).typeParameters : (<TypeReference>type).target.localTypeParameters;\r\n                let len = node.typeArguments.length;\r\n                for (let i = 0; i < len; i++) {\r\n                    checkSourceElement(node.typeArguments[i]);\r\n                    let constraint = getConstraintOfTypeParameter(typeParameters[i]);\r\n                    if (produceDiagnostics && constraint) {\r\n                        let typeArgument = (<TypeReference>type).typeArguments[i];\r\n                        checkTypeAssignableTo(typeArgument, constraint, node, Diagnostics.Type_0_does_not_satisfy_the_constraint_1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkTypeQuery(node: TypeQueryNode) {\r\n            getTypeFromTypeQueryNode(node);\r\n        }\r\n\r\n        function checkTypeLiteral(node: TypeLiteralNode) {\r\n            forEach(node.members, checkSourceElement);\r\n            if (produceDiagnostics) {\r\n                let type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);\r\n                checkIndexConstraints(type);\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function checkArrayType(node: ArrayTypeNode) {\r\n            checkSourceElement(node.elementType);\r\n        }\r\n\r\n        function checkTupleType(node: TupleTypeNode) {\r\n            // Grammar checking\r\n            let hasErrorFromDisallowedTrailingComma = checkGrammarForDisallowedTrailingComma(node.elementTypes);\r\n            if (!hasErrorFromDisallowedTrailingComma && node.elementTypes.length === 0) {\r\n                grammarErrorOnNode(node, Diagnostics.A_tuple_type_element_list_cannot_be_empty);\r\n            }\r\n\r\n            forEach(node.elementTypes, checkSourceElement);\r\n        }\r\n\r\n        function checkUnionType(node: UnionTypeNode) {\r\n            forEach(node.types, checkSourceElement);\r\n        }\r\n\r\n        function isPrivateWithinAmbient(node: Node): boolean {\r\n            return (node.flags & NodeFlags.Private) && isInAmbientContext(node);\r\n        }\r\n\r\n        function checkSpecializedSignatureDeclaration(signatureDeclarationNode: SignatureDeclaration): void {\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n            let signature = getSignatureFromDeclaration(signatureDeclarationNode);\r\n            if (!signature.hasStringLiterals) {\r\n                return;\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014): 3.7.2.2\r\n            // Specialized signatures are not permitted in conjunction with a function body\r\n            if (nodeIsPresent((<FunctionLikeDeclaration>signatureDeclarationNode).body)) {\r\n                error(signatureDeclarationNode, Diagnostics.A_signature_with_an_implementation_cannot_use_a_string_literal_type);\r\n                return;\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014): 3.7.2.4\r\n            // Every specialized call or construct signature in an object type must be assignable\r\n            // to at least one non-specialized call or construct signature in the same object type\r\n            let signaturesToCheck: Signature[];\r\n            // Unnamed (call\\construct) signatures in interfaces are inherited and not shadowed so examining just node symbol won't give complete answer.\r\n            // Use declaring type to obtain full list of signatures.\r\n            if (!signatureDeclarationNode.name && signatureDeclarationNode.parent && signatureDeclarationNode.parent.kind === SyntaxKind.InterfaceDeclaration) {\r\n                Debug.assert(signatureDeclarationNode.kind === SyntaxKind.CallSignature || signatureDeclarationNode.kind === SyntaxKind.ConstructSignature);\r\n                let signatureKind = signatureDeclarationNode.kind === SyntaxKind.CallSignature ? SignatureKind.Call : SignatureKind.Construct;\r\n                let containingSymbol = getSymbolOfNode(signatureDeclarationNode.parent);\r\n                let containingType = getDeclaredTypeOfSymbol(containingSymbol);\r\n                signaturesToCheck = getSignaturesOfType(containingType, signatureKind);\r\n            }\r\n            else {\r\n                signaturesToCheck = getSignaturesOfSymbol(getSymbolOfNode(signatureDeclarationNode));\r\n            }\r\n\r\n            for (let otherSignature of signaturesToCheck) {\r\n                if (!otherSignature.hasStringLiterals && isSignatureAssignableTo(signature, otherSignature)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            error(signatureDeclarationNode, Diagnostics.Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature);\r\n        }\r\n\r\n        function getEffectiveDeclarationFlags(n: Node, flagsToCheck: NodeFlags) {\r\n            let flags = getCombinedNodeFlags(n);\r\n            if (n.parent.kind !== SyntaxKind.InterfaceDeclaration && isInAmbientContext(n)) {\r\n                if (!(flags & NodeFlags.Ambient)) {\r\n                    // It is nested in an ambient context, which means it is automatically exported\r\n                    flags |= NodeFlags.Export;\r\n                }\r\n                flags |= NodeFlags.Ambient;\r\n            }\r\n\r\n            return flags & flagsToCheck;\r\n        }\r\n\r\n        function checkFunctionOrConstructorSymbol(symbol: Symbol): void {\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n\r\n            function getCanonicalOverload(overloads: Declaration[], implementation: FunctionLikeDeclaration) {\r\n                // Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration\r\n                // Error on all deviations from this canonical set of flags\r\n                // The caveat is that if some overloads are defined in lib.d.ts, we don't want to\r\n                // report the errors on those. To achieve this, we will say that the implementation is\r\n                // the canonical signature only if it is in the same container as the first overload\r\n                let implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;\r\n                return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];\r\n            }\r\n\r\n            function checkFlagAgreementBetweenOverloads(overloads: Declaration[], implementation: FunctionLikeDeclaration, flagsToCheck: NodeFlags, someOverloadFlags: NodeFlags, allOverloadFlags: NodeFlags): void {\r\n                // Error if some overloads have a flag that is not shared by all overloads. To find the\r\n                // deviations, we XOR someOverloadFlags with allOverloadFlags\r\n                let someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;\r\n                if (someButNotAllOverloadFlags !== 0) {\r\n                    let canonicalFlags = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);\r\n\r\n                    forEach(overloads, o => {\r\n                        let deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags;\r\n                        if (deviation & NodeFlags.Export) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_exported_or_not_exported);\r\n                        }\r\n                        else if (deviation & NodeFlags.Ambient) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);\r\n                        }\r\n                        else if (deviation & (NodeFlags.Private | NodeFlags.Protected)) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            function checkQuestionTokenAgreementBetweenOverloads(overloads: Declaration[], implementation: FunctionLikeDeclaration, someHaveQuestionToken: boolean, allHaveQuestionToken: boolean): void {\r\n                if (someHaveQuestionToken !== allHaveQuestionToken) {\r\n                    let canonicalHasQuestionToken = hasQuestionToken(getCanonicalOverload(overloads, implementation));\r\n                    forEach(overloads, o => {\r\n                        let deviation = hasQuestionToken(o) !== canonicalHasQuestionToken;\r\n                        if (deviation) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_optional_or_required);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            let flagsToCheck: NodeFlags = NodeFlags.Export | NodeFlags.Ambient | NodeFlags.Private | NodeFlags.Protected;\r\n            let someNodeFlags: NodeFlags = 0;\r\n            let allNodeFlags = flagsToCheck;\r\n            let someHaveQuestionToken = false;\r\n            let allHaveQuestionToken = true;\r\n            let hasOverloads = false;\r\n            let bodyDeclaration: FunctionLikeDeclaration;\r\n            let lastSeenNonAmbientDeclaration: FunctionLikeDeclaration;\r\n            let previousDeclaration: FunctionLikeDeclaration;\r\n\r\n            let declarations = symbol.declarations;\r\n            let isConstructor = (symbol.flags & SymbolFlags.Constructor) !== 0;\r\n\r\n            function reportImplementationExpectedError(node: FunctionLikeDeclaration): void {\r\n                if (node.name && nodeIsMissing(node.name)) {\r\n                    return;\r\n                }\r\n\r\n                let seen = false;\r\n                let subsequentNode = forEachChild(node.parent, c => {\r\n                    if (seen) {\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        seen = c === node;\r\n                    }\r\n                });\r\n                if (subsequentNode) {\r\n                    if (subsequentNode.kind === node.kind) {\r\n                        let errorNode: Node = (<FunctionLikeDeclaration>subsequentNode).name || subsequentNode;\r\n                        // TODO(jfreeman): These are methods, so handle computed name case\r\n                        if (node.name && (<FunctionLikeDeclaration>subsequentNode).name && (<Identifier>node.name).text === (<Identifier>(<FunctionLikeDeclaration>subsequentNode).name).text) {\r\n                            // the only situation when this is possible (same kind\\same name but different symbol) - mixed static and instance class members\r\n                            Debug.assert(node.kind === SyntaxKind.MethodDeclaration || node.kind === SyntaxKind.MethodSignature);\r\n                            Debug.assert((node.flags & NodeFlags.Static) !== (subsequentNode.flags & NodeFlags.Static));\r\n                            let diagnostic = node.flags & NodeFlags.Static ? Diagnostics.Function_overload_must_be_static : Diagnostics.Function_overload_must_not_be_static;\r\n                            error(errorNode, diagnostic);\r\n                            return;\r\n                        }\r\n                        else if (nodeIsPresent((<FunctionLikeDeclaration>subsequentNode).body)) {\r\n                            error(errorNode, Diagnostics.Function_implementation_name_must_be_0, declarationNameToString(node.name));\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                let errorNode: Node = node.name || node;\r\n                if (isConstructor) {\r\n                    error(errorNode, Diagnostics.Constructor_implementation_is_missing);\r\n                }\r\n                else {\r\n                    error(errorNode, Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);\r\n                }\r\n            }\r\n\r\n            // when checking exported function declarations across modules check only duplicate implementations\r\n            // names and consistency of modifiers are verified when we check local symbol\r\n            let isExportSymbolInsideModule = symbol.parent && symbol.parent.flags & SymbolFlags.Module;\r\n            let duplicateFunctionDeclaration = false;\r\n            let multipleConstructorImplementation = false;\r\n            for (let current of declarations) {\r\n                let node = <FunctionLikeDeclaration>current;\r\n                let inAmbientContext = isInAmbientContext(node);\r\n                let inAmbientContextOrInterface = node.parent.kind === SyntaxKind.InterfaceDeclaration || node.parent.kind === SyntaxKind.TypeLiteral || inAmbientContext;\r\n                if (inAmbientContextOrInterface) {\r\n                    // check if declarations are consecutive only if they are non-ambient\r\n                    // 1. ambient declarations can be interleaved\r\n                    // i.e. this is legal\r\n                    //     declare function foo();\r\n                    //     declare function bar();\r\n                    //     declare function foo();\r\n                    // 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one\r\n                    previousDeclaration = undefined;\r\n                }\r\n\r\n                if (node.kind === SyntaxKind.FunctionDeclaration || node.kind === SyntaxKind.MethodDeclaration || node.kind === SyntaxKind.MethodSignature || node.kind === SyntaxKind.Constructor) {\r\n                    let currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);\r\n                    someNodeFlags |= currentNodeFlags;\r\n                    allNodeFlags &= currentNodeFlags;\r\n                    someHaveQuestionToken = someHaveQuestionToken || hasQuestionToken(node);\r\n                    allHaveQuestionToken = allHaveQuestionToken && hasQuestionToken(node);\r\n\r\n                    if (nodeIsPresent(node.body) && bodyDeclaration) {\r\n                        if (isConstructor) {\r\n                            multipleConstructorImplementation = true;\r\n                        }\r\n                        else {\r\n                            duplicateFunctionDeclaration = true;\r\n                        }\r\n                    }\r\n                    else if (!isExportSymbolInsideModule && previousDeclaration && previousDeclaration.parent === node.parent && previousDeclaration.end !== node.pos) {\r\n                        reportImplementationExpectedError(previousDeclaration);\r\n                    }\r\n\r\n                    if (nodeIsPresent(node.body)) {\r\n                        if (!bodyDeclaration) {\r\n                            bodyDeclaration = node;\r\n                        }\r\n                    }\r\n                    else {\r\n                        hasOverloads = true;\r\n                    }\r\n\r\n                    previousDeclaration = node;\r\n\r\n                    if (!inAmbientContextOrInterface) {\r\n                        lastSeenNonAmbientDeclaration = node;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (multipleConstructorImplementation) {\r\n                forEach(declarations, declaration => {\r\n                    error(declaration, Diagnostics.Multiple_constructor_implementations_are_not_allowed);\r\n                });\r\n            }\r\n\r\n            if (duplicateFunctionDeclaration) {\r\n                forEach(declarations, declaration => {\r\n                    error(declaration.name, Diagnostics.Duplicate_function_implementation);\r\n                });\r\n            }\r\n\r\n            if (!isExportSymbolInsideModule && lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body) {\r\n                reportImplementationExpectedError(lastSeenNonAmbientDeclaration);\r\n            }\r\n\r\n            if (hasOverloads) {\r\n                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);\r\n                checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);\r\n\r\n                if (bodyDeclaration) {\r\n                    let signatures = getSignaturesOfSymbol(symbol);\r\n                    let bodySignature = getSignatureFromDeclaration(bodyDeclaration);\r\n                    // If the implementation signature has string literals, we will have reported an error in\r\n                    // checkSpecializedSignatureDeclaration\r\n                    if (!bodySignature.hasStringLiterals) {\r\n                        // TypeScript 1.0 spec (April 2014): 6.1\r\n                        // If a function declaration includes overloads, the overloads determine the call\r\n                        // signatures of the type given to the function object\r\n                        // and the function implementation signature must be assignable to that type\r\n                        //\r\n                        // TypeScript 1.0 spec (April 2014): 3.8.4\r\n                        // Note that specialized call and construct signatures (section 3.7.2.4) are not significant when determining assignment compatibility\r\n                        // Consider checking against specialized signatures too. Not doing so creates a type hole:\r\n                        //\r\n                        // function g(x: \"hi\", y: boolean);\r\n                        // function g(x: string, y: {});\r\n                        // function g(x: string, y: string) { }\r\n                        //\r\n                        // The implementation is completely unrelated to the specialized signature, yet we do not check this.\r\n                        for (let signature of signatures) {\r\n                            if (!signature.hasStringLiterals && !isSignatureAssignableTo(bodySignature, signature)) {\r\n                                error(signature.declaration, Diagnostics.Overload_signature_is_not_compatible_with_function_implementation);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkExportsOnMergedDeclarations(node: Node): void {\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n\r\n            // Exports should be checked only if enclosing module contains both exported and non exported declarations.\r\n            // In case if all declarations are non-exported check is unnecessary.\r\n\r\n            // if localSymbol is defined on node then node itself is exported - check is required\r\n            let symbol = node.localSymbol;\r\n            if (!symbol) {\r\n                // local symbol is undefined => this declaration is non-exported.\r\n                // however symbol might contain other declarations that are exported\r\n                symbol = getSymbolOfNode(node);\r\n                if (!(symbol.flags & SymbolFlags.Export)) {\r\n                    // this is a pure local symbol (all declarations are non-exported) - no need to check anything\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // run the check only for the first declaration in the list\r\n            if (getDeclarationOfKind(symbol, node.kind) !== node) {\r\n                return;\r\n            }\r\n\r\n            // we use SymbolFlags.ExportValue, SymbolFlags.ExportType and SymbolFlags.ExportNamespace\r\n            // to denote disjoint declarationSpaces (without making new enum type).\r\n            let exportedDeclarationSpaces: SymbolFlags = 0;\r\n            let nonExportedDeclarationSpaces: SymbolFlags = 0;\r\n            forEach(symbol.declarations, d => {\r\n                let declarationSpaces = getDeclarationSpaces(d);\r\n                if (getEffectiveDeclarationFlags(d, NodeFlags.Export)) {\r\n                    exportedDeclarationSpaces |= declarationSpaces;\r\n                }\r\n                else {\r\n                    nonExportedDeclarationSpaces |= declarationSpaces;\r\n                }\r\n            });\r\n\r\n            let commonDeclarationSpace = exportedDeclarationSpaces & nonExportedDeclarationSpaces;\r\n\r\n            if (commonDeclarationSpace) {\r\n                // declaration spaces for exported and non-exported declarations intersect\r\n                forEach(symbol.declarations, d => {\r\n                    if (getDeclarationSpaces(d) & commonDeclarationSpace) {\r\n                        error(d.name, Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, declarationNameToString(d.name));\r\n                    }\r\n                });\r\n            }\r\n\r\n            function getDeclarationSpaces(d: Declaration): SymbolFlags {\r\n                switch (d.kind) {\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        return SymbolFlags.ExportType;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        return (<ModuleDeclaration>d).name.kind === SyntaxKind.StringLiteral || getModuleInstanceState(d) !== ModuleInstanceState.NonInstantiated\r\n                            ? SymbolFlags.ExportNamespace | SymbolFlags.ExportValue\r\n                            : SymbolFlags.ExportNamespace;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        return SymbolFlags.ExportType | SymbolFlags.ExportValue;\r\n                    case SyntaxKind.ImportEqualsDeclaration:\r\n                        let result: SymbolFlags = 0;\r\n                        let target = resolveAlias(getSymbolOfNode(d));\r\n                        forEach(target.declarations, d => { result |= getDeclarationSpaces(d); });\r\n                        return result;\r\n                    default:\r\n                        return SymbolFlags.ExportValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Check a decorator */\r\n        function checkDecorator(node: Decorator): void {\r\n            let expression: Expression = node.expression;\r\n            let exprType = checkExpression(expression);\r\n\r\n            switch (node.parent.kind) {\r\n                case SyntaxKind.ClassDeclaration:\r\n                    let classSymbol = getSymbolOfNode(node.parent);\r\n                    let classConstructorType = getTypeOfSymbol(classSymbol);\r\n                    let classDecoratorType = instantiateSingleCallFunctionType(getGlobalClassDecoratorType(), [classConstructorType]);\r\n                    checkTypeAssignableTo(exprType, classDecoratorType, node);\r\n                    break;\r\n\r\n                case SyntaxKind.PropertyDeclaration:\r\n                    checkTypeAssignableTo(exprType, getGlobalPropertyDecoratorType(), node);\r\n                    break;\r\n\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                    let methodType = getTypeOfNode(node.parent);\r\n                    let methodDecoratorType = instantiateSingleCallFunctionType(getGlobalMethodDecoratorType(), [methodType]);\r\n                    checkTypeAssignableTo(exprType, methodDecoratorType, node);\r\n                    break;\r\n\r\n                case SyntaxKind.Parameter:\r\n                    checkTypeAssignableTo(exprType, getGlobalParameterDecoratorType(), node);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        /** Checks a type reference node as an expression. */\r\n        function checkTypeNodeAsExpression(node: TypeNode) {\r\n            // When we are emitting type metadata for decorators, we need to try to check the type\r\n            // as if it were an expression so that we can emit the type in a value position when we \r\n            // serialize the type metadata.\r\n            if (node && node.kind === SyntaxKind.TypeReference) {\r\n                let type = getTypeFromTypeNode(node);\r\n                let shouldCheckIfUnknownType = type === unknownType && compilerOptions.isolatedModules;\r\n                if (!type || (!shouldCheckIfUnknownType && type.flags & (TypeFlags.Intrinsic | TypeFlags.NumberLike | TypeFlags.StringLike))) {\r\n                    return;\r\n                }\r\n                if (shouldCheckIfUnknownType || type.symbol.valueDeclaration) {\r\n                    checkExpressionOrQualifiedName((<TypeReferenceNode>node).typeName);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n          * Checks the type annotation of an accessor declaration or property declaration as \r\n          * an expression if it is a type reference to a type with a value declaration.\r\n          */\r\n        function checkTypeAnnotationAsExpression(node: AccessorDeclaration | PropertyDeclaration | ParameterDeclaration | MethodDeclaration) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.PropertyDeclaration:\r\n                    checkTypeNodeAsExpression((<PropertyDeclaration>node).type);\r\n                    break;\r\n                case SyntaxKind.Parameter:\r\n                    checkTypeNodeAsExpression((<ParameterDeclaration>node).type);\r\n                    break;\r\n                case SyntaxKind.MethodDeclaration:\r\n                    checkTypeNodeAsExpression((<MethodDeclaration>node).type);\r\n                    break;\r\n                case SyntaxKind.GetAccessor:\r\n                    checkTypeNodeAsExpression((<AccessorDeclaration>node).type);\r\n                    break;\r\n                case SyntaxKind.SetAccessor:\r\n                    checkTypeNodeAsExpression(getSetAccessorTypeAnnotationNode(<AccessorDeclaration>node));\r\n                    break;\r\n            }\r\n        }\r\n        \r\n        /** Checks the type annotation of the parameters of a function/method or the constructor of a class as expressions */\r\n        function checkParameterTypeAnnotationsAsExpressions(node: FunctionLikeDeclaration) {\r\n            // ensure all type annotations with a value declaration are checked as an expression\r\n            for (let parameter of node.parameters) {\r\n                checkTypeAnnotationAsExpression(parameter);\r\n            }\r\n        }\r\n\r\n        /** Check the decorators of a node */\r\n        function checkDecorators(node: Node): void {\r\n            if (!node.decorators) {\r\n                return;\r\n            }\r\n\r\n            // skip this check for nodes that cannot have decorators. These should have already had an error reported by\r\n            // checkGrammarDecorators.\r\n            if (!nodeCanBeDecorated(node)) {\r\n                return;\r\n            }\r\n            \r\n            if (!compilerOptions.experimentalDecorators) {\r\n                error(node, Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning);\r\n            }\r\n\r\n            if (compilerOptions.emitDecoratorMetadata) {\r\n                // we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.\r\n                switch (node.kind) {\r\n                    case SyntaxKind.ClassDeclaration:\r\n                        var constructor = getFirstConstructorWithBody(<ClassDeclaration>node);\r\n                        if (constructor) {\r\n                            checkParameterTypeAnnotationsAsExpressions(constructor);\r\n                        }\r\n                        break;\r\n\r\n                    case SyntaxKind.MethodDeclaration:\r\n                        checkParameterTypeAnnotationsAsExpressions(<FunctionLikeDeclaration>node);\r\n                        // fall-through\r\n\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.PropertyDeclaration:\r\n                    case SyntaxKind.Parameter:\r\n                        checkTypeAnnotationAsExpression(<PropertyDeclaration | ParameterDeclaration>node);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            emitDecorate = true;\r\n            if (node.kind === SyntaxKind.Parameter) {\r\n                emitParam = true;\r\n            }\r\n\r\n            forEach(node.decorators, checkDecorator);\r\n        }\r\n\r\n        function checkFunctionDeclaration(node: FunctionDeclaration): void {\r\n            if (produceDiagnostics) {\r\n                checkFunctionLikeDeclaration(node) ||\r\n                checkGrammarFunctionName(node.name) ||\r\n                checkGrammarForGenerator(node);\r\n\r\n                checkCollisionWithCapturedSuperVariable(node, node.name);\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            }\r\n        }\r\n\r\n        function checkFunctionLikeDeclaration(node: FunctionLikeDeclaration): void {\r\n            checkGrammarDeclarationNameInStrictMode(node);\r\n            checkDecorators(node);\r\n            checkSignatureDeclaration(node);\r\n\r\n            // Do not use hasDynamicName here, because that returns false for well known symbols.\r\n            // We want to perform checkComputedPropertyName for all computed properties, including\r\n            // well known symbols.\r\n            if (node.name && node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                // This check will account for methods in class/interface declarations,\r\n                // as well as accessors in classes/object literals\r\n                checkComputedPropertyName(<ComputedPropertyName>node.name);\r\n            }\r\n\r\n            if (!hasDynamicName(node)) {\r\n                // first we want to check the local symbol that contain this declaration\r\n                // - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol\r\n                // - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode\r\n                let symbol = getSymbolOfNode(node);\r\n                let localSymbol = node.localSymbol || symbol;\r\n\r\n                let firstDeclaration = getDeclarationOfKind(localSymbol, node.kind);\r\n                // Only type check the symbol once\r\n                if (node === firstDeclaration) {\r\n                    checkFunctionOrConstructorSymbol(localSymbol);\r\n                }\r\n\r\n                if (symbol.parent) {\r\n                    // run check once for the first declaration\r\n                    if (getDeclarationOfKind(symbol, node.kind) === node) {\r\n                        // run check on export symbol to check that modifiers agree across all exported declarations\r\n                        checkFunctionOrConstructorSymbol(symbol);\r\n                    }\r\n                }\r\n            }\r\n\r\n            checkSourceElement(node.body);\r\n            if (node.type && !isAccessor(node.kind) && !node.asteriskToken) {\r\n                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));\r\n            }\r\n\r\n            if (produceDiagnostics && !node.type) {\r\n                // Report an implicit any error if there is no body, no explicit return type, and node is not a private method\r\n                // in an ambient context\r\n                if (compilerOptions.noImplicitAny && nodeIsMissing(node.body) && !isPrivateWithinAmbient(node)) {\r\n                    reportImplicitAnyError(node, anyType);\r\n                }\r\n\r\n                if (node.asteriskToken && nodeIsPresent(node.body)) {\r\n                    // A generator with a body and no type annotation can still cause errors. It can error if the\r\n                    // yielded values have no common supertype, or it can give an implicit any error if it has no\r\n                    // yielded values. The only way to trigger these errors is to try checking its return type.\r\n                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkBlock(node: Block) {\r\n            // Grammar checking for SyntaxKind.Block\r\n            if (node.kind === SyntaxKind.Block) {\r\n                checkGrammarStatementInAmbientContext(node);\r\n            }\r\n\r\n            forEach(node.statements, checkSourceElement);\r\n            if (isFunctionBlock(node) || node.kind === SyntaxKind.ModuleBlock) {\r\n                checkFunctionExpressionBodies(node);\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithArgumentsInGeneratedCode(node: SignatureDeclaration) {\r\n            // no rest parameters \\ declaration context \\ overload - no codegen impact\r\n            if (!hasRestParameter(node) || isInAmbientContext(node) || nodeIsMissing((<FunctionLikeDeclaration>node).body)) {\r\n                return;\r\n            }\r\n\r\n            forEach(node.parameters, p => {\r\n                if (p.name && !isBindingPattern(p.name) && (<Identifier>p.name).text === argumentsSymbol.name) {\r\n                    error(p, Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);\r\n                }\r\n            });\r\n        }\r\n\r\n        function needCollisionCheckForIdentifier(node: Node, identifier: Identifier, name: string): boolean {\r\n            if (!(identifier && identifier.text === name)) {\r\n                return false;\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.PropertyDeclaration ||\r\n                node.kind === SyntaxKind.PropertySignature ||\r\n                node.kind === SyntaxKind.MethodDeclaration ||\r\n                node.kind === SyntaxKind.MethodSignature ||\r\n                node.kind === SyntaxKind.GetAccessor ||\r\n                node.kind === SyntaxKind.SetAccessor) {\r\n                // it is ok to have member named '_super' or '_this' - member access is always qualified\r\n                return false;\r\n            }\r\n\r\n            if (isInAmbientContext(node)) {\r\n                // ambient context - no codegen impact\r\n                return false;\r\n            }\r\n\r\n            let root = getRootDeclaration(node);\r\n            if (root.kind === SyntaxKind.Parameter && nodeIsMissing((<FunctionLikeDeclaration>root.parent).body)) {\r\n                // just an overload - no codegen impact\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function checkCollisionWithCapturedThisVariable(node: Node, name: Identifier): void {\r\n            if (needCollisionCheckForIdentifier(node, name, \"_this\")) {\r\n                potentialThisCollisions.push(node);\r\n            }\r\n        }\r\n\r\n        // this function will run after checking the source file so 'CaptureThis' is correct for all nodes\r\n        function checkIfThisIsCapturedInEnclosingScope(node: Node): void {\r\n            let current = node;\r\n            while (current) {\r\n                if (getNodeCheckFlags(current) & NodeCheckFlags.CaptureThis) {\r\n                    let isDeclaration = node.kind !== SyntaxKind.Identifier;\r\n                    if (isDeclaration) {\r\n                        error((<Declaration>node).name, Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);\r\n                    }\r\n                    else {\r\n                        error(node, Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);\r\n                    }\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithCapturedSuperVariable(node: Node, name: Identifier) {\r\n            if (!needCollisionCheckForIdentifier(node, name, \"_super\")) {\r\n                return;\r\n            }\r\n\r\n            // bubble up and find containing type\r\n            let enclosingClass = <ClassDeclaration>getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            // if containing type was not found or it is ambient - exit (no codegen)\r\n            if (!enclosingClass || isInAmbientContext(enclosingClass)) {\r\n                return;\r\n            }\r\n\r\n            if (getClassExtendsHeritageClauseElement(enclosingClass)) {\r\n                let isDeclaration = node.kind !== SyntaxKind.Identifier;\r\n                if (isDeclaration) {\r\n                    error(node, Diagnostics.Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference);\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithRequireExportsInGeneratedCode(node: Node, name: Identifier) {\r\n            if (!needCollisionCheckForIdentifier(node, name, \"require\") && !needCollisionCheckForIdentifier(node, name, \"exports\")) {\r\n                return;\r\n            }\r\n\r\n            // Uninstantiated modules shouldnt do this check\r\n            if (node.kind === SyntaxKind.ModuleDeclaration && getModuleInstanceState(node) !== ModuleInstanceState.Instantiated) {\r\n                return;\r\n            }\r\n\r\n            // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent\r\n            let parent = getDeclarationContainer(node);\r\n            if (parent.kind === SyntaxKind.SourceFile && isExternalModule(<SourceFile>parent)) {\r\n                // If the declaration happens to be in external module, report error that require and exports are reserved keywords\r\n                error(name, Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module,\r\n                    declarationNameToString(name), declarationNameToString(name));\r\n            }\r\n        }\r\n\r\n        function checkVarDeclaredNamesNotShadowed(node: VariableDeclaration | BindingElement) {\r\n            // - ScriptBody : StatementList\r\n            // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList\r\n            // also occurs in the VarDeclaredNames of StatementList.\r\n\r\n            // - Block : { StatementList }\r\n            // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList\r\n            // also occurs in the VarDeclaredNames of StatementList.\r\n\r\n            // Variable declarations are hoisted to the top of their function scope. They can shadow\r\n            // block scoped declarations, which bind tighter. this will not be flagged as duplicate definition\r\n            // by the binder as the declaration scope is different.\r\n            // A non-initialized declaration is a no-op as the block declaration will resolve before the var\r\n            // declaration. the problem is if the declaration has an initializer. this will act as a write to the\r\n            // block declared value. this is fine for let, but not const.\r\n            // Only consider declarations with initializers, uninitialized let declarations will not\r\n            // step on a let/const variable.\r\n            // Do not consider let and const declarations, as duplicate block-scoped declarations\r\n            // are handled by the binder.\r\n            // We are only looking for let declarations that step on let\\const declarations from a\r\n            // different scope. e.g.:\r\n            //      {\r\n            //          const x = 0; // localDeclarationSymbol obtained after name resolution will correspond to this declaration\r\n            //          let x = 0; // symbol for this declaration will be 'symbol'\r\n            //      }\r\n\r\n            // skip block-scoped variables and parameters\r\n            if ((getCombinedNodeFlags(node) & NodeFlags.BlockScoped) !== 0 || isParameterDeclaration(node)) {\r\n                return;\r\n            }\r\n\r\n            // skip variable declarations that don't have initializers\r\n            // NOTE: in ES6 spec initializer is required in variable declarations where name is binding pattern\r\n            // so we'll always treat binding elements as initialized\r\n            if (node.kind === SyntaxKind.VariableDeclaration && !node.initializer) {\r\n                return;\r\n            }\r\n\r\n            var symbol = getSymbolOfNode(node);\r\n            if (symbol.flags & SymbolFlags.FunctionScopedVariable) {\r\n                let localDeclarationSymbol = resolveName(node, (<Identifier>node.name).text, SymbolFlags.Variable, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined);\r\n                if (localDeclarationSymbol &&\r\n                    localDeclarationSymbol !== symbol &&\r\n                    localDeclarationSymbol.flags & SymbolFlags.BlockScopedVariable) {\r\n                    if (getDeclarationFlagsFromSymbol(localDeclarationSymbol) & NodeFlags.BlockScoped) {\r\n                        let varDeclList = getAncestor(localDeclarationSymbol.valueDeclaration, SyntaxKind.VariableDeclarationList);\r\n                        let container =\r\n                            varDeclList.parent.kind === SyntaxKind.VariableStatement && varDeclList.parent.parent\r\n                                ? varDeclList.parent.parent\r\n                                : undefined;\r\n\r\n                        // names of block-scoped and function scoped variables can collide only\r\n                        // if block scoped variable is defined in the function\\module\\source file scope (because of variable hoisting)\r\n                        let namesShareScope =\r\n                            container &&\r\n                            (container.kind === SyntaxKind.Block && isFunctionLike(container.parent) ||\r\n                                container.kind === SyntaxKind.ModuleBlock ||\r\n                                container.kind === SyntaxKind.ModuleDeclaration ||\r\n                                container.kind === SyntaxKind.SourceFile);\r\n\r\n                        // here we know that function scoped variable is shadowed by block scoped one\r\n                        // if they are defined in the same scope - binder has already reported redeclaration error\r\n                        // otherwise if variable has an initializer - show error that initialization will fail\r\n                        // since LHS will be block scoped name instead of function scoped\r\n                        if (!namesShareScope) {\r\n                            let name = symbolToString(localDeclarationSymbol);\r\n                            error(node, Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name, name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check that a parameter initializer contains no references to parameters declared to the right of itself\r\n        function checkParameterInitializer(node: VariableLikeDeclaration): void {\r\n            if (getRootDeclaration(node).kind !== SyntaxKind.Parameter) {\r\n                return;\r\n            }\r\n\r\n            let func = getContainingFunction(node);\r\n            visit(node.initializer);\r\n\r\n            function visit(n: Node) {\r\n                if (n.kind === SyntaxKind.Identifier) {\r\n                    let referencedSymbol = getNodeLinks(n).resolvedSymbol;\r\n                    // check FunctionLikeDeclaration.locals (stores parameters\\function local variable)\r\n                    // if it contains entry with a specified name and if this entry matches the resolved symbol\r\n                    if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(func.locals, referencedSymbol.name, SymbolFlags.Value) === referencedSymbol) {\r\n                        if (referencedSymbol.valueDeclaration.kind === SyntaxKind.Parameter) {\r\n                            if (referencedSymbol.valueDeclaration === node) {\r\n                                error(n, Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, declarationNameToString(node.name));\r\n                                return;\r\n                            }\r\n                            if (referencedSymbol.valueDeclaration.pos < node.pos) {\r\n                                // legal case - parameter initializer references some parameter strictly on left of current parameter declaration\r\n                                return;\r\n                            }\r\n                            // fall through to error reporting\r\n                        }\r\n                        error(n, Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, declarationNameToString(node.name), declarationNameToString(<Identifier>n));\r\n                    }\r\n                }\r\n                else {\r\n                    forEachChild(n, visit);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check variable, parameter, or property declaration\r\n        function checkVariableLikeDeclaration(node: VariableLikeDeclaration) {\r\n            checkGrammarDeclarationNameInStrictMode(node);\r\n            checkDecorators(node);\r\n            checkSourceElement(node.type);\r\n            // For a computed property, just check the initializer and exit\r\n            // Do not use hasDynamicName here, because that returns false for well known symbols.\r\n            // We want to perform checkComputedPropertyName for all computed properties, including\r\n            // well known symbols.\r\n            if (node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                checkComputedPropertyName(<ComputedPropertyName>node.name);\r\n                if (node.initializer) {\r\n                    checkExpressionCached(node.initializer);\r\n                }\r\n            }\r\n            // For a binding pattern, check contained binding elements\r\n            if (isBindingPattern(node.name)) {\r\n                forEach((<BindingPattern>node.name).elements, checkSourceElement);\r\n            }\r\n            // For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body\r\n            if (node.initializer && getRootDeclaration(node).kind === SyntaxKind.Parameter && nodeIsMissing(getContainingFunction(node).body)) {\r\n                error(node, Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);\r\n                return;\r\n            }\r\n            // For a binding pattern, validate the initializer and exit\r\n            if (isBindingPattern(node.name)) {\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), getWidenedTypeForVariableLikeDeclaration(node), node, /*headMessage*/ undefined);\r\n                    checkParameterInitializer(node);\r\n                }\r\n                return;\r\n            }\r\n            let symbol = getSymbolOfNode(node);\r\n            let type = getTypeOfVariableOrParameterOrProperty(symbol);\r\n            if (node === symbol.valueDeclaration) {\r\n                // Node is the primary declaration of the symbol, just validate the initializer\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), type, node, /*headMessage*/ undefined);\r\n                    checkParameterInitializer(node);\r\n                }\r\n            }\r\n            else {\r\n                // Node is a secondary declaration, check that type is identical to primary declaration and check that\r\n                // initializer is consistent with type associated with the node\r\n                let declarationType = getWidenedTypeForVariableLikeDeclaration(node);\r\n                if (type !== unknownType && declarationType !== unknownType && !isTypeIdenticalTo(type, declarationType)) {\r\n                    error(node.name, Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, declarationNameToString(node.name), typeToString(type), typeToString(declarationType));\r\n                }\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), declarationType, node, /*headMessage*/ undefined);\r\n                }\r\n            }\r\n            if (node.kind !== SyntaxKind.PropertyDeclaration && node.kind !== SyntaxKind.PropertySignature) {\r\n                // We know we don't have a binding pattern or computed name here\r\n                checkExportsOnMergedDeclarations(node);\r\n                if (node.kind === SyntaxKind.VariableDeclaration || node.kind === SyntaxKind.BindingElement) {\r\n                    checkVarDeclaredNamesNotShadowed(<VariableDeclaration | BindingElement>node);\r\n                }\r\n                checkCollisionWithCapturedSuperVariable(node, <Identifier>node.name);\r\n                checkCollisionWithCapturedThisVariable(node, <Identifier>node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, <Identifier>node.name);\r\n            }\r\n        }\r\n\r\n        function checkVariableDeclaration(node: VariableDeclaration) {\r\n            checkGrammarVariableDeclaration(node);\r\n            return checkVariableLikeDeclaration(node);\r\n        }\r\n\r\n        function checkBindingElement(node: BindingElement) {\r\n            checkGrammarBindingElement(<BindingElement>node);\r\n            return checkVariableLikeDeclaration(node);\r\n        }\r\n\r\n        function checkVariableStatement(node: VariableStatement) {\r\n            // Grammar checking\r\n            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarVariableDeclarationList(node.declarationList) || checkGrammarForDisallowedLetOrConstStatement(node);\r\n\r\n            forEach(node.declarationList.declarations, checkSourceElement);\r\n        }\r\n\r\n        function checkGrammarDisallowedModifiersInBlockOrObjectLiteralExpression(node: Node) {\r\n            if (node.modifiers) {\r\n                if (inBlockOrObjectLiteralExpression(node)) {\r\n                    return grammarErrorOnFirstToken(node, Diagnostics.Modifiers_cannot_appear_here);\r\n                }\r\n            }\r\n        }\r\n\r\n        function inBlockOrObjectLiteralExpression(node: Node) {\r\n            while (node) {\r\n                if (node.kind === SyntaxKind.Block || node.kind === SyntaxKind.ObjectLiteralExpression) {\r\n                    return true;\r\n                }\r\n\r\n                node = node.parent;\r\n            }\r\n        }\r\n\r\n        function checkExpressionStatement(node: ExpressionStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node)\r\n\r\n            checkExpression(node.expression);\r\n        }\r\n\r\n        function checkIfStatement(node: IfStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node);\r\n\r\n            checkExpression(node.expression);\r\n            checkSourceElement(node.thenStatement);\r\n            checkSourceElement(node.elseStatement);\r\n        }\r\n\r\n        function checkDoStatement(node: DoStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node);\r\n\r\n            checkSourceElement(node.statement);\r\n            checkExpression(node.expression);\r\n        }\r\n\r\n        function checkWhileStatement(node: WhileStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node);\r\n\r\n            checkExpression(node.expression);\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForStatement(node: ForStatement) {\r\n            // Grammar checking\r\n            if (!checkGrammarStatementInAmbientContext(node)) {\r\n                if (node.initializer && node.initializer.kind == SyntaxKind.VariableDeclarationList) {\r\n                    checkGrammarVariableDeclarationList(<VariableDeclarationList>node.initializer);\r\n                }\r\n            }\r\n\r\n            if (node.initializer) {\r\n                if (node.initializer.kind === SyntaxKind.VariableDeclarationList) {\r\n                    forEach((<VariableDeclarationList>node.initializer).declarations, checkVariableDeclaration)\r\n                }\r\n                else {\r\n                    checkExpression(<Expression>node.initializer)\r\n                }\r\n            }\r\n\r\n            if (node.condition) checkExpression(node.condition);\r\n            if (node.incrementor) checkExpression(node.incrementor);\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForOfStatement(node: ForOfStatement): void {\r\n            checkGrammarForInOrForOfStatement(node)\r\n\r\n            // Check the LHS and RHS\r\n            // If the LHS is a declaration, just check it as a variable declaration, which will in turn check the RHS\r\n            // via checkRightHandSideOfForOf.\r\n            // If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.\r\n            // Then check that the RHS is assignable to it.\r\n            if (node.initializer.kind === SyntaxKind.VariableDeclarationList) {\r\n                checkForInOrForOfVariableDeclaration(node);\r\n            }\r\n            else {\r\n                let varExpr = <Expression>node.initializer;\r\n                let iteratedType = checkRightHandSideOfForOf(node.expression);\r\n\r\n                // There may be a destructuring assignment on the left side\r\n                if (varExpr.kind === SyntaxKind.ArrayLiteralExpression || varExpr.kind === SyntaxKind.ObjectLiteralExpression) {\r\n                    // iteratedType may be undefined. In this case, we still want to check the structure of\r\n                    // varExpr, in particular making sure it's a valid LeftHandSideExpression. But we'd like\r\n                    // to short circuit the type relation checking as much as possible, so we pass the unknownType.\r\n                    checkDestructuringAssignment(varExpr, iteratedType || unknownType);\r\n                }\r\n                else {\r\n                    let leftType = checkExpression(varExpr);\r\n                    checkReferenceExpression(varExpr, /*invalidReferenceMessage*/ Diagnostics.Invalid_left_hand_side_in_for_of_statement,\r\n                        /*constantVariableMessage*/ Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant);\r\n\r\n                    // iteratedType will be undefined if the rightType was missing properties/signatures\r\n                    // required to get its iteratedType (like [Symbol.iterator] or next). This may be\r\n                    // because we accessed properties from anyType, or it may have led to an error inside\r\n                    // getElementTypeOfIterable.\r\n                    if (iteratedType) {\r\n                        checkTypeAssignableTo(iteratedType, leftType, varExpr, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n            }\r\n\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForInStatement(node: ForInStatement) {\r\n            // Grammar checking\r\n            checkGrammarForInOrForOfStatement(node);\r\n\r\n            // TypeScript 1.0 spec  (April 2014): 5.4\r\n            // In a 'for-in' statement of the form\r\n            // for (let VarDecl in Expr) Statement\r\n            //   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,\r\n            //   and Expr must be an expression of type Any, an object type, or a type parameter type.\r\n            if (node.initializer.kind === SyntaxKind.VariableDeclarationList) {\r\n                let variable = (<VariableDeclarationList>node.initializer).declarations[0];\r\n                if (variable && isBindingPattern(variable.name)) {\r\n                    error(variable.name, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);\r\n                }\r\n\r\n                checkForInOrForOfVariableDeclaration(node);\r\n            }\r\n            else {\r\n                // In a 'for-in' statement of the form\r\n                // for (Var in Expr) Statement\r\n                //   Var must be an expression classified as a reference of type Any or the String primitive type,\r\n                //   and Expr must be an expression of type Any, an object type, or a type parameter type.\r\n                let varExpr = <Expression>node.initializer;\r\n                let leftType = checkExpression(varExpr);\r\n                if (varExpr.kind === SyntaxKind.ArrayLiteralExpression || varExpr.kind === SyntaxKind.ObjectLiteralExpression) {\r\n                    error(varExpr, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);\r\n                }\r\n                else if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, TypeFlags.StringLike)) {\r\n                    error(varExpr, Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);\r\n                }\r\n                else {\r\n                    // run check only former check succeeded to avoid cascading errors\r\n                    checkReferenceExpression(varExpr, Diagnostics.Invalid_left_hand_side_in_for_in_statement, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant);\r\n                }\r\n            }\r\n\r\n            let rightType = checkExpression(node.expression);\r\n            // unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved\r\n            // in this case error about missing name is already reported - do not report extra one\r\n            if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, TypeFlags.ObjectType | TypeFlags.TypeParameter)) {\r\n                error(node.expression, Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForInOrForOfVariableDeclaration(iterationStatement: ForInStatement | ForOfStatement): void {\r\n            let variableDeclarationList = <VariableDeclarationList>iterationStatement.initializer;\r\n            // checkGrammarForInOrForOfStatement will check that there is exactly one declaration.\r\n            if (variableDeclarationList.declarations.length >= 1) {\r\n                let decl = variableDeclarationList.declarations[0];\r\n                checkVariableDeclaration(decl);\r\n            }\r\n        }\r\n\r\n        function checkRightHandSideOfForOf(rhsExpression: Expression): Type {\r\n            let expressionType = getTypeOfExpression(rhsExpression);\r\n            return checkIteratedTypeOrElementType(expressionType, rhsExpression, /*allowStringInput*/ true);\r\n        }\r\n\r\n        function checkIteratedTypeOrElementType(inputType: Type, errorNode: Node, allowStringInput: boolean): Type {\r\n            if (isTypeAny(inputType)) {\r\n                return inputType;\r\n            }\r\n\r\n            if (languageVersion >= ScriptTarget.ES6) {\r\n                return checkElementTypeOfIterable(inputType, errorNode);\r\n            }\r\n\r\n            if (allowStringInput) {\r\n                return checkElementTypeOfArrayOrString(inputType, errorNode);\r\n            }\r\n            \r\n            if (isArrayLikeType(inputType)) {\r\n                let indexType = getIndexTypeOfType(inputType, IndexKind.Number);\r\n                if (indexType) {\r\n                    return indexType;\r\n                }\r\n            }\r\n\r\n            error(errorNode, Diagnostics.Type_0_is_not_an_array_type, typeToString(inputType));\r\n            return unknownType;\r\n        }\r\n\r\n        /**\r\n         * When errorNode is undefined, it means we should not report any errors.\r\n         */\r\n        function checkElementTypeOfIterable(iterable: Type, errorNode: Node): Type {\r\n            let elementType = getElementTypeOfIterable(iterable, errorNode);\r\n            // Now even though we have extracted the iteratedType, we will have to validate that the type\r\n            // passed in is actually an Iterable.\r\n            if (errorNode && elementType) {\r\n                checkTypeAssignableTo(iterable, createIterableType(elementType), errorNode);\r\n            }\r\n\r\n            return elementType || anyType;\r\n        }\r\n        \r\n        /**\r\n         * We want to treat type as an iterable, and get the type it is an iterable of. The iterable\r\n         * must have the following structure (annotated with the names of the variables below):\r\n         *\r\n         * { // iterable\r\n         *     [Symbol.iterator]: { // iteratorFunction\r\n         *         (): Iterator<T>\r\n         *     }\r\n         * }\r\n         *\r\n         * T is the type we are after. At every level that involves analyzing return types\r\n         * of signatures, we union the return types of all the signatures.\r\n         *\r\n         * Another thing to note is that at any step of this process, we could run into a dead end,\r\n         * meaning either the property is missing, or we run into the anyType. If either of these things\r\n         * happens, we return undefined to signal that we could not find the iterated type. If a property\r\n         * is missing, and the previous step did not result in 'any', then we also give an error if the\r\n         * caller requested it. Then the caller can decide what to do in the case where there is no iterated\r\n         * type. This is different from returning anyType, because that would signify that we have matched the\r\n         * whole pattern and that T (above) is 'any'.\r\n         */\r\n        function getElementTypeOfIterable(type: Type, errorNode: Node): Type {\r\n            if (isTypeAny(type)) {\r\n                return undefined;\r\n            }\r\n\r\n            let typeAsIterable = <IterableOrIteratorType>type;\r\n            if (!typeAsIterable.iterableElementType) {\r\n                // As an optimization, if the type is instantiated directly using the globalIterableType (Iterable<number>),\r\n                // then just grab its type argument.\r\n                if ((type.flags & TypeFlags.Reference) && (<GenericType>type).target === globalIterableType) {\r\n                    typeAsIterable.iterableElementType = (<GenericType>type).typeArguments[0];\r\n                }\r\n                else {\r\n                    let iteratorFunction = getTypeOfPropertyOfType(type, getPropertyNameForKnownSymbolName(\"iterator\"));\r\n                    if (isTypeAny(iteratorFunction)) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let iteratorFunctionSignatures = iteratorFunction ? getSignaturesOfType(iteratorFunction, SignatureKind.Call) : emptyArray;\r\n                    if (iteratorFunctionSignatures.length === 0) {\r\n                        if (errorNode) {\r\n                            error(errorNode, Diagnostics.Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator);\r\n                        }\r\n                        return undefined;\r\n                    }\r\n\r\n                    typeAsIterable.iterableElementType = getElementTypeOfIterator(getUnionType(map(iteratorFunctionSignatures, getReturnTypeOfSignature)), errorNode);\r\n                }\r\n            }\r\n\r\n            return typeAsIterable.iterableElementType;\r\n        }\r\n\r\n        /**\r\n         * This function has very similar logic as getElementTypeOfIterable, except that it operates on\r\n         * Iterators instead of Iterables. Here is the structure:\r\n         *\r\n         *  { // iterator\r\n         *      next: { // iteratorNextFunction\r\n         *          (): { // iteratorNextResult\r\n         *              value: T // iteratorNextValue\r\n         *          }\r\n         *      }\r\n         *  }\r\n         *\r\n         */\r\n        function getElementTypeOfIterator(type: Type, errorNode: Node): Type {\r\n            if (isTypeAny(type)) {\r\n                return undefined;\r\n            }\r\n\r\n            let typeAsIterator = <IterableOrIteratorType>type;\r\n            if (!typeAsIterator.iteratorElementType) {\r\n                // As an optimization, if the type is instantiated directly using the globalIteratorType (Iterator<number>),\r\n                // then just grab its type argument.\r\n                if ((type.flags & TypeFlags.Reference) && (<GenericType>type).target === globalIteratorType) {\r\n                    typeAsIterator.iteratorElementType = (<GenericType>type).typeArguments[0];\r\n                }\r\n                else {\r\n                    let iteratorNextFunction = getTypeOfPropertyOfType(type, \"next\");\r\n                    if (isTypeAny(iteratorNextFunction)) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let iteratorNextFunctionSignatures = iteratorNextFunction ? getSignaturesOfType(iteratorNextFunction, SignatureKind.Call) : emptyArray;\r\n                    if (iteratorNextFunctionSignatures.length === 0) {\r\n                        if (errorNode) {\r\n                            error(errorNode, Diagnostics.An_iterator_must_have_a_next_method);\r\n                        }\r\n                        return undefined;\r\n                    }\r\n\r\n                    let iteratorNextResult = getUnionType(map(iteratorNextFunctionSignatures, getReturnTypeOfSignature));\r\n                    if (isTypeAny(iteratorNextResult)) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    let iteratorNextValue = getTypeOfPropertyOfType(iteratorNextResult, \"value\");\r\n                    if (!iteratorNextValue) {\r\n                        if (errorNode) {\r\n                            error(errorNode, Diagnostics.The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property);\r\n                        }\r\n                        return undefined;\r\n                    }\r\n\r\n                    typeAsIterator.iteratorElementType = iteratorNextValue;\r\n                }\r\n            }\r\n\r\n            return typeAsIterator.iteratorElementType;\r\n        }\r\n\r\n        function getElementTypeOfIterableIterator(type: Type): Type {\r\n            if (isTypeAny(type)) {\r\n                return undefined;\r\n            }\r\n\r\n            // As an optimization, if the type is instantiated directly using the globalIterableIteratorType (IterableIterator<number>),\r\n            // then just grab its type argument.\r\n            if ((type.flags & TypeFlags.Reference) && (<GenericType>type).target === globalIterableIteratorType) {\r\n                return (<GenericType>type).typeArguments[0];\r\n            }\r\n\r\n            return getElementTypeOfIterable(type, /*errorNode*/ undefined) ||\r\n                getElementTypeOfIterator(type, /*errorNode*/ undefined);\r\n        }\r\n\r\n        /**\r\n         * This function does the following steps:\r\n         *   1. Break up arrayOrStringType (possibly a union) into its string constituents and array constituents.\r\n         *   2. Take the element types of the array constituents.\r\n         *   3. Return the union of the element types, and string if there was a string constitutent.\r\n         *\r\n         * For example:\r\n         *     string -> string\r\n         *     number[] -> number\r\n         *     string[] | number[] -> string | number\r\n         *     string | number[] -> string | number\r\n         *     string | string[] | number[] -> string | number\r\n         *\r\n         * It also errors if:\r\n         *   1. Some constituent is neither a string nor an array.\r\n         *   2. Some constituent is a string and target is less than ES5 (because in ES3 string is not indexable).\r\n         */\r\n        function checkElementTypeOfArrayOrString(arrayOrStringType: Type, errorNode: Node): Type {\r\n            Debug.assert(languageVersion < ScriptTarget.ES6);\r\n\r\n            // After we remove all types that are StringLike, we will know if there was a string constituent\r\n            // based on whether the remaining type is the same as the initial type.\r\n            let arrayType = removeTypesFromUnionType(arrayOrStringType, TypeFlags.StringLike, /*isTypeOfKind*/ true, /*allowEmptyUnionResult*/ true);\r\n            let hasStringConstituent = arrayOrStringType !== arrayType;\r\n\r\n            let reportedError = false;\r\n            if (hasStringConstituent) {\r\n                if (languageVersion < ScriptTarget.ES5) {\r\n                    error(errorNode, Diagnostics.Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher);\r\n                    reportedError = true;\r\n                }\r\n\r\n                // Now that we've removed all the StringLike types, if no constituents remain, then the entire\r\n                // arrayOrStringType was a string.\r\n                if (arrayType === emptyObjectType) {\r\n                    return stringType;\r\n                }\r\n            }\r\n\r\n            if (!isArrayLikeType(arrayType)) {\r\n                if (!reportedError) {\r\n                    // Which error we report depends on whether there was a string constituent. For example,\r\n                    // if the input type is number | string, we want to say that number is not an array type.\r\n                    // But if the input was just number, we want to say that number is not an array type\r\n                    // or a string type.\r\n                    let diagnostic = hasStringConstituent\r\n                        ? Diagnostics.Type_0_is_not_an_array_type\r\n                        : Diagnostics.Type_0_is_not_an_array_type_or_a_string_type;\r\n                    error(errorNode, diagnostic, typeToString(arrayType));\r\n                }\r\n                return hasStringConstituent ? stringType : unknownType;\r\n            }\r\n\r\n            let arrayElementType = getIndexTypeOfType(arrayType, IndexKind.Number) || unknownType;\r\n            if (hasStringConstituent) {\r\n                // This is just an optimization for the case where arrayOrStringType is string | string[]\r\n                if (arrayElementType.flags & TypeFlags.StringLike) {\r\n                    return stringType;\r\n                }\r\n\r\n                return getUnionType([arrayElementType, stringType]);\r\n            }\r\n\r\n            return arrayElementType;\r\n        }\r\n\r\n        function checkBreakOrContinueStatement(node: BreakOrContinueStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node) || checkGrammarBreakOrContinueStatement(node);\r\n\r\n            // TODO: Check that target label is valid\r\n        }\r\n\r\n        function isGetAccessorWithAnnotatatedSetAccessor(node: FunctionLikeDeclaration) {\r\n            return !!(node.kind === SyntaxKind.GetAccessor && getSetAccessorTypeAnnotationNode(<AccessorDeclaration>getDeclarationOfKind(node.symbol, SyntaxKind.SetAccessor)));\r\n        }\r\n\r\n        function checkReturnStatement(node: ReturnStatement) {\r\n            // Grammar checking\r\n            if (!checkGrammarStatementInAmbientContext(node)) {\r\n                let functionBlock = getContainingFunction(node);\r\n                if (!functionBlock) {\r\n                    grammarErrorOnFirstToken(node, Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);\r\n                }\r\n            }\r\n\r\n            if (node.expression) {\r\n                let func = getContainingFunction(node);\r\n                if (func) {\r\n                    let signature = getSignatureFromDeclaration(func);\r\n                    let returnType = getReturnTypeOfSignature(signature);\r\n                    let exprType = checkExpressionCached(node.expression);\r\n\r\n                    if (func.asteriskToken) {\r\n                        // A generator does not need its return expressions checked against its return type.\r\n                        // Instead, the yield expressions are checked against the element type.\r\n                        // TODO: Check return expressions of generators when return type tracking is added\r\n                        // for generators.\r\n                        return;\r\n                    }\r\n\r\n                    if (func.kind === SyntaxKind.SetAccessor) {\r\n                        error(node.expression, Diagnostics.Setters_cannot_return_a_value);\r\n                    }\r\n                    else if (func.kind === SyntaxKind.Constructor) {\r\n                        if (!isTypeAssignableTo(exprType, returnType)) {\r\n                            error(node.expression, Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);\r\n                        }\r\n                    }\r\n                    else if (func.type || isGetAccessorWithAnnotatatedSetAccessor(func) || signature.typePredicate) {\r\n                        checkTypeAssignableTo(exprType, returnType, node.expression, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkWithStatement(node: WithStatement) {\r\n            // Grammar checking for withStatement\r\n            if (!checkGrammarStatementInAmbientContext(node)) {\r\n                if (node.parserContextFlags & ParserContextFlags.StrictMode) {\r\n                    grammarErrorOnFirstToken(node, Diagnostics.with_statements_are_not_allowed_in_strict_mode);\r\n                }\r\n            }\r\n\r\n            checkExpression(node.expression);\r\n            error(node.expression, Diagnostics.All_symbols_within_a_with_block_will_be_resolved_to_any);\r\n        }\r\n\r\n        function checkSwitchStatement(node: SwitchStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node);\r\n\r\n            let firstDefaultClause: CaseOrDefaultClause;\r\n            let hasDuplicateDefaultClause = false;\r\n\r\n            let expressionType = checkExpression(node.expression);\r\n            forEach(node.caseBlock.clauses, clause => {\r\n                // Grammar check for duplicate default clauses, skip if we already report duplicate default clause\r\n                if (clause.kind === SyntaxKind.DefaultClause && !hasDuplicateDefaultClause) {\r\n                    if (firstDefaultClause === undefined) {\r\n                        firstDefaultClause = clause;\r\n                    }\r\n                    else {\r\n                        let sourceFile = getSourceFileOfNode(node);\r\n                        let start = skipTrivia(sourceFile.text, clause.pos);\r\n                        let end = clause.statements.length > 0 ? clause.statements[0].pos : clause.end;\r\n                        grammarErrorAtPos(sourceFile, start, end - start, Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);\r\n                        hasDuplicateDefaultClause = true;\r\n                    }\r\n                }\r\n\r\n                if (produceDiagnostics && clause.kind === SyntaxKind.CaseClause) {\r\n                    let caseClause = <CaseClause>clause;\r\n                    // TypeScript 1.0 spec (April 2014):5.9\r\n                    // In a 'switch' statement, each 'case' expression must be of a type that is assignable to or from the type of the 'switch' expression.\r\n                    let caseType = checkExpression(caseClause.expression);\r\n                    if (!isTypeAssignableTo(expressionType, caseType)) {\r\n                        // check 'expressionType isAssignableTo caseType' failed, try the reversed check and report errors if it fails\r\n                        checkTypeAssignableTo(caseType, expressionType, caseClause.expression, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n                forEach(clause.statements, checkSourceElement);\r\n            });\r\n        }\r\n\r\n        function checkLabeledStatement(node: LabeledStatement) {\r\n            // Grammar checking\r\n            if (!checkGrammarStatementInAmbientContext(node)) {\r\n                let current = node.parent;\r\n                while (current) {\r\n                    if (isFunctionLike(current)) {\r\n                        break;\r\n                    }\r\n                    if (current.kind === SyntaxKind.LabeledStatement && (<LabeledStatement>current).label.text === node.label.text) {\r\n                        let sourceFile = getSourceFileOfNode(node);\r\n                        grammarErrorOnNode(node.label, Diagnostics.Duplicate_label_0, getTextOfNodeFromSourceText(sourceFile.text, node.label));\r\n                        break;\r\n                    }\r\n                    current = current.parent;\r\n                }\r\n            }\r\n\r\n            // ensure that label is unique\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkThrowStatement(node: ThrowStatement) {\r\n            // Grammar checking\r\n            if (!checkGrammarStatementInAmbientContext(node)) {\r\n                if (node.expression === undefined) {\r\n                    grammarErrorAfterFirstToken(node, Diagnostics.Line_break_not_permitted_here);\r\n                }\r\n            }\r\n\r\n            if (node.expression) {\r\n                checkExpression(node.expression);\r\n            }\r\n        }\r\n\r\n        function checkTryStatement(node: TryStatement) {\r\n            // Grammar checking\r\n            checkGrammarStatementInAmbientContext(node);\r\n\r\n            checkBlock(node.tryBlock);\r\n            let catchClause = node.catchClause;\r\n            if (catchClause) {\r\n                // Grammar checking\r\n                if (catchClause.variableDeclaration) {\r\n                    if (catchClause.variableDeclaration.name.kind !== SyntaxKind.Identifier) {\r\n                        grammarErrorOnFirstToken(catchClause.variableDeclaration.name, Diagnostics.Catch_clause_variable_name_must_be_an_identifier);\r\n                    }\r\n                    else if (catchClause.variableDeclaration.type) {\r\n                        grammarErrorOnFirstToken(catchClause.variableDeclaration.type, Diagnostics.Catch_clause_variable_cannot_have_a_type_annotation);\r\n                    }\r\n                    else if (catchClause.variableDeclaration.initializer) {\r\n                        grammarErrorOnFirstToken(catchClause.variableDeclaration.initializer, Diagnostics.Catch_clause_variable_cannot_have_an_initializer);\r\n                    }\r\n                    else {\r\n                        let identifierName = (<Identifier>catchClause.variableDeclaration.name).text;\r\n                        let locals = catchClause.block.locals;\r\n                        if (locals && hasProperty(locals, identifierName)) {\r\n                            let localSymbol = locals[identifierName]\r\n                            if (localSymbol && (localSymbol.flags & SymbolFlags.BlockScopedVariable) !== 0) {\r\n                                grammarErrorOnNode(localSymbol.valueDeclaration, Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, identifierName);\r\n                            }\r\n                        }\r\n\r\n                        // It is a SyntaxError if a TryStatement with a Catch occurs within strict code and the Identifier of the\r\n                        // Catch production is eval or arguments\r\n                        checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>catchClause.variableDeclaration.name);\r\n                    }\r\n                }\r\n\r\n                checkBlock(catchClause.block);\r\n            }\r\n\r\n            if (node.finallyBlock) {\r\n                checkBlock(node.finallyBlock);\r\n            }\r\n        }\r\n\r\n        function checkIndexConstraints(type: Type) {\r\n            let declaredNumberIndexer = getIndexDeclarationOfSymbol(type.symbol, IndexKind.Number);\r\n            let declaredStringIndexer = getIndexDeclarationOfSymbol(type.symbol, IndexKind.String);\r\n\r\n            let stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n            let numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n\r\n            if (stringIndexType || numberIndexType) {\r\n                forEach(getPropertiesOfObjectType(type), prop => {\r\n                    let propType = getTypeOfSymbol(prop);\r\n                    checkIndexConstraintForProperty(prop, propType, type, declaredStringIndexer, stringIndexType, IndexKind.String);\r\n                    checkIndexConstraintForProperty(prop, propType, type, declaredNumberIndexer, numberIndexType, IndexKind.Number);\r\n                });\r\n\r\n                if (type.flags & TypeFlags.Class && type.symbol.valueDeclaration.kind === SyntaxKind.ClassDeclaration) {\r\n                    let classDeclaration = <ClassDeclaration>type.symbol.valueDeclaration;\r\n                    for (let member of classDeclaration.members) {\r\n                        // Only process instance properties with computed names here.\r\n                        // Static properties cannot be in conflict with indexers,\r\n                        // and properties with literal names were already checked.\r\n                        if (!(member.flags & NodeFlags.Static) && hasDynamicName(member)) {\r\n                            let propType = getTypeOfSymbol(member.symbol);\r\n                            checkIndexConstraintForProperty(member.symbol, propType, type, declaredStringIndexer, stringIndexType, IndexKind.String);\r\n                            checkIndexConstraintForProperty(member.symbol, propType, type, declaredNumberIndexer, numberIndexType, IndexKind.Number);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let errorNode: Node;\r\n            if (stringIndexType && numberIndexType) {\r\n                errorNode = declaredNumberIndexer || declaredStringIndexer;\r\n                // condition 'errorNode === undefined' may appear if types does not declare nor string neither number indexer\r\n                if (!errorNode && (type.flags & TypeFlags.Interface)) {\r\n                    let someBaseTypeHasBothIndexers = forEach(getBaseTypes(<InterfaceType>type), base => getIndexTypeOfType(base, IndexKind.String) && getIndexTypeOfType(base, IndexKind.Number));\r\n                    errorNode = someBaseTypeHasBothIndexers ? undefined : type.symbol.declarations[0];\r\n                }\r\n            }\r\n\r\n            if (errorNode && !isTypeAssignableTo(numberIndexType, stringIndexType)) {\r\n                error(errorNode, Diagnostics.Numeric_index_type_0_is_not_assignable_to_string_index_type_1,\r\n                    typeToString(numberIndexType), typeToString(stringIndexType));\r\n            }\r\n\r\n            function checkIndexConstraintForProperty(\r\n                prop: Symbol,\r\n                propertyType: Type,\r\n                containingType: Type,\r\n                indexDeclaration: Declaration,\r\n                indexType: Type,\r\n                indexKind: IndexKind): void {\r\n\r\n                if (!indexType) {\r\n                    return;\r\n                }\r\n\r\n                // index is numeric and property name is not valid numeric literal\r\n                if (indexKind === IndexKind.Number && !isNumericName(prop.valueDeclaration.name)) {\r\n                    return;\r\n                }\r\n\r\n                // perform property check if property or indexer is declared in 'type'\r\n                // this allows to rule out cases when both property and indexer are inherited from the base class\r\n                let errorNode: Node;\r\n                if (prop.valueDeclaration.name.kind === SyntaxKind.ComputedPropertyName || prop.parent === containingType.symbol) {\r\n                    errorNode = prop.valueDeclaration;\r\n                }\r\n                else if (indexDeclaration) {\r\n                    errorNode = indexDeclaration;\r\n                }\r\n                else if (containingType.flags & TypeFlags.Interface) {\r\n                    // for interfaces property and indexer might be inherited from different bases\r\n                    // check if any base class already has both property and indexer.\r\n                    // check should be performed only if 'type' is the first type that brings property\\indexer together\r\n                    let someBaseClassHasBothPropertyAndIndexer = forEach(getBaseTypes(<InterfaceType>containingType), base => getPropertyOfObjectType(base, prop.name) && getIndexTypeOfType(base, indexKind));\r\n                    errorNode = someBaseClassHasBothPropertyAndIndexer ? undefined : containingType.symbol.declarations[0];\r\n                }\r\n\r\n                if (errorNode && !isTypeAssignableTo(propertyType, indexType)) {\r\n                    let errorMessage =\r\n                        indexKind === IndexKind.String\r\n                            ? Diagnostics.Property_0_of_type_1_is_not_assignable_to_string_index_type_2\r\n                            : Diagnostics.Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2;\r\n                    error(errorNode, errorMessage, symbolToString(prop), typeToString(propertyType), typeToString(indexType));\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkTypeNameIsReserved(name: DeclarationName, message: DiagnosticMessage): void {\r\n            // TS 1.0 spec (April 2014): 3.6.1\r\n            // The predefined type keywords are reserved and cannot be used as names of user defined types.\r\n            switch ((<Identifier>name).text) {\r\n                case \"any\":\r\n                case \"number\":\r\n                case \"boolean\":\r\n                case \"string\":\r\n                case \"symbol\":\r\n                case \"void\":\r\n                    error(name, message, (<Identifier>name).text);\r\n            }\r\n        }\r\n\r\n        // Check each type parameter and check that list has no duplicate type parameter declarations\r\n        function checkTypeParameters(typeParameterDeclarations: TypeParameterDeclaration[]) {\r\n            if (typeParameterDeclarations) {\r\n                for (let i = 0, n = typeParameterDeclarations.length; i < n; i++) {\r\n                    let node = typeParameterDeclarations[i];\r\n                    checkTypeParameter(node);\r\n\r\n                    if (produceDiagnostics) {\r\n                        for (let j = 0; j < i; j++) {\r\n                            if (typeParameterDeclarations[j].symbol === node.symbol) {\r\n                                error(node.name, Diagnostics.Duplicate_identifier_0, declarationNameToString(node.name));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkClassExpression(node: ClassExpression): Type {\r\n            grammarErrorOnNode(node, Diagnostics.class_expressions_are_not_currently_supported);\r\n            forEach(node.members, checkSourceElement);\r\n            return unknownType;\r\n        }\r\n\r\n        function checkClassDeclaration(node: ClassDeclaration) {\r\n            checkGrammarDeclarationNameInStrictMode(node);\r\n            // Grammar checking\r\n            if (!node.name && !(node.flags & NodeFlags.Default)) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name);\r\n            }\r\n\r\n            checkGrammarClassDeclarationHeritageClauses(node);\r\n            checkDecorators(node);\r\n            if (node.name) {\r\n                checkTypeNameIsReserved(node.name, Diagnostics.Class_name_cannot_be_0);\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            }\r\n            checkTypeParameters(node.typeParameters);\r\n            checkExportsOnMergedDeclarations(node);\r\n            let symbol = getSymbolOfNode(node);\r\n            let type = <InterfaceType>getDeclaredTypeOfSymbol(symbol);\r\n            let staticType = <ObjectType>getTypeOfSymbol(symbol);\r\n            let baseTypeNode = getClassExtendsHeritageClauseElement(node);\r\n            if (baseTypeNode) {\r\n                if (!isSupportedExpressionWithTypeArguments(baseTypeNode)) {\r\n                    error(baseTypeNode.expression, Diagnostics.Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_class_extends_clauses);\r\n                }\r\n\r\n                emitExtends = emitExtends || !isInAmbientContext(node);\r\n                checkExpressionWithTypeArguments(baseTypeNode);\r\n            }\r\n            let baseTypes = getBaseTypes(type);\r\n            if (baseTypes.length) {\r\n                if (produceDiagnostics) {\r\n                    let baseType = baseTypes[0];\r\n                    checkTypeAssignableTo(type, baseType, node.name || node, Diagnostics.Class_0_incorrectly_extends_base_class_1);\r\n                    let staticBaseType = getTypeOfSymbol(baseType.symbol);\r\n                    checkTypeAssignableTo(staticType, getTypeWithoutConstructors(staticBaseType), node.name || node,\r\n                        Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);\r\n\r\n                    if (baseType.symbol !== resolveEntityName(baseTypeNode.expression, SymbolFlags.Value)) {\r\n                        error(baseTypeNode, Diagnostics.Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0, typeToString(baseType));\r\n                    }\r\n\r\n                    checkKindsOfPropertyMemberOverrides(type, baseType);\r\n                }\r\n            }\r\n\r\n            if (baseTypes.length || (baseTypeNode && compilerOptions.isolatedModules)) {\r\n                // Check that base type can be evaluated as expression\r\n                checkExpressionOrQualifiedName(baseTypeNode.expression);\r\n            }\r\n\r\n            let implementedTypeNodes = getClassImplementsHeritageClauseElements(node);\r\n            if (implementedTypeNodes) {\r\n                forEach(implementedTypeNodes, typeRefNode => {\r\n                    if (!isSupportedExpressionWithTypeArguments(typeRefNode)) {\r\n                        error(typeRefNode.expression, Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments);\r\n                    }\r\n\r\n                    checkExpressionWithTypeArguments(typeRefNode);\r\n                    if (produceDiagnostics) {\r\n                        let t = getTypeFromTypeNode(typeRefNode);\r\n                        if (t !== unknownType) {\r\n                            let declaredType = (t.flags & TypeFlags.Reference) ? (<TypeReference>t).target : t;\r\n                            if (declaredType.flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                                checkTypeAssignableTo(type, t, node.name || node, Diagnostics.Class_0_incorrectly_implements_interface_1);\r\n                            }\r\n                            else {\r\n                                error(typeRefNode, Diagnostics.A_class_may_only_implement_another_class_or_interface);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            forEach(node.members, checkSourceElement);\r\n            if (produceDiagnostics) {\r\n                checkIndexConstraints(type);\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function getTargetSymbol(s: Symbol) {\r\n            // if symbol is instantiated its flags are not copied from the 'target'\r\n            // so we'll need to get back original 'target' symbol to work with correct set of flags\r\n            return s.flags & SymbolFlags.Instantiated ? getSymbolLinks(s).target : s;\r\n        }\r\n\r\n        function checkKindsOfPropertyMemberOverrides(type: InterfaceType, baseType: ObjectType): void {\r\n\r\n            // TypeScript 1.0 spec (April 2014): 8.2.3\r\n            // A derived class inherits all members from its base class it doesn't override.\r\n            // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.\r\n            // Both public and private property members are inherited, but only public property members can be overridden.\r\n            // A property member in a derived class is said to override a property member in a base class\r\n            // when the derived class property member has the same name and kind(instance or static)\r\n            // as the base class property member.\r\n            // The type of an overriding property member must be assignable(section 3.8.4)\r\n            // to the type of the overridden property member, or otherwise a compile - time error occurs.\r\n            // Base class instance member functions can be overridden by derived class instance member functions,\r\n            // but not by other kinds of members.\r\n            // Base class instance member variables and accessors can be overridden by\r\n            // derived class instance member variables and accessors, but not by other kinds of members.\r\n\r\n            // NOTE: assignability is checked in checkClassDeclaration\r\n            let baseProperties = getPropertiesOfObjectType(baseType);\r\n            for (let baseProperty of baseProperties) {\r\n                let base = getTargetSymbol(baseProperty);\r\n\r\n                if (base.flags & SymbolFlags.Prototype) {\r\n                    continue;\r\n                }\r\n\r\n                let derived = getTargetSymbol(getPropertyOfObjectType(type, base.name));\r\n                if (derived) {\r\n                    let baseDeclarationFlags = getDeclarationFlagsFromSymbol(base);\r\n                    let derivedDeclarationFlags = getDeclarationFlagsFromSymbol(derived);\r\n                    if ((baseDeclarationFlags & NodeFlags.Private) || (derivedDeclarationFlags & NodeFlags.Private)) {\r\n                        // either base or derived property is private - not override, skip it\r\n                        continue;\r\n                    }\r\n\r\n                    if ((baseDeclarationFlags & NodeFlags.Static) !== (derivedDeclarationFlags & NodeFlags.Static)) {\r\n                        // value of 'static' is not the same for properties - not override, skip it\r\n                        continue;\r\n                    }\r\n\r\n                    if ((base.flags & derived.flags & SymbolFlags.Method) || ((base.flags & SymbolFlags.PropertyOrAccessor) && (derived.flags & SymbolFlags.PropertyOrAccessor))) {\r\n                        // method is overridden with method or property/accessor is overridden with property/accessor - correct case\r\n                        continue;\r\n                    }\r\n\r\n                    let errorMessage: DiagnosticMessage;\r\n                    if (base.flags & SymbolFlags.Method) {\r\n                        if (derived.flags & SymbolFlags.Accessor) {\r\n                            errorMessage = Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;\r\n                        }\r\n                        else {\r\n                            Debug.assert((derived.flags & SymbolFlags.Property) !== 0);\r\n                            errorMessage = Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property;\r\n                        }\r\n                    }\r\n                    else if (base.flags & SymbolFlags.Property) {\r\n                        Debug.assert((derived.flags & SymbolFlags.Method) !== 0);\r\n                        errorMessage = Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;\r\n                    }\r\n                    else {\r\n                        Debug.assert((base.flags & SymbolFlags.Accessor) !== 0);\r\n                        Debug.assert((derived.flags & SymbolFlags.Method) !== 0);\r\n                        errorMessage = Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;\r\n                    }\r\n\r\n                    error(derived.valueDeclaration.name, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));\r\n                }\r\n            }\r\n        }\r\n\r\n        function isAccessor(kind: SyntaxKind): boolean {\r\n            return kind === SyntaxKind.GetAccessor || kind === SyntaxKind.SetAccessor;\r\n        }\r\n\r\n        function areTypeParametersIdentical(list1: TypeParameterDeclaration[], list2: TypeParameterDeclaration[]) {\r\n            if (!list1 && !list2) {\r\n                return true;\r\n            }\r\n            if (!list1 || !list2 || list1.length !== list2.length) {\r\n                return false;\r\n            }\r\n            // TypeScript 1.0 spec (April 2014):\r\n            // When a generic interface has multiple declarations,  all declarations must have identical type parameter\r\n            // lists, i.e. identical type parameter names with identical constraints in identical order.\r\n            for (let i = 0, len = list1.length; i < len; i++) {\r\n                let tp1 = list1[i];\r\n                let tp2 = list2[i];\r\n                if (tp1.name.text !== tp2.name.text) {\r\n                    return false;\r\n                }\r\n                if (!tp1.constraint && !tp2.constraint) {\r\n                    continue;\r\n                }\r\n                if (!tp1.constraint || !tp2.constraint) {\r\n                    return false;\r\n                }\r\n                if (!isTypeIdenticalTo(getTypeFromTypeNode(tp1.constraint), getTypeFromTypeNode(tp2.constraint))) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkInheritedPropertiesAreIdentical(type: InterfaceType, typeNode: Node): boolean {\r\n            let baseTypes = getBaseTypes(type);\r\n            if (baseTypes.length < 2) {\r\n                return true;\r\n            }\r\n\r\n            let seen: Map<{ prop: Symbol; containingType: Type }> = {};\r\n            forEach(resolveDeclaredMembers(type).declaredProperties, p => { seen[p.name] = { prop: p, containingType: type }; });\r\n            let ok = true;\r\n\r\n            for (let base of baseTypes) {\r\n                let properties = getPropertiesOfObjectType(base);\r\n                for (let prop of properties) {\r\n                    if (!hasProperty(seen, prop.name)) {\r\n                        seen[prop.name] = { prop: prop, containingType: base };\r\n                    }\r\n                    else {\r\n                        let existing = seen[prop.name];\r\n                        let isInheritedProperty = existing.containingType !== type;\r\n                        if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {\r\n                            ok = false;\r\n\r\n                            let typeName1 = typeToString(existing.containingType);\r\n                            let typeName2 = typeToString(base);\r\n\r\n                            let errorInfo = chainDiagnosticMessages(undefined, Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, symbolToString(prop), typeName1, typeName2);\r\n                            errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);\r\n                            diagnostics.add(createDiagnosticForNodeFromMessageChain(typeNode, errorInfo));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ok;\r\n        }\r\n\r\n        function checkInterfaceDeclaration(node: InterfaceDeclaration) {\r\n            // Grammar checking\r\n            checkGrammarDeclarationNameInStrictMode(node) || checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarInterfaceDeclaration(node);\r\n\r\n            checkTypeParameters(node.typeParameters);\r\n            if (produceDiagnostics) {\r\n                checkTypeNameIsReserved(node.name, Diagnostics.Interface_name_cannot_be_0);\r\n\r\n                checkExportsOnMergedDeclarations(node);\r\n                let symbol = getSymbolOfNode(node);\r\n                let firstInterfaceDecl = <InterfaceDeclaration>getDeclarationOfKind(symbol, SyntaxKind.InterfaceDeclaration);\r\n                if (symbol.declarations.length > 1) {\r\n                    if (node !== firstInterfaceDecl && !areTypeParametersIdentical(firstInterfaceDecl.typeParameters, node.typeParameters)) {\r\n                        error(node.name, Diagnostics.All_declarations_of_an_interface_must_have_identical_type_parameters);\r\n                    }\r\n                }\r\n\r\n                // Only check this symbol once\r\n                if (node === firstInterfaceDecl) {\r\n                    let type = <InterfaceType>getDeclaredTypeOfSymbol(symbol);\r\n                    // run subsequent checks only if first set succeeded\r\n                    if (checkInheritedPropertiesAreIdentical(type, node.name)) {\r\n                        forEach(getBaseTypes(type), baseType => {\r\n                            checkTypeAssignableTo(type, baseType, node.name, Diagnostics.Interface_0_incorrectly_extends_interface_1);\r\n                        });\r\n                        checkIndexConstraints(type);\r\n                    }\r\n                }\r\n            }\r\n            forEach(getInterfaceBaseTypeNodes(node), heritageElement => {\r\n                if (!isSupportedExpressionWithTypeArguments(heritageElement)) {\r\n                    error(heritageElement.expression, Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments);\r\n                }\r\n\r\n                checkExpressionWithTypeArguments(heritageElement);\r\n            });\r\n            forEach(node.members, checkSourceElement);\r\n\r\n            if (produceDiagnostics) {\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function checkTypeAliasDeclaration(node: TypeAliasDeclaration) {\r\n            // Grammar checking\r\n            checkGrammarDecorators(node) || checkGrammarModifiers(node);\r\n\r\n            checkTypeNameIsReserved(node.name, Diagnostics.Type_alias_name_cannot_be_0);\r\n            checkSourceElement(node.type);\r\n        }\r\n\r\n        function computeEnumMemberValues(node: EnumDeclaration) {\r\n            let nodeLinks = getNodeLinks(node);\r\n\r\n            if (!(nodeLinks.flags & NodeCheckFlags.EnumValuesComputed)) {\r\n                let enumSymbol = getSymbolOfNode(node);\r\n                let enumType = getDeclaredTypeOfSymbol(enumSymbol);\r\n                let autoValue = 0;\r\n                let ambient = isInAmbientContext(node);\r\n                let enumIsConst = isConst(node);\r\n\r\n                forEach(node.members, member => {\r\n                    if (member.name.kind !== SyntaxKind.ComputedPropertyName && isNumericLiteralName((<Identifier>member.name).text)) {\r\n                        error(member.name, Diagnostics.An_enum_member_cannot_have_a_numeric_name);\r\n                    }\r\n                    let initializer = member.initializer;\r\n                    if (initializer) {\r\n                        autoValue = getConstantValueForEnumMemberInitializer(initializer);\r\n                        if (autoValue === undefined) {\r\n                            if (enumIsConst) {\r\n                                error(initializer, Diagnostics.In_const_enum_declarations_member_initializer_must_be_constant_expression);\r\n                            }\r\n                            else if (!ambient) {\r\n                                // Only here do we need to check that the initializer is assignable to the enum type.\r\n                                // If it is a constant value (not undefined), it is syntactically constrained to be a number.\r\n                                // Also, we do not need to check this for ambients because there is already\r\n                                // a syntax error if it is not a constant.\r\n                                checkTypeAssignableTo(checkExpression(initializer), enumType, initializer, /*headMessage*/ undefined);\r\n                            }\r\n                        }\r\n                        else if (enumIsConst) {\r\n                            if (isNaN(autoValue)) {\r\n                                error(initializer, Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN);\r\n                            }\r\n                            else if (!isFinite(autoValue)) {\r\n                                error(initializer, Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else if (ambient && !enumIsConst) {\r\n                        autoValue = undefined;\r\n                    }\r\n\r\n                    if (autoValue !== undefined) {\r\n                        getNodeLinks(member).enumMemberValue = autoValue++;\r\n                    }\r\n                });\r\n\r\n                nodeLinks.flags |= NodeCheckFlags.EnumValuesComputed;\r\n            }\r\n\r\n            function getConstantValueForEnumMemberInitializer(initializer: Expression): number {\r\n                return evalConstant(initializer);\r\n\r\n                function evalConstant(e: Node): number {\r\n                    switch (e.kind) {\r\n                        case SyntaxKind.PrefixUnaryExpression:\r\n                            let value = evalConstant((<PrefixUnaryExpression>e).operand);\r\n                            if (value === undefined) {\r\n                                return undefined;\r\n                            }\r\n                            switch ((<PrefixUnaryExpression>e).operator) {\r\n                                case SyntaxKind.PlusToken: return value;\r\n                                case SyntaxKind.MinusToken: return -value;\r\n                                case SyntaxKind.TildeToken: return ~value;\r\n                            }\r\n                            return undefined;\r\n                        case SyntaxKind.BinaryExpression:\r\n                            let left = evalConstant((<BinaryExpression>e).left);\r\n                            if (left === undefined) {\r\n                                return undefined;\r\n                            }\r\n                            let right = evalConstant((<BinaryExpression>e).right);\r\n                            if (right === undefined) {\r\n                                return undefined;\r\n                            }\r\n                            switch ((<BinaryExpression>e).operatorToken.kind) {\r\n                                case SyntaxKind.BarToken: return left | right;\r\n                                case SyntaxKind.AmpersandToken: return left & right;\r\n                                case SyntaxKind.GreaterThanGreaterThanToken: return left >> right;\r\n                                case SyntaxKind.GreaterThanGreaterThanGreaterThanToken: return left >>> right;\r\n                                case SyntaxKind.LessThanLessThanToken: return left << right;\r\n                                case SyntaxKind.CaretToken: return left ^ right;\r\n                                case SyntaxKind.AsteriskToken: return left * right;\r\n                                case SyntaxKind.SlashToken: return left / right;\r\n                                case SyntaxKind.PlusToken: return left + right;\r\n                                case SyntaxKind.MinusToken: return left - right;\r\n                                case SyntaxKind.PercentToken: return left % right;\r\n                            }\r\n                            return undefined;\r\n                        case SyntaxKind.NumericLiteral:\r\n                            return +(<LiteralExpression>e).text;\r\n                        case SyntaxKind.ParenthesizedExpression:\r\n                            return evalConstant((<ParenthesizedExpression>e).expression);\r\n                        case SyntaxKind.Identifier:\r\n                        case SyntaxKind.ElementAccessExpression:\r\n                        case SyntaxKind.PropertyAccessExpression:\r\n                            let member = initializer.parent;\r\n                            let currentType = getTypeOfSymbol(getSymbolOfNode(member.parent));\r\n                            let enumType: Type;\r\n                            let propertyName: string;\r\n\r\n                            if (e.kind === SyntaxKind.Identifier) {\r\n                                // unqualified names can refer to member that reside in different declaration of the enum so just doing name resolution won't work.\r\n                                // instead pick current enum type and later try to fetch member from the type\r\n                                enumType = currentType;\r\n                                propertyName = (<Identifier>e).text;\r\n                            }\r\n                            else {\r\n                                let expression: Expression;\r\n                                if (e.kind === SyntaxKind.ElementAccessExpression) {\r\n                                    if ((<ElementAccessExpression>e).argumentExpression === undefined ||\r\n                                        (<ElementAccessExpression>e).argumentExpression.kind !== SyntaxKind.StringLiteral) {\r\n                                        return undefined;\r\n                                    }\r\n                                    expression = (<ElementAccessExpression>e).expression;\r\n                                    propertyName = (<LiteralExpression>(<ElementAccessExpression>e).argumentExpression).text;\r\n                                }\r\n                                else {\r\n                                    expression = (<PropertyAccessExpression>e).expression;\r\n                                    propertyName = (<PropertyAccessExpression>e).name.text;\r\n                                }\r\n\r\n                                // expression part in ElementAccess\\PropertyAccess should be either identifier or dottedName\r\n                                var current = expression;\r\n                                while (current) {\r\n                                    if (current.kind === SyntaxKind.Identifier) {\r\n                                        break;\r\n                                    }\r\n                                    else if (current.kind === SyntaxKind.PropertyAccessExpression) {\r\n                                        current = (<ElementAccessExpression>current).expression;\r\n                                    }\r\n                                    else {\r\n                                        return undefined;\r\n                                    }\r\n                                }\r\n\r\n                                enumType = checkExpression(expression);\r\n                                // allow references to constant members of other enums\r\n                                if (!(enumType.symbol && (enumType.symbol.flags & SymbolFlags.Enum))) {\r\n                                    return undefined;\r\n                                }\r\n                            }\r\n\r\n                            if (propertyName === undefined) {\r\n                                return undefined;\r\n                            }\r\n\r\n                            let property = getPropertyOfObjectType(enumType, propertyName);\r\n                            if (!property || !(property.flags & SymbolFlags.EnumMember)) {\r\n                                return undefined;\r\n                            }\r\n\r\n                            let propertyDecl = property.valueDeclaration;\r\n                            // self references are illegal\r\n                            if (member === propertyDecl) {\r\n                                return undefined;\r\n                            }\r\n\r\n                            // illegal case: forward reference\r\n                            if (!isDefinedBefore(propertyDecl, member)) {\r\n                                return undefined;\r\n                            }\r\n\r\n                            return <number>getNodeLinks(propertyDecl).enumMemberValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkEnumDeclaration(node: EnumDeclaration) {\r\n            if (!produceDiagnostics) {\r\n                return;\r\n            }\r\n\r\n            // Grammar checking\r\n            checkGrammarDeclarationNameInStrictMode(node) || checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarEnumDeclaration(node);\r\n\r\n            checkTypeNameIsReserved(node.name, Diagnostics.Enum_name_cannot_be_0);\r\n            checkCollisionWithCapturedThisVariable(node, node.name);\r\n            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            checkExportsOnMergedDeclarations(node);\r\n\r\n            computeEnumMemberValues(node);\r\n\r\n            let enumIsConst = isConst(node);\r\n            if (compilerOptions.isolatedModules && enumIsConst && isInAmbientContext(node)) {\r\n                error(node.name, Diagnostics.Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided);\r\n            }\r\n\r\n            // Spec 2014 - Section 9.3:\r\n            // It isn't possible for one enum declaration to continue the automatic numbering sequence of another,\r\n            // and when an enum type has multiple declarations, only one declaration is permitted to omit a value\r\n            // for the first member.\r\n            //\r\n            // Only perform this check once per symbol\r\n            let enumSymbol = getSymbolOfNode(node);\r\n            let firstDeclaration = getDeclarationOfKind(enumSymbol, node.kind);\r\n            if (node === firstDeclaration) {\r\n                if (enumSymbol.declarations.length > 1) {\r\n                    // check that const is placed\\omitted on all enum declarations\r\n                    forEach(enumSymbol.declarations, decl => {\r\n                        if (isConstEnumDeclaration(decl) !== enumIsConst) {\r\n                            error(decl.name, Diagnostics.Enum_declarations_must_all_be_const_or_non_const);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                let seenEnumMissingInitialInitializer = false;\r\n                forEach(enumSymbol.declarations, declaration => {\r\n                    // return true if we hit a violation of the rule, false otherwise\r\n                    if (declaration.kind !== SyntaxKind.EnumDeclaration) {\r\n                        return false;\r\n                    }\r\n\r\n                    let enumDeclaration = <EnumDeclaration>declaration;\r\n                    if (!enumDeclaration.members.length) {\r\n                        return false;\r\n                    }\r\n\r\n                    let firstEnumMember = enumDeclaration.members[0];\r\n                    if (!firstEnumMember.initializer) {\r\n                        if (seenEnumMissingInitialInitializer) {\r\n                            error(firstEnumMember.name, Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);\r\n                        }\r\n                        else {\r\n                            seenEnumMissingInitialInitializer = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function getFirstNonAmbientClassOrFunctionDeclaration(symbol: Symbol): Declaration {\r\n            let declarations = symbol.declarations;\r\n            for (let declaration of declarations) {\r\n                if ((declaration.kind === SyntaxKind.ClassDeclaration ||\r\n                    (declaration.kind === SyntaxKind.FunctionDeclaration && nodeIsPresent((<FunctionLikeDeclaration>declaration).body))) &&\r\n                    !isInAmbientContext(declaration)) {\r\n                    return declaration;\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function inSameLexicalScope(node1: Node, node2: Node) {\r\n            let container1 = getEnclosingBlockScopeContainer(node1);\r\n            let container2 = getEnclosingBlockScopeContainer(node2);\r\n            if (isGlobalSourceFile(container1)) {\r\n                return isGlobalSourceFile(container2);\r\n            }\r\n            else if (isGlobalSourceFile(container2)) {\r\n                return false;\r\n            }\r\n            else {\r\n                return container1 === container2;\r\n            }\r\n        }\r\n\r\n        function checkModuleDeclaration(node: ModuleDeclaration) {\r\n            if (produceDiagnostics) {\r\n                // Grammar checking\r\n                if (!checkGrammarDeclarationNameInStrictMode(node) && !checkGrammarDecorators(node) && !checkGrammarModifiers(node)) {\r\n                    if (!isInAmbientContext(node) && node.name.kind === SyntaxKind.StringLiteral) {\r\n                        grammarErrorOnNode(node.name, Diagnostics.Only_ambient_modules_can_use_quoted_names);\r\n                    }\r\n                }\r\n\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n                checkExportsOnMergedDeclarations(node);\r\n                let symbol = getSymbolOfNode(node);\r\n\r\n                // The following checks only apply on a non-ambient instantiated module declaration.\r\n                if (symbol.flags & SymbolFlags.ValueModule\r\n                    && symbol.declarations.length > 1\r\n                    && !isInAmbientContext(node)\r\n                    && isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules)) {\r\n                    let firstNonAmbientClassOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);\r\n                    if (firstNonAmbientClassOrFunc) {\r\n                        if (getSourceFileOfNode(node) !== getSourceFileOfNode(firstNonAmbientClassOrFunc)) {\r\n                            error(node.name, Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);\r\n                        }\r\n                        else if (node.pos < firstNonAmbientClassOrFunc.pos) {\r\n                            error(node.name, Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);\r\n                        }\r\n                    }\r\n\r\n                    // if the module merges with a class declaration in the same lexical scope, \r\n                    // we need to track this to ensure the correct emit.\r\n                    let mergedClass = getDeclarationOfKind(symbol, SyntaxKind.ClassDeclaration);                    \r\n                    if (mergedClass &&\r\n                        inSameLexicalScope(node, mergedClass)) {\r\n                        getNodeLinks(node).flags |= NodeCheckFlags.LexicalModuleMergesWithClass;\r\n                    }\r\n                }\r\n\r\n                // Checks for ambient external modules.\r\n                if (node.name.kind === SyntaxKind.StringLiteral) {\r\n                    if (!isGlobalSourceFile(node.parent)) {\r\n                        error(node.name, Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules);\r\n                    }\r\n                    if (isExternalModuleNameRelative(node.name.text)) {\r\n                        error(node.name, Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name);\r\n                    }\r\n                }\r\n            }\r\n            checkSourceElement(node.body);\r\n        }\r\n\r\n        function getFirstIdentifier(node: EntityName | Expression): Identifier {\r\n            while (true) {\r\n                if (node.kind === SyntaxKind.QualifiedName) {\r\n                    node = (<QualifiedName>node).left;\r\n                }\r\n                else if (node.kind === SyntaxKind.PropertyAccessExpression) {\r\n                    node = (<PropertyAccessExpression>node).expression;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            Debug.assert(node.kind === SyntaxKind.Identifier);\r\n            return <Identifier>node;\r\n        }\r\n\r\n        function checkExternalImportOrExportDeclaration(node: ImportDeclaration | ImportEqualsDeclaration | ExportDeclaration): boolean {\r\n            let moduleName = getExternalModuleName(node);\r\n            if (!nodeIsMissing(moduleName) && moduleName.kind !== SyntaxKind.StringLiteral) {\r\n                error(moduleName, Diagnostics.String_literal_expected);\r\n                return false;\r\n            }\r\n            let inAmbientExternalModule = node.parent.kind === SyntaxKind.ModuleBlock && (<ModuleDeclaration>node.parent.parent).name.kind === SyntaxKind.StringLiteral;\r\n            if (node.parent.kind !== SyntaxKind.SourceFile && !inAmbientExternalModule) {\r\n                error(moduleName, node.kind === SyntaxKind.ExportDeclaration ?\r\n                    Diagnostics.Export_declarations_are_not_permitted_in_a_namespace :\r\n                    Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module);\r\n                return false;\r\n            }\r\n            if (inAmbientExternalModule && isExternalModuleNameRelative((<LiteralExpression>moduleName).text)) {\r\n                // TypeScript 1.0 spec (April 2013): 12.1.6\r\n                // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference\r\n                // other external modules only through top - level external module names.\r\n                // Relative external module names are not permitted.\r\n                error(node, Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkAliasSymbol(node: ImportEqualsDeclaration | ImportClause | NamespaceImport | ImportSpecifier | ExportSpecifier) {\r\n            let symbol = getSymbolOfNode(node);\r\n            let target = resolveAlias(symbol);\r\n            if (target !== unknownSymbol) {\r\n                let excludedMeanings =\r\n                    (symbol.flags & SymbolFlags.Value ? SymbolFlags.Value : 0) |\r\n                    (symbol.flags & SymbolFlags.Type ? SymbolFlags.Type : 0) |\r\n                    (symbol.flags & SymbolFlags.Namespace ? SymbolFlags.Namespace : 0);\r\n                if (target.flags & excludedMeanings) {\r\n                    let message = node.kind === SyntaxKind.ExportSpecifier ?\r\n                        Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0 :\r\n                        Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0;\r\n                    error(node, message, symbolToString(symbol));\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkImportBinding(node: ImportEqualsDeclaration | ImportClause | NamespaceImport | ImportSpecifier) {\r\n            checkCollisionWithCapturedThisVariable(node, node.name);\r\n            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            checkAliasSymbol(node);\r\n        }\r\n\r\n        function checkImportDeclaration(node: ImportDeclaration) {\r\n            if (!checkGrammarImportDeclarationNameInStrictMode(node) && !checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & NodeFlags.Modifier)) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.An_import_declaration_cannot_have_modifiers);\r\n            }\r\n            if (checkExternalImportOrExportDeclaration(node)) {\r\n                let importClause = node.importClause;\r\n                if (importClause) {\r\n                    if (importClause.name) {\r\n                        checkImportBinding(importClause);\r\n                    }\r\n                    if (importClause.namedBindings) {\r\n                        if (importClause.namedBindings.kind === SyntaxKind.NamespaceImport) {\r\n                            checkImportBinding(<NamespaceImport>importClause.namedBindings);\r\n                        }\r\n                        else {\r\n                            forEach((<NamedImports>importClause.namedBindings).elements, checkImportBinding);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkImportEqualsDeclaration(node: ImportEqualsDeclaration) {\r\n            checkGrammarDeclarationNameInStrictMode(node) || checkGrammarDecorators(node) || checkGrammarModifiers(node);\r\n            if (isInternalModuleImportEqualsDeclaration(node) || checkExternalImportOrExportDeclaration(node)) {\r\n                checkImportBinding(node);\r\n                if (node.flags & NodeFlags.Export) {\r\n                    markExportAsReferenced(node);\r\n                }\r\n                if (isInternalModuleImportEqualsDeclaration(node)) {\r\n                    let target = resolveAlias(getSymbolOfNode(node));\r\n                    if (target !== unknownSymbol) {\r\n                        if (target.flags & SymbolFlags.Value) {\r\n                            // Target is a value symbol, check that it is not hidden by a local declaration with the same name\r\n                            let moduleName = getFirstIdentifier(<EntityName>node.moduleReference);\r\n                            if (!(resolveEntityName(moduleName, SymbolFlags.Value | SymbolFlags.Namespace).flags & SymbolFlags.Namespace)) {\r\n                                error(moduleName, Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, declarationNameToString(moduleName));\r\n                            }\r\n                        }\r\n                        if (target.flags & SymbolFlags.Type) {\r\n                            checkTypeNameIsReserved(node.name, Diagnostics.Import_name_cannot_be_0);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (languageVersion >= ScriptTarget.ES6) {\r\n                        // Import equals declaration is deprecated in es6 or above\r\n                        grammarErrorOnNode(node, Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_or_import_d_from_mod_instead);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkExportDeclaration(node: ExportDeclaration) {\r\n            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & NodeFlags.Modifier)) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.An_export_declaration_cannot_have_modifiers);\r\n            }\r\n            if (!node.moduleSpecifier || checkExternalImportOrExportDeclaration(node)) {\r\n                if (node.exportClause) {\r\n                    // export { x, y }\r\n                    // export { x, y } from \"foo\"\r\n                    forEach(node.exportClause.elements, checkExportSpecifier);\r\n\r\n                    let inAmbientExternalModule = node.parent.kind === SyntaxKind.ModuleBlock && (<ModuleDeclaration>node.parent.parent).name.kind === SyntaxKind.StringLiteral;\r\n                    if (node.parent.kind !== SyntaxKind.SourceFile && !inAmbientExternalModule) {\r\n                        error(node, Diagnostics.Export_declarations_are_not_permitted_in_a_namespace);\r\n                    }\r\n                }\r\n                else {\r\n                    // export * from \"foo\"\r\n                    let moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);\r\n                    if (moduleSymbol && moduleSymbol.exports[\"export=\"]) {\r\n                        error(node.moduleSpecifier, Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, symbolToString(moduleSymbol));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkExportSpecifier(node: ExportSpecifier) {\r\n            checkAliasSymbol(node);\r\n            if (!(<ExportDeclaration>node.parent.parent).moduleSpecifier) {\r\n                markExportAsReferenced(node);\r\n            }\r\n        }\r\n\r\n        function checkExportAssignment(node: ExportAssignment) {\r\n            let container = node.parent.kind === SyntaxKind.SourceFile ? <SourceFile>node.parent : <ModuleDeclaration>node.parent.parent;\r\n            if (container.kind === SyntaxKind.ModuleDeclaration && (<ModuleDeclaration>container).name.kind === SyntaxKind.Identifier) {\r\n                error(node, Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace);\r\n                return;\r\n            }\r\n            // Grammar checking\r\n            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & NodeFlags.Modifier)) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.An_export_assignment_cannot_have_modifiers);\r\n            }\r\n            if (node.expression.kind === SyntaxKind.Identifier) {\r\n                markExportAsReferenced(node);\r\n            }\r\n            else {\r\n                checkExpressionCached(node.expression);\r\n            }\r\n            checkExternalModuleExports(container);\r\n\r\n            if (node.isExportEquals && !isInAmbientContext(node)) {\r\n                if (languageVersion >= ScriptTarget.ES6) {\r\n                    // export assignment is deprecated in es6 or above\r\n                    grammarErrorOnNode(node, Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_export_default_instead);\r\n                }\r\n                else if (compilerOptions.module === ModuleKind.System) {\r\n                    // system modules does not support export assignment\r\n                    grammarErrorOnNode(node, Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getModuleStatements(node: Declaration): ModuleElement[] {\r\n            if (node.kind === SyntaxKind.SourceFile) {\r\n                return (<SourceFile>node).statements;\r\n            }\r\n            if (node.kind === SyntaxKind.ModuleDeclaration && (<ModuleDeclaration>node).body.kind === SyntaxKind.ModuleBlock) {\r\n                return (<ModuleBlock>(<ModuleDeclaration>node).body).statements;\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        function hasExportedMembers(moduleSymbol: Symbol) {\r\n            for (var id in moduleSymbol.exports) {\r\n                if (id !== \"export=\") {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkExternalModuleExports(node: SourceFile | ModuleDeclaration) {\r\n            let moduleSymbol = getSymbolOfNode(node);\r\n            let links = getSymbolLinks(moduleSymbol);\r\n            if (!links.exportsChecked) {\r\n                let exportEqualsSymbol = moduleSymbol.exports[\"export=\"];\r\n                if (exportEqualsSymbol && hasExportedMembers(moduleSymbol)) {\r\n                    let declaration = getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.valueDeclaration;\r\n                    error(declaration, Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);\r\n                }\r\n                links.exportsChecked = true;\r\n            }\r\n        }\r\n\r\n        function checkTypePredicate(node: TypePredicateNode) {\r\n            if(!isInLegalTypePredicatePosition(node)) {\r\n                error(node, Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);\r\n            }\r\n        }\r\n\r\n        function checkSourceElement(node: Node): void {\r\n            if (!node) return;\r\n            switch (node.kind) {\r\n                case SyntaxKind.TypeParameter:\r\n                    return checkTypeParameter(<TypeParameterDeclaration>node);\r\n                case SyntaxKind.Parameter:\r\n                    return checkParameter(<ParameterDeclaration>node);\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                    return checkPropertyDeclaration(<PropertyDeclaration>node);\r\n                case SyntaxKind.FunctionType:\r\n                case SyntaxKind.ConstructorType:\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                    return checkSignatureDeclaration(<SignatureDeclaration>node);\r\n                case SyntaxKind.IndexSignature:\r\n                    return checkSignatureDeclaration(<SignatureDeclaration>node);\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    return checkMethodDeclaration(<MethodDeclaration>node);\r\n                case SyntaxKind.Constructor:\r\n                    return checkConstructorDeclaration(<ConstructorDeclaration>node);\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                    return checkAccessorDeclaration(<AccessorDeclaration>node);\r\n                case SyntaxKind.TypeReference:\r\n                    return checkTypeReferenceNode(<TypeReferenceNode>node);\r\n                case SyntaxKind.TypePredicate:\r\n                    return checkTypePredicate(<TypePredicateNode>node);\r\n                case SyntaxKind.TypeQuery:\r\n                    return checkTypeQuery(<TypeQueryNode>node);\r\n                case SyntaxKind.TypeLiteral:\r\n                    return checkTypeLiteral(<TypeLiteralNode>node);\r\n                case SyntaxKind.ArrayType:\r\n                    return checkArrayType(<ArrayTypeNode>node);\r\n                case SyntaxKind.TupleType:\r\n                    return checkTupleType(<TupleTypeNode>node);\r\n                case SyntaxKind.UnionType:\r\n                    return checkUnionType(<UnionTypeNode>node);\r\n                case SyntaxKind.ParenthesizedType:\r\n                    return checkSourceElement((<ParenthesizedTypeNode>node).type);\r\n                case SyntaxKind.FunctionDeclaration:\r\n                    return checkFunctionDeclaration(<FunctionDeclaration>node);\r\n                case SyntaxKind.Block:\r\n                case SyntaxKind.ModuleBlock:\r\n                    return checkBlock(<Block>node);\r\n                case SyntaxKind.VariableStatement:\r\n                    return checkVariableStatement(<VariableStatement>node);\r\n                case SyntaxKind.ExpressionStatement:\r\n                    return checkExpressionStatement(<ExpressionStatement>node);\r\n                case SyntaxKind.IfStatement:\r\n                    return checkIfStatement(<IfStatement>node);\r\n                case SyntaxKind.DoStatement:\r\n                    return checkDoStatement(<DoStatement>node);\r\n                case SyntaxKind.WhileStatement:\r\n                    return checkWhileStatement(<WhileStatement>node);\r\n                case SyntaxKind.ForStatement:\r\n                    return checkForStatement(<ForStatement>node);\r\n                case SyntaxKind.ForInStatement:\r\n                    return checkForInStatement(<ForInStatement>node);\r\n                case SyntaxKind.ForOfStatement:\r\n                    return checkForOfStatement(<ForOfStatement>node);\r\n                case SyntaxKind.ContinueStatement:\r\n                case SyntaxKind.BreakStatement:\r\n                    return checkBreakOrContinueStatement(<BreakOrContinueStatement>node);\r\n                case SyntaxKind.ReturnStatement:\r\n                    return checkReturnStatement(<ReturnStatement>node);\r\n                case SyntaxKind.WithStatement:\r\n                    return checkWithStatement(<WithStatement>node);\r\n                case SyntaxKind.SwitchStatement:\r\n                    return checkSwitchStatement(<SwitchStatement>node);\r\n                case SyntaxKind.LabeledStatement:\r\n                    return checkLabeledStatement(<LabeledStatement>node);\r\n                case SyntaxKind.ThrowStatement:\r\n                    return checkThrowStatement(<ThrowStatement>node);\r\n                case SyntaxKind.TryStatement:\r\n                    return checkTryStatement(<TryStatement>node);\r\n                case SyntaxKind.VariableDeclaration:\r\n                    return checkVariableDeclaration(<VariableDeclaration>node);\r\n                case SyntaxKind.BindingElement:\r\n                    return checkBindingElement(<BindingElement>node);\r\n                case SyntaxKind.ClassDeclaration:\r\n                    return checkClassDeclaration(<ClassDeclaration>node);\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                    return checkInterfaceDeclaration(<InterfaceDeclaration>node);\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    return checkTypeAliasDeclaration(<TypeAliasDeclaration>node);\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return checkEnumDeclaration(<EnumDeclaration>node);\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    return checkModuleDeclaration(<ModuleDeclaration>node);\r\n                case SyntaxKind.ImportDeclaration:\r\n                    return checkImportDeclaration(<ImportDeclaration>node);\r\n                case SyntaxKind.ImportEqualsDeclaration:\r\n                    return checkImportEqualsDeclaration(<ImportEqualsDeclaration>node);\r\n                case SyntaxKind.ExportDeclaration:\r\n                    return checkExportDeclaration(<ExportDeclaration>node);\r\n                case SyntaxKind.ExportAssignment:\r\n                    return checkExportAssignment(<ExportAssignment>node);\r\n                case SyntaxKind.EmptyStatement:\r\n                    checkGrammarStatementInAmbientContext(node);\r\n                    return;\r\n                case SyntaxKind.DebuggerStatement:\r\n                    checkGrammarStatementInAmbientContext(node);\r\n                    return;\r\n                case SyntaxKind.MissingDeclaration:\r\n                    return checkMissingDeclaration(node);\r\n            }\r\n        }\r\n\r\n        // Function expression bodies are checked after all statements in the enclosing body. This is to ensure\r\n        // constructs like the following are permitted:\r\n        //     let foo = function () {\r\n        //        let s = foo();\r\n        //        return \"hello\";\r\n        //     }\r\n        // Here, performing a full type check of the body of the function expression whilst in the process of\r\n        // determining the type of foo would cause foo to be given type any because of the recursive reference.\r\n        // Delaying the type check of the body ensures foo has been assigned a type.\r\n        function checkFunctionExpressionBodies(node: Node): void {\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    forEach((<FunctionLikeDeclaration>node).parameters, checkFunctionExpressionBodies);\r\n                    checkFunctionExpressionOrObjectLiteralMethodBody(<FunctionExpression>node);\r\n                    break;\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                    forEach(node.decorators, checkFunctionExpressionBodies);\r\n                    forEach((<MethodDeclaration>node).parameters, checkFunctionExpressionBodies);\r\n                    if (isObjectLiteralMethod(node)) {\r\n                        checkFunctionExpressionOrObjectLiteralMethodBody(<MethodDeclaration>node);\r\n                    }\r\n                    break;\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                    forEach((<FunctionLikeDeclaration>node).parameters, checkFunctionExpressionBodies);\r\n                    break;\r\n                case SyntaxKind.WithStatement:\r\n                    checkFunctionExpressionBodies((<WithStatement>node).expression);\r\n                    break;\r\n                case SyntaxKind.Decorator:\r\n                case SyntaxKind.Parameter:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.ObjectBindingPattern:\r\n                case SyntaxKind.ArrayBindingPattern:\r\n                case SyntaxKind.BindingElement:\r\n                case SyntaxKind.ArrayLiteralExpression:\r\n                case SyntaxKind.ObjectLiteralExpression:\r\n                case SyntaxKind.PropertyAssignment:\r\n                case SyntaxKind.PropertyAccessExpression:\r\n                case SyntaxKind.ElementAccessExpression:\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                case SyntaxKind.TaggedTemplateExpression:\r\n                case SyntaxKind.TemplateExpression:\r\n                case SyntaxKind.TemplateSpan:\r\n                case SyntaxKind.TypeAssertionExpression:\r\n                case SyntaxKind.ParenthesizedExpression:\r\n                case SyntaxKind.TypeOfExpression:\r\n                case SyntaxKind.VoidExpression:\r\n                case SyntaxKind.DeleteExpression:\r\n                case SyntaxKind.PrefixUnaryExpression:\r\n                case SyntaxKind.PostfixUnaryExpression:\r\n                case SyntaxKind.BinaryExpression:\r\n                case SyntaxKind.ConditionalExpression:\r\n                case SyntaxKind.SpreadElementExpression:\r\n                case SyntaxKind.Block:\r\n                case SyntaxKind.ModuleBlock:\r\n                case SyntaxKind.VariableStatement:\r\n                case SyntaxKind.ExpressionStatement:\r\n                case SyntaxKind.IfStatement:\r\n                case SyntaxKind.DoStatement:\r\n                case SyntaxKind.WhileStatement:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                case SyntaxKind.ContinueStatement:\r\n                case SyntaxKind.BreakStatement:\r\n                case SyntaxKind.ReturnStatement:\r\n                case SyntaxKind.SwitchStatement:\r\n                case SyntaxKind.CaseBlock:\r\n                case SyntaxKind.CaseClause:\r\n                case SyntaxKind.DefaultClause:\r\n                case SyntaxKind.LabeledStatement:\r\n                case SyntaxKind.ThrowStatement:\r\n                case SyntaxKind.TryStatement:\r\n                case SyntaxKind.CatchClause:\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.VariableDeclarationList:\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.EnumDeclaration:\r\n                case SyntaxKind.EnumMember:\r\n                case SyntaxKind.ExportAssignment:\r\n                case SyntaxKind.SourceFile:\r\n                    forEachChild(node, checkFunctionExpressionBodies);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function checkSourceFile(node: SourceFile) {\r\n            let start = new Date().getTime();\r\n            checkSourceFileWorker(node);\r\n            checkTime += new Date().getTime() - start;\r\n        }\r\n\r\n        // Fully type check a source file and collect the relevant diagnostics.\r\n        function checkSourceFileWorker(node: SourceFile) {\r\n            let links = getNodeLinks(node);\r\n            if (!(links.flags & NodeCheckFlags.TypeChecked)) {\r\n                if (node.isDefaultLib && compilerOptions.skipDefaultLibCheck) {\r\n                    return;\r\n                }\r\n\r\n                // Grammar checking\r\n                checkGrammarSourceFile(node);\r\n\r\n                emitExtends = false;\r\n                emitDecorate = false;\r\n                emitParam = false;\r\n                potentialThisCollisions.length = 0;\r\n\r\n                forEach(node.statements, checkSourceElement);\r\n                checkFunctionExpressionBodies(node);\r\n\r\n                if (isExternalModule(node)) {\r\n                    checkExternalModuleExports(node);\r\n                }\r\n\r\n                if (potentialThisCollisions.length) {\r\n                    forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);\r\n                    potentialThisCollisions.length = 0;\r\n                }\r\n\r\n                if (emitExtends) {\r\n                    links.flags |= NodeCheckFlags.EmitExtends;\r\n                }\r\n\r\n                if (emitDecorate) {\r\n                    links.flags |= NodeCheckFlags.EmitDecorate;\r\n                }\r\n\r\n                if (emitParam) {\r\n                    links.flags |= NodeCheckFlags.EmitParam;\r\n                }\r\n\r\n                links.flags |= NodeCheckFlags.TypeChecked;\r\n            }\r\n        }\r\n\r\n        function getDiagnostics(sourceFile?: SourceFile): Diagnostic[] {\r\n            throwIfNonDiagnosticsProducing();\r\n            if (sourceFile) {\r\n                checkSourceFile(sourceFile);\r\n                return diagnostics.getDiagnostics(sourceFile.fileName);\r\n            }\r\n            forEach(host.getSourceFiles(), checkSourceFile);\r\n            return diagnostics.getDiagnostics();\r\n        }\r\n\r\n        function getGlobalDiagnostics(): Diagnostic[] {\r\n            throwIfNonDiagnosticsProducing();\r\n            return diagnostics.getGlobalDiagnostics();\r\n        }\r\n\r\n        function throwIfNonDiagnosticsProducing() {\r\n            if (!produceDiagnostics) {\r\n                throw new Error(\"Trying to get diagnostics from a type checker that does not produce them.\");\r\n            }\r\n        }\r\n\r\n        // Language service support\r\n\r\n        function isInsideWithStatementBody(node: Node): boolean {\r\n            if (node) {\r\n                while (node.parent) {\r\n                    if (node.parent.kind === SyntaxKind.WithStatement && (<WithStatement>node.parent).statement === node) {\r\n                        return true;\r\n                    }\r\n                    node = node.parent;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getSymbolsInScope(location: Node, meaning: SymbolFlags): Symbol[] {\r\n            let symbols: SymbolTable = {};\r\n            let memberFlags: NodeFlags = 0;\r\n\r\n            if (isInsideWithStatementBody(location)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return [];\r\n            }\r\n\r\n            populateSymbols();\r\n\r\n            return symbolsToArray(symbols);\r\n\r\n            function populateSymbols() {\r\n                while (location) {\r\n                    if (location.locals && !isGlobalSourceFile(location)) {\r\n                        copySymbols(location.locals, meaning);\r\n                    }\r\n\r\n                    switch (location.kind) {\r\n                        case SyntaxKind.SourceFile:\r\n                            if (!isExternalModule(<SourceFile>location)) {\r\n                                break;\r\n                            }\r\n                        case SyntaxKind.ModuleDeclaration:\r\n                            copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.ModuleMember);\r\n                            break;\r\n                        case SyntaxKind.EnumDeclaration:\r\n                            copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.EnumMember);\r\n                            break;\r\n                        case SyntaxKind.ClassDeclaration:\r\n                        case SyntaxKind.InterfaceDeclaration:\r\n                            if (!(memberFlags & NodeFlags.Static)) {\r\n                                copySymbols(getSymbolOfNode(location).members, meaning & SymbolFlags.Type);\r\n                            }\r\n                            break;\r\n                        case SyntaxKind.FunctionExpression:\r\n                            if ((<FunctionExpression>location).name) {\r\n                                copySymbol(location.symbol, meaning);\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    memberFlags = location.flags;\r\n                    location = location.parent;\r\n                }\r\n\r\n                copySymbols(globals, meaning);\r\n            }\r\n\r\n            // Returns 'true' if we should stop processing symbols.\r\n            function copySymbol(symbol: Symbol, meaning: SymbolFlags): void {\r\n                if (symbol.flags & meaning) {\r\n                    let id = symbol.name;\r\n                    if (!isReservedMemberName(id) && !hasProperty(symbols, id)) {\r\n                        symbols[id] = symbol;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function copySymbols(source: SymbolTable, meaning: SymbolFlags): void {\r\n                if (meaning) {\r\n                    for (let id in source) {\r\n                        if (hasProperty(source, id)) {\r\n                            copySymbol(source[id], meaning);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (isInsideWithStatementBody(location)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return [];\r\n            }\r\n\r\n            while (location) {\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    copySymbols(location.locals, meaning);\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) break;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.ModuleMember);\r\n                        break;\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.EnumMember);\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (!(memberFlags & NodeFlags.Static)) {\r\n                            copySymbols(getSymbolOfNode(location).members, meaning & SymbolFlags.Type);\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.FunctionExpression:\r\n                        if ((<FunctionExpression>location).name) {\r\n                            copySymbol(location.symbol, meaning);\r\n                        }\r\n                        break;\r\n                }\r\n                memberFlags = location.flags;\r\n                location = location.parent;\r\n            }\r\n            copySymbols(globals, meaning);\r\n            return symbolsToArray(symbols);\r\n        }\r\n\r\n        function isTypeDeclarationName(name: Node): boolean {\r\n            return name.kind == SyntaxKind.Identifier &&\r\n                isTypeDeclaration(name.parent) &&\r\n                (<Declaration>name.parent).name === name;\r\n        }\r\n\r\n        function isTypeDeclaration(node: Node): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.TypeParameter:\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        // True if the given identifier is part of a type reference\r\n        function isTypeReferenceIdentifier(entityName: EntityName): boolean {\r\n            let node: Node = entityName;\r\n            while (node.parent && node.parent.kind === SyntaxKind.QualifiedName) {\r\n                node = node.parent;\r\n            }\r\n\r\n            return node.parent && node.parent.kind === SyntaxKind.TypeReference;\r\n        }\r\n\r\n        function isHeritageClauseElementIdentifier(entityName: Node): boolean {\r\n            let node = entityName;\r\n            while (node.parent && node.parent.kind === SyntaxKind.PropertyAccessExpression) {\r\n                node = node.parent;\r\n            }\r\n\r\n            return node.parent && node.parent.kind === SyntaxKind.ExpressionWithTypeArguments;\r\n        }\r\n\r\n        function getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide: EntityName): ImportEqualsDeclaration | ExportAssignment {\r\n            while (nodeOnRightSide.parent.kind === SyntaxKind.QualifiedName) {\r\n                nodeOnRightSide = <QualifiedName>nodeOnRightSide.parent;\r\n            }\r\n\r\n            if (nodeOnRightSide.parent.kind === SyntaxKind.ImportEqualsDeclaration) {\r\n                return (<ImportEqualsDeclaration>nodeOnRightSide.parent).moduleReference === nodeOnRightSide && <ImportEqualsDeclaration>nodeOnRightSide.parent;\r\n            }\r\n\r\n            if (nodeOnRightSide.parent.kind === SyntaxKind.ExportAssignment) {\r\n                return (<ExportAssignment>nodeOnRightSide.parent).expression === <Node>nodeOnRightSide && <ExportAssignment>nodeOnRightSide.parent;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function isInRightSideOfImportOrExportAssignment(node: EntityName) {\r\n            return getLeftSideOfImportEqualsOrExportAssignment(node) !== undefined;\r\n        }\r\n\r\n        function getSymbolOfEntityNameOrPropertyAccessExpression(entityName: EntityName | PropertyAccessExpression): Symbol {\r\n            if (isDeclarationName(entityName)) {\r\n                return getSymbolOfNode(entityName.parent);\r\n            }\r\n\r\n            if (entityName.parent.kind === SyntaxKind.ExportAssignment) {\r\n                return resolveEntityName(<Identifier>entityName,\r\n                    /*all meanings*/ SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace | SymbolFlags.Alias);\r\n            }\r\n\r\n            if (entityName.kind !== SyntaxKind.PropertyAccessExpression) {\r\n                if (isInRightSideOfImportOrExportAssignment(<EntityName>entityName)) {\r\n                    // Since we already checked for ExportAssignment, this really could only be an Import\r\n                    return getSymbolOfPartOfRightHandSideOfImportEquals(<EntityName>entityName);\r\n                }\r\n            }\r\n\r\n            if (isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\r\n                entityName = <QualifiedName | PropertyAccessExpression>entityName.parent;\r\n            }\r\n\r\n            if (isHeritageClauseElementIdentifier(<EntityName>entityName)) {\r\n                let meaning = entityName.parent.kind === SyntaxKind.ExpressionWithTypeArguments ? SymbolFlags.Type : SymbolFlags.Namespace;\r\n                meaning |= SymbolFlags.Alias;\r\n                return resolveEntityName(<EntityName>entityName, meaning);\r\n            }\r\n            else if (isExpression(entityName)) {\r\n                if (nodeIsMissing(entityName)) {\r\n                    // Missing entity name.\r\n                    return undefined;\r\n                }\r\n\r\n                if (entityName.kind === SyntaxKind.Identifier) {\r\n                    // Include aliases in the meaning, this ensures that we do not follow aliases to where they point and instead\r\n                    // return the alias symbol.\r\n                    let meaning: SymbolFlags = SymbolFlags.Value | SymbolFlags.Alias;\r\n                    return resolveEntityName(<Identifier>entityName, meaning);\r\n                }\r\n                else if (entityName.kind === SyntaxKind.PropertyAccessExpression) {\r\n                    let symbol = getNodeLinks(entityName).resolvedSymbol;\r\n                    if (!symbol) {\r\n                        checkPropertyAccessExpression(<PropertyAccessExpression>entityName);\r\n                    }\r\n                    return getNodeLinks(entityName).resolvedSymbol;\r\n                }\r\n                else if (entityName.kind === SyntaxKind.QualifiedName) {\r\n                    let symbol = getNodeLinks(entityName).resolvedSymbol;\r\n                    if (!symbol) {\r\n                        checkQualifiedName(<QualifiedName>entityName);\r\n                    }\r\n                    return getNodeLinks(entityName).resolvedSymbol;\r\n                }\r\n            }\r\n            else if (isTypeReferenceIdentifier(<EntityName>entityName)) {\r\n                let meaning = entityName.parent.kind === SyntaxKind.TypeReference ? SymbolFlags.Type : SymbolFlags.Namespace;\r\n                // Include aliases in the meaning, this ensures that we do not follow aliases to where they point and instead\r\n                // return the alias symbol.\r\n                meaning |= SymbolFlags.Alias;\r\n                return resolveEntityName(<EntityName>entityName, meaning);\r\n            }\r\n\r\n            // Do we want to return undefined here?\r\n            return undefined;\r\n        }\r\n\r\n        function getSymbolInfo(node: Node) {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return undefined;\r\n            }\r\n\r\n            if (isDeclarationName(node)) {\r\n                // This is a declaration, call getSymbolOfNode\r\n                return getSymbolOfNode(node.parent);\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Identifier && isInRightSideOfImportOrExportAssignment(<Identifier>node)) {\r\n                return node.parent.kind === SyntaxKind.ExportAssignment\r\n                    ? getSymbolOfEntityNameOrPropertyAccessExpression(<Identifier>node)\r\n                    : getSymbolOfPartOfRightHandSideOfImportEquals(<Identifier>node);\r\n            }\r\n\r\n            switch (node.kind) {\r\n                case SyntaxKind.Identifier:\r\n                case SyntaxKind.PropertyAccessExpression:\r\n                case SyntaxKind.QualifiedName:\r\n                    return getSymbolOfEntityNameOrPropertyAccessExpression(<EntityName | PropertyAccessExpression>node);\r\n\r\n                case SyntaxKind.ThisKeyword:\r\n                case SyntaxKind.SuperKeyword:\r\n                    let type = checkExpression(<Expression>node);\r\n                    return type.symbol;\r\n\r\n                case SyntaxKind.ConstructorKeyword:\r\n                    // constructor keyword for an overload, should take us to the definition if it exist\r\n                    let constructorDeclaration = node.parent;\r\n                    if (constructorDeclaration && constructorDeclaration.kind === SyntaxKind.Constructor) {\r\n                        return (<ClassDeclaration>constructorDeclaration.parent).symbol;\r\n                    }\r\n                    return undefined;\r\n\r\n                case SyntaxKind.StringLiteral:\r\n                    // External module name in an import declaration\r\n                    let moduleName: Expression;\r\n                    if ((isExternalModuleImportEqualsDeclaration(node.parent.parent) &&\r\n                        getExternalModuleImportEqualsDeclarationExpression(node.parent.parent) === node) ||\r\n                        ((node.parent.kind === SyntaxKind.ImportDeclaration || node.parent.kind === SyntaxKind.ExportDeclaration) &&\r\n                            (<ImportDeclaration>node.parent).moduleSpecifier === node)) {\r\n                        return resolveExternalModuleName(node, <LiteralExpression>node);\r\n                    }\r\n\r\n                // Intentional fall-through\r\n                case SyntaxKind.NumericLiteral:\r\n                    // index access\r\n                    if (node.parent.kind == SyntaxKind.ElementAccessExpression && (<ElementAccessExpression>node.parent).argumentExpression === node) {\r\n                        let objectType = checkExpression((<ElementAccessExpression>node.parent).expression);\r\n                        if (objectType === unknownType) return undefined;\r\n                        let apparentType = getApparentType(objectType);\r\n                        if (apparentType === unknownType) return undefined;\r\n                        return getPropertyOfType(apparentType, (<LiteralExpression>node).text);\r\n                    }\r\n                    break;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getShorthandAssignmentValueSymbol(location: Node): Symbol {\r\n            // The function returns a value symbol of an identifier in the short-hand property assignment.\r\n            // This is necessary as an identifier in short-hand property assignment can contains two meaning:\r\n            // property name and property value.\r\n            if (location && location.kind === SyntaxKind.ShorthandPropertyAssignment) {\r\n                return resolveEntityName((<ShorthandPropertyAssignment>location).name, SymbolFlags.Value);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getTypeOfNode(node: Node): Type {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return unknownType;\r\n            }\r\n\r\n            if (isTypeNode(node)) {\r\n                return getTypeFromTypeNode(<TypeNode>node);\r\n            }\r\n\r\n            if (isExpression(node)) {\r\n                return getTypeOfExpression(<Expression>node);\r\n            }\r\n\r\n            if (isTypeDeclaration(node)) {\r\n                // In this case, we call getSymbolOfNode instead of getSymbolInfo because it is a declaration\r\n                let symbol = getSymbolOfNode(node);\r\n                return getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isTypeDeclarationName(node)) {\r\n                let symbol = getSymbolInfo(node);\r\n                return symbol && getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isDeclaration(node)) {\r\n                // In this case, we call getSymbolOfNode instead of getSymbolInfo because it is a declaration\r\n                let symbol = getSymbolOfNode(node);\r\n                return getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isDeclarationName(node)) {\r\n                let symbol = getSymbolInfo(node);\r\n                return symbol && getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isInRightSideOfImportOrExportAssignment(<Identifier>node)) {\r\n                let symbol = getSymbolInfo(node);\r\n                let declaredType = symbol && getDeclaredTypeOfSymbol(symbol);\r\n                return declaredType !== unknownType ? declaredType : getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        function getTypeOfExpression(expr: Expression): Type {\r\n            if (isRightSideOfQualifiedNameOrPropertyAccess(expr)) {\r\n                expr = <Expression>expr.parent;\r\n            }\r\n            return checkExpression(expr);\r\n        }\r\n\r\n        // Return the list of properties of the given type, augmented with properties from Function\r\n        // if the type has call or construct signatures\r\n        function getAugmentedPropertiesOfType(type: Type): Symbol[] {\r\n            type = getApparentType(type);\r\n            let propsByName = createSymbolTable(getPropertiesOfType(type));\r\n            if (getSignaturesOfType(type, SignatureKind.Call).length || getSignaturesOfType(type, SignatureKind.Construct).length) {\r\n                forEach(getPropertiesOfType(globalFunctionType), p => {\r\n                    if (!hasProperty(propsByName, p.name)) {\r\n                        propsByName[p.name] = p;\r\n                    }\r\n                });\r\n            }\r\n            return getNamedMembers(propsByName);\r\n        }\r\n\r\n        function getRootSymbols(symbol: Symbol): Symbol[] {\r\n            if (symbol.flags & SymbolFlags.UnionProperty) {\r\n                let symbols: Symbol[] = [];\r\n                let name = symbol.name;\r\n                forEach(getSymbolLinks(symbol).unionType.types, t => {\r\n                    symbols.push(getPropertyOfType(t, name));\r\n                });\r\n                return symbols;\r\n            }\r\n            else if (symbol.flags & SymbolFlags.Transient) {\r\n                let target = getSymbolLinks(symbol).target;\r\n                if (target) {\r\n                    return [target];\r\n                }\r\n            }\r\n            return [symbol];\r\n        }\r\n\r\n        // Emitter support\r\n\r\n        // When resolved as an expression identifier, if the given node references an exported entity, return the declaration\r\n        // node of the exported entity's container. Otherwise, return undefined.\r\n        function getReferencedExportContainer(node: Identifier): SourceFile | ModuleDeclaration | EnumDeclaration {\r\n            let symbol = getReferencedValueSymbol(node);\r\n            if (symbol) {\r\n                if (symbol.flags & SymbolFlags.ExportValue) {\r\n                    // If we reference an exported entity within the same module declaration, then whether\r\n                    // we prefix depends on the kind of entity. SymbolFlags.ExportHasLocal encompasses all the\r\n                    // kinds that we do NOT prefix.\r\n                    let exportSymbol = getMergedSymbol(symbol.exportSymbol);\r\n                    if (exportSymbol.flags & SymbolFlags.ExportHasLocal) {\r\n                        return undefined;\r\n                    }\r\n                    symbol = exportSymbol;\r\n                }\r\n                let parentSymbol = getParentOfSymbol(symbol);\r\n                if (parentSymbol) {\r\n                    if (parentSymbol.flags & SymbolFlags.ValueModule && parentSymbol.valueDeclaration.kind === SyntaxKind.SourceFile) {\r\n                        return <SourceFile>parentSymbol.valueDeclaration;\r\n                    }\r\n                    for (let n = node.parent; n; n = n.parent) {\r\n                        if ((n.kind === SyntaxKind.ModuleDeclaration || n.kind === SyntaxKind.EnumDeclaration) && getSymbolOfNode(n) === parentSymbol) {\r\n                            return <ModuleDeclaration | EnumDeclaration>n;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // When resolved as an expression identifier, if the given node references an import, return the declaration of\r\n        // that import. Otherwise, return undefined.\r\n        function getReferencedImportDeclaration(node: Identifier): Declaration {\r\n            let symbol = getReferencedValueSymbol(node);\r\n            return symbol && symbol.flags & SymbolFlags.Alias ? getDeclarationOfAliasSymbol(symbol) : undefined;\r\n        }\r\n\r\n        function isStatementWithLocals(node: Node) {\r\n            switch (node.kind) {\r\n                case SyntaxKind.Block:\r\n                case SyntaxKind.CaseBlock:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isNestedRedeclarationSymbol(symbol: Symbol): boolean {\r\n            if (symbol.flags & SymbolFlags.BlockScoped) {\r\n                let links = getSymbolLinks(symbol);\r\n                if (links.isNestedRedeclaration === undefined) {\r\n                    let container = getEnclosingBlockScopeContainer(symbol.valueDeclaration);\r\n                    links.isNestedRedeclaration = isStatementWithLocals(container) &&\r\n                       !!resolveName(container.parent, symbol.name, SymbolFlags.Value, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined);\r\n                }\r\n                return links.isNestedRedeclaration;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // When resolved as an expression identifier, if the given node references a nested block scoped entity with\r\n        // a name that hides an existing name, return the declaration of that entity. Otherwise, return undefined.\r\n        function getReferencedNestedRedeclaration(node: Identifier): Declaration {\r\n            let symbol = getReferencedValueSymbol(node);\r\n            return symbol && isNestedRedeclarationSymbol(symbol) ? symbol.valueDeclaration : undefined;\r\n        }\r\n\r\n        // Return true if the given node is a declaration of a nested block scoped entity with a name that hides an\r\n        // existing name.\r\n        function isNestedRedeclaration(node: Declaration): boolean {\r\n            return isNestedRedeclarationSymbol(getSymbolOfNode(node));\r\n        }\r\n\r\n        function isValueAliasDeclaration(node: Node): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.ImportEqualsDeclaration:\r\n                case SyntaxKind.ImportClause:\r\n                case SyntaxKind.NamespaceImport:\r\n                case SyntaxKind.ImportSpecifier:\r\n                case SyntaxKind.ExportSpecifier:\r\n                    return isAliasResolvedToValue(getSymbolOfNode(node));\r\n                case SyntaxKind.ExportDeclaration:\r\n                    let exportClause = (<ExportDeclaration>node).exportClause;\r\n                    return exportClause && forEach(exportClause.elements, isValueAliasDeclaration);\r\n                case SyntaxKind.ExportAssignment:\r\n                    return (<ExportAssignment>node).expression && (<ExportAssignment>node).expression.kind === SyntaxKind.Identifier ? isAliasResolvedToValue(getSymbolOfNode(node)) : true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isTopLevelValueImportEqualsWithEntityName(node: ImportEqualsDeclaration): boolean {\r\n            if (node.parent.kind !== SyntaxKind.SourceFile || !isInternalModuleImportEqualsDeclaration(node)) {\r\n                // parent is not source file or it is not reference to internal module\r\n                return false;\r\n            }\r\n\r\n            var isValue = isAliasResolvedToValue(getSymbolOfNode(node));\r\n            return isValue && node.moduleReference && !nodeIsMissing(node.moduleReference);\r\n        }\r\n\r\n        function isAliasResolvedToValue(symbol: Symbol): boolean {\r\n            let target = resolveAlias(symbol);\r\n            if (target === unknownSymbol && compilerOptions.isolatedModules) {\r\n                return true;\r\n            }\r\n            // const enums and modules that contain only const enums are not considered values from the emit perespective\r\n            return target !== unknownSymbol && target && target.flags & SymbolFlags.Value && !isConstEnumOrConstEnumOnlyModule(target);\r\n        }\r\n\r\n        function isConstEnumOrConstEnumOnlyModule(s: Symbol): boolean {\r\n            return isConstEnumSymbol(s) || s.constEnumOnlyModule;\r\n        }\r\n\r\n        function isReferencedAliasDeclaration(node: Node, checkChildren?: boolean): boolean {\r\n            if (isAliasSymbolDeclaration(node)) {\r\n                let symbol = getSymbolOfNode(node);\r\n                if (getSymbolLinks(symbol).referenced) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (checkChildren) {\r\n                return forEachChild(node, node => isReferencedAliasDeclaration(node, checkChildren));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isImplementationOfOverload(node: FunctionLikeDeclaration) {\r\n            if (nodeIsPresent(node.body)) {\r\n                let symbol = getSymbolOfNode(node);\r\n                let signaturesOfSymbol = getSignaturesOfSymbol(symbol);\r\n                // If this function body corresponds to function with multiple signature, it is implementation of overload\r\n                // e.g.: function foo(a: string): string;\r\n                //       function foo(a: number): number;\r\n                //       function foo(a: any) { // This is implementation of the overloads\r\n                //           return a;\r\n                //       }\r\n                return signaturesOfSymbol.length > 1 ||\r\n                    // If there is single signature for the symbol, it is overload if that signature isn't coming from the node\r\n                    // e.g.: function foo(a: string): string;\r\n                    //       function foo(a: any) { // This is implementation of the overloads\r\n                    //           return a;\r\n                    //       }\r\n                    (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getNodeCheckFlags(node: Node): NodeCheckFlags {\r\n            return getNodeLinks(node).flags;\r\n        }\r\n\r\n        function getEnumMemberValue(node: EnumMember): number {\r\n            computeEnumMemberValues(<EnumDeclaration>node.parent);\r\n            return getNodeLinks(node).enumMemberValue;\r\n        }\r\n\r\n        function getConstantValue(node: EnumMember | PropertyAccessExpression | ElementAccessExpression): number {\r\n            if (node.kind === SyntaxKind.EnumMember) {\r\n                return getEnumMemberValue(<EnumMember>node);\r\n            }\r\n\r\n            let symbol = getNodeLinks(node).resolvedSymbol;\r\n            if (symbol && (symbol.flags & SymbolFlags.EnumMember)) {\r\n                // inline property\\index accesses only for const enums\r\n                if (isConstEnumDeclaration(symbol.valueDeclaration.parent)) {\r\n                    return getEnumMemberValue(<EnumMember>symbol.valueDeclaration);\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        /** Serializes an EntityName (with substitutions) to an appropriate JS constructor value. Used by the __metadata decorator. */\r\n        function serializeEntityName(node: EntityName, fallbackPath?: string[]): string {\r\n            if (node.kind === SyntaxKind.Identifier) {\r\n                // TODO(ron.buckton): The getExpressionNameSubstitution function has been removed, but calling it\r\n                // here has no effect anyway as an identifier in a type name is not an expression.\r\n                // var substitution = getExpressionNameSubstitution(<Identifier>node, getGeneratedNameForNode);\r\n                // var text = substitution || (<Identifier>node).text;\r\n                var text = (<Identifier>node).text;\r\n                if (fallbackPath) {\r\n                    fallbackPath.push(text);\r\n                }\r\n                else {\r\n                    return text;\r\n                }\r\n            }\r\n            else {\r\n                var left = serializeEntityName((<QualifiedName>node).left, fallbackPath);\r\n                var right = serializeEntityName((<QualifiedName>node).right, fallbackPath);\r\n                if (!fallbackPath) {\r\n                    return left + \".\" + right;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Serializes a TypeReferenceNode to an appropriate JS constructor value. Used by the __metadata decorator. */\r\n        function serializeTypeReferenceNode(node: TypeReferenceNode): string | string[] {\r\n            // serialization of a TypeReferenceNode uses the following rules:\r\n            //\r\n            // * The serialized type of a TypeReference that is `void` is \"void 0\".\r\n            // * The serialized type of a TypeReference that is a `boolean` is \"Boolean\".\r\n            // * The serialized type of a TypeReference that is an enum or `number` is \"Number\".\r\n            // * The serialized type of a TypeReference that is a string literal or `string` is \"String\".\r\n            // * The serialized type of a TypeReference that is a tuple is \"Array\".\r\n            // * The serialized type of a TypeReference that is a `symbol` is \"Symbol\".\r\n            // * The serialized type of a TypeReference with a value declaration is its entity name.\r\n            // * The serialized type of a TypeReference with a call or construct signature is \"Function\".\r\n            // * The serialized type of any other type is \"Object\".\r\n            let type = getTypeFromTypeNode(node);\r\n            if (type.flags & TypeFlags.Void) {\r\n                return \"void 0\";\r\n            }\r\n            else if (type.flags & TypeFlags.Boolean) {\r\n                return \"Boolean\";\r\n            }\r\n            else if (type.flags & TypeFlags.NumberLike) {\r\n                return \"Number\";\r\n            }\r\n            else if (type.flags & TypeFlags.StringLike) {\r\n                return \"String\";\r\n            }\r\n            else if (type.flags & TypeFlags.Tuple) {\r\n                return \"Array\";\r\n            }\r\n            else if (type.flags & TypeFlags.ESSymbol) {\r\n                return \"Symbol\";\r\n            }\r\n            else if (type === unknownType) {\r\n                var fallbackPath: string[] = [];\r\n                serializeEntityName(node.typeName, fallbackPath);\r\n                return fallbackPath;\r\n            }\r\n            else if (type.symbol && type.symbol.valueDeclaration) {\r\n                return serializeEntityName(node.typeName);\r\n            }\r\n            else if (typeHasCallOrConstructSignatures(type)) {\r\n                return \"Function\";\r\n            }\r\n\r\n            return \"Object\";\r\n        }\r\n\r\n        /** Serializes a TypeNode to an appropriate JS constructor value. Used by the __metadata decorator. */\r\n        function serializeTypeNode(node: TypeNode | LiteralExpression): string | string[] {\r\n            // serialization of a TypeNode uses the following rules:\r\n            //\r\n            // * The serialized type of `void` is \"void 0\" (undefined).\r\n            // * The serialized type of a parenthesized type is the serialized type of its nested type.\r\n            // * The serialized type of a Function or Constructor type is \"Function\".\r\n            // * The serialized type of an Array or Tuple type is \"Array\".\r\n            // * The serialized type of `boolean` is \"Boolean\".\r\n            // * The serialized type of `string` or a string-literal type is \"String\".\r\n            // * The serialized type of a type reference is handled by `serializeTypeReferenceNode`.\r\n            // * The serialized type of any other type node is \"Object\".\r\n            if (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.VoidKeyword:\r\n                        return \"void 0\";\r\n                    case SyntaxKind.ParenthesizedType:\r\n                        return serializeTypeNode((<ParenthesizedTypeNode>node).type);\r\n                    case SyntaxKind.FunctionType:\r\n                    case SyntaxKind.ConstructorType:\r\n                        return \"Function\";\r\n                    case SyntaxKind.ArrayType:\r\n                    case SyntaxKind.TupleType:\r\n                        return \"Array\";\r\n                    case SyntaxKind.BooleanKeyword:\r\n                        return \"Boolean\";\r\n                    case SyntaxKind.StringKeyword:\r\n                    case SyntaxKind.StringLiteral:\r\n                        return \"String\";\r\n                    case SyntaxKind.NumberKeyword:\r\n                        return \"Number\";\r\n                    case SyntaxKind.TypeReference:\r\n                        return serializeTypeReferenceNode(<TypeReferenceNode>node);\r\n                    case SyntaxKind.TypeQuery:\r\n                    case SyntaxKind.TypeLiteral:\r\n                    case SyntaxKind.UnionType:\r\n                    case SyntaxKind.AnyKeyword:\r\n                        break;\r\n                    default:\r\n                        Debug.fail(\"Cannot serialize unexpected type node.\");\r\n                        break;\r\n                }\r\n            }\r\n             \r\n            return \"Object\";\r\n        }\r\n\r\n        /** Serializes the type of a declaration to an appropriate JS constructor value. Used by the __metadata decorator for a class member. */\r\n        function serializeTypeOfNode(node: Node): string | string[] {\r\n            // serialization of the type of a declaration uses the following rules:\r\n            //\r\n            // * The serialized type of a ClassDeclaration is \"Function\"\r\n            // * The serialized type of a ParameterDeclaration is the serialized type of its type annotation.\r\n            // * The serialized type of a PropertyDeclaration is the serialized type of its type annotation.\r\n            // * The serialized type of an AccessorDeclaration is the serialized type of the return type annotation of its getter or parameter type annotation of its setter.\r\n            // * The serialized type of any other FunctionLikeDeclaration is \"Function\".\r\n            // * The serialized type of any other node is \"void 0\".\r\n            // \r\n            // For rules on serializing type annotations, see `serializeTypeNode`.\r\n            switch (node.kind) {\r\n                case SyntaxKind.ClassDeclaration:       return \"Function\";\r\n                case SyntaxKind.PropertyDeclaration:    return serializeTypeNode((<PropertyDeclaration>node).type);\r\n                case SyntaxKind.Parameter:              return serializeTypeNode((<ParameterDeclaration>node).type);\r\n                case SyntaxKind.GetAccessor:            return serializeTypeNode((<AccessorDeclaration>node).type);\r\n                case SyntaxKind.SetAccessor:            return serializeTypeNode(getSetAccessorTypeAnnotationNode(<AccessorDeclaration>node));\r\n            }\r\n            if (isFunctionLike(node)) {\r\n                return \"Function\";\r\n            }\r\n            return \"void 0\";\r\n        }\r\n        \r\n        /** Serializes the parameter types of a function or the constructor of a class. Used by the __metadata decorator for a method or set accessor. */\r\n        function serializeParameterTypesOfNode(node: Node): (string | string[])[] {\r\n            // serialization of parameter types uses the following rules:\r\n            //\r\n            // * If the declaration is a class, the parameters of the first constructor with a body are used.\r\n            // * If the declaration is function-like and has a body, the parameters of the function are used.\r\n            // \r\n            // For the rules on serializing the type of each parameter declaration, see `serializeTypeOfDeclaration`.\r\n            if (node) {\r\n                var valueDeclaration: FunctionLikeDeclaration;\r\n                if (node.kind === SyntaxKind.ClassDeclaration) {\r\n                    valueDeclaration = getFirstConstructorWithBody(<ClassDeclaration>node);\r\n                }\r\n                else if (isFunctionLike(node) && nodeIsPresent((<FunctionLikeDeclaration>node).body)) {\r\n                    valueDeclaration = <FunctionLikeDeclaration>node;\r\n                }\r\n                if (valueDeclaration) {\r\n                    var result: (string | string[])[];\r\n                    var parameters = valueDeclaration.parameters;\r\n                    var parameterCount = parameters.length;\r\n                    if (parameterCount > 0) {\r\n                        result = new Array<string>(parameterCount);\r\n                        for (var i = 0; i < parameterCount; i++) {\r\n                            if (parameters[i].dotDotDotToken) {\r\n                                var parameterType = parameters[i].type;\r\n                                if (parameterType.kind === SyntaxKind.ArrayType) {\r\n                                    parameterType = (<ArrayTypeNode>parameterType).elementType;\r\n                                }\r\n                                else if (parameterType.kind === SyntaxKind.TypeReference && (<TypeReferenceNode>parameterType).typeArguments && (<TypeReferenceNode>parameterType).typeArguments.length === 1) {\r\n                                    parameterType = (<TypeReferenceNode>parameterType).typeArguments[0];\r\n                                }\r\n                                else {\r\n                                    parameterType = undefined;\r\n                                }\r\n                                result[i] = serializeTypeNode(parameterType);\r\n                            }\r\n                            else {\r\n                                result[i] = serializeTypeOfNode(parameters[i]);\r\n                            }\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        /** Serializes the return type of function. Used by the __metadata decorator for a method. */\r\n        function serializeReturnTypeOfNode(node: Node): string | string[] {\r\n            if (node && isFunctionLike(node)) {\r\n                return serializeTypeNode((<FunctionLikeDeclaration>node).type);\r\n            }\r\n            return \"void 0\";\r\n        }\r\n\r\n        function writeTypeOfDeclaration(declaration: AccessorDeclaration | VariableLikeDeclaration, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter) {\r\n            // Get type of the symbol if this is the valid symbol otherwise get type at location\r\n            let symbol = getSymbolOfNode(declaration);\r\n            let type = symbol && !(symbol.flags & (SymbolFlags.TypeLiteral | SymbolFlags.Signature))\r\n                ? getTypeOfSymbol(symbol)\r\n                : unknownType;\r\n\r\n            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\r\n        }\r\n\r\n        function writeReturnTypeOfSignatureDeclaration(signatureDeclaration: SignatureDeclaration, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter) {\r\n            let signature = getSignatureFromDeclaration(signatureDeclaration);\r\n            getSymbolDisplayBuilder().buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags);\r\n        }\r\n\r\n        function writeTypeOfExpression(expr: Expression, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter) {\r\n            var type = getTypeOfExpression(expr);\r\n            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\r\n        }\r\n\r\n        function hasGlobalName(name: string): boolean {\r\n            return hasProperty(globals, name);\r\n        }\r\n\r\n        function getReferencedValueSymbol(reference: Identifier): Symbol {\r\n            return getNodeLinks(reference).resolvedSymbol ||\r\n                resolveName(reference, reference.text, SymbolFlags.Value | SymbolFlags.ExportValue | SymbolFlags.Alias,\r\n                    /*nodeNotFoundMessage*/ undefined, /*nameArg*/ undefined);\r\n        }\r\n\r\n        function getReferencedValueDeclaration(reference: Identifier): Declaration {\r\n            Debug.assert(!nodeIsSynthesized(reference));\r\n            let symbol = getReferencedValueSymbol(reference);\r\n            return symbol && getExportSymbolOfValueSymbolIfExported(symbol).valueDeclaration;\r\n        }\r\n\r\n        function getBlockScopedVariableId(n: Identifier): number {\r\n            Debug.assert(!nodeIsSynthesized(n));\r\n\r\n            let isVariableDeclarationOrBindingElement =\r\n                n.parent.kind === SyntaxKind.BindingElement || (n.parent.kind === SyntaxKind.VariableDeclaration && (<VariableDeclaration>n.parent).name === n);\r\n\r\n            let symbol = \r\n                (isVariableDeclarationOrBindingElement ? getSymbolOfNode(n.parent) : undefined) ||\r\n                getNodeLinks(n).resolvedSymbol ||\r\n                resolveName(n, n.text, SymbolFlags.Value | SymbolFlags.Alias, /*nodeNotFoundMessage*/ undefined, /*nameArg*/ undefined);\r\n\r\n            let isLetOrConst =\r\n                symbol &&\r\n                (symbol.flags & SymbolFlags.BlockScopedVariable) &&\r\n                symbol.valueDeclaration.parent.kind !== SyntaxKind.CatchClause;\r\n\r\n            if (isLetOrConst) {\r\n                // side-effect of calling this method:\r\n                //   assign id to symbol if it was not yet set\r\n                getSymbolLinks(symbol);\r\n                return symbol.id;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function instantiateSingleCallFunctionType(functionType: Type, typeArguments: Type[]): Type {\r\n            if (functionType === unknownType) {\r\n                return unknownType;\r\n            }\r\n\r\n            let signature = getSingleCallSignature(functionType);\r\n            if (!signature) {\r\n                return unknownType;\r\n            }\r\n            \r\n            let instantiatedSignature = getSignatureInstantiation(signature, typeArguments);\r\n            return getOrCreateTypeFromSignature(instantiatedSignature);\r\n        }\r\n\r\n        function createResolver(): EmitResolver {\r\n            return {\r\n                getReferencedExportContainer,\r\n                getReferencedImportDeclaration,\r\n                getReferencedNestedRedeclaration,\r\n                isNestedRedeclaration,\r\n                isValueAliasDeclaration,\r\n                hasGlobalName,\r\n                isReferencedAliasDeclaration,\r\n                getNodeCheckFlags,\r\n                isTopLevelValueImportEqualsWithEntityName,\r\n                isDeclarationVisible,\r\n                isImplementationOfOverload,\r\n                writeTypeOfDeclaration,\r\n                writeReturnTypeOfSignatureDeclaration,\r\n                writeTypeOfExpression,\r\n                isSymbolAccessible,\r\n                isEntityNameVisible,\r\n                getConstantValue,\r\n                collectLinkedAliases,\r\n                getBlockScopedVariableId,\r\n                getReferencedValueDeclaration,\r\n                serializeTypeOfNode,\r\n                serializeParameterTypesOfNode,\r\n                serializeReturnTypeOfNode,\r\n            };\r\n        }\r\n\r\n        function initializeTypeChecker() {\r\n            // Bind all source files and propagate errors\r\n            forEach(host.getSourceFiles(), file => {\r\n                bindSourceFile(file);\r\n            });\r\n\r\n            // Initialize global symbol table\r\n            forEach(host.getSourceFiles(), file => {\r\n                if (!isExternalModule(file)) {\r\n                    mergeSymbolTable(globals, file.locals);\r\n                }\r\n            });\r\n\r\n            // Initialize special symbols\r\n            getSymbolLinks(undefinedSymbol).type = undefinedType;\r\n            getSymbolLinks(argumentsSymbol).type = getGlobalType(\"IArguments\");\r\n            getSymbolLinks(unknownSymbol).type = unknownType;\r\n            globals[undefinedSymbol.name] = undefinedSymbol;\r\n            // Initialize special types\r\n            globalArrayType = <GenericType>getGlobalType(\"Array\", /*arity*/ 1);\r\n            globalObjectType = getGlobalType(\"Object\");\r\n            globalFunctionType = getGlobalType(\"Function\");\r\n            globalStringType = getGlobalType(\"String\");\r\n            globalNumberType = getGlobalType(\"Number\");\r\n            globalBooleanType = getGlobalType(\"Boolean\");\r\n            globalRegExpType = getGlobalType(\"RegExp\");\r\n            getGlobalClassDecoratorType = memoize(() => getGlobalType(\"ClassDecorator\"));\r\n            getGlobalPropertyDecoratorType = memoize(() => getGlobalType(\"PropertyDecorator\"));\r\n            getGlobalMethodDecoratorType = memoize(() => getGlobalType(\"MethodDecorator\"));\r\n            getGlobalParameterDecoratorType = memoize(() => getGlobalType(\"ParameterDecorator\"));\r\n\r\n            // If we're in ES6 mode, load the TemplateStringsArray.\r\n            // Otherwise, default to 'unknown' for the purposes of type checking in LS scenarios.\r\n            if (languageVersion >= ScriptTarget.ES6) {\r\n                globalTemplateStringsArrayType = getGlobalType(\"TemplateStringsArray\");\r\n                globalESSymbolType = getGlobalType(\"Symbol\");\r\n                globalESSymbolConstructorSymbol = getGlobalValueSymbol(\"Symbol\");\r\n                globalIterableType = <GenericType>getGlobalType(\"Iterable\", /*arity*/ 1);\r\n                globalIteratorType = <GenericType>getGlobalType(\"Iterator\", /*arity*/ 1);\r\n                globalIterableIteratorType = <GenericType>getGlobalType(\"IterableIterator\", /*arity*/ 1);\r\n            }\r\n            else {\r\n                globalTemplateStringsArrayType = unknownType;\r\n\r\n                // Consider putting Symbol interface in lib.d.ts. On the plus side, putting it in lib.d.ts would make it\r\n                // extensible for Polyfilling Symbols. But putting it into lib.d.ts could also break users that have\r\n                // a global Symbol already, particularly if it is a class.\r\n                globalESSymbolType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n                globalESSymbolConstructorSymbol = undefined;\r\n                globalIterableType = emptyGenericType;\r\n                globalIteratorType = emptyGenericType;\r\n                globalIterableIteratorType = emptyGenericType;\r\n            }\r\n\r\n            anyArrayType = createArrayType(anyType);\r\n        }\r\n\r\n        // GRAMMAR CHECKING\r\n        function isReservedWordInStrictMode(node: Identifier): boolean {\r\n            // Check that originalKeywordKind is less than LastFutureReservedWord to see if an Identifier is a strict-mode reserved word\r\n            return (node.parserContextFlags & ParserContextFlags.StrictMode) &&\r\n                (SyntaxKind.FirstFutureReservedWord <= node.originalKeywordKind && node.originalKeywordKind <= SyntaxKind.LastFutureReservedWord);\r\n        }\r\n\r\n        function reportStrictModeGrammarErrorInClassDeclaration(identifier: Identifier, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {\r\n            // We are checking if this name is inside class declaration or class expression (which are under class definitions inside ES6 spec.)\r\n            // if so, we would like to give more explicit invalid usage error.\r\n            if (getAncestor(identifier, SyntaxKind.ClassDeclaration) || getAncestor(identifier, SyntaxKind.ClassExpression)) {\r\n                return grammarErrorOnNode(identifier, message, arg0);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarImportDeclarationNameInStrictMode(node: ImportDeclaration): boolean {\r\n            // Check if the import declaration used strict-mode reserved word in its names bindings\r\n            if (node.importClause) {\r\n                let impotClause = node.importClause;\r\n                if (impotClause.namedBindings) {\r\n                    let nameBindings = impotClause.namedBindings;\r\n                    if (nameBindings.kind === SyntaxKind.NamespaceImport) {\r\n                        let name = <Identifier>(<NamespaceImport>nameBindings).name;\r\n                        if (isReservedWordInStrictMode(name)) {\r\n                            let nameText = declarationNameToString(name);\r\n                            return grammarErrorOnNode(name, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n                        }\r\n                    }\r\n                    else if (nameBindings.kind === SyntaxKind.NamedImports) {\r\n                        let reportError = false;\r\n                        for (let element of (<NamedImports>nameBindings).elements) {\r\n                            let name = element.name;\r\n                            if (isReservedWordInStrictMode(name)) {\r\n                                let nameText = declarationNameToString(name);\r\n                                reportError = reportError || grammarErrorOnNode(name, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n                            }\r\n                        }\r\n                        return reportError;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarDeclarationNameInStrictMode(node: Declaration): boolean {\r\n            let name = node.name;\r\n            if (name && name.kind === SyntaxKind.Identifier && isReservedWordInStrictMode(<Identifier>name)) {\r\n                let nameText = declarationNameToString(name);\r\n                switch (node.kind) {\r\n                    case SyntaxKind.Parameter:\r\n                    case SyntaxKind.VariableDeclaration:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.TypeParameter:\r\n                    case SyntaxKind.BindingElement:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                    case SyntaxKind.TypeAliasDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        return checkGrammarIdentifierInStrictMode(<Identifier>name);\r\n\r\n                    case SyntaxKind.ClassDeclaration:\r\n                        // Report an error if the class declaration uses strict-mode reserved word.\r\n                        return grammarErrorOnNode(name, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode, nameText);\r\n\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        // Report an error if the module declaration uses strict-mode reserved word.\r\n                        // TODO(yuisu): fix this when having external module in strict mode\r\n                        return grammarErrorOnNode(name, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n\r\n                    case SyntaxKind.ImportEqualsDeclaration:\r\n                        // TODO(yuisu): fix this when having external module in strict mode\r\n                        return grammarErrorOnNode(name, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarTypeReferenceInStrictMode(typeName: Identifier | QualifiedName) {\r\n            // Check if the type reference is using strict mode keyword\r\n            // Example:\r\n            //      class C {\r\n            //          foo(x: public){}  // Error.\r\n            //      }\r\n            if (typeName.kind === SyntaxKind.Identifier) {\r\n                checkGrammarTypeNameInStrictMode(<Identifier>typeName);\r\n            }\r\n            // Report an error for each identifier in QualifiedName\r\n            // Example:\r\n            //      foo (x: B.private.bar)      // error at private\r\n            //      foo (x: public.private.package)  // error at public, private, and package\r\n            else if (typeName.kind === SyntaxKind.QualifiedName) {\r\n                // Walk from right to left and report a possible error at each Identifier in QualifiedName\r\n                // Example:\r\n                //      x1: public.private.package  // error at public and private\r\n                checkGrammarTypeNameInStrictMode((<QualifiedName>typeName).right);\r\n                checkGrammarTypeReferenceInStrictMode((<QualifiedName>typeName).left);\r\n            }\r\n        }\r\n\r\n        // This function will report an error for every identifier in property access expression\r\n        // whether it violates strict mode reserved words.\r\n        // Example:\r\n        //      public                  // error at public\r\n        //      public.private.package  // error at public\r\n        //      B.private.B             // no error\r\n        function checkGrammarExpressionWithTypeArgumentsInStrictMode(expression: Expression) {\r\n            // Example:\r\n            //      class C extends public // error at public\r\n            if (expression && expression.kind === SyntaxKind.Identifier) {\r\n                return checkGrammarIdentifierInStrictMode(expression);\r\n            }\r\n            else if (expression && expression.kind === SyntaxKind.PropertyAccessExpression) {\r\n                // Walk from left to right in PropertyAccessExpression until we are at the left most expression\r\n                // in PropertyAccessExpression. According to grammar production of MemberExpression,\r\n                // the left component expression is a PrimaryExpression (i.e. Identifier) while the other\r\n                // component after dots can be IdentifierName.\r\n                checkGrammarExpressionWithTypeArgumentsInStrictMode((<PropertyAccessExpression>expression).expression);\r\n            }\r\n\r\n        }\r\n\r\n        // The function takes an identifier itself or an expression which has SyntaxKind.Identifier.\r\n        function checkGrammarIdentifierInStrictMode(node: Expression | Identifier, nameText?: string): boolean {\r\n            if (node && node.kind === SyntaxKind.Identifier && isReservedWordInStrictMode(<Identifier>node)) {\r\n                if (!nameText) {\r\n                    nameText = declarationNameToString(<Identifier>node);\r\n                }\r\n\r\n                // TODO (yuisu): Fix when module is a strict mode\r\n                let errorReport = reportStrictModeGrammarErrorInClassDeclaration(<Identifier>node, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode, nameText)||\r\n                    grammarErrorOnNode(node, Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n                return errorReport;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // The function takes an identifier when uses as a typeName in TypeReferenceNode\r\n        function checkGrammarTypeNameInStrictMode(node: Identifier): boolean {\r\n            if (node && node.kind === SyntaxKind.Identifier && isReservedWordInStrictMode(<Identifier>node)) {\r\n                let nameText = declarationNameToString(<Identifier>node);\r\n\r\n                // TODO (yuisu): Fix when module is a strict mode\r\n                let errorReport = reportStrictModeGrammarErrorInClassDeclaration(<Identifier>node, Diagnostics.Type_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode, nameText) ||\r\n                    grammarErrorOnNode(node, Diagnostics.Type_expected_0_is_a_reserved_word_in_strict_mode, nameText);\r\n                return errorReport;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarDecorators(node: Node): boolean {\r\n            if (!node.decorators) {\r\n                return false;\r\n            }\r\n            if (!nodeCanBeDecorated(node)) {\r\n                return grammarErrorOnFirstToken(node, Diagnostics.Decorators_are_not_valid_here);\r\n            }\r\n            else if (languageVersion < ScriptTarget.ES5) {\r\n                return grammarErrorOnFirstToken(node, Diagnostics.Decorators_are_only_available_when_targeting_ECMAScript_5_and_higher);\r\n            }\r\n            else if (node.kind === SyntaxKind.GetAccessor || node.kind === SyntaxKind.SetAccessor) {\r\n                let accessors = getAllAccessorDeclarations((<ClassDeclaration>node.parent).members, <AccessorDeclaration>node);\r\n                if (accessors.firstAccessor.decorators && node === accessors.secondAccessor) {\r\n                    return grammarErrorOnFirstToken(node, Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarModifiers(node: Node): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.PropertyDeclaration:\r\n                case SyntaxKind.PropertySignature:\r\n                case SyntaxKind.MethodDeclaration:\r\n                case SyntaxKind.MethodSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                case SyntaxKind.ModuleDeclaration:\r\n                case SyntaxKind.ImportDeclaration:\r\n                case SyntaxKind.ImportEqualsDeclaration:\r\n                case SyntaxKind.ExportDeclaration:\r\n                case SyntaxKind.ExportAssignment:\r\n                case SyntaxKind.Parameter:\r\n                    break;\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                case SyntaxKind.VariableStatement:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    if (node.modifiers && node.parent.kind !== SyntaxKind.ModuleBlock && node.parent.kind !== SyntaxKind.SourceFile) {\r\n                        return grammarErrorOnFirstToken(node, Diagnostics.Modifiers_cannot_appear_here);\r\n                    }\r\n                    break;\r\n                case SyntaxKind.EnumDeclaration:\r\n                    if (node.modifiers && (node.modifiers.length > 1 || node.modifiers[0].kind !== SyntaxKind.ConstKeyword) &&\r\n                        node.parent.kind !== SyntaxKind.ModuleBlock && node.parent.kind !== SyntaxKind.SourceFile) {\r\n                        return grammarErrorOnFirstToken(node, Diagnostics.Modifiers_cannot_appear_here);\r\n                    }\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            if (!node.modifiers) {\r\n                return;\r\n            }\r\n\r\n            let lastStatic: Node, lastPrivate: Node, lastProtected: Node, lastDeclare: Node;\r\n            let flags = 0;\r\n            for (let modifier of node.modifiers) {\r\n                switch (modifier.kind) {\r\n                    case SyntaxKind.PublicKeyword:\r\n                    case SyntaxKind.ProtectedKeyword:\r\n                    case SyntaxKind.PrivateKeyword:\r\n                        let text: string;\r\n                        if (modifier.kind === SyntaxKind.PublicKeyword) {\r\n                            text = \"public\";\r\n                        }\r\n                        else if (modifier.kind === SyntaxKind.ProtectedKeyword) {\r\n                            text = \"protected\";\r\n                            lastProtected = modifier;\r\n                        }\r\n                        else {\r\n                            text = \"private\";\r\n                            lastPrivate = modifier;\r\n                        }\r\n\r\n                        if (flags & NodeFlags.AccessibilityModifier) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics.Accessibility_modifier_already_seen);\r\n                        }\r\n                        else if (flags & NodeFlags.Static) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, \"static\");\r\n                        }\r\n                        else if (node.parent.kind === SyntaxKind.ModuleBlock || node.parent.kind === SyntaxKind.SourceFile) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_module_element, text);\r\n                        }\r\n                        flags |= modifierToFlag(modifier.kind);\r\n                        break;\r\n\r\n                    case SyntaxKind.StaticKeyword:\r\n                        if (flags & NodeFlags.Static) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, \"static\");\r\n                        }\r\n                        else if (node.parent.kind === SyntaxKind.ModuleBlock || node.parent.kind === SyntaxKind.SourceFile) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_module_element, \"static\");\r\n                        }\r\n                        else if (node.kind === SyntaxKind.Parameter) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"static\");\r\n                        }\r\n                        flags |= NodeFlags.Static;\r\n                        lastStatic = modifier;\r\n                        break;\r\n\r\n                    case SyntaxKind.ExportKeyword:\r\n                        if (flags & NodeFlags.Export) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, \"export\");\r\n                        }\r\n                        else if (flags & NodeFlags.Ambient) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, \"export\", \"declare\");\r\n                        }\r\n                        else if (node.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_class_element, \"export\");\r\n                        }\r\n                        else if (node.kind === SyntaxKind.Parameter) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"export\");\r\n                        }\r\n                        flags |= NodeFlags.Export;\r\n                        break;\r\n\r\n                    case SyntaxKind.DeclareKeyword:\r\n                        if (flags & NodeFlags.Ambient) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, \"declare\");\r\n                        }\r\n                        else if (node.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_class_element, \"declare\");\r\n                        }\r\n                        else if (node.kind === SyntaxKind.Parameter) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"declare\");\r\n                        }\r\n                        else if (isInAmbientContext(node.parent) && node.parent.kind === SyntaxKind.ModuleBlock) {\r\n                            return grammarErrorOnNode(modifier, Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);\r\n                        }\r\n                        flags |= NodeFlags.Ambient;\r\n                        lastDeclare = modifier\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Constructor) {\r\n                if (flags & NodeFlags.Static) {\r\n                    return grammarErrorOnNode(lastStatic, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"static\");\r\n                }\r\n                else if (flags & NodeFlags.Protected) {\r\n                    return grammarErrorOnNode(lastProtected, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"protected\");\r\n                }\r\n                else if (flags & NodeFlags.Private) {\r\n                    return grammarErrorOnNode(lastPrivate, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"private\");\r\n                }\r\n            }\r\n            else if ((node.kind === SyntaxKind.ImportDeclaration || node.kind === SyntaxKind.ImportEqualsDeclaration) && flags & NodeFlags.Ambient) {\r\n                return grammarErrorOnNode(lastDeclare, Diagnostics.A_declare_modifier_cannot_be_used_with_an_import_declaration, \"declare\");\r\n            }\r\n            else if (node.kind === SyntaxKind.Parameter && (flags & NodeFlags.AccessibilityModifier) && isBindingPattern((<ParameterDeclaration>node).name)) {\r\n                return grammarErrorOnNode(node, Diagnostics.A_parameter_property_may_not_be_a_binding_pattern);\r\n            }\r\n        }\r\n\r\n        function checkGrammarForDisallowedTrailingComma(list: NodeArray<Node>): boolean {\r\n            if (list && list.hasTrailingComma) {\r\n                let start = list.end - \",\".length;\r\n                let end = list.end;\r\n                let sourceFile = getSourceFileOfNode(list[0]);\r\n                return grammarErrorAtPos(sourceFile, start, end - start, Diagnostics.Trailing_comma_not_allowed);\r\n            }\r\n        }\r\n\r\n        function checkGrammarTypeParameterList(node: FunctionLikeDeclaration, typeParameters: NodeArray<TypeParameterDeclaration>, file: SourceFile): boolean {\r\n            if (checkGrammarForDisallowedTrailingComma(typeParameters)) {\r\n                return true;\r\n            }\r\n\r\n            if (typeParameters && typeParameters.length === 0) {\r\n                let start = typeParameters.pos - \"<\".length;\r\n                let end = skipTrivia(file.text, typeParameters.end) + \">\".length;\r\n                return grammarErrorAtPos(file, start, end - start, Diagnostics.Type_parameter_list_cannot_be_empty);\r\n            }\r\n        }\r\n\r\n        function checkGrammarParameterList(parameters: NodeArray<ParameterDeclaration>) {\r\n            if (checkGrammarForDisallowedTrailingComma(parameters)) {\r\n                return true;\r\n            }\r\n\r\n            let seenOptionalParameter = false;\r\n            let parameterCount = parameters.length;\r\n\r\n            for (let i = 0; i < parameterCount; i++) {\r\n                let parameter = parameters[i];\r\n                if (parameter.dotDotDotToken) {\r\n                    if (i !== (parameterCount - 1)) {\r\n                        return grammarErrorOnNode(parameter.dotDotDotToken, Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);\r\n                    }\r\n\r\n                    if (isBindingPattern(parameter.name)) {\r\n                        return grammarErrorOnNode(parameter.name, Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);\r\n                    }\r\n\r\n                    if (parameter.questionToken) {\r\n                        return grammarErrorOnNode(parameter.questionToken, Diagnostics.A_rest_parameter_cannot_be_optional);\r\n                    }\r\n\r\n                    if (parameter.initializer) {\r\n                        return grammarErrorOnNode(parameter.name, Diagnostics.A_rest_parameter_cannot_have_an_initializer);\r\n                    }\r\n                }\r\n                else if (parameter.questionToken || parameter.initializer) {\r\n                    seenOptionalParameter = true;\r\n\r\n                    if (parameter.questionToken && parameter.initializer) {\r\n                        return grammarErrorOnNode(parameter.name, Diagnostics.Parameter_cannot_have_question_mark_and_initializer);\r\n                    }\r\n                }\r\n                else {\r\n                    if (seenOptionalParameter) {\r\n                        return grammarErrorOnNode(parameter.name, Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarFunctionLikeDeclaration(node: FunctionLikeDeclaration): boolean {\r\n            // Prevent cascading error by short-circuit\r\n            let file = getSourceFileOfNode(node);\r\n            return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarTypeParameterList(node, node.typeParameters, file) ||\r\n                checkGrammarParameterList(node.parameters) || checkGrammarArrowFunction(node, file);\r\n        }\r\n\r\n        function checkGrammarArrowFunction(node: FunctionLikeDeclaration, file: SourceFile): boolean {\r\n            if (node.kind === SyntaxKind.ArrowFunction) {\r\n                let arrowFunction = <ArrowFunction>node;\r\n                let startLine = getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.pos).line;\r\n                let endLine = getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.end).line;\r\n                if (startLine !== endLine) {\r\n                    return grammarErrorOnNode(arrowFunction.equalsGreaterThanToken, Diagnostics.Line_terminator_not_permitted_before_arrow);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarIndexSignatureParameters(node: SignatureDeclaration): boolean {\r\n            let parameter = node.parameters[0];\r\n            if (node.parameters.length !== 1) {\r\n                if (parameter) {\r\n                    return grammarErrorOnNode(parameter.name, Diagnostics.An_index_signature_must_have_exactly_one_parameter);\r\n                }\r\n                else {\r\n                    return grammarErrorOnNode(node, Diagnostics.An_index_signature_must_have_exactly_one_parameter);\r\n                }\r\n            }\r\n            if (parameter.dotDotDotToken) {\r\n                return grammarErrorOnNode(parameter.dotDotDotToken, Diagnostics.An_index_signature_cannot_have_a_rest_parameter);\r\n            }\r\n            if (parameter.flags & NodeFlags.Modifier) {\r\n                return grammarErrorOnNode(parameter.name, Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);\r\n            }\r\n            if (parameter.questionToken) {\r\n                return grammarErrorOnNode(parameter.questionToken, Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);\r\n            }\r\n            if (parameter.initializer) {\r\n                return grammarErrorOnNode(parameter.name, Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);\r\n            }\r\n            if (!parameter.type) {\r\n                return grammarErrorOnNode(parameter.name, Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);\r\n            }\r\n            if (parameter.type.kind !== SyntaxKind.StringKeyword && parameter.type.kind !== SyntaxKind.NumberKeyword) {\r\n                return grammarErrorOnNode(parameter.name, Diagnostics.An_index_signature_parameter_type_must_be_string_or_number);\r\n            }\r\n            if (!node.type) {\r\n                return grammarErrorOnNode(node, Diagnostics.An_index_signature_must_have_a_type_annotation);\r\n            }\r\n        }\r\n\r\n        function checkGrammarForIndexSignatureModifier(node: SignatureDeclaration): void {\r\n            if (node.flags & NodeFlags.Modifier) {\r\n                grammarErrorOnFirstToken(node, Diagnostics.Modifiers_not_permitted_on_index_signature_members);\r\n            }\r\n        }\r\n\r\n        function checkGrammarIndexSignature(node: SignatureDeclaration) {\r\n            // Prevent cascading error by short-circuit\r\n            return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarIndexSignatureParameters(node) || checkGrammarForIndexSignatureModifier(node);\r\n        }\r\n\r\n        function checkGrammarForAtLeastOneTypeArgument(node: Node, typeArguments: NodeArray<TypeNode>): boolean {\r\n            if (typeArguments && typeArguments.length === 0) {\r\n                let sourceFile = getSourceFileOfNode(node);\r\n                let start = typeArguments.pos - \"<\".length;\r\n                let end = skipTrivia(sourceFile.text, typeArguments.end) + \">\".length;\r\n                return grammarErrorAtPos(sourceFile, start, end - start, Diagnostics.Type_argument_list_cannot_be_empty);\r\n            }\r\n        }\r\n\r\n        function checkGrammarTypeArguments(node: Node, typeArguments: NodeArray<TypeNode>): boolean {\r\n            return checkGrammarForDisallowedTrailingComma(typeArguments) ||\r\n                checkGrammarForAtLeastOneTypeArgument(node, typeArguments);\r\n        }\r\n\r\n        function checkGrammarForOmittedArgument(node: CallExpression, arguments: NodeArray<Expression>): boolean {\r\n            if (arguments) {\r\n                let sourceFile = getSourceFileOfNode(node);\r\n                for (let arg of arguments) {\r\n                    if (arg.kind === SyntaxKind.OmittedExpression) {\r\n                        return grammarErrorAtPos(sourceFile, arg.pos, 0, Diagnostics.Argument_expression_expected);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarArguments(node: CallExpression, arguments: NodeArray<Expression>): boolean {\r\n            return checkGrammarForDisallowedTrailingComma(arguments) ||\r\n                checkGrammarForOmittedArgument(node, arguments);\r\n        }\r\n\r\n        function checkGrammarHeritageClause(node: HeritageClause): boolean {\r\n            let types = node.types;\r\n            if (checkGrammarForDisallowedTrailingComma(types)) {\r\n                return true;\r\n            }\r\n            if (types && types.length === 0) {\r\n                let listType = tokenToString(node.token);\r\n                let sourceFile = getSourceFileOfNode(node);\r\n                return grammarErrorAtPos(sourceFile, types.pos, 0, Diagnostics._0_list_cannot_be_empty, listType)\r\n            }\r\n        }\r\n\r\n        function checkGrammarClassDeclarationHeritageClauses(node: ClassDeclaration) {\r\n            let seenExtendsClause = false;\r\n            let seenImplementsClause = false;\r\n\r\n            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.heritageClauses) {\r\n                for (let heritageClause of node.heritageClauses) {\r\n                    if (heritageClause.token === SyntaxKind.ExtendsKeyword) {\r\n                        if (seenExtendsClause) {\r\n                            return grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_already_seen)\r\n                        }\r\n\r\n                        if (seenImplementsClause) {\r\n                            return grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_must_precede_implements_clause);\r\n                        }\r\n\r\n                        if (heritageClause.types.length > 1) {\r\n                            return grammarErrorOnFirstToken(heritageClause.types[1], Diagnostics.Classes_can_only_extend_a_single_class);\r\n                        }\r\n\r\n                        seenExtendsClause = true;\r\n                    }\r\n                    else {\r\n                        Debug.assert(heritageClause.token === SyntaxKind.ImplementsKeyword);\r\n                        if (seenImplementsClause) {\r\n                            return grammarErrorOnFirstToken(heritageClause, Diagnostics.implements_clause_already_seen);\r\n                        }\r\n\r\n                        seenImplementsClause = true;\r\n                    }\r\n\r\n                    // Grammar checking heritageClause inside class declaration\r\n                    checkGrammarHeritageClause(heritageClause);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarInterfaceDeclaration(node: InterfaceDeclaration) {\r\n            let seenExtendsClause = false;\r\n\r\n            if (node.heritageClauses) {\r\n                for (let heritageClause of node.heritageClauses) {\r\n                    if (heritageClause.token === SyntaxKind.ExtendsKeyword) {\r\n                        if (seenExtendsClause) {\r\n                            return grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_already_seen);\r\n                        }\r\n\r\n                        seenExtendsClause = true;\r\n                    }\r\n                    else {\r\n                        Debug.assert(heritageClause.token === SyntaxKind.ImplementsKeyword);\r\n                        return grammarErrorOnFirstToken(heritageClause, Diagnostics.Interface_declaration_cannot_have_implements_clause);\r\n                    }\r\n\r\n                    // Grammar checking heritageClause inside class declaration\r\n                    checkGrammarHeritageClause(heritageClause);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarComputedPropertyName(node: Node): boolean {\r\n            // If node is not a computedPropertyName, just skip the grammar checking\r\n            if (node.kind !== SyntaxKind.ComputedPropertyName) {\r\n                return false;\r\n            }\r\n\r\n            let computedPropertyName = <ComputedPropertyName>node;\r\n            if (computedPropertyName.expression.kind === SyntaxKind.BinaryExpression && (<BinaryExpression>computedPropertyName.expression).operatorToken.kind === SyntaxKind.CommaToken) {\r\n                return grammarErrorOnNode(computedPropertyName.expression, Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);\r\n            }\r\n        }\r\n\r\n        function checkGrammarForGenerator(node: FunctionLikeDeclaration) {\r\n            if (node.asteriskToken) {\r\n                Debug.assert(\r\n                    node.kind === SyntaxKind.FunctionDeclaration ||\r\n                    node.kind === SyntaxKind.FunctionExpression ||\r\n                    node.kind === SyntaxKind.MethodDeclaration);\r\n                if (isInAmbientContext(node)) {\r\n                    return grammarErrorOnNode(node.asteriskToken, Diagnostics.Generators_are_not_allowed_in_an_ambient_context);\r\n                }\r\n                if (!node.body) {\r\n                    return grammarErrorOnNode(node.asteriskToken, Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator);\r\n                }\r\n                if (languageVersion < ScriptTarget.ES6) {\r\n                    return grammarErrorOnNode(node.asteriskToken, Diagnostics.Generators_are_only_available_when_targeting_ECMAScript_6_or_higher);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarFunctionName(name: Node) {\r\n            // It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression (13.1))\r\n            return checkGrammarEvalOrArgumentsInStrictMode(name, <Identifier>name);\r\n        }\r\n\r\n        function checkGrammarForInvalidQuestionMark(node: Declaration, questionToken: Node, message: DiagnosticMessage): boolean {\r\n            if (questionToken) {\r\n                return grammarErrorOnNode(questionToken, message);\r\n            }\r\n        }\r\n\r\n        function checkGrammarObjectLiteralExpression(node: ObjectLiteralExpression) {\r\n            let seen: Map<SymbolFlags> = {};\r\n            let Property = 1;\r\n            let GetAccessor = 2;\r\n            let SetAccesor = 4;\r\n            let GetOrSetAccessor = GetAccessor | SetAccesor;\r\n            let inStrictMode = (node.parserContextFlags & ParserContextFlags.StrictMode) !== 0;\r\n\r\n            for (let prop of node.properties) {\r\n                let name = prop.name;\r\n                if (prop.kind === SyntaxKind.OmittedExpression ||\r\n                    name.kind === SyntaxKind.ComputedPropertyName) {\r\n                    // If the name is not a ComputedPropertyName, the grammar checking will skip it\r\n                    checkGrammarComputedPropertyName(<ComputedPropertyName>name);\r\n                    continue;\r\n                }\r\n\r\n                // ECMA-262 11.1.5 Object Initialiser\r\n                // If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true\r\n                // a.This production is contained in strict code and IsDataDescriptor(previous) is true and\r\n                // IsDataDescriptor(propId.descriptor) is true.\r\n                //    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.\r\n                //    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.\r\n                //    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true\r\n                // and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields\r\n                let currentKind: number;\r\n                if (prop.kind === SyntaxKind.PropertyAssignment || prop.kind === SyntaxKind.ShorthandPropertyAssignment) {\r\n                    // Grammar checking for computedPropertName and shorthandPropertyAssignment\r\n                    checkGrammarForInvalidQuestionMark(prop,(<PropertyAssignment>prop).questionToken, Diagnostics.An_object_member_cannot_be_declared_optional);\r\n                    if (name.kind === SyntaxKind.NumericLiteral) {\r\n                        checkGrammarNumericLiteral(<Identifier>name);\r\n                    }\r\n                    currentKind = Property;\r\n                }\r\n                else if ( prop.kind === SyntaxKind.MethodDeclaration) {\r\n                    currentKind = Property;\r\n                }\r\n                else if (prop.kind === SyntaxKind.GetAccessor) {\r\n                    currentKind = GetAccessor;\r\n                }\r\n                else if (prop.kind === SyntaxKind.SetAccessor) {\r\n                    currentKind = SetAccesor;\r\n                }\r\n                else {\r\n                    Debug.fail(\"Unexpected syntax kind:\" + prop.kind);\r\n                }\r\n\r\n                if (!hasProperty(seen, (<Identifier>name).text)) {\r\n                    seen[(<Identifier>name).text] = currentKind;\r\n                }\r\n                else {\r\n                    let existingKind = seen[(<Identifier>name).text];\r\n                    if (currentKind === Property && existingKind === Property) {\r\n                        if (inStrictMode) {\r\n                            grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode);\r\n                        }\r\n                    }\r\n                    else if ((currentKind & GetOrSetAccessor) && (existingKind & GetOrSetAccessor)) {\r\n                        if (existingKind !== GetOrSetAccessor && currentKind !== existingKind) {\r\n                            seen[(<Identifier>name).text] = currentKind | existingKind;\r\n                        }\r\n                        else {\r\n                            return grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name);\r\n                        }\r\n                    }\r\n                    else {\r\n                        return grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarForInOrForOfStatement(forInOrOfStatement: ForInStatement | ForOfStatement): boolean {\r\n            if (checkGrammarStatementInAmbientContext(forInOrOfStatement)) {\r\n                return true;\r\n            }\r\n\r\n            if (forInOrOfStatement.initializer.kind === SyntaxKind.VariableDeclarationList) {\r\n                let variableList = <VariableDeclarationList>forInOrOfStatement.initializer;\r\n                if (!checkGrammarVariableDeclarationList(variableList)) {\r\n                    if (variableList.declarations.length > 1) {\r\n                        let diagnostic = forInOrOfStatement.kind === SyntaxKind.ForInStatement\r\n                            ? Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement\r\n                            : Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement;\r\n                        return grammarErrorOnFirstToken(variableList.declarations[1], diagnostic);\r\n                    }\r\n                    let firstDeclaration = variableList.declarations[0];\r\n                    if (firstDeclaration.initializer) {\r\n                        let diagnostic = forInOrOfStatement.kind === SyntaxKind.ForInStatement\r\n                            ? Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer\r\n                            : Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer;\r\n                        return grammarErrorOnNode(firstDeclaration.name, diagnostic);\r\n                    }\r\n                    if (firstDeclaration.type) {\r\n                        let diagnostic = forInOrOfStatement.kind === SyntaxKind.ForInStatement\r\n                            ? Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation\r\n                            : Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation;\r\n                        return grammarErrorOnNode(firstDeclaration, diagnostic);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarAccessor(accessor: MethodDeclaration): boolean {\r\n            let kind = accessor.kind;\r\n            if (languageVersion < ScriptTarget.ES5) {\r\n                return grammarErrorOnNode(accessor.name, Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);\r\n            }\r\n            else if (isInAmbientContext(accessor)) {\r\n                return grammarErrorOnNode(accessor.name, Diagnostics.An_accessor_cannot_be_declared_in_an_ambient_context);\r\n            }\r\n            else if (accessor.body === undefined) {\r\n                return grammarErrorAtPos(getSourceFileOfNode(accessor), accessor.end - 1, \";\".length, Diagnostics._0_expected, \"{\");\r\n            }\r\n            else if (accessor.typeParameters) {\r\n                return grammarErrorOnNode(accessor.name, Diagnostics.An_accessor_cannot_have_type_parameters);\r\n            }\r\n            else if (kind === SyntaxKind.GetAccessor && accessor.parameters.length) {\r\n                return grammarErrorOnNode(accessor.name, Diagnostics.A_get_accessor_cannot_have_parameters);\r\n            }\r\n            else if (kind === SyntaxKind.SetAccessor) {\r\n                if (accessor.type) {\r\n                    return grammarErrorOnNode(accessor.name, Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);\r\n                }\r\n                else if (accessor.parameters.length !== 1) {\r\n                    return grammarErrorOnNode(accessor.name, Diagnostics.A_set_accessor_must_have_exactly_one_parameter);\r\n                }\r\n                else {\r\n                    let parameter = accessor.parameters[0];\r\n                    if (parameter.dotDotDotToken) {\r\n                        return grammarErrorOnNode(parameter.dotDotDotToken, Diagnostics.A_set_accessor_cannot_have_rest_parameter);\r\n                    }\r\n                    else if (parameter.flags & NodeFlags.Modifier) {\r\n                        return grammarErrorOnNode(accessor.name, Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);\r\n                    }\r\n                    else if (parameter.questionToken) {\r\n                        return grammarErrorOnNode(parameter.questionToken, Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);\r\n                    }\r\n                    else if (parameter.initializer) {\r\n                        return grammarErrorOnNode(accessor.name, Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarForNonSymbolComputedProperty(node: DeclarationName, message: DiagnosticMessage) {\r\n            if (node.kind === SyntaxKind.ComputedPropertyName && !isWellKnownSymbolSyntactically((<ComputedPropertyName>node).expression)) {\r\n                return grammarErrorOnNode(node, message);\r\n            }\r\n        }\r\n\r\n        function checkGrammarMethod(node: MethodDeclaration) {\r\n            if (checkGrammarDisallowedModifiersInBlockOrObjectLiteralExpression(node) ||\r\n                checkGrammarFunctionLikeDeclaration(node) ||\r\n                checkGrammarForGenerator(node)) {\r\n                return true;\r\n            }\r\n\r\n            if (node.parent.kind === SyntaxKind.ObjectLiteralExpression) {\r\n                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, Diagnostics.A_class_member_cannot_be_declared_optional)) {\r\n                    return true;\r\n                }\r\n                else if (node.body === undefined) {\r\n                    return grammarErrorAtPos(getSourceFile(node), node.end - 1, \";\".length, Diagnostics._0_expected, \"{\");\r\n                }\r\n            }\r\n\r\n            if (node.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, Diagnostics.A_class_member_cannot_be_declared_optional)) {\r\n                    return true;\r\n                }\r\n                // Technically, computed properties in ambient contexts is disallowed\r\n                // for property declarations and accessors too, not just methods.\r\n                // However, property declarations disallow computed names in general,\r\n                // and accessors are not allowed in ambient contexts in general,\r\n                // so this error only really matters for methods.\r\n                if (isInAmbientContext(node)) {\r\n                    return checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol);\r\n                }\r\n                else if (!node.body) {\r\n                    return checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol);\r\n                }\r\n            }\r\n            else if (node.parent.kind === SyntaxKind.InterfaceDeclaration) {\r\n                return checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol);\r\n            }\r\n            else if (node.parent.kind === SyntaxKind.TypeLiteral) {\r\n                return checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol);\r\n            }\r\n        }\r\n\r\n        function isIterationStatement(node: Node, lookInLabeledStatements: boolean): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                case SyntaxKind.DoStatement:\r\n                case SyntaxKind.WhileStatement:\r\n                    return true;\r\n                case SyntaxKind.LabeledStatement:\r\n                    return lookInLabeledStatements && isIterationStatement((<LabeledStatement>node).statement, lookInLabeledStatements);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarBreakOrContinueStatement(node: BreakOrContinueStatement): boolean {\r\n            let current: Node = node;\r\n            while (current) {\r\n                if (isFunctionLike(current)) {\r\n                    return grammarErrorOnNode(node, Diagnostics.Jump_target_cannot_cross_function_boundary);\r\n                }\r\n\r\n                switch (current.kind) {\r\n                    case SyntaxKind.LabeledStatement:\r\n                        if (node.label && (<LabeledStatement>current).label.text === node.label.text) {\r\n                            // found matching label - verify that label usage is correct\r\n                            // continue can only target labels that are on iteration statements\r\n                            let isMisplacedContinueLabel = node.kind === SyntaxKind.ContinueStatement\r\n                                && !isIterationStatement((<LabeledStatement>current).statement, /*lookInLabeledStatement*/ true);\r\n\r\n                            if (isMisplacedContinueLabel) {\r\n                                return grammarErrorOnNode(node, Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);\r\n                            }\r\n\r\n                            return false;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.SwitchStatement:\r\n                        if (node.kind === SyntaxKind.BreakStatement && !node.label) {\r\n                            // unlabeled break within switch statement - ok\r\n                            return false;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (isIterationStatement(current, /*lookInLabeledStatement*/ false) && !node.label) {\r\n                            // unlabeled break or continue within iteration statement - ok\r\n                            return false;\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                current = current.parent;\r\n            }\r\n\r\n            if (node.label) {\r\n                let message = node.kind === SyntaxKind.BreakStatement\r\n                    ? Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement\r\n                    : Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;\r\n\r\n                return grammarErrorOnNode(node, message)\r\n            }\r\n            else {\r\n                let message = node.kind === SyntaxKind.BreakStatement\r\n                    ? Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\r\n                    : Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;\r\n                return grammarErrorOnNode(node, message)\r\n            }\r\n        }\r\n\r\n        function checkGrammarBindingElement(node: BindingElement) {\r\n            if (node.dotDotDotToken) {\r\n                let elements = (<BindingPattern>node.parent).elements;\r\n                if (node !== lastOrUndefined(elements)) {\r\n                    return grammarErrorOnNode(node, Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);\r\n                }\r\n\r\n                if (node.name.kind === SyntaxKind.ArrayBindingPattern || node.name.kind === SyntaxKind.ObjectBindingPattern) {\r\n                    return grammarErrorOnNode(node.name, Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);\r\n                }\r\n\r\n                if (node.initializer) {\r\n                    // Error on equals token which immediate precedes the initializer\r\n                    return grammarErrorAtPos(getSourceFileOfNode(node), node.initializer.pos - 1, 1, Diagnostics.A_rest_element_cannot_have_an_initializer);\r\n                }\r\n            }\r\n            // It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code\r\n            // and its Identifier is eval or arguments\r\n            return checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.name);\r\n        }\r\n\r\n        function checkGrammarVariableDeclaration(node: VariableDeclaration) {\r\n            if (node.parent.parent.kind !== SyntaxKind.ForInStatement && node.parent.parent.kind !== SyntaxKind.ForOfStatement) {\r\n                if (isInAmbientContext(node)) {\r\n                    if (node.initializer) {\r\n                        // Error on equals token which immediate precedes the initializer\r\n                        let equalsTokenLength = \"=\".length;\r\n                        return grammarErrorAtPos(getSourceFileOfNode(node), node.initializer.pos - equalsTokenLength,\r\n                            equalsTokenLength, Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);\r\n                    }\r\n                }\r\n                else if (!node.initializer) {\r\n                    if (isBindingPattern(node.name) && !isBindingPattern(node.parent)) {\r\n                        return grammarErrorOnNode(node, Diagnostics.A_destructuring_declaration_must_have_an_initializer);\r\n                    }\r\n                    if (isConst(node)) {\r\n                        return grammarErrorOnNode(node, Diagnostics.const_declarations_must_be_initialized);\r\n                    }\r\n                }\r\n            }\r\n\r\n            let checkLetConstNames =  languageVersion >= ScriptTarget.ES6 && (isLet(node) || isConst(node));\r\n\r\n            // 1. LexicalDeclaration : LetOrConst BindingList ;\r\n            // It is a Syntax Error if the BoundNames of BindingList contains \"let\".\r\n            // 2. ForDeclaration: ForDeclaration : LetOrConst ForBinding\r\n            // It is a Syntax Error if the BoundNames of ForDeclaration contains \"let\".\r\n\r\n            // It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code\r\n            // and its Identifier is eval or arguments\r\n            return (checkLetConstNames && checkGrammarNameInLetOrConstDeclarations(node.name)) ||\r\n                checkGrammarEvalOrArgumentsInStrictMode(node, <Identifier>node.name);\r\n        }\r\n\r\n        function checkGrammarNameInLetOrConstDeclarations(name: Identifier | BindingPattern): boolean {\r\n            if (name.kind === SyntaxKind.Identifier) {\r\n                if ((<Identifier>name).text === \"let\") {\r\n                    return grammarErrorOnNode(name, Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations);\r\n                }\r\n            }\r\n            else {\r\n                let elements = (<BindingPattern>name).elements;\r\n                for (let element of elements) {\r\n                    if (element.kind !== SyntaxKind.OmittedExpression) {\r\n                        checkGrammarNameInLetOrConstDeclarations(element.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarVariableDeclarationList(declarationList: VariableDeclarationList): boolean {\r\n            let declarations = declarationList.declarations;\r\n            if (checkGrammarForDisallowedTrailingComma(declarationList.declarations)) {\r\n                return true;\r\n            }\r\n\r\n            if (!declarationList.declarations.length) {\r\n                return grammarErrorAtPos(getSourceFileOfNode(declarationList), declarations.pos, declarations.end - declarations.pos, Diagnostics.Variable_declaration_list_cannot_be_empty);\r\n            }\r\n        }\r\n\r\n        function allowLetAndConstDeclarations(parent: Node): boolean {\r\n            switch (parent.kind) {\r\n                case SyntaxKind.IfStatement:\r\n                case SyntaxKind.DoStatement:\r\n                case SyntaxKind.WhileStatement:\r\n                case SyntaxKind.WithStatement:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ForOfStatement:\r\n                    return false;\r\n                case SyntaxKind.LabeledStatement:\r\n                    return allowLetAndConstDeclarations(parent.parent);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function checkGrammarForDisallowedLetOrConstStatement(node: VariableStatement) {\r\n            if (!allowLetAndConstDeclarations(node.parent)) {\r\n                if (isLet(node.declarationList)) {\r\n                    return grammarErrorOnNode(node, Diagnostics.let_declarations_can_only_be_declared_inside_a_block);\r\n                }\r\n                else if (isConst(node.declarationList)) {\r\n                    return grammarErrorOnNode(node, Diagnostics.const_declarations_can_only_be_declared_inside_a_block);\r\n                }\r\n            }\r\n        }\r\n\r\n        function isIntegerLiteral(expression: Expression): boolean {\r\n            if (expression.kind === SyntaxKind.PrefixUnaryExpression) {\r\n                let unaryExpression = <PrefixUnaryExpression>expression;\r\n                if (unaryExpression.operator === SyntaxKind.PlusToken || unaryExpression.operator === SyntaxKind.MinusToken) {\r\n                    expression = unaryExpression.operand;\r\n                }\r\n            }\r\n            if (expression.kind === SyntaxKind.NumericLiteral) {\r\n                // Allows for scientific notation since literalExpression.text was formed by\r\n                // coercing a number to a string. Sometimes this coercion can yield a string\r\n                // in scientific notation.\r\n                // We also don't need special logic for hex because a hex integer is converted\r\n                // to decimal when it is coerced.\r\n                return /^[0-9]+([eE]\\+?[0-9]+)?$/.test((<LiteralExpression>expression).text);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function checkGrammarEnumDeclaration(enumDecl: EnumDeclaration): boolean {\r\n            let enumIsConst = (enumDecl.flags & NodeFlags.Const) !== 0;\r\n\r\n            let hasError = false;\r\n\r\n            // skip checks below for const enums  - they allow arbitrary initializers as long as they can be evaluated to constant expressions.\r\n            // since all values are known in compile time - it is not necessary to check that constant enum section precedes computed enum members.\r\n            if (!enumIsConst) {\r\n                let inConstantEnumMemberSection = true;\r\n                let inAmbientContext = isInAmbientContext(enumDecl);\r\n                for (let node of enumDecl.members) {\r\n                    // Do not use hasDynamicName here, because that returns false for well known symbols.\r\n                    // We want to perform checkComputedPropertyName for all computed properties, including\r\n                    // well known symbols.\r\n                    if (node.name.kind === SyntaxKind.ComputedPropertyName) {\r\n                        hasError = grammarErrorOnNode(node.name, Diagnostics.Computed_property_names_are_not_allowed_in_enums);\r\n                    }\r\n                    else if (inAmbientContext) {\r\n                        if (node.initializer && !isIntegerLiteral(node.initializer)) {\r\n                            hasError = grammarErrorOnNode(node.name, Diagnostics.Ambient_enum_elements_can_only_have_integer_literal_initializers) || hasError;\r\n                        }\r\n                    }\r\n                    else if (node.initializer) {\r\n                        inConstantEnumMemberSection = isIntegerLiteral(node.initializer);\r\n                    }\r\n                    else if (!inConstantEnumMemberSection) {\r\n                        hasError = grammarErrorOnNode(node.name, Diagnostics.Enum_member_must_have_initializer) || hasError;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return hasError;\r\n        }\r\n\r\n        function hasParseDiagnostics(sourceFile: SourceFile): boolean {\r\n            return sourceFile.parseDiagnostics.length > 0;\r\n        }\r\n\r\n        function grammarErrorOnFirstToken(node: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {\r\n            let sourceFile = getSourceFileOfNode(node);\r\n            if (!hasParseDiagnostics(sourceFile)) {\r\n                let span = getSpanOfTokenAtPosition(sourceFile, node.pos);\r\n                diagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function grammarErrorAtPos(sourceFile: SourceFile, start: number, length: number, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {\r\n            if (!hasParseDiagnostics(sourceFile)) {\r\n                diagnostics.add(createFileDiagnostic(sourceFile, start, length, message, arg0, arg1, arg2));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function grammarErrorOnNode(node: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {\r\n            let sourceFile = getSourceFileOfNode(node);\r\n            if (!hasParseDiagnostics(sourceFile)) {\r\n                diagnostics.add(createDiagnosticForNode(node, message, arg0, arg1, arg2));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function checkGrammarEvalOrArgumentsInStrictMode(contextNode: Node, name: Node): boolean {\r\n            if (name && name.kind === SyntaxKind.Identifier) {\r\n                let identifier = <Identifier>name;\r\n                if (contextNode && (contextNode.parserContextFlags & ParserContextFlags.StrictMode) && isEvalOrArgumentsIdentifier(identifier)) {\r\n                    let nameText = declarationNameToString(identifier);\r\n\r\n                    // We check first if the name is inside class declaration or class expression; if so give explicit message\r\n                    // otherwise report generic error message.\r\n                    // reportGrammarErrorInClassDeclaration only return true if grammar error is successfully reported and false otherwise\r\n                    let reportErrorInClassDeclaration = reportStrictModeGrammarErrorInClassDeclaration(identifier, Diagnostics.Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode, nameText);\r\n                    if (!reportErrorInClassDeclaration){\r\n                        return grammarErrorOnNode(identifier, Diagnostics.Invalid_use_of_0_in_strict_mode, nameText);\r\n                    }\r\n                    return reportErrorInClassDeclaration;\r\n                }\r\n            }\r\n        }\r\n\r\n        function isEvalOrArgumentsIdentifier(node: Node): boolean {\r\n            return node.kind === SyntaxKind.Identifier &&\r\n                ((<Identifier>node).text === \"eval\" || (<Identifier>node).text === \"arguments\");\r\n        }\r\n\r\n        function checkGrammarConstructorTypeParameters(node: ConstructorDeclaration) {\r\n            if (node.typeParameters) {\r\n                return grammarErrorAtPos(getSourceFileOfNode(node), node.typeParameters.pos, node.typeParameters.end - node.typeParameters.pos, Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);\r\n            }\r\n        }\r\n\r\n        function checkGrammarConstructorTypeAnnotation(node: ConstructorDeclaration) {\r\n            if (node.type) {\r\n                return grammarErrorOnNode(node.type, Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);\r\n            }\r\n        }\r\n\r\n        function checkGrammarProperty(node: PropertyDeclaration) {\r\n            if (node.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, Diagnostics.A_class_member_cannot_be_declared_optional) ||\r\n                    checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol)) {\r\n                    return true;\r\n                }\r\n            }\r\n            else if (node.parent.kind === SyntaxKind.InterfaceDeclaration) {\r\n                if (checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol)) {\r\n                    return true;\r\n                }\r\n            }\r\n            else if (node.parent.kind === SyntaxKind.TypeLiteral) {\r\n                if (checkGrammarForNonSymbolComputedProperty(node.name, Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (isInAmbientContext(node) && node.initializer) {\r\n                return grammarErrorOnFirstToken(node.initializer, Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);\r\n            }\r\n        }\r\n\r\n        function checkGrammarTopLevelElementForRequiredDeclareModifier(node: Node): boolean {\r\n            // A declare modifier is required for any top level .d.ts declaration except export=, export default,\r\n            // interfaces and imports categories:\r\n            //\r\n            //  DeclarationElement:\r\n            //     ExportAssignment\r\n            //     export_opt   InterfaceDeclaration\r\n            //     export_opt   ImportDeclaration\r\n            //     export_opt   ExternalImportDeclaration\r\n            //     export_opt   AmbientDeclaration\r\n            //\r\n            if (node.kind === SyntaxKind.InterfaceDeclaration ||\r\n                node.kind === SyntaxKind.ImportDeclaration ||\r\n                node.kind === SyntaxKind.ImportEqualsDeclaration ||\r\n                node.kind === SyntaxKind.ExportDeclaration ||\r\n                node.kind === SyntaxKind.ExportAssignment ||\r\n                (node.flags & NodeFlags.Ambient) ||\r\n                (node.flags & (NodeFlags.Export | NodeFlags.Default))) {\r\n\r\n                return false;\r\n            }\r\n\r\n            return grammarErrorOnFirstToken(node, Diagnostics.A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file);\r\n        }\r\n\r\n        function checkGrammarTopLevelElementsForRequiredDeclareModifier(file: SourceFile): boolean {\r\n            for (let decl of file.statements) {\r\n                if (isDeclaration(decl) || decl.kind === SyntaxKind.VariableStatement) {\r\n                    if (checkGrammarTopLevelElementForRequiredDeclareModifier(decl)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarSourceFile(node: SourceFile): boolean {\r\n            return isInAmbientContext(node) && checkGrammarTopLevelElementsForRequiredDeclareModifier(node);\r\n        }\r\n\r\n        function checkGrammarStatementInAmbientContext(node: Node): boolean {\r\n            if (isInAmbientContext(node)) {\r\n                // An accessors is already reported about the ambient context\r\n                if (isAccessor(node.parent.kind)) {\r\n                    return getNodeLinks(node).hasReportedStatementInAmbientContext = true;\r\n                }\r\n\r\n                // Find containing block which is either Block, ModuleBlock, SourceFile\r\n                let links = getNodeLinks(node);\r\n                if (!links.hasReportedStatementInAmbientContext && isFunctionLike(node.parent)) {\r\n                    return getNodeLinks(node).hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts)\r\n                }\r\n\r\n                // We are either parented by another statement, or some sort of block.\r\n                // If we're in a block, we only want to really report an error once\r\n                // to prevent noisyness.  So use a bit on the block to indicate if\r\n                // this has already been reported, and don't report if it has.\r\n                //\r\n                if (node.parent.kind === SyntaxKind.Block || node.parent.kind === SyntaxKind.ModuleBlock || node.parent.kind === SyntaxKind.SourceFile) {\r\n                    let links = getNodeLinks(node.parent);\r\n                    // Check if the containing block ever report this error\r\n                    if (!links.hasReportedStatementInAmbientContext) {\r\n                        return links.hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, Diagnostics.Statements_are_not_allowed_in_ambient_contexts);\r\n                    }\r\n                }\r\n                else {\r\n                    // We must be parented by a statement.  If so, there's no need\r\n                    // to report the error as our parent will have already done it.\r\n                    // Debug.assert(isStatement(node.parent));\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkGrammarNumericLiteral(node: Identifier): boolean {\r\n            // Grammar checking\r\n            if (node.flags & NodeFlags.OctalLiteral) {\r\n                if (node.parserContextFlags & ParserContextFlags.StrictMode) {\r\n                    return grammarErrorOnNode(node, Diagnostics.Octal_literals_are_not_allowed_in_strict_mode);\r\n                }\r\n                else if (languageVersion >= ScriptTarget.ES5) {\r\n                    return grammarErrorOnNode(node, Diagnostics.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher);\r\n                }\r\n            }\r\n        }\r\n\r\n        function grammarErrorAfterFirstToken(node: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {\r\n            let sourceFile = getSourceFileOfNode(node);\r\n            if (!hasParseDiagnostics(sourceFile)) {\r\n                let span = getSpanOfTokenAtPosition(sourceFile, node.pos);\r\n                diagnostics.add(createFileDiagnostic(sourceFile, textSpanEnd(span), /*length*/ 0, message, arg0, arg1, arg2));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        initializeTypeChecker();\r\n\r\n        return checker;\r\n    }\r\n}\r\n"}]