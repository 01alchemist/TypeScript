=== tests/cases/conformance/es6/destructuring/objectSpreadElement.ts ===
let o = { a: 1, b: 'no' }
>o : Symbol(o, Decl(objectSpreadElement.ts, 0, 3))
>a : Symbol(a, Decl(objectSpreadElement.ts, 0, 9))
>b : Symbol(b, Decl(objectSpreadElement.ts, 0, 15))

let o2 = { b: 'yes', c: true }
>o2 : Symbol(o2, Decl(objectSpreadElement.ts, 1, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 1, 10))
>c : Symbol(c, Decl(objectSpreadElement.ts, 1, 20))

let addAfter = { ...o, c: false }
>addAfter : Symbol(addAfter, Decl(objectSpreadElement.ts, 2, 3))
>c : Symbol(c, Decl(objectSpreadElement.ts, 2, 22))

let addBefore = { c: false, ...o }
>addBefore : Symbol(addBefore, Decl(objectSpreadElement.ts, 3, 3))
>c : Symbol(c, Decl(objectSpreadElement.ts, 3, 17))

// Note: ignore still changes the order that properties are printed
let ignore = { b: 'ignored', ...o }
>ignore : Symbol(ignore, Decl(objectSpreadElement.ts, 5, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 5, 14))

let override = { ...o, b: 'override' }
>override : Symbol(override, Decl(objectSpreadElement.ts, 6, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 6, 22))

let nested = { ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' }
>nested : Symbol(nested, Decl(objectSpreadElement.ts, 7, 3))
>a : Symbol(a, Decl(objectSpreadElement.ts, 7, 19))
>b : Symbol(b, Decl(objectSpreadElement.ts, 7, 30))
>c : Symbol(c, Decl(objectSpreadElement.ts, 7, 40))
>c : Symbol(c, Decl(objectSpreadElement.ts, 7, 60))

let combined = { ...o, ...o2 }
>combined : Symbol(combined, Decl(objectSpreadElement.ts, 8, 3))

let combinedBefore = { b: 'ok', ...o, ...o2 }
>combinedBefore : Symbol(combinedBefore, Decl(objectSpreadElement.ts, 9, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 9, 22))

let combinedMid = { ...o, b: 'ok', ...o2 }
>combinedMid : Symbol(combinedMid, Decl(objectSpreadElement.ts, 10, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 10, 25))

let combinedAfter = { ...o, ...o2, b: 'ok' }
>combinedAfter : Symbol(combinedAfter, Decl(objectSpreadElement.ts, 11, 3))
>b : Symbol(b, Decl(objectSpreadElement.ts, 11, 34))

let combinedNested = {
>combinedNested : Symbol(combinedNested, Decl(objectSpreadElement.ts, 12, 3))

    ...{ a: 4, ...{ b: false, c: 'overriden' } },
>a : Symbol(a, Decl(objectSpreadElement.ts, 13, 8))
>b : Symbol(b, Decl(objectSpreadElement.ts, 13, 19))
>c : Symbol(c, Decl(objectSpreadElement.ts, 13, 29))

    d: 'actually new',
>d : Symbol(d, Decl(objectSpreadElement.ts, 13, 49))

    ...{ a: 5, d: 'maybe new' },
>a : Symbol(a, Decl(objectSpreadElement.ts, 15, 8))
>d : Symbol(d, Decl(objectSpreadElement.ts, 15, 14))
}
// accessors don't copy the descriptor
// (which means that readonly getters become read/write)
let op = { get a () { return 6 } };
>op : Symbol(op, Decl(objectSpreadElement.ts, 19, 3))
>a : Symbol(a, Decl(objectSpreadElement.ts, 19, 10))

let getter = { ...op, c: 7 }
>getter : Symbol(getter, Decl(objectSpreadElement.ts, 20, 3))
>c : Symbol(c, Decl(objectSpreadElement.ts, 20, 21))

// null and undefined are just skipped
let spreadNull = { ...null }
>spreadNull : Symbol(spreadNull, Decl(objectSpreadElement.ts, 23, 3))

let spreadUndefined = { ...undefined }
>spreadUndefined : Symbol(spreadUndefined, Decl(objectSpreadElement.ts, 24, 3))

// methods are not enumerable
class C { m() { } };
>C : Symbol(C, Decl(objectSpreadElement.ts, 24, 38))
>m : Symbol(C.m, Decl(objectSpreadElement.ts, 27, 9))

let c: C = new C();
>c : Symbol(c, Decl(objectSpreadElement.ts, 28, 3))
>C : Symbol(C, Decl(objectSpreadElement.ts, 24, 38))
>C : Symbol(C, Decl(objectSpreadElement.ts, 24, 38))

let spreadC = {...c};
>spreadC : Symbol(spreadC, Decl(objectSpreadElement.ts, 29, 3))

// computed property
let computedFirst = {
>computedFirst : Symbol(computedFirst, Decl(objectSpreadElement.ts, 32, 3))

    ['before everything']: 12,
    ...o,
    b: 'yes'
>b : Symbol(b, Decl(objectSpreadElement.ts, 34, 9))
}
let computedMiddle = {
>computedMiddle : Symbol(computedMiddle, Decl(objectSpreadElement.ts, 37, 3))

    ...o,
    ['in the middle']: 13,
    b: 'maybe?',
>b : Symbol(b, Decl(objectSpreadElement.ts, 39, 26))

    ...o2
}
let computedAfter = {
>computedAfter : Symbol(computedAfter, Decl(objectSpreadElement.ts, 43, 3))

    ...o,
    b: 'yeah',
>b : Symbol(b, Decl(objectSpreadElement.ts, 44, 9))

    ['at the end']: 14
}

