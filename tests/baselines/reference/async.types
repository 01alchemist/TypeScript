=== tests/cases/compiler/async.ts ===
declare class Promise<T> {
>Promise : Promise<T>
>T : T

    constructor(init: (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void);
>init : (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void
>resolve : (value?: T | IPromise<T>) => void
>value : T | IPromise<T>
>T : T
>IPromise : IPromise<T>
>T : T
>reject : (reason?: any) => void
>reason : any

    then<TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>): Promise<TResult>;
>then : <TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>) => Promise<TResult>
>TResult : TResult
>onfulfilled : (value: T) => TResult | IPromise<TResult>
>value : T
>T : T
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>onrejected : (reason: any) => TResult | IPromise<TResult>
>reason : any
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>Promise : Promise<T>
>TResult : TResult
}

async function asyncFunc(): Promise<void> {
>asyncFunc : () => Promise<void>
>Promise : Promise<T>

    return;
}

var asyncFuncExpr = async function(): Promise<void> {
>asyncFuncExpr : () => Promise<void>
>function(): Promise<void> {    return;} : () => Promise<void>
>Promise : Promise<T>

    return;
}

var asyncLambdaBody = async (): Promise<void> => { return; };
>asyncLambdaBody : () => Promise<void>
>async (): Promise<void> => { return; } : () => Promise<void>
>Promise : Promise<T>

var asyncLambdaExpr = async (): Promise<void> => null;
>asyncLambdaExpr : () => Promise<void>
>async (): Promise<void> => null : () => Promise<void>
>Promise : Promise<T>

class Class {
>Class : Class

    public static async asyncStaticMethod(): Promise<void> {
>asyncStaticMethod : () => Promise<void>
>Promise : Promise<T>

        return;
    }

    public async asyncMethod(): Promise<void> {
>asyncMethod : () => Promise<void>
>Promise : Promise<T>

        return;
    }
}

var ObjectLiteral = {
>ObjectLiteral : { asyncProperty: () => Promise<void>; asyncMethod: () => Promise<void>; }
>{    asyncProperty: async function(): Promise<void> {        return;    },    async asyncMethod(): Promise<void> {        return;    }} : { asyncProperty: () => Promise<void>; asyncMethod: () => Promise<void>; }

    asyncProperty: async function(): Promise<void> {
>asyncProperty : () => Promise<void>
>function(): Promise<void> {        return;    } : () => Promise<void>
>Promise : Promise<T>

        return;
    },

    async asyncMethod(): Promise<void> {
>asyncMethod : () => Promise<void>
>async asyncMethod(): Promise<void> {        return;    } : () => Promise<void>
>Promise : Promise<T>

        return;
    }
};

