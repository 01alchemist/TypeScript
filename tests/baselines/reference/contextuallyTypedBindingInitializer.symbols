=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializer.ts ===
interface Show {
>Show : Symbol(Show, Decl(contextuallyTypedBindingInitializer.ts, 0, 0))

    show: (x: number) => string;
>show : Symbol(show, Decl(contextuallyTypedBindingInitializer.ts, 0, 16))
>x : Symbol(x, Decl(contextuallyTypedBindingInitializer.ts, 1, 11))
}
function f({ show = v => v.toString() }: Show) {}
>f : Symbol(f, Decl(contextuallyTypedBindingInitializer.ts, 2, 1))
>show : Symbol(show, Decl(contextuallyTypedBindingInitializer.ts, 3, 12))
>v : Symbol(v, Decl(contextuallyTypedBindingInitializer.ts, 3, 19))
>v.toString : Symbol(Number.toString, Decl(lib.d.ts, --, --))
>v : Symbol(v, Decl(contextuallyTypedBindingInitializer.ts, 3, 19))
>toString : Symbol(Number.toString, Decl(lib.d.ts, --, --))
>Show : Symbol(Show, Decl(contextuallyTypedBindingInitializer.ts, 0, 0))

interface Nested {
>Nested : Symbol(Nested, Decl(contextuallyTypedBindingInitializer.ts, 3, 49))

    nested: Show
>nested : Symbol(nested, Decl(contextuallyTypedBindingInitializer.ts, 5, 18))
>Show : Symbol(Show, Decl(contextuallyTypedBindingInitializer.ts, 0, 0))
}
function ff({ nested = { show: v => v.toString() } }: Nested) {}
>ff : Symbol(ff, Decl(contextuallyTypedBindingInitializer.ts, 7, 1))
>nested : Symbol(nested, Decl(contextuallyTypedBindingInitializer.ts, 8, 13))
>show : Symbol(show, Decl(contextuallyTypedBindingInitializer.ts, 8, 24))
>v : Symbol(v, Decl(contextuallyTypedBindingInitializer.ts, 8, 30))
>v.toString : Symbol(Number.toString, Decl(lib.d.ts, --, --))
>v : Symbol(v, Decl(contextuallyTypedBindingInitializer.ts, 8, 30))
>toString : Symbol(Number.toString, Decl(lib.d.ts, --, --))
>Nested : Symbol(Nested, Decl(contextuallyTypedBindingInitializer.ts, 3, 49))

interface Tuples {
>Tuples : Symbol(Tuples, Decl(contextuallyTypedBindingInitializer.ts, 8, 64))

    prop: [string, number];
>prop : Symbol(prop, Decl(contextuallyTypedBindingInitializer.ts, 10, 18))
}
function g({ prop = ["hello", 1234] }: Tuples) {}
>g : Symbol(g, Decl(contextuallyTypedBindingInitializer.ts, 12, 1))
>prop : Symbol(prop, Decl(contextuallyTypedBindingInitializer.ts, 13, 12))
>Tuples : Symbol(Tuples, Decl(contextuallyTypedBindingInitializer.ts, 8, 64))

interface StringUnion {
>StringUnion : Symbol(StringUnion, Decl(contextuallyTypedBindingInitializer.ts, 13, 49))

    prop: "foo" | "bar";
>prop : Symbol(prop, Decl(contextuallyTypedBindingInitializer.ts, 15, 23))
}
function h({ prop = "foo" }: StringUnion) {}
>h : Symbol(h, Decl(contextuallyTypedBindingInitializer.ts, 17, 1))
>prop : Symbol(prop, Decl(contextuallyTypedBindingInitializer.ts, 18, 12))
>StringUnion : Symbol(StringUnion, Decl(contextuallyTypedBindingInitializer.ts, 13, 49))

interface StringIdentity {
>StringIdentity : Symbol(StringIdentity, Decl(contextuallyTypedBindingInitializer.ts, 18, 44))

    stringIdentity(s: string): string;
>stringIdentity : Symbol(stringIdentity, Decl(contextuallyTypedBindingInitializer.ts, 20, 26))
>s : Symbol(s, Decl(contextuallyTypedBindingInitializer.ts, 21, 19))
}
let { stringIdentity: id = arg => arg }: StringIdentity = { stringIdentity: x => x};
>stringIdentity : Symbol(StringIdentity.stringIdentity, Decl(contextuallyTypedBindingInitializer.ts, 20, 26))
>id : Symbol(id, Decl(contextuallyTypedBindingInitializer.ts, 23, 5))
>arg : Symbol(arg, Decl(contextuallyTypedBindingInitializer.ts, 23, 26))
>arg : Symbol(arg, Decl(contextuallyTypedBindingInitializer.ts, 23, 26))
>StringIdentity : Symbol(StringIdentity, Decl(contextuallyTypedBindingInitializer.ts, 18, 44))
>stringIdentity : Symbol(stringIdentity, Decl(contextuallyTypedBindingInitializer.ts, 23, 59))
>x : Symbol(x, Decl(contextuallyTypedBindingInitializer.ts, 23, 75))
>x : Symbol(x, Decl(contextuallyTypedBindingInitializer.ts, 23, 75))

