=== tests/cases/conformance/internalModules/importDeclarations/circularImportAlias.ts ===
// expected no error

module A {
>A : Symbol(b.a, Decl(circularImportAlias.ts, 0, 0))

    export class C { name: string }
>C : Symbol(C, Decl(circularImportAlias.ts, 2, 10))
>name : Symbol(name, Decl(circularImportAlias.ts, 3, 20))

    export import b = B;
>b : Symbol(b, Decl(circularImportAlias.ts, 3, 35))
>B : Symbol(b, Decl(circularImportAlias.ts, 5, 1))
}

module B {
>B : Symbol(a.b, Decl(circularImportAlias.ts, 5, 1))

    export import a = A;
>a : Symbol(a, Decl(circularImportAlias.ts, 7, 10))
>A : Symbol(a, Decl(circularImportAlias.ts, 0, 0))

    export class D extends a.C {
>D : Symbol(D, Decl(circularImportAlias.ts, 8, 24))
>a.C : Symbol(a.C, Decl(circularImportAlias.ts, 2, 10))
>a : Symbol(a, Decl(circularImportAlias.ts, 7, 10))
>C : Symbol(a.C, Decl(circularImportAlias.ts, 2, 10))

        id: number;
>id : Symbol(id, Decl(circularImportAlias.ts, 9, 32))
    }
}

var c: { name: string };
>c : Symbol(c, Decl(circularImportAlias.ts, 14, 3), Decl(circularImportAlias.ts, 15, 3))
>name : Symbol(name, Decl(circularImportAlias.ts, 14, 8))

var c = new B.a.C();
>c : Symbol(c, Decl(circularImportAlias.ts, 14, 3), Decl(circularImportAlias.ts, 15, 3))
>B.a.C : Symbol(A.C, Decl(circularImportAlias.ts, 2, 10))
>B.a : Symbol(B.a, Decl(circularImportAlias.ts, 7, 10))
>B : Symbol(B, Decl(circularImportAlias.ts, 5, 1))
>a : Symbol(B.a, Decl(circularImportAlias.ts, 7, 10))
>C : Symbol(A.C, Decl(circularImportAlias.ts, 2, 10))



